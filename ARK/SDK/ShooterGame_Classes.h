#pragma once

/**
 * Name: ARK
 * Version: 1.0.1
 */

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace CG
{
	// --------------------------------------------------
	// # Classes
	// --------------------------------------------------
	/**
	 * Class ShooterGame.PrimalDinoAIController
	 * Size -> 0x0318 (FullSize[0x08B8] - InheritedSize[0x05A0])
	 */
	class APrimalDinoAIController : public AAIController
	{
	public:
		float                                                      DieIfLeftWaterWanderMinimumWaterHeightMultiplier;        // 0x05A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DieIfLeftWaterReachedRadiusDistanceCheckMultiplier;      // 0x05A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DieIfLeftWaterTargetUnsubmergedTimeout;                  // 0x05A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LandDinoMaxWaterTargetDepthCapsuleMultiplier;            // 0x05AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExtraCorpseTargetingRange;                               // 0x05B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FleeFromAttackCoolDownTime;                              // 0x05B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FleeFromAttackTimeLimit;                                 // 0x05B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ForceFleeUnderHealthPercentage;                          // 0x05BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bFleeOnCriticalHealth;                                   // 0x05C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_B2CX[0x3];                                   // 0x05C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DieIfLeftWaterTargetingRequiresFreeDepth;                // 0x05C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     LastBlockadeCheckTime;                                   // 0x05C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     LastMovingAroundBlockadeTime;                            // 0x05D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      MovingAroundBlockadeDirection;                           // 0x05D8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             MovingAroundBlockadePoint;                               // 0x05DC(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      LastBlockadeWidth;                                       // 0x05E8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             LastBlockadeHitNormal;                                   // 0x05EC(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             LastBlockadeHitLocation;                                 // 0x05F8(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             StartMovingAroundBlockadeLocation;                       // 0x0604(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class AActor*                                              LastMovingAroundBlockadeActor;                           // 0x0610(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bForcedAggro : 1;                                        // 0x0618(0x0001) BIT_FIELD Edit, Transient, NoDestructor
		unsigned char                                              UnknownData_6QPZ[0x7];                                   // 0x0619(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              ForceTargetActor;                                        // 0x0620(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class AActor*                                              Target;                                                  // 0x0628(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      AttackDestinationOffset;                                 // 0x0630(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseOverlapTargetCheck;                                  // 0x0634(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bNotifyNeighborsWithoutDamage;                           // 0x0635(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseBPShouldNotifyNeighbor;                              // 0x0636(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseBPShouldNotifyAnyNeighbor;                           // 0x0637(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bRequireAbsoluteDamageForNeighborNotification;           // 0x0638(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WQEH[0x3];                                   // 0x0639(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AboveDeltaZAttackRange;                                  // 0x063C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BelowDeltaZAttackRange;                                  // 0x0640(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WildAboveDeltaZTargetingRange;                           // 0x0644(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WildBelowDeltaZTargetingRange;                           // 0x0648(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bWildUseDeltaZTargetingForFlyerPawnOrBigDino;            // 0x064C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_P5GS[0x13];                                  // 0x064D(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDontWander;                                             // 0x0660(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bOnlyOverlapTargetCorpsesUnlessHasTarget;                // 0x0661(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3DJB[0x2];                                   // 0x0662(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NaturalTargetingRange;                                   // 0x0664(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TamedTargetingRange;                                     // 0x0668(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TamedCorpseFoodTargetingRange;                           // 0x066C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WanderRandomDistanceAmount;                              // 0x0670(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FlyingWanderFixedDistanceAmount;                         // 0x0674(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FlyingWanderRandomDistanceAmount;                        // 0x0678(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxFlyingTargetDeltaZ;                                   // 0x067C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WanderFlyingZScaler;                                     // 0x0680(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WanderFlyingClampZHeightAboveGround;                     // 0x0684(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WanderFlyingMinZHeightAboveGround;                       // 0x0688(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WanderFixedDistanceAmount;                               // 0x068C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseAggro;                                               // 0x0690(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5TNM[0x3];                                   // 0x0691(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinAggroValue;                                           // 0x0694(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AggroToAddUponRemovingTarget;                            // 0x0698(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AggroToAddUponAcquiringTarget;                           // 0x069C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AggroFactorDecreaseSpeed;                                // 0x06A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AggroFactorDecreaseGracePeriod;                          // 0x06A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AggroFactorDamagePercentageMultiplier;                   // 0x06A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AggroNotifyNeighborsMultiplier;                          // 0x06AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AggroNotifyNeighborsRange;                               // 0x06B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AggroNotifyNeighborsRangeFalloff;                        // 0x06B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TargetingDistanceReductionFactorLinear;                  // 0x06B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TargetingDistanceReductionFactorExponent;                // 0x06BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BeyondTargetingRangeAggroAddition;                       // 0x06C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AggroFactorDesirabilityMultiplier;                       // 0x06C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AttackRange;                                             // 0x06C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AttackInterval;                                          // 0x06CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AttackRotationRangeDegrees;                              // 0x06D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AttackRotationGroundSpeedMultiplier;                     // 0x06D4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RangeTargetWildDinosMultiplier;                          // 0x06D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            AttackRotationRate;                                      // 0x06DC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bFocusOnTargetDuringAttack;                              // 0x06E8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HOXO[0x3];                                   // 0x06E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             FlyingMoveTowardsTargetOffset;                           // 0x06EC(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             CombatFlyingMoveTowardsTargetOffset;                     // 0x06F8(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             FlyingTargetFocalPositionOffset;                         // 0x0704(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FlyingReachedDestinationThresholdOffset;                 // 0x0710(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SeekingIntervalCheckToFly;                               // 0x0714(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SeekingPercentChanceToFly;                               // 0x0718(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SeekingIntervalCheckToLand;                              // 0x071C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SeekingPercentChanceToLand;                              // 0x0720(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinimumWanderGroundNormalZ;                              // 0x0724(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FollowStoppingDistance;                                  // 0x0728(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseOverlapTargetCheckTraces;                            // 0x072C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseAlternateMovePoint;                                  // 0x072D(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bTotallyIgnoreWaterTargets;                              // 0x072E(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bWaterDinoAllowUnsubmergedTargets;                       // 0x072F(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             LastCheckAttackRangePawnLocation;                        // 0x0730(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             LastCheckAttackRangeClosestPoint;                        // 0x073C(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             LastCheckAttackRangeTargetLocation;                      // 0x0748(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BKG7[0x4];                                   // 0x0754(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              LastCheckAttackRangeTarget;                              // 0x0758(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       HasAttackPriority;                                       // 0x0760(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WCX4[0x7];                                   // 0x0761(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              TamedAITargetingRangeMultipliers;                        // 0x0768(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      MateBoostAggroNotifyNeighborsMultiplier;                 // 0x0778(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_W2VE[0x4];                                   // 0x077C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBehaviorTree*                                       BehaviourTree;                                           // 0x0780(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UBehaviorTree*                                       HasEnemyTree;                                            // 0x0788(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UBehaviorTree*                                       BabyHasEnemyTree;                                        // 0x0790(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UBehaviorTree*                                       ForcedAggroHasEnemyTree;                                 // 0x0798(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UBehaviorTree*                                       NoEnemyTree;                                             // 0x07A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UBehaviorTree*                                       FleeFromAttackTree;                                      // 0x07A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UBehaviorTree*                                       TamedNoEnemyTree;                                        // 0x07B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UBehaviorTree*                                       MissionTree;                                             // 0x07B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      AggroNotifyNeighborsClasses;                             // 0x07C0(0x0010) Edit, ZeroConstructor
		bool                                                       bIgnoreMoveAroundBlockade : 1;                           // 0x07D0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       bFlyingUseMoveAroundBlockade : 1;                        // 0x07D0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       bUseGeometryInsteadOfStationObjForFreeDepthTest : 1;     // 0x07D0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       bNotifyBPTargetSet : 1;                                  // 0x07D0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPSetupFindTarget : 1;                               // 0x07D0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bNotAllowedToFindTargets : 1;                            // 0x07D0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bAllowForceFleeToSameTargetingTeam : 1;                  // 0x07D0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPUpdateBestTarget : 1;                              // 0x07D0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_UO9Z[0x3];                                   // 0x07D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MoveAroundBlockadeAdditionalWidth;                       // 0x07D4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MoveAroundObjectMaxVelocity;                             // 0x07D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ForcedAggroTimeCounter;                                  // 0x07DC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TamedMaxFollowDistance;                                  // 0x07E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bTargetChanged : 1;                                      // 0x07E4(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       bAttackForcesRunning : 1;                                // 0x07E4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       bUseFlyingTargetOffsets : 1;                             // 0x07E4(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bRidingDinoTargetPlayer : 1;                             // 0x07E4(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bRidingPlayerTargetDino : 1;                             // 0x07E4(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bIgnoreWaterOrAmphibiousTargets : 1;                     // 0x07E4(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseBPTargetingDesire : 1;                               // 0x07E4(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bDisableForceFlee : 1;                                   // 0x07E4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseCombatMoveTowardsTargetOffset : 1;                   // 0x07E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOverrideIgnoredByWildDino : 1;                     // 0x07E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanUseAttackStateOnTargetChange : 1;                    // 0x07E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_7NQ8 : 1;                                    // 0x07E5(0x0001) BIT_FIELD (PADDING)
		bool                                                       bForceOnlyTargetingPlayerOrTamed : 1;                    // 0x07E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceTargetingAllStructures : 1;                        // 0x07E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceTargetDinoRider : 1;                               // 0x07E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bFlyerAllowWaterTargeting : 1;                           // 0x07E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPForceTargetDinoRider : 1;                          // 0x07E6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAlwaysStartledWhenAggroedByNeighbor : 1;                // 0x07E6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceOnlyTargetingPlayers : 1;                          // 0x07E6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsMissionDino : 1;                                      // 0x07E6(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseImprovedAggroFalloffBehavior : 1;                    // 0x07E6(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_CK9Z[0x1];                                   // 0x07E7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BaseStructureTargetingDesire;                            // 0x07E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LandDinoMaxFlyerTargetDeltaZ;                            // 0x07EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NaturalMaxDepthZ;                                        // 0x07F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class AActor>                               ForcedAttackTarget;                                      // 0x07F4(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ForcedAttackEnemyTeam;                                   // 0x07FC(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		double                                                     LastForcedAttackEnemyTeamTime;                           // 0x0800(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DKIR[0x4];                                   // 0x0808(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ForcedFleeDuration;                                      // 0x080C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinAttackIntervalForFleeing;                             // 0x0810(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinLocChangeIntervalForFleeing;                          // 0x0814(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PercentageTorporForFleeing;                              // 0x0818(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DamagedForceAggroInterval;                               // 0x081C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     ForceAggroUntilTime;                                     // 0x0820(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     LastExecutedAttackTime;                                  // 0x0828(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		double                                                     LastForcedFleeTime;                                      // 0x0830(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     LastFleeLocCheckTime;                                    // 0x0838(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EDH2[0xC];                                   // 0x0840(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NumAlliesToAttack;                                       // 0x084C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FindLandingPositionZOffset;                              // 0x0850(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedFollowAcceptanceRadiusOffset;                       // 0x0854(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedFollowAcceptanceHeightOffset;                       // 0x0858(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AIFlightMaxLandingZDistance;                             // 0x085C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     ForcedMoveToUntilTime;                                   // 0x0860(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LAS5[0x8];                                   // 0x0868(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseBP_TamedOverrideHorizontalLandingRange : 1;          // 0x0870(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bFlyerWanderDefaultToOrigin : 1;                         // 0x0870(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCheckBuffTargetingDesireOverride : 1;                   // 0x0870(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowSwimWanderingForLandDinos : 1;                     // 0x0870(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUse_BPOverrideLandingLocation : 1;                      // 0x0870(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_ICE9[0x7];                                   // 0x0871(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      WildTargetingDesireMultiplierClasses;                    // 0x0878(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<float>                                              WildTargetingDesireMultiplierValues;                     // 0x0888(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      TamedTargetingDesireMultiplierClasses;                   // 0x0898(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<float>                                              TamedTargetingDesireMultiplierValues;                    // 0x08A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance

	public:
		bool WantsAttackPriority();
		void UpdateAggro();
		void StopBrainComponent(const class FString& Reason);
		struct FVector STATIC_StaticGetRandomWanderDestination(class APrimalDinoCharacter* TargetCharacter, class APrimalDinoAIController* TargetAIController, const struct FVector& locOverride, float randomOffsetMultiplier, bool bUseRandomNegativeXDir, bool bOrientRandOffsetByRotation, const struct FRotator& orientRandOffsetByRotation, float GroundCheckSpreadOverride);
		bool ShouldForceRunWhenAttacking();
		void SetTarget(class AActor* InTarget, bool bDontAddAggro, bool bOverlapFoundTarget);
		void SetHasAttackPriority(bool Value);
		void SetAttackRotationRate();
		void SetAttackGroundSpeed();
		void ResumeBrainComponent(const class FString& Reason);
		void RestartBrainComponent();
		void ResetRotationUseAcceleration();
		void ResetRotationRate();
		void ResetGroundSpeed();
		void ResetAccelerationFollowsRotation();
		void RecoverMovement();
		void RebootBrainComponent();
		void PlayStartledAnim();
		void PauseBrainComponent(const class FString& Reason);
		bool OrderedToLand();
		void OnLosingTargetEvent();
		bool IsWithinAttackRangeAndCalculateBestAttack(class AActor* Other, bool* bAttackChanged);
		bool IsWithinAttackRange(class AActor* Other, bool bForceUseLastAttackIndex);
		bool IsLogicPaused();
		bool IsForceTargetDinoRider(class AShooterCharacter* playerTarget);
		struct FVector GetWanderAroundActorDestination(class APrimalDinoCharacter* DinoCharacter, const struct FVector& originalDestination);
		class AActor* GetTarget();
		struct FVector GetRandomWanderDestination(const struct FVector& locOverride, float randomOffsetMultiplier, bool bUseRandomNegativeXDir, bool bOrientRandOffsetByRotation, const struct FRotator& orientRandOffsetByRotation);
		float GetMinAttackRange();
		struct FVector GetLandingLocation();
		bool GetHasAttackPriority();
		unsigned char GetCurrentAttackIndex();
		class APawn* GetControllerPawn();
		class APrimalDinoCharacter* GetControlledDino();
		class UStaticMeshComponent* GetClosestTree(struct FOverlapResult* OutHit);
		struct FRotator GetAttackRotationRate();
		float GetAttackRotationRangeDegrees();
		float GetAttackRotationGroundSpeedMultiplier();
		float GetAttackRange();
		float GetAttackInterval();
		float GetAggroNotifyNeighborsRange();
		bool GetAggroEntry(int32_t index, class AActor** OutAttacker, float* OutAggroFactor, double* OutLastAggroHitTime);
		int32_t GetAggroEntriesCount();
		class AActor* GetAggroEntriesAttackerAtIndex(int32_t index);
		float GetAggroDesirability(class AActor* InTarget);
		class AActor* FindTarget(bool bDontSet);
		class AActor* FindNewTarget(bool bDontSet);
		void ClearAggroEntries();
		void ChangedAITarget();
		bool CanLand();
		bool CalculateAndSetWonderingAIStateEvent(bool StateChanged);
		bool CalculateAndSetWonderingAIState(bool* StateChanged);
		class AActor* BPUpdateBestTarget(class AActor* bestTarget, bool dontSetIn, bool* dontSetOut);
		bool BPShouldNotifyNeighbor(class APrimalDinoCharacter* neighbor);
		bool BPShouldNotifyAnyNeighbor(class APrimalDinoCharacter* neighbor);
		void BPSetupFindTarget();
		struct FVector BPOverrideLandingLocation(float* outRadius);
		bool BPOverrideIgnoredByWildDino(class AActor* wildDinoToIgnore);
		void BPOnFleeEvent();
		void BPNotifyTargetSet();
		float BPGetTargetingDesire(class AActor* forTarget, float ForTargetingDesireValue);
		bool BPForceTargetDinoRider(class AShooterCharacter* playerTarget);
		struct FVector2D BP_TamedOverrideHorizontalLandingRange();
		void AvoidOutOfWater();
		void AvoidGenericToPoint(const struct FVector& TargetDestination);
		void AddToAggro(class AActor* Attacker, float DamagePercent, bool bNotifyNeighbors, bool SetValue, bool bIsFromDamage, bool skipTeamCheck);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.AIAttackCoordinator
	 * Size -> 0x0020 (FullSize[0x0490] - InheritedSize[0x0470])
	 */
	class AAIAttackCoordinator : public AActor
	{
	public:
		int32_t                                                    MaxAttackersPerTarget;                                   // 0x0470(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      UpdateInterval;                                          // 0x0474(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<TWeakObjectPtr<class APrimalDinoAIController>>      Attackers;                                               // 0x0478(0x0010) ZeroConstructor, Transient, Protected
		unsigned char                                              UnknownData_N0JW[0x8];                                   // 0x0488(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateAttackGroup(TArray<class APrimalDinoAIController*>* AttackGroup);
		void RemoveAttacker(class APrimalDinoAIController* Controller);
		int32_t GetNumAttackersWithPriorityForTarget(class AActor* Target);
		int32_t GetNumAttackersForTarget(class AActor* Target);
		void ClearAllAttackers();
		float CalculateAttackerPriorityWeight(class APrimalDinoAIController* Attacker);
		void AddAttackerCharacter(class APrimalDinoCharacter* Character);
		void AddAttacker(class APrimalDinoAIController* Controller);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.CorruptedAvatarAttackCoordinator
	 * Size -> 0x0008 (FullSize[0x0498] - InheritedSize[0x0490])
	 */
	class ACorruptedAvatarAttackCoordinator : public AAIAttackCoordinator
	{
	public:
		unsigned char                                              UnknownData_3LM7[0x8];                                   // 0x0490(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalGlobals
	 * Size -> 0x0190 (FullSize[0x01B8] - InheritedSize[0x0028])
	 */
	class UPrimalGlobals : public UObject
	{
	public:
		class UPrimalGameData*                                     PrimalGameData;                                          // 0x0028(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UPrimalGameData*                                     PrimalGameDataOverride;                                  // 0x0030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               PrimalGameDataAsset;                                     // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FStringAssetReference>                       PrimalGameDataAssetExtended;                             // 0x0048(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              RagdollKinematicActorClass;                              // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              GlobalGenericConfirmationDialog;                         // 0x0060(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UObject*>                                     ExtraResources;                                          // 0x0068(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bAllowSingleplayer;                                      // 0x0078(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowNonDedicatedHost;                                  // 0x0079(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UBZW[0x6];                                   // 0x007A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      UIOnlyShowMapFileNames;                                  // 0x0080(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FString>                                      UIOnlyShowModIDs;                                        // 0x0090(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bTotalConversionShowUnofficialServers;                   // 0x00A0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UBNF[0x7];                                   // 0x00A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CreditString;                                            // 0x00A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		struct FLinearColor                                        AlphaMissionColor;                                       // 0x00B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        BetaMissionColor;                                        // 0x00C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        GammaMissionColor;                                       // 0x00D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        MissionCompleteMultiUseWheelTextColor;                   // 0x00E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BX44[0xC0];                                  // 0x00F8(0x00C0) MISSED OFFSET (PADDING)

	public:
		void OnConfirmationDialogClosed(bool bAccept);
		class ADayCycleManager* STATIC_GetDayCycleManager(class UWorld* World);
		void FinishedLoadingGameMedia();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DataListProviderInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UDataListProviderInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalGameData
	 * Size -> 0x20B8 (FullSize[0x20E0] - InheritedSize[0x0028])
	 */
	class UPrimalGameData : public UObject
	{
	public:
		unsigned char                                              UnknownData_KCB3[0x30];                                  // 0x0028(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ModName;                                                 // 0x0058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              ModDescription;                                          // 0x0068(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		struct FPrimalCharacterStatusValueDefinition               StatusValueDefinitions[0xC];                             // 0x0078(0x0180) Edit, DisableEditOnInstance
		struct FPrimalCharacterStatusStateDefinition               StatusStateDefinitions[0xE];                             // 0x01F8(0x0460) Edit, DisableEditOnInstance
		struct FPrimalItemStatDefinition                           ItemStatDefinitions[0x8];                                // 0x0658(0x00C0) Edit, DisableEditOnInstance
		struct FPrimalItemDefinition                               ItemTypeDefinitions[0x9];                                // 0x0718(0x00D8) Edit, DisableEditOnInstance
		struct FPrimalEquipmentDefinition                          EquipmentTypeDefinitions[0xB];                           // 0x07F0(0x0108) Edit, DisableEditOnInstance
		TArray<class UClass*>                                      MasterItemList;                                          // 0x08F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FPrimalItemQuality>                          ItemQualityDefinitions;                                  // 0x0908(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      EngramBlueprintClasses;                                  // 0x0918(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      AdditionalEngramBlueprintClasses;                        // 0x0928(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      RemoveEngramBlueprintClasses;                            // 0x0938(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FStatusValueModifierDescription>             StatusValueModifierDescriptions;                         // 0x0948(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FString>                                      PlayerSpawnRegions;                                      // 0x0958(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class USoundBase*                                          TutorialDisplaySound;                                    // 0x0968(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_StartItemDrag;                                     // 0x0970(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_StopItemDrag;                                      // 0x0978(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          PreventGrindingIcon;                                     // 0x0980(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_CancelPlacingStructure;                            // 0x0988(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_ChooseStructureRotation;                           // 0x0990(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_FailPlacingStructure;                              // 0x0998(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_ConfirmPlacingStructure;                           // 0x09A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_StartPlacingStructure;                             // 0x09A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_CorpseDecompose;                                   // 0x09B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_ApplyLevelUp;                                      // 0x09B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_ApplyLevelPoint;                                   // 0x09C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_LearnedEngram;                                     // 0x09C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_ReconnectToCharacter;                              // 0x09D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_DropAllItems;                                      // 0x09D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_TransferAllItemsToRemote;                          // 0x09E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_TransferAllItemsFromRemote;                        // 0x09E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_TransferItemToRemote;                              // 0x09F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_TransferItemFromRemote;                            // 0x09F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_AddItemToSlot;                                     // 0x0A00(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_RemoveItemFromSlot;                                // 0x0A08(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_ClearCraftQueue;                                   // 0x0A10(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_AddToCraftQueue;                                   // 0x0A18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_SetRadioFrequency;                                 // 0x0A20(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_AddPinToMap;                                       // 0x0A28(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_RemovePinFromMap;                                  // 0x0A30(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_ApplyDye;                                          // 0x0A38(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_ApplyPaint;                                        // 0x0A40(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_SetTextGeneric;                                    // 0x0A48(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_SplitItemStack;                                    // 0x0A50(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_MergeItemStack;                                    // 0x0A58(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_InputPinDigit;                                     // 0x0A60(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_PinValidated;                                      // 0x0A68(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_PinRejected;                                       // 0x0A70(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_TribeWarBegin;                                     // 0x0A78(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_TribeWarEnd;                                       // 0x0A80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_DropInventoryItem;                                 // 0x0A88(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_RefillWaterContainer;                              // 0x0A90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FAppIDItem>                                  CoreAppIDItems;                                          // 0x0A98(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FAppIDItem>                                  AppIDItems;                                              // 0x0AA8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UPrimalEngramEntry*>                          EngramBlueprintEntries;                                  // 0x0AB8(0x0010) ZeroConstructor, Transient
		TArray<class UPrimalDinoEntry*>                            DinoEntriesObjects;                                      // 0x0AC8(0x0010) ZeroConstructor, Transient
		TArray<class UGenericDataListEntry*>                       ExplorerNoteEntriesObjects;                              // 0x0AD8(0x0010) ZeroConstructor, Transient
		TArray<class UGenericDataListEntry*>                       HeadHairStylesEntriesObjects;                            // 0x0AE8(0x0010) ZeroConstructor, Transient
		TArray<class UGenericDataListEntry*>                       FacialHairStylesEntriesObjects;                          // 0x0AF8(0x0010) ZeroConstructor, Transient
		class UClass*                                              DefaultToolTipWidget;                                    // 0x0B08(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              StarterNoteItem;                                         // 0x0B10(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      PrimaryResources;                                        // 0x0B18(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              GenericDroppedItemTemplate;                              // 0x0B28(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  PostProcess_KnockoutBlur;                                // 0x0B30(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  AdditionalDeathPostProcessEffect;                        // 0x0B38(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UMaterialInterface*>                          BuffPostProcessEffects;                                  // 0x0B40(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UMaterialInterface*>                          AdditionalBuffPostProcessEffects;                        // 0x0B50(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FRangedValues>                               EngramPointPurchaseRanges;                               // 0x0B60(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              GenericDroppedItemTemplateLowQuality;                    // 0x0B70(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UI0V[0x10];                                  // 0x0B78(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          UnknownIcon;                                             // 0x0B88(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  UnknownMaterial;                                         // 0x0B90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          WhiteTexture;                                            // 0x0B98(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          BlueprintBackground;                                     // 0x0BA0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          BabyCuddleIcon;                                          // 0x0BA8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          ImprintedRiderIcon;                                      // 0x0BB0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          WeaponAccessoryActivatedIcon;                            // 0x0BB8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          EngramBackground;                                        // 0x0BC0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          VoiceChatIcon;                                           // 0x0BC8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          VoiceChatMutedIcon;                                      // 0x0BD0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          ItemButtonRecentlySelectedBackground;                    // 0x0BD8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      DinoEntries;                                             // 0x0BE0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      AdditionalDinoEntries;                                   // 0x0BF0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      GlobalGeneralArmorDegradationMultiplier;                 // 0x0C00(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GlobalSpecificArmorDegradationMultiplier;                // 0x0C04(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GlobalSpecificArmorRatingMultiplier;                     // 0x0C08(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GlobalGeneralArmorRatingMultiplier;                      // 0x0C0C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      EnemyFoundationPreventionRadius;                         // 0x0C10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EGOD[0x4];                                   // 0x0C14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FColorDefinition>                            ColorDefinitions;                                        // 0x0C18(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UObject*>                                     ExtraResources;                                          // 0x0C28(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UObject*>                                     BaseExtraResources;                                      // 0x0C38(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class USoundBase*                                          CombatMusicDay;                                          // 0x0C48(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          CombatMusicNight;                                        // 0x0C50(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          CombatMusicDay_Heavy;                                    // 0x0C58(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          CombatMusicNight_Heavy;                                  // 0x0C60(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          LevelUpStingerSound;                                     // 0x0C68(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          TrackMissionSound;                                       // 0x0C70(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          UntrackMissionSound;                                     // 0x0C78(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FPlayerCharacterGenderDefinition                    PlayerCharacterGenderDefinitions[0x2];                   // 0x0C80(0x0BE0) Edit, DisableEditOnInstance
		class UClass*                                              DefaultGameMode;                                         // 0x1860(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLevelExperienceRamp                                LevelExperienceRamps[0x4];                               // 0x1868(0x0040) Edit, DisableEditOnInstance
		struct FLevelExperienceRamp                                SinglePlayerLevelExperienceRamps[0x4];                   // 0x18A8(0x0040) Edit, DisableEditOnInstance
		TArray<struct FNamedTeamDefinition>                        NamedTeamDefinitions;                                    // 0x18E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<int32_t>                                            PlayerLevelEngramPoints;                                 // 0x18F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<int32_t>                                            PlayerLevelEngramPointsSP;                               // 0x1908(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FString>                                      PreventBuildStructureReasonStrings;                      // 0x1918(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FExplorerNoteAchievement>                    ExplorerNoteAchievements;                                // 0x1928(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FClassRemapping>                             Remap_NPC;                                               // 0x1938(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FClassRemapping>                             Remap_SupplyCrates;                                      // 0x1948(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FActiveEventSupplyCrateWeight>               Remap_ActiveEventSupplyCrates;                           // 0x1958(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FClassRemapping>                             Remap_ResourceComponents;                                // 0x1968(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FClassRemapping>                             Remap_NPCSpawnEntries;                                   // 0x1978(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FClassRemapping>                             Remap_Engrams;                                           // 0x1988(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FClassRemapping>                             Remap_Items;                                             // 0x1998(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FClassAddition>                              AdditionalStructureEngrams;                              // 0x19A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FBuffAddition>                               AdditionalDefaultBuffs;                                  // 0x19B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FAvailableMission>                           AvailableMissions;                                       // 0x19C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization
		class UClass*                                              ActorToSpawnUponEnemyCoreStructureDeath;                 // 0x19D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      AdditionalStructuresToPlace;                             // 0x19E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      MasterDyeList;                                           // 0x19F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_MD6H[0x10];                                  // 0x1A00(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EnemyCoreStructureDeathActorRadiusBuildCheck;            // 0x1A10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XE3F[0x4];                                   // 0x1A14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DeathDestructionDepositInventoryClass;                   // 0x1A18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          MateBoostIcon;                                           // 0x1A20(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          EggBoostIcon;                                            // 0x1A28(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          MatingIcon;                                              // 0x1A30(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          NearFeedIcon;                                            // 0x1A38(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          BuffedIcon;                                              // 0x1A40(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          TethererdIcon;                                           // 0x1A48(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          GamepadFaceButtonTop;                                    // 0x1A50(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          GamepadFaceButtonBottom;                                 // 0x1A58(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          GamepadFaceButtonLeft;                                   // 0x1A60(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          GamepadFaceButtonRight;                                  // 0x1A68(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              FooterTemplate;                                          // 0x1A70(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TribeXPSharePercent;                                     // 0x1A78(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    OverrideServerPhysXSubsteps;                             // 0x1A7C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      OverrideServerPhysXSubstepsDeltaTime;                    // 0x1A80(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bInitialized;                                            // 0x1A84(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_G1HF[0x53];                                  // 0x1A85(0x0053) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          Sound_TamedDinos[0x3];                                   // 0x1AD8(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_ItemStartCrafting;                                 // 0x1AF0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_ItemFinishCrafting;                                // 0x1AF8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_ItemStartRepairing;                                // 0x1B00(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_ItemFinishRepairing;                               // 0x1B08(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              NotifClass;                                              // 0x1B10(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              StructureDefaultOverlayToolTipWidget;                    // 0x1B18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MeleeHitColorizeStructuresUI;                            // 0x1B20(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinPaintDurationConsumption;                             // 0x1B28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxPaintDurationConsumption;                             // 0x1B2C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinDinoRadiusForPaintConsumption;                        // 0x1B30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxDinoRadiusForPaintConsumption;                        // 0x1B34(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FDinoBabySetup>                              DinoBabySetups;                                          // 0x1B38(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FDinoBabySetup>                              DinoGestationSetups;                                     // 0x1B48(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              SoapItemTemplate;                                        // 0x1B58(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          NameTagWildcardAdmin;                                    // 0x1B60(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          NameTagServerAdmin;                                      // 0x1B68(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          NameTagTribeAdmin;                                       // 0x1B70(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UTexture2D*>                                  BadgeGroupsNameTag;                                      // 0x1B78(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FString>                                      AchievementIDs;                                          // 0x1B88(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_HZK9[0x50];                                  // 0x1B98(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              AdditionalEggWeightsToSpawn;                             // 0x1BE8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      AdditionalEggItemsToSpawn;                               // 0x1BF8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<float>                                              FertilizedAdditionalEggWeightsToSpawn;                   // 0x1C08(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      FertilizedAdditionalEggItemsToSpawn;                     // 0x1C18(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              ItemAchievementsName;                                    // 0x1C28(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      ItemAchievementsList;                                    // 0x1C38(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      GlobalCuddleFoodList;                                    // 0x1C48(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FMultiAchievement>                           MultiAchievements;                                       // 0x1C58(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class USoundBase*                                          DinoIncrementedImprintingSound;                          // 0x1C68(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          HitMarkerCharacterSound;                                 // 0x1C70(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          HitMarkerStructureSound;                                 // 0x1C78(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialParameterCollection*                        FOVScaleMaterialParamCollection;                         // 0x1C80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FNPCSpawnEntriesContainerAdditions>          CoreNPCSpawnEntriesContainerAdditions;                   // 0x1C88(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FNPCSpawnEntriesContainerAdditions>          TheNPCSpawnEntriesContainerAdditions;                    // 0x1C98(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UMaterialInterface*                                  PostProcess_ColorLUT;                                    // 0x1CA8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              DefaultStructureSettings;                                // 0x1CB0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_DossierUnlocked;                                   // 0x1CB8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_ItemUseOnItem;                                     // 0x1CC0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_RemoveItemSkin;                                    // 0x1CC8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_RemoveClipAmmo;                                    // 0x1CD0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FExplorerNoteEntry>                          ExplorerNoteEntries;                                     // 0x1CD8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      ExplorerNoteXPGain;                                      // 0x1CE8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9050[0x4];                                   // 0x1CEC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          BuffTypeBackgrounds[0x3];                                // 0x1CF0(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          BuffTypeForegrounds[0x3];                                // 0x1D08(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ExplorerNoteXPBuff;                                      // 0x1D20(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SpecialExplorerNoteXPBuff;                               // 0x1D28(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          PerMapExplorerNoteLockedIcon;                            // 0x1D30(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          TamedDinoUnlockedIcon;                                   // 0x1D38(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          TamedDinoLockedIcon;                                     // 0x1D40(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              OverrideAutoGenerateTerainActorTemplate;                 // 0x1D48(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FUnlockableEmoteEntry>                       UnlockableEmotes;                                        // 0x1D50(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FEmoteGroup>                                 EmoteGroups;                                             // 0x1D60(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FClassRemappingWeight>                       GlobalNPCRandomSpawnClassWeights;                        // 0x1D70(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UTexture2D*                                          DinoOrderIcon;                                           // 0x1D80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              DinoOrderEffect_MoveTo;                                  // 0x1D88(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              DinoOrderEffect_AttackTarget;                            // 0x1D90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FObjectCorrelation>                          AdditionalHumanMaleAnimSequenceOverrides;                // 0x1D98(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FObjectCorrelation>                          AdditionalHumanFemaleAnimSequenceOverrides;              // 0x1DA8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FObjectCorrelation>                          AdditionalHumanMaleAnimMontagesOverrides;                // 0x1DB8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FObjectCorrelation>                          AdditionalHumanFemaleAnimMontagesOverrides;              // 0x1DC8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FOverrideAnimBlueprintEntry>                 AdditionalHumanMaleOverrideAnimBlueprints;               // 0x1DD8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FOverrideAnimBlueprintEntry>                 AdditionalHumanFemaleOverrideAnimBlueprints;             // 0x1DE8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      ServerExtraWorldSingletonActorClasses;                   // 0x1DF8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bForceServerUseDinoList;                                 // 0x1E08(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_D6VY[0x7];                                   // 0x1E09(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      ExtraStackedGameDataClasses;                             // 0x1E10(0x0010) ZeroConstructor, Transient
		TArray<struct FHairStyleDefinition>                        HeadHairStyleDefinitions;                                // 0x1E20(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FHairStyleDefinition>                        FacialHairStyleDefinitions;                              // 0x1E30(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FHairStyleDefinition>                        AdditionalHeadHairStyleDefinitions;                      // 0x1E40(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FHairStyleDefinition>                        AdditionalFacialHairStyleDefinitions;                    // 0x1E50(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class USoundBase*                                          GenericWaterPostprocessAmbientSound;                     // 0x1E60(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              OverridePlayerDataClass;                                 // 0x1E68(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class FName>                                        AllDinosAchievementNameTags;                             // 0x1E70(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class USoundBase*                                          GenericArrowPickedUpSound;                               // 0x1E80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          UnlockIcon;                                              // 0x1E88(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              WheelFolderColor;                                        // 0x1E90(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              WheelBackColor;                                          // 0x1E94(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     CorpseLocatorEffect;                                     // 0x1E98(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          MaxInventoryIcon;                                        // 0x1EA0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          ItemSkinIcon;                                            // 0x1EA8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<ECollisionChannel>                                  SkeletalPhysCustomBodyAdditionalIgnores;                 // 0x1EB0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class USoundBase*                                          ActionWheelClickSound;                                   // 0x1EC0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_GenericBoardPassenger;                             // 0x1EC8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_GenericUnboardPassenger;                           // 0x1ED0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_CraftingTabToggle;                                 // 0x1ED8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     LockedToSeatingStructureParticle;                        // 0x1EE0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              GenericBatteryItemClass;                                 // 0x1EE8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_35WF[0x50];                                  // 0x1EF0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      GenesisSeasonPassItems;                                  // 0x1F40(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              SimpleDestroyedMeshActorClass;                           // 0x1F50(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      DefaultTradableOptions;                                  // 0x1F58(0x0010) ZeroConstructor, Transient
		TArray<class UClass*>                                      CoreTradableOptions;                                     // 0x1F68(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      AdditionalTradableOptions;                               // 0x1F78(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<TAssetPtr<class UClass>>                            AlwaysAllowBuffClasses;                                  // 0x1F88(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FGrinderItemReplacer>                        GrinderReplacements;                                     // 0x1F98(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FInvalidReferenceRedirector>                 InvalidReferenceRedirects;                               // 0x1FA8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FInvalidReferenceRedirector>                 AdditionalInvalidReferenceRedirects;                     // 0x1FB8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bWantsToRunMissions;                                     // 0x1FC8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CGGA[0x7];                                   // 0x1FC9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              CoreWorldBuffDefinitions;                                // 0x1FD0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      AdditionalWorldBuffDefinitions;                          // 0x1FD8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UPrimalWorldBuffData*                                WorldBuffData;                                           // 0x1FE8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FLinearColor                                        PointOfInterest_IndicatorColor_Default;                  // 0x1FF0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        PointOfInterest_IndicatorColor_ObjectiveComplete;        // 0x2000(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        PointOfInterest_ProgressBarColor_TamingAffinity;         // 0x2010(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          PointOfInterest_Icon_TamingInProgress;                   // 0x2020(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          PointOfInterest_Icon_TamingComplete;                     // 0x2028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              GlobalUIDataClass;                                       // 0x2030(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FWorldDefaultItemSet>                        DefaultMapItemSets;                                      // 0x2038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FWorldDefaultItemSet>                        AdditionalDefaultMapItemSets;                            // 0x2048(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FExtraEggItem>                               ExtraEggItems;                                           // 0x2058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FExtraEggItem>                               AdditionalExtraEggItems;                                 // 0x2068(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UStaticMesh*                                         CopySettingsVisualIndicatorMesh;                         // 0x2078(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  CopySettingsVisualIndicatorMaterial;                     // 0x2080(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FSlateColor>                                 SubtitleColors;                                          // 0x2088(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              HUDOverlayGestationTooltip;                              // 0x2098(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FCryopodPersistantBuffs>                     CryopodPersistantBuffsMap;                               // 0x20A0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FConfigSupplyCrateItemsOverride>             CoreOverrideSupplyCrateItems;                            // 0x20B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_EGNE[0x10];                                  // 0x20C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSubtitleStringMap>                          BookendSubtitles;                                        // 0x20D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance

	public:
		void TickedWorld(class UWorld* TheWorld, float DeltaTime);
		bool STATIC_LocalIsPerMapExplorerNoteUnlocked(int32_t ExplorerNoteIndex);
		bool STATIC_LocalIsGlobalExplorerNoteUnlocked(int32_t ExplorerNoteIndex);
		void LoadedWorld(class UWorld* TheWorld);
		float GetXPMax(ELevelExperienceRampType levelType);
		class UClass* GetRedirectedClassFromRedirector(const struct FInvalidReferenceRedirector& Redirector);
		class UClass* GetRedirectedClass(const class FString& Key, class UObject* WorldContextObject);
		float GetLevelXP(ELevelExperienceRampType levelType, int32_t forLevel);
		int32_t GetLevelMax(ELevelExperienceRampType levelType);
		struct FLevelExperienceRamp GetLevelExperienceRamp(ELevelExperienceRampType levelType);
		class USoundBase* GetGenericCombatMusic(class APrimalCharacter* forCharacter, class APrimalCharacter* forEnemy);
		class FString GetExplorerNoteDescription(int32_t ExplorerNoteIndex);
		class UClass* GetDinoEntry(class UClass* DinoClass);
		struct FLinearColor GetColorForDefinition(int32_t DefinitionIndex);
		TArray<class UClass*> GetBuffsForBitmask(int32_t mask);
		int32_t GetBitmaskForBuffs(TArray<class APrimalBuff*> ActiveBuffs);
		void BPMergeModGameData(class UPrimalGameData* AnotherGameData);
		void BPInitializeGameData();
		int32_t BPGetItemQualityIndex(float ItemRating);
		class UPrimalGameData* STATIC_BPGetGameData();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DataListEntryInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UDataListEntryInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalItem
	 * Size -> 0x0AC0 (FullSize[0x0AE8] - InheritedSize[0x0028])
	 */
	class UPrimalItem : public UObject
	{
	public:
		unsigned char                                              UnknownData_4ADW[0x28];                                  // 0x0028(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bCanBuildStructures : 1;                                 // 0x0050(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bAllowEquppingItem : 1;                                  // 0x0050(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bPreventEquipOnTaxidermyBase : 1;                        // 0x0050(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowInventoryItem : 1;                                 // 0x0050(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsRepairing : 1;                                        // 0x0050(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, SaveGame, NoDestructor
		bool                                                       bEquippedItem : 1;                                       // 0x0050(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, SaveGame, NoDestructor
		bool                                                       bCanSlot : 1;                                            // 0x0050(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bUseItemColors : 1;                                      // 0x0050(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPInitItemColors : 1;                                // 0x0051(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRefreshOnDyeUsed : 1;                                   // 0x0051(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPostAddBuffToGiveOwnerCharacter : 1;               // 0x0051(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceDediAttachments : 1;                               // 0x0051(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowCustomColors : 1;                                  // 0x0051(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAllowRemovalWhenDead : 1;                          // 0x0051(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAutoCraftBlueprint : 1;                                 // 0x0051(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideFromInventoryDisplay : 1;                           // 0x0051(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bUseItemStats : 1;                                       // 0x0052(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseSpawnActorWhenRiding : 1;                            // 0x0052(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseSpawnActor : 1;                                      // 0x0052(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowDefaultCharacterAttachment : 1;                    // 0x0052(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseItemDurability : 1;                                  // 0x0052(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNewWeaponAutoFillClipAmmo : 1;                          // 0x0052(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDestroyBrokenItem : 1;                                  // 0x0052(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsMisssionItem : 1;                                     // 0x0052(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bThrowOnHotKeyUse : 1;                                   // 0x0053(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsBlueprint : 1;                                        // 0x0053(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bCanBeBlueprint : 1;                                     // 0x0053(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventUpload : 1;                                      // 0x0053(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsEngram : 1;                                           // 0x0053(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bIsCustomRecipe : 1;                                     // 0x0053(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bIsFoodRecipe : 1;                                       // 0x0053(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bTekItem : 1;                                            // 0x0053(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowUseInInventory : 1;                                // 0x0054(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowRemoteUseInInventory : 1;                          // 0x0054(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBlueprintEquippedNotifications : 1;                  // 0x0054(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseInWaterRestoreDurability : 1;                        // 0x0054(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bValidCraftingResource : 1;                              // 0x0054(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPSetupHUDIconMaterial : 1;                          // 0x0054(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEquipRequiresDLC_ScorchedEarth : 1;                     // 0x0054(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEquipRequiresDLC_Aberration : 1;                        // 0x0054(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEquipRequiresDLC_Extinction : 1;                        // 0x0055(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEquipRequiresDLC_Genesis : 1;                           // 0x0055(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDurabilityRequirementIgnoredInWater : 1;                // 0x0055(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowRepair : 1;                                        // 0x0055(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCustomBrokenIcon : 1;                                   // 0x0055(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowRemovalFromInventory : 1;                          // 0x0055(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bFromSteamInventory : 1;                                 // 0x0055(0x0001) BIT_FIELD SaveGame, NoDestructor
		bool                                                       bIsFromAllClustersInventory : 1;                         // 0x0055(0x0001) BIT_FIELD SaveGame, NoDestructor
		bool                                                       bConsumeItemOnUse : 1;                                   // 0x0056(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnItemConsumed : 1;                                // 0x0056(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bConfirmBeforeUsing : 1;                                 // 0x0056(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyCanUseInWater : 1;                                  // 0x0056(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanUseSwimming : 1;                                     // 0x0056(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsDescriptionOnlyItem : 1;                              // 0x0056(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRestoreDurabilityWhenColorized : 1;                     // 0x0056(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAppendPrimaryColorToName : 1;                           // 0x0056(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseScaleStatEffectivenessByDurability : 1;              // 0x0057(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsesCreationTime : 1;                                   // 0x0057(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowUseWhileRiding : 1;                                // 0x0057(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventCraftingResourceAtFullDurability : 1;            // 0x0057(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bGiveItemWhenUsedCopyItemStats : 1;                      // 0x0057(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideFromRemoteInventoryDisplay : 1;                     // 0x0057(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bAutoDecreaseDurabilityOverTime : 1;                     // 0x0057(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventDragOntoOtherItemIfSameCustomData : 1;           // 0x0057(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseOnItemWeaponRemoveClipAmmo : 1;                      // 0x0058(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseOnItemSetIndexAsDestinationItemCustomData : 1;       // 0x0058(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSupportDragOntoOtherItem : 1;                           // 0x0058(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsItemSkin : 1;                                         // 0x0058(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDontResetAttachmentIfNotUpdatingItem : 1;               // 0x0058(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bItemSkinIgnoreSkinIcon : 1;                             // 0x0058(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPickupEggAlertsDinos : 1;                               // 0x0058(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideCustomDescription : 1;                              // 0x0058(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCopyCustomDescriptionIntoSpoiledItem : 1;               // 0x0059(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCopyDurabilityIntoSpoiledItem : 1;                      // 0x0059(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCraftedRequestCustomItemDescription : 1;                // 0x0059(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAllowCustomItemDescription : 1;                    // 0x0059(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_CV2J : 4;                                    // 0x0059(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUseBPPreventUseOntoItem : 1;                            // 0x005A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSkinDisableWhenSubmerged : 1;                           // 0x005A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsAbstractItem : 1;                                     // 0x005A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventItemSkins : 1;                                   // 0x005A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyCanUseInFalling : 1;                                // 0x005A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceDropDestruction : 1;                               // 0x005A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanBeArkTributeItem : 1;                                // 0x005A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowInvalidItemVersion : 1;                            // 0x005A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseSpawnActorRelativeLoc : 1;                           // 0x005B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseSpawnActorTakeOwnerRotation : 1;                     // 0x005B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseEquippedItemBlueprintTick : 1;                       // 0x005B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseEquippedItemNativeTick : 1;                          // 0x005B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSpawnActorOnWaterOnly : 1;                              // 0x005B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAutoTameSpawnedActor : 1;                               // 0x005B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bShowItemRatingAsPercent : 1;                            // 0x005B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventArmorDurabiltyConsumption : 1;                   // 0x005B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsEgg : 1;                                              // 0x005C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsCookingIngredient : 1;                                // 0x005C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDragClearDyedItem : 1;                                  // 0x005C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDeprecateItem : 1;                                      // 0x005C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_HN3Q : 1;                                    // 0x005C(0x0001) BIT_FIELD (PADDING)
		bool                                                       bItemSkinKeepOriginalWeaponTemplate : 1;                 // 0x005C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bItemSkinKeepOriginalIcon : 1;                           // 0x005C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bItemSkinReceiveOwnerEquippedBlueprintEvents : 1;        // 0x005C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bItemSkinReceiveOwnerEquippedBlueprintTick : 1;          // 0x005D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bItemSkinAllowEquipping : 1;                             // 0x005D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceDisplayInInventory : 1;                            // 0x005D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDroppedItemAllowDinoPickup : 1;                         // 0x005D(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bCraftDontActuallyGiveItem : 1;                          // 0x005D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventUseWhenSleeping : 1;                             // 0x005D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideRepairingRequirements : 1;                      // 0x005D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bScaleOverridenRepairingRequirements : 1;                // 0x005D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceUseItemAddCharacterStatsOnDinos : 1;               // 0x005E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyEquipWhenUnconscious : 1;                           // 0x005E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForcePreventConsumableWhileHandcuffed : 1;              // 0x005E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideExactClassCraftingRequirement : 1;              // 0x005E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventConsumeItemOnDrag : 1;                           // 0x005E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAllowGrinding : 1;                                 // 0x005E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForcePreventGrinding : 1;                               // 0x005E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bDeprecateBlueprint : 1;                                 // 0x005E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventDinoAutoConsume : 1;                             // 0x005F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsDinoAutoHealingItem : 1;                              // 0x005F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPAllowRemoteAddToInventory : 1;                        // 0x005F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPAllowRemoteRemoveFromInventory : 1;                   // 0x005F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEquipmentHatHideItemHeadHair : 1;                       // 0x005F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEquipmentHatHideItemFacialHair : 1;                     // 0x005F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEquipmentForceHairHiding : 1;                           // 0x005F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowRemoveFromSteamInventory : 1;                      // 0x005F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPInventoryNotifyCraftingFinished : 1;                  // 0x0060(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCheckBPAllowCrafting : 1;                               // 0x0060(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAllowAddToInventory : 1;                           // 0x0060(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventItemBlueprint : 1;                               // 0x0060(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventUseByDinos : 1;                                  // 0x0060(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventUseByHumans : 1;                                 // 0x0060(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPCanUse : 1;                                           // 0x0060(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowOverrideItemAutoDecreaseDurability : 1;            // 0x0060(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCopyItemDurabilityFromCraftingResource : 1;             // 0x0061(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsInitialItem : 1;                                      // 0x0061(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bPickupEggForceAggro : 1;                                // 0x0061(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bClearSkinOnInventoryRemoval : 1;                        // 0x0061(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCustomAutoDecreaseDurabilityPerInterval : 1;       // 0x0061(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCustomInventoryWidgetText : 1;                     // 0x0061(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCustomInventoryWidgetTextColor : 1;                // 0x0061(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCustomInventoryWidgetTextForBlueprint : 1;         // 0x0061(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseSkinnedBPCustomInventoryWidgetText : 1;              // 0x0062(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCustomDurabilityText : 1;                          // 0x0062(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCustomDurabilityTextColor : 1;                     // 0x0062(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPInitFromItemNetInfo : 1;                           // 0x0062(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPInitializeItem : 1;                                // 0x0062(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetItemNetInfo : 1;                                // 0x0062(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bItemSkinKeepOriginalItemName : 1;                       // 0x0062(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventUploadingWeaponClipAmmo : 1;                     // 0x0062(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventNativeItemBroken : 1;                            // 0x0063(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bResourcePreventGivingFromDemolition : 1;                // 0x0063(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNameForceNoStatQualityRank : 1;                         // 0x0063(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAlwaysLearnedEngram : 1;                                // 0x0063(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreMinimumUseIntervalForDinoAutoEatingFood : 1;      // 0x0063(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUnappliedItemSkinIgnoreItemAttachments : 1;             // 0x0063(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideMoreOptionsIfNonRemovable : 1;                      // 0x0063(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetItemDescription : 1;                            // 0x0063(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCrafted : 1;                                       // 0x0064(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetItemName : 1;                                   // 0x0064(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventUseAtTameLimit : 1;                              // 0x0064(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDivideTimeToCraftByGlobalCropGrowthSpeed : 1;           // 0x0064(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventCheatGive : 1;                                   // 0x0064(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsingRequiresStandingOnSolidGround : 1;                 // 0x0064(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAddedAttachments : 1;                              // 0x0064(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPConsumeProjectileImpact : 1;                       // 0x0064(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOverrideProjectileType : 1;                        // 0x0065(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsableWithTekGrenadeLauncher : 1;                       // 0x0065(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPNotifyDropped : 1;                                 // 0x0065(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bThrowUsesSecondaryActionDrop : 1;                       // 0x0065(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetItemIcon : 1;                                   // 0x0065(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseSlottedTick : 1;                                     // 0x0065(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPDrawItemIcon : 1;                                  // 0x0065(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPForceAllowRemoteAddToInventory : 1;                // 0x0065(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSkinAddWeightToSkinnedItem : 1;                         // 0x0066(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPIsValidForCrafting : 1;                            // 0x0066(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOverrideCraftingConsumption : 1;                   // 0x0066(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bMergeCustomDataFromCraftingResources : 1;               // 0x0066(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreDrawingItemButtonIcon : 1;                        // 0x0066(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCensoredItemSkin : 1;                                   // 0x0066(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetItemDurabilityPercentage : 1;                   // 0x0066(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPEquippedItemOnXPEarning : 1;                       // 0x0066(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAlwaysTriggerTributeDownloaded : 1;                     // 0x0067(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDeferWeaponBeginPlayToAssociatedItemSetTime : 1;        // 0x0067(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsSPlusItem : 1;                                        // 0x0067(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventRemovingClipAmmo : 1;                            // 0x0067(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCustomBrokenOverlayIcon : 1;                            // 0x0067(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetMaxAmmo : 1;                                    // 0x0067(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		class USkeletalMesh*                                       CostumeDinoSaddleOverrideMesh;                           // 0x0068(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USkeletalMesh*                                       CostumeDinoSaddleOverrideTorchMesh;                      // 0x0070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DinoAutoHealingThresholdPercent;                         // 0x0078(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DinoAutoHealingUseTimeInterval;                          // 0x007C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    ArkTributeVersion;                                       // 0x0080(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_W54Y[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      EquipRequiresExplicitOwnerClasses;                       // 0x0088(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FName>                                        EquipRequiresExplicitOwnerTags;                          // 0x0098(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              BuffToGiveOwnerWhenEquipped;                             // 0x00A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              BuffToGiveOwnerWhenEquipped_BlueprintPath;               // 0x00B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_0NVB[0x4];                                   // 0x00C0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   ExpirationTimeUTC;                                       // 0x00C4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    BlueprintAllowMaxCraftings;                              // 0x00C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QFIS[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              AbstractItemCraftingDescription;                         // 0x00D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      ItemSkinUseOnItemClasses;                                // 0x00E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      ItemSkinPreventOnItemClasses;                            // 0x00F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class USoundBase*                                          ItemBrokenSound;                                         // 0x0100(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           UseItemSound;                                            // 0x0108(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          EquipSound;                                              // 0x0110(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          UnEquipSound;                                            // 0x0118(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          UsedOnOtherItemSound;                                    // 0x0120(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          RemovedFromOtherItemSound;                               // 0x0128(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RandomChanceToBeBlueprint;                               // 0x0130(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_N3EK[0x4];                                   // 0x0134(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FActorClassAttachmentInfo>                   ActorClassAttachmentInfos;                               // 0x0138(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference
		unsigned char                                              UnknownData_NMNL[0x18];                                  // 0x0148(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FItemAttachmentInfo>                         ItemSkinAddItemAttachments;                              // 0x0160(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference
		EPrimalItemType                                            MyItemType;                                              // 0x0170(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		EPrimalConsumableType                                      MyConsumableType;                                        // 0x0171(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		EPrimalEquipmentType                                       MyEquipmentType;                                         // 0x0172(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_C7XU[0x1];                                   // 0x0173(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ExtraItemCategoryFlags;                                  // 0x0174(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ItemIconScale;                                           // 0x0178(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             BlockingShieldFPVTranslation;                            // 0x017C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FRotator                                            BlockingShieldFPVRotation;                               // 0x0188(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ShieldBlockDamagePercentage;                             // 0x0194(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ShieldDamageToDurabilityRatio;                           // 0x0198(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_43IG[0x4];                                   // 0x019C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        PlayAnimationOnUse;                                      // 0x01A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bHideDuringEquipAnimation;                               // 0x01A8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_U43B[0x7];                                   // 0x01A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        ShowAnimationMale;                                       // 0x01B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        ShowAnimationFemale;                                     // 0x01B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        HideAnimationMale;                                       // 0x01C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        HideAnimationFemale;                                     // 0x01C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    CraftingMinLevelRequirement;                             // 0x01D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CraftingCooldownInterval;                                // 0x01D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              CraftingActorToSpawn;                                    // 0x01D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          BlueprintBackgroundOverrideTexture;                      // 0x01E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              CraftItemButtonStringOverride;                           // 0x01E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              UseSpawnActorClass;                                      // 0x01F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             UseSpawnActorLocOffset;                                  // 0x0200(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    SlotIndex;                                               // 0x020C(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		struct FItemNetID                                          ItemId;                                                  // 0x0210(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    ItemCustomData;                                          // 0x0218(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_V0CJ[0x4];                                   // 0x021C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ItemCustomClass;                                         // 0x0220(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    ItemSkinTemplateIndex;                                   // 0x0228(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FNWG[0x4];                                   // 0x022C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ItemSkinTemplate;                                        // 0x0230(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      ItemRating;                                              // 0x0238(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		uint16_t                                                   CraftQueue;                                              // 0x023C(0x0002) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Z0JN[0x2];                                   // 0x023E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CraftingSkill;                                           // 0x0240(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2M70[0x4];                                   // 0x0244(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CustomItemName;                                          // 0x0248(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, SaveGame
		class FString                                              CustomItemDescription;                                   // 0x0258(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, SaveGame
		TArray<struct FColor>                                      CustomColors;                                            // 0x0268(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, SaveGame
		TArray<struct FCraftingResourceRequirement>                CustomResourceRequirements;                              // 0x0278(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, SaveGame
		double                                                     NextCraftCompletionTime;                                 // 0x0288(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class UPrimalInventoryComponent>            OwnerInventory;                                          // 0x0290(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              ItemQualityIndex;                                        // 0x0298(0x0001) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_A1F8[0x7];                                   // 0x0299(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              SupportDragOntoItemClass;                                // 0x02A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      SupportDragOntoItemClasses;                              // 0x02A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      SkinWeaponTemplates;                                     // 0x02B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      SupportAmmoItemForWeaponSkin;                            // 0x02C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      SkinWeaponTemplatesForAmmo;                              // 0x02D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              AmmoSupportDragOntoWeaponItemWeaponTemplate;             // 0x02E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      AmmoSupportDragOntoWeaponItemWeaponTemplates;            // 0x02F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FUseItemAddCharacterStatusValue>             UseItemAddCharacterStatusValues;                         // 0x0300(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      Ingredient_WeightIncreasePerQuantity;                    // 0x0310(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      Ingredient_FoodIncreasePerQuantity;                      // 0x0314(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      Ingredient_HealthIncreasePerQuantity;                    // 0x0318(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      Ingredient_WaterIncreasePerQuantity;                     // 0x031C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      Ingredient_StaminaIncreasePerQuantity;                   // 0x0320(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_38R7[0x4];                                   // 0x0324(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              DescriptiveNameBase;                                     // 0x0328(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              ItemDescription;                                         // 0x0338(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              DurabilityStringShort;                                   // 0x0348(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              DurabilityString;                                        // 0x0358(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              CustomRepairText;                                        // 0x0368(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      DroppedItemLifeSpanOverride;                             // 0x0378(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ICUB[0x4];                                   // 0x037C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         DroppedMeshOverride;                                     // 0x0380(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  DroppedMeshMaterialOverride;                             // 0x0388(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             DroppedMeshOverrideScale3D;                              // 0x0390(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FNGF[0x4];                                   // 0x039C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              SpoilingItem;                                            // 0x03A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      UseRequiresOwnerActorClasses;                            // 0x03A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              PreservingItemClass;                                     // 0x03B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PreservingItemSpoilingTimeMultiplier;                    // 0x03C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SpoilingTime;                                            // 0x03C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    CraftingConsumesDurability;                              // 0x03C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RepairResourceRequirementMultiplier;                     // 0x03CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BaseItemWeight;                                          // 0x03D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DurabilityIncreaseMultiplier;                            // 0x03D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NewItemDurabilityOverride;                               // 0x03D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DurabilityDecreaseMultiplier;                            // 0x03DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UseDecreaseDurability;                                   // 0x03E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AutoDurabilityDecreaseInterval;                          // 0x03E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AutoDecreaseMinDurability;                               // 0x03E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AutoDecreaseDurabilityAmountPerInterval;                 // 0x03EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UseDecreaseDurabilityMin;                                // 0x03F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UseMinDurabilityRequirement;                             // 0x03F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ResourceRarity;                                          // 0x03F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BlueprintTimeToCraft;                                    // 0x03FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinBlueprintTimeToCraft;                                 // 0x0400(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BlueprintWeight;                                         // 0x0404(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinimumUseInterval;                                      // 0x0408(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TimeForFullRepair;                                       // 0x040C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BaseCraftingXP;                                          // 0x0410(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BaseRepairingXP;                                         // 0x0414(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FCraftingResourceRequirement>                BaseCraftingResourceRequirements;                        // 0x0418(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FCraftingResourceRequirement>                OverrideRepairingRequirements;                           // 0x0428(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		struct FItemStatInfo                                       ItemStatInfos[0x8];                                      // 0x0438(0x0120) Edit, DisableEditOnInstance
		uint16_t                                                   ItemStatValues[0x8];                                     // 0x0558(0x0010) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		uint32_t                                                   WeaponClipAmmo;                                          // 0x0568(0x0004) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		float                                                      WeaponFrequency;                                         // 0x056C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		double                                                     LastTimeToShowInfo;                                      // 0x0570(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              ItemVersion;                                             // 0x0578(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ISJL[0x3];                                   // 0x0579(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ItemDurability;                                          // 0x057C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      MinItemDurability;                                       // 0x0580(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SavedDurability;                                         // 0x0584(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		class UClass*                                              WeaponTemplate;                                          // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          BrokenIcon;                                              // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          CustomBrokenOverlayIcon;                                 // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          ItemIcon;                                                // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          AlternateItemIconBelowDurability;                        // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AlternateItemIconBelowDurabilityValue;                   // 0x05B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DurabilityNotifyThresholdValue;                          // 0x05B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  ItemIconMaterialParent;                                  // 0x05B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int16_t                                                    ItemColorID[0x6];                                        // 0x05C0(0x000C) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		int16_t                                                    PreSkinItemColorID[0x6];                                 // 0x05CC(0x000C) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              bUseItemColor[0x6];                                      // 0x05D8(0x0006) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_W5VI[0x2];                                   // 0x05DE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              RandomColorSet;                                          // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInstanceDynamic*                            ItemIconMaterial;                                        // 0x05E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UMaterialInstanceDynamic*                            HUDIconMaterial;                                         // 0x05F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    ItemQuantity;                                            // 0x05F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    MaxItemQuantity;                                         // 0x05FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<EPrimalEquipmentType>                               EquippedHideOtherEquipmentAttachTypes;                   // 0x0600(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<uint64_t>                                           SteamItemUserIDs;                                        // 0x0610(0x0010) ZeroConstructor
		class UClass*                                              StructureToBuild;                                        // 0x0620(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              GiveItemWhenUsed;                                        // 0x0628(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      CraftingRequiresInventoryComponent;                      // 0x0630(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              DroppedItemTemplateOverride;                             // 0x0640(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              DroppedItemTemplateForSecondryAction;                    // 0x0648(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              BuffToGiveOwnerCharacter;                                // 0x0650(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FRotator                                            PreviewCameraRotation;                                   // 0x0658(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             PreviewCameraPivotOffset;                                // 0x0664(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PreviewCameraDistanceScaleFactor;                        // 0x0670(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PreviewCameraDefaultZoomMultiplier;                      // 0x0674(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PreviewCameraMaxZoomMultiplier;                          // 0x0678(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5NH5[0x44];                                  // 0x067C(0x0044) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     CreationTime;                                            // 0x06C0(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		double                                                     LastAutoDurabilityDecreaseTime;                          // 0x06C8(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		double                                                     LastUseTime;                                             // 0x06D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_X43R[0x8];                                   // 0x06D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxCustomItemDescriptionLength;                          // 0x06E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    TempSlotIndex;                                           // 0x06E4(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    LastSlotIndex;                                           // 0x06E8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class AShooterWeapon>                       AssociatedWeapon;                                        // 0x06EC(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4PJD[0x4];                                   // 0x06F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPrimalItem*                                         MyItemSkin;                                              // 0x06F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UPrimalItem*                                         SkinnedOntoItem;                                         // 0x0700(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class AShooterCharacter>                    LastOwnerPlayer;                                         // 0x0708(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FCropItemPhaseData>                          CropPhasesData;                                          // 0x0710(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      CropGrowingFertilizerConsumptionRate;                    // 0x0720(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CropMaxFruitFertilizerConsumptionRate;                   // 0x0724(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CropGrowingWaterConsumptionRate;                         // 0x0728(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CropMaxFruitWaterConsumptionRate;                        // 0x072C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    CropMaxFruits;                                           // 0x0730(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CropNoFertilizerOrWaterCacheReductionRate;               // 0x0734(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FertilizerEffectivenessMultiplier;                       // 0x0738(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      EggAlertDinosAggroAmount;                                // 0x073C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      EggAlertDinosAggroRadius;                                // 0x0740(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QPPB[0x4];                                   // 0x0744(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        EggAlertDinosAggroTags;                                  // 0x0748(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      EggAlertDinosForcedAggroTime;                            // 0x0758(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      EggMaximumDistanceFromOriginalDropToAlertDinos;          // 0x075C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              BrokenGiveItemClass;                                     // 0x0760(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ClearColorDurabilityThreshold;                           // 0x0768(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_O7LY[0x4];                                   // 0x076C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ItemClassToUseAsInitialCustomData;                       // 0x0770(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             OriginalItemDropLocation;                                // 0x0778(0x000C) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FLinearColor                                        DurabilityBarColorForeground;                            // 0x0784(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        DurabilityBarColorBackground;                            // 0x0794(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IZC4[0x4];                                   // 0x07A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              OverrideCooldownTimeItemClass;                           // 0x07A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinDurabilityForCraftingResource;                        // 0x07B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ResourceRequirementIncreaseRatingPower;                  // 0x07B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ResourceRequirementRatingScale;                          // 0x07B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ResourceRequirementRatingIncreasePercentage;             // 0x07BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     NextSpoilingTime;                                        // 0x07C0(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		double                                                     LastSpoilingTime;                                        // 0x07C8(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		TArray<class FString>                                      DefaultFolderPaths;                                      // 0x07D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              ItemRatingString;                                        // 0x07E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                DefaultWeaponMeshName;                                   // 0x07F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LRJ4[0x8];                                   // 0x07F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              EngramRequirementItemClassOverride;                      // 0x0800(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_N4BT[0x10];                                  // 0x0808(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          ExtraThrowItemSound;                                     // 0x0818(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             SpawnOnWaterEncroachmentBoxExtent;                       // 0x0820(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XCMY[0x4];                                   // 0x082C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      OnlyUsableOnSpecificClasses;                             // 0x0830(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FSaddlePassengerSeatDefinition>              SaddlePassengerSeats;                                    // 0x0840(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                SaddleOverrideRiderSocketName;                           // 0x0850(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              EggDinoClassToSpawn;                                     // 0x0858(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              EggNumberOfLevelUpPointsApplied[0xC];                    // 0x0860(0x000C) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      EggTamedIneffectivenessModifier;                         // 0x086C(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              EggColorSetIndices[0x6];                                 // 0x0870(0x0006) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZXJ0[0x2];                                   // 0x0876(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    EggGenderOverride;                                       // 0x0878(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      EggLoseDurabilityPerSecond;                              // 0x087C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExtraEggLoseDurabilityPerSecondMultiplier;               // 0x0880(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      EggMinTemperature;                                       // 0x0884(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      EggMaxTemperature;                                       // 0x0888(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      EggDroppedInvalidTempLoseItemRatingSpeed;                // 0x088C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          ShieldHitSound;                                          // 0x0890(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RecipeCraftingSkillScale;                                // 0x0898(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    CustomItemID;                                            // 0x089C(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      AddDinoTargetingRange;                                   // 0x08A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DamageTorpidityArmorRating;                              // 0x08A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      IndirectTorpidityArmorRating;                            // 0x08A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_N042[0x4];                                   // 0x08AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              UseParticleEffect;                                       // 0x08B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                UseParticleEffectSocketName;                             // 0x08B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UseGiveDinoTameAffinityPercent;                          // 0x08C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4NFI[0x4];                                   // 0x08C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      CraftingAdditionalItemsToGive;                           // 0x08C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		int32_t                                                    LastValidItemVersion;                                    // 0x08D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GlobalTameAffinityMultiplier;                            // 0x08DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    CraftingGiveItemCount;                                   // 0x08E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    CraftingGivesItemQuantityOverride;                       // 0x08E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          UseItemOnItemSound;                                      // 0x08E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                UseUnlocksEmoteName;                                     // 0x08F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MK2O[0x8];                                   // 0x08F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDinoAncestorsEntry>                         EggDinoAncestors;                                        // 0x0900(0x0010) ZeroConstructor, Transient, SaveGame
		TArray<struct FDinoAncestorsEntry>                         EggDinoAncestorsMale;                                    // 0x0910(0x0010) ZeroConstructor, Transient, SaveGame
		int32_t                                                    EggRandomMutationsFemale;                                // 0x0920(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    EggRandomMutationsMale;                                  // 0x0924(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      EquippingRequiresEngrams;                                // 0x0928(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FCustomItemData>                             CustomItemDatas;                                         // 0x0938(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, SaveGame
		class FString                                              OverrideUseString;                                       // 0x0948(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              SendToClientClassOverride;                               // 0x0958(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              CrafterCharacterName;                                    // 0x0960(0x0010) ZeroConstructor, Transient, SaveGame
		class FString                                              CrafterTribeName;                                        // 0x0970(0x0010) ZeroConstructor, Transient, SaveGame
		float                                                      CraftedSkillBonus;                                       // 0x0980(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      CraftingSkillQualityMultiplierMin;                       // 0x0984(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CraftingSkillQualityMultiplierMax;                       // 0x0988(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SinglePlayerCraftingSpeedMultiplier;                     // 0x098C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    NoLevelEngramSortingPriority;                            // 0x0990(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    CustomFlags;                                             // 0x0994(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CustomTag;                                               // 0x0998(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      EquippedReduceDurabilityInterval;                        // 0x09A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q7ZT[0x4];                                   // 0x09A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastEquippedReduceDurabilityTime;                        // 0x09A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      EquippedReduceDurabilityPerInterval;                     // 0x09B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ItemStatClampsMultiplier;                                // 0x09B4(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		float                                                      MaxDurabiltiyOverride;                                   // 0x09B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FQVS[0x14];                                  // 0x09BC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NextRepairPercentage;                                    // 0x09D0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H2VG[0x4];                                   // 0x09D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         NetDroppedMeshOverride;                                  // 0x09D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  NetDroppedMeshMaterialOverride;                          // 0x09E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             NetDroppedMeshOverrideScale3D;                           // 0x09E8(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bNonBlockingShield : 1;                                  // 0x09F4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNetInfoFromClient : 1;                                  // 0x09F4(0x0001) BIT_FIELD SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       UnknownData_X7ZO : 1;                                    // 0x09F4(0x0001) BIT_FIELD (PADDING)
		bool                                                       bDisableItemUITooltip : 1;                               // 0x09F4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventDepositDropping : 1;                             // 0x09F4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAllowSkinColorization : 1;                         // 0x09F4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEquipAddTekExtendedInfo : 1;                            // 0x09F4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowCraftingWithStarterAmmo : 1;                       // 0x09F4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_X0FC[0x3];                                   // 0x09F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateBrush                                         WidgetCustomBrokenOverlayStyleBrush;                     // 0x09F8(0x0078) Edit, BlueprintVisible
		struct FColor                                              CustomBrokenBorderColor;                                 // 0x0A70(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GOJR[0x4];                                   // 0x0A74(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMesh*                                       DyePreviewMeshOverrideSK;                                // 0x0A78(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UStaticMesh*                                         DyePreviewMeshOverrideSM;                                // 0x0A80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          AccessoryActivatedIconOverride;                          // 0x0A88(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              CustomItemTooltipOverride;                               // 0x0A90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBlueprintAnimNotifications;                          // 0x0A98(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPPreventUpload;                                     // 0x0A99(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1UDU[0x2];                                   // 0x0A9A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                EquippingCosmeticRequiresUnlockedEmoteName;              // 0x0A9C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CustomInventoryWidgetTextVerticalOffset;                 // 0x0AA4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseCustomContextMenuOptions;                            // 0x0AA8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_PWJJ[0x7];                                   // 0x0AA9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        TopLevelCustomContextMenuOptions;                        // 0x0AB0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FCustomContextSubmenu>                       CustomContextSubMenus;                                   // 0x0AC0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FCustomContextMenuData>                      CustomContextOptionData;                                 // 0x0AD0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bPreventModifyArmorValue;                                // 0x0AE0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPOnLocalUse;                                        // 0x0AE1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3M4O[0x6];                                   // 0x0AE2(0x0006) MISSED OFFSET (PADDING)

	public:
		bool UseItemOntoItem(class UPrimalItem* DestinationItem, int32_t AdditionalData);
		void Use(bool bOverridePlayerInput);
		void UpdatedItem(bool ResetUploadTime);
		void UnequipWeapon(bool bDelayedUnequip);
		bool STATIC_StaticGetItemNameAndIcon(class UClass* ItemType, class FString* OutItemName, class UTexture2D** OutItemIcon, bool bShortName, class AShooterPlayerController* ForPC);
		int32_t STATIC_StaticGetDinoColorSetIndexForItemColorID(int32_t ID);
		struct FLinearColor STATIC_StaticGetColorForItemColorID(int32_t ID);
		void SlottedTick(float DeltaSeconds);
		void SkinEquippedBlueprintTick(class UPrimalItem* OwnerItem, float DeltaSeconds);
		void SetUnreplicatedEggData(const struct FUnreplicatedEggData& EggData);
		void SetQuantity(int32_t NewQuantity, bool ShowHUDNotification);
		void SetItemStatValues(int32_t idx, int32_t val);
		void SetItemStatInfo(int32_t idx, const struct FItemStatInfo& val);
		void SetItemColors(TArray<int32_t> ColorIDs);
		void SetCustomItemData(const struct FCustomItemData& InData);
		void ServerUpdatedWeaponClipAmmo();
		void ServerSendItemExecCommandToPlayer(class AShooterPlayerController* ToPC, const class FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy);
		void ServerSendItemExecCommandToEveryone(const class FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy);
		void ServerRemoveWeaponAccessoryOnly();
		void ServerRemoveItemSkinOnly();
		void ServerRemoveItemSkin();
		void SelectedCustomContextMenuItem(const class FName& ContextItem, class AShooterPlayerController* ForPC);
		void RepairItem(bool bIgnoreInventoryRequirement, float UseNextRepairPercentage, float RepairSpeedMultiplier);
		void RemoveWeaponAccessory();
		void RemoveFromSlot(bool bForce);
		void RemovedSkinFromItem(class UPrimalItem* FromOwnerItem, bool bIsFirstTime);
		void RemoveCustomItemData(const class FName& CustomDataName);
		void RemoveClipAmmo(bool bDontUpdateItem);
		void RefreshAttachments(bool bRefreshDefaultAttachments, bool isShieldSpecificRefresh, bool bIsFromUpdateItem);
		void OverrideItemRating(float rating);
		class USoundBase* OverrideCrouchingSound(class USoundBase* InSound, bool bIsProne, int32_t soundState);
		void NotifyEditText(class AShooterPlayerController* PC);
		TArray<struct FCustomItemData> STATIC_MergeCustomItemDatas(TArray<struct FCustomItemData> DataSet1, TArray<struct FCustomItemData> DataSet2);
		bool MeetRepairingRequirements(class UPrimalInventoryComponent* compareInventoryComp, bool bIsForCraftQueueAddition);
		class FString STATIC_MakeRepairingRequirementsString(class UPrimalInventoryComponent* compareInventoryComp, TArray<struct FCraftingResourceRequirement> InRepairingRequirements);
		void LocalUse(class AShooterPlayerController* ForPC);
		bool IsValidForCrafting();
		bool IsUsableConsumable();
		bool IsOwnerInWater();
		bool IsOwnerInNoPainWater();
		bool IsCustomContextMenuItemEnabled(const class FName& ContextItem);
		bool IsCooldownReadyForUse();
		bool IsBroken();
		bool IsActiveEventItem(class UWorld* World);
		void InitNewItem(float ItemQuality, class UPrimalInventoryComponent* toInventory, float MaxItemDifficultyClamp, float MinRandomQuality);
		void InitializeItem(bool bForceReinit, class UWorld* OptionalInitWorld);
		int32_t IncrementItemQuantity(int32_t amount, bool bRepicateToClient, bool bDontUpdateWeight, bool bIsFromUseConsumption, bool bIsArkTributeItem, bool bIsFromCraftingConsumption);
		bool HasCustomItemData(const class FName& CustomDataName);
		bool HasBuffToGiveOwnerWhenEquipped();
		float HandleShieldDamageBlocking(class AShooterCharacter* ForShooterCharacter, float DamageIn, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		class UClass* GetWeaponTemplateMeleeDamageType();
		float GetWeaponTemplateMeleeDamageAmount();
		class UClass* GetWeaponTemplateHarvestDamageType();
		float GetWeaponTemplateHarvestDamageMultiplier();
		float GetWeaponTemplateDurabilityToConsumePerMeleeHit();
		int32_t GetWeaponClipAmmo();
		float GetUseItemAddCharacterStatusValue(EPrimalCharacterStatusValue ValueType);
		void GetUnreplicatedEggData(struct FUnreplicatedEggData* EggData);
		float GetSpoilingTime();
		class FString GetRepairingRequirementsString(class UPrimalInventoryComponent* compareInventoryComp, bool bUseBaseRequeriments, float OverrideRepairPercent);
		float GetRemainingCooldownTime();
		class UClass* STATIC_GetProjectileType(class UClass* ItemType);
		class AShooterCharacter* GetOwnerPlayer();
		class AActor* GetOwnerActor();
		int32_t GetMaxItemQuantity(class UObject* WorldContextObject);
		int32_t GetMaximumAdditionalCrafting(class UPrimalInventoryComponent* forComp, class AShooterPlayerController* PC);
		float GetItemWeight(bool bJustOneQuantity, bool bForceNotBlueprintWeight);
		int32_t GetItemStatValues(int32_t idx);
		class FString GetItemStatString(EPrimalItemStat statType);
		float GetItemStatModifier(EPrimalItemStat statType);
		struct FItemStatInfo GetItemStatInfo(int32_t idx);
		class FString GetItemShortName();
		struct FItemNetInfo GetItemNetInfo(bool bIsForSendingToClient);
		TArray<struct FLinearColor> GetItemDyeColors();
		bool GetItemCustomColor(int32_t ColorRegion, struct FLinearColor* outColor);
		int32_t STATIC_GetItemColorIDFromDyeItemID(int32_t MasterItemListIndex);
		int32_t GetItemColorID(int32_t theRegion);
		void GetItemBytes(TArray<unsigned char>* Bytes);
		class FString GetInventoryIconDisplayText();
		class UPrimalInventoryComponent* GetInitializeItemOwnerInventory();
		class UMaterialInterface* GetHUDIconMaterial();
		int32_t GetEngramRequirementLevel();
		float GetEggHatchTimeRemaining(class UWorld* TheWorld, float additionalMultiplier);
		float GetDurabilityPercentage();
		bool GetCustomItemData(const class FName& CustomDataName, struct FCustomItemData* OutData);
		int32_t GetCraftingResourceRequirement(int32_t CraftingResourceIndex);
		TArray<struct FCraftingResourceRequirement> GetCraftingRequirements(TArray<struct FCraftingResourceRequirement>* CombinedRequirements, float Percent);
		class UActorComponent* GetComponentToAttach(int32_t attachmentIndex, class AActor* UseOtherActor);
		class UClass* GetBuffToGiveOwnerWhenEquipped(bool bForceResolveSoftRef);
		int32_t GetAttachedComponentsNum();
		class UActorComponent* GetAttachedComponent(int32_t attachmentIndex, class AActor* UseOtherActor);
		EPrimalEquipmentType GetActualEquipmentType(bool bGetBaseValue);
		void FinishRepairing();
		void EquippedBlueprintTick(float DeltaSeconds);
		bool DoesItemUseColorRegion(int32_t RegionIndex);
		class UPrimalItem* STATIC_CreateItemFromNetInfo(const struct FItemNetInfo& newItemInfo);
		class UPrimalItem* STATIC_CreateFromBytes(TArray<unsigned char> Bytes);
		void Crafted(bool bWasCraftedFromEngram);
		void CraftBlueprint(bool bConsumeResources);
		void ClientUpdatedWeaponClipAmmo();
		void ClampStats(class UPrimalInventoryComponent* inventory);
		bool CheckForInventoryDupes();
		bool CanUseWithItemSource(class UPrimalItem* DestinationItem);
		bool CanUseWithItemDestination(class UPrimalItem* SourceItem);
		bool CanUse(bool bIgnoreCooldown);
		bool CanSpoil();
		bool CanRepair(bool bIgnoreInventoryRequirement);
		bool CanFullyCraft();
		bool CanEquipWeapon();
		bool CanDrop();
		bool CanCraft();
		void BPUsedOntoItem(class UPrimalItem* DestinationItem, int32_t AdditionalData);
		void BPTributeItemUploaded(class UObject* ContextObject);
		void BPTributeItemDownloaded(class UObject* ContextObject);
		bool BPSupportUseOntoItem(class UPrimalItem* DestinationItem);
		void BPSetWeaponClipAmmo(int32_t NewClipAmmo);
		void BPSetupHUDIconMaterial(class UMaterialInstanceDynamic* theMID);
		void BPServerVerifyStructurePlacementData();
		void BPServerHandleItemNetExecCommand(class AShooterPlayerController* ForPC, const class FName& CommandName, const struct FBPNetExecParams& ExecParams);
		bool BPProcessEditText(class AShooterPlayerController* ForPC, const class FString& TextToUse);
		bool BPPreventWeaponEquip();
		bool BPPreventUseOntoItem(class UPrimalItem* DestinationItem);
		bool BPPreventUpload();
		bool BPPreventEquip(class UPrimalInventoryComponent* toInventory);
		void BPPreUseItem();
		void BPPreInitializeItem(class UWorld* OptionalInitWorld);
		void BPPostInitializeItem(class UWorld* OptionalInitWorld);
		void BPPostAddBuffToGiveOwnerCharacter(class APrimalCharacter* OwnerCharacter, class APrimalBuff* Buff);
		class UClass* BPOverrideProjectileType();
		void BPOverrideCraftingConsumption(int32_t AmountToConsume);
		void BPOnLocalUse(class AShooterCharacter* forCharacter);
		void BPOnItemConsumed(class UPrimalInventoryComponent* inventory, int32_t remainingQuantity);
		void BPNotifyDropped(class APrimalCharacter* FromCharacter, bool bWasThrown);
		bool BPMatchesItemID(int32_t ItemID1, int32_t ItemID2);
		struct FItemNetID STATIC_BPMakeItemID(int32_t TheItemID1, int32_t TheItemID2);
		void BPItemBroken();
		void BPItemBelowDurabilityThreshold();
		bool BPIsValidForCrafting();
		void BPInitItemColors(TArray<int32_t>* ColorIDs);
		void BPInitIconMaterial();
		void BPInitFromItemNetInfo();
		class FString BPGetSkinnedCustomInventoryWidgetText();
		int32_t BPGetMaxAmmo();
		int32_t BPGetItemStatRandomValue(float QualityLevel, int32_t idx);
		float BPGetItemStatModifier(int32_t idx, int32_t ItemStatValue);
		void BPGetItemNetInfo();
		class FString BPGetItemName(const class FString& ItemNameIn, class AShooterPlayerController* ForPC);
		void BPGetItemID(int32_t* ItemID1, int32_t* ItemID2);
		class UTexture2D* BPGetItemIcon(class AShooterPlayerController* ForPC);
		float BPGetItemDurabilityPercentage();
		class FString BPGetItemDescription(const class FString& InDescription, bool bGetLongDescription, class AShooterPlayerController* ForPC);
		class UParticleSystem* BPGetFuelParticleSystemOverride(class APrimalStructure* ForStructure);
		class USoundBase* BPGetFuelAudioOverride(class APrimalStructure* ForStructure);
		struct FColor BPGetCustomInventoryWidgetTextColor();
		class FString BPGetCustomInventoryWidgetText();
		class UMaterialInterface* BPGetCustomIconMaterialParent();
		struct FColor BPGetCustomDurabilityTextColor();
		class FString BPGetCustomDurabilityText();
		float BPGetCustomAutoDecreaseDurabilityPerInterval();
		bool BPForceAllowRemoteAddToInventory(class UPrimalInventoryComponent* toInventory);
		void BPEquippedItemOnXPEarning(class APrimalCharacter* forChar, float howMuchXP, EXPType TheXPType);
		void BPDrawItemIcon(class UCanvas* ItemCanvas, const struct FVector2D& ItemCanvasSize, const struct FVector2D& ItemCanvasScale, bool bItemEnabled, const struct FLinearColor& TheTintColor);
		void BPCrafted();
		bool BPConsumeProjectileImpact(class AShooterProjectile* theProjectile, const struct FHitResult& HitResult);
		void BPClientHandleItemNetExecCommand(const class FName& CommandName, const struct FBPNetExecParams& ExecParams, class AShooterPlayerController* ForPC);
		bool BPCanUse(bool bIgnoreCooldown);
		bool BPCanAddToInventory(class UPrimalInventoryComponent* toInventory);
		void STATIC_BPBreakItemID(const struct FItemNetID& ItemNetID, int32_t* TheItemID1, int32_t* TheItemID2);
		void BPAnimNotifyCustomState_End(const class FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotifyState* AnimNotifyObject);
		void BPAnimNotifyCustomState_Begin(const class FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, class UAnimNotifyState* AnimNotifyObject);
		void BPAnimNotifyCustomEvent(const class FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject);
		bool BPAllowRemoteRemoveFromInventory(class UPrimalInventoryComponent* invComp, class AShooterPlayerController* ByPC, bool bRequestedByPlayer);
		bool BPAllowRemoteAddToInventory(class UPrimalInventoryComponent* invComp, class AShooterPlayerController* ByPC, bool bRequestedByPlayer);
		class FString BPAllowCrafting(class AShooterPlayerController* ForPC);
		void BPAddedAttachments();
		void BlueprintUsed();
		void BlueprintUnequipped();
		void BlueprintOwnerPosssessed(class AController* PossessedByController);
		void BlueprintEquipped(bool bIsFromSaveGame);
		void ApplyingSkinOntoItem(class UPrimalItem* ToOwnerItem, bool bIsFirstTime);
		void ApplyColorsToMesh(class UMeshComponent* mComp);
		void ApplyColorsFromStructure(class APrimalStructure* theStructure);
		bool AllowRemoteAddToInventory(class UPrimalInventoryComponent* invComp, class AShooterPlayerController* ByPC, bool bRequestedByPlayer);
		bool AllowEquipItem(class UPrimalInventoryComponent* toInventory);
		void AddToSlot(int32_t theSlotIndex, bool bForce);
		class UPrimalItem* STATIC_AddNewItem(class UClass* ItemArchetype, class UPrimalInventoryComponent* GiveToInventory, bool bEquipItem, bool bDontStack, float ItemQuality, bool bForceNoBlueprint, int32_t quantityOverride, bool bForceBlueprint, float MaxItemDifficultyClamp, bool CreateOnClient, class UClass* ApplyItemSkin, float MinRandomQuality, bool ClampStats, bool bIgnoreAbsoluteMaxInventory);
		void AddItemDurability(float durabilityToAdd);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.AllClustersInventory
	 * Size -> 0x00C0 (FullSize[0x00E8] - InheritedSize[0x0028])
	 */
	class UAllClustersInventory : public UObject
	{
	public:
		unsigned char                                              UnknownData_184C[0xC0];                                  // 0x0028(0x00C0) MISSED OFFSET (PADDING)

	public:
		void OnSaveItemsFinished__DelegateSignature(bool Success, const class FString& UserId);
		void OnRemoveAllClusterInventoryItemsFinished__DelegateSignature(bool Success, const class FString& UserId, TArray<struct FItemNetID> ItemsIds);
		void OnReadLockFinished__DelegateSignature(bool Success, const class FString& UserId, bool Locked);
		void OnLoadItemsFinished__DelegateSignature(bool Success, const class FString& UserId, TArray<struct FItemNetInfo>* Items);
		void OnFinishedSaveForChangingItems(bool Success, const class FString& UserId);
		void OnFinishedReadLockForCreateLock(bool Success, const class FString& UserId, bool Locked);
		void OnFinishedLoadForChangingItems(bool Success, const class FString& UserId, TArray<struct FItemNetInfo>* ArkItems);
		void OnFinishedCreateLockForChangingItems(bool Success, const class FString& UserId);
		void OnFinishedClearLockForChangingItems(bool Success, const class FString& UserId);
		void OnCreateLockFinished__DelegateSignature(bool Success, const class FString& UserId);
		void OnClearLockFinished__DelegateSignature(bool Success, const class FString& UserId);
		void OnAddAllClustersInventoryItemsFinished__DelegateSignature(bool Success, const class FString& UserId, TArray<int32_t> MasterIndexNum);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.AnimInstance_DinoBlueprintBase
	 * Size -> 0x0090 (FullSize[0x03D0] - InheritedSize[0x0340])
	 */
	class UAnimInstance_DinoBlueprintBase : public UAnimInstance
	{
	public:
		bool                                                       bAllowNativeAnimations;                                  // 0x0340(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bDisableBlueprint;                                       // 0x0341(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UHFS[0x2];                                   // 0x0342(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            RootRotationOffset;                                      // 0x0344(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             RootLocationOffset;                                      // 0x0350(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bSkipAnimGraph;                                          // 0x035C(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_S2XU[0x3];                                   // 0x035D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MovementAnimRate;                                        // 0x0360(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MovementAnimRatePower;                                   // 0x0364(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinMovementAnimRate;                                     // 0x0368(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxMovementAnimRate;                                     // 0x036C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MovingAnimSpeedTreshold;                                 // 0x0370(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsMoving;                                               // 0x0374(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bUseAimOffset;                                           // 0x0375(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KMM5[0x2];                                   // 0x0376(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AimPitch;                                                // 0x0378(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AimYaw;                                                  // 0x037C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseBlinking;                                            // 0x0380(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_R1CY[0x3];                                   // 0x0381(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BlinkBlend;                                              // 0x0384(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseTurning;                                             // 0x0388(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseTurnInPlaceAnimation;                                // 0x0389(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FQ3X[0x2];                                   // 0x038A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TurningEnabledBlendTime;                                 // 0x038C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TurningDisabledBlendTime;                                // 0x0390(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TurningDirectionBlendTime;                               // 0x0394(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinTurnRateForTurnAnimation;                             // 0x0398(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsTurning;                                              // 0x039C(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bTurningRight;                                           // 0x039D(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bUseSwimming;                                            // 0x039E(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9YT9[0x1];                                   // 0x039F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SwimmingMovingAnimSpeedThreshold;                        // 0x03A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsSwimming;                                             // 0x03A4(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bUseRunning;                                             // 0x03A5(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseRunningMovementAnimRate;                             // 0x03A6(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1XFD[0x1];                                   // 0x03A7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RunningMovementAnimRate;                                 // 0x03A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsRunning;                                              // 0x03AC(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bUseSleepingAnim;                                        // 0x03AD(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_46IB[0x2];                                   // 0x03AE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             SleepingAnimTranslationOffset;                           // 0x03B0(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsSleeping;                                             // 0x03BC(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bUseFalling;                                             // 0x03BD(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6V6R[0x2];                                   // 0x03BE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FallingAnimPlayRate;                                     // 0x03C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FallingBlendInTime;                                      // 0x03C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FallingBlendOutTime;                                     // 0x03C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsFalling;                                              // 0x03CC(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UAHD[0x3];                                   // 0x03CD(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.AnimInstance_DinoRootBoneName
	 * Size -> 0x00C0 (FullSize[0x0400] - InheritedSize[0x0340])
	 */
	class UAnimInstance_DinoRootBoneName : public UAnimInstance
	{
	public:
		bool                                                       bAllowNativeAnimations;                                  // 0x0340(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bDisableBlueprint;                                       // 0x0341(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VT0H[0x2];                                   // 0x0342(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            RootRotationOffset;                                      // 0x0344(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             RootLocationOffset;                                      // 0x0350(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IKAlpha;                                                 // 0x035C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bDisableIK;                                              // 0x0360(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bDisableIKWhenFalling;                                   // 0x0361(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bSleepingEnableIK;                                       // 0x0362(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bSkipAnimGraph;                                          // 0x0363(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      MovementAnimRate;                                        // 0x0364(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MovementAnimRatePower;                                   // 0x0368(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinMovementAnimRate;                                     // 0x036C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxMovementAnimRate;                                     // 0x0370(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MovingAnimSpeedTreshold;                                 // 0x0374(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MovingBlendInTime;                                       // 0x0378(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MovingBlendOutTime;                                      // 0x037C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsMoving;                                               // 0x0380(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bUseAimOffset;                                           // 0x0381(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RP81[0x2];                                   // 0x0382(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AimPitch;                                                // 0x0384(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AimYaw;                                                  // 0x0388(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AimOffsetPitchScale;                                     // 0x038C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AimOffsetYawScale;                                       // 0x0390(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseAlignGround;                                         // 0x0394(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0THA[0x3];                                   // 0x0395(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AlignGroundAlpha;                                        // 0x0398(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseBlinking;                                            // 0x039C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IXL4[0x3];                                   // 0x039D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BlinkBlend;                                              // 0x03A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseTurning;                                             // 0x03A4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseTurnInPlaceAnimation;                                // 0x03A5(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ECJE[0x2];                                   // 0x03A6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TurningEnabledBlendTime;                                 // 0x03A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TurningDisabledBlendTime;                                // 0x03AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TurningDirectionBlendTime;                               // 0x03B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinTurnRateForTurnAnimation;                             // 0x03B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsTurning;                                              // 0x03B8(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bTurningRight;                                           // 0x03B9(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bUseSwimming;                                            // 0x03BA(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VGUN[0x1];                                   // 0x03BB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SwimmingMovingAnimSpeedThreshold;                        // 0x03BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsSwimming;                                             // 0x03C0(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bUseRunning;                                             // 0x03C1(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseRunningMovementAnimRate;                             // 0x03C2(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_10F8[0x1];                                   // 0x03C3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RunningMovementAnimRate;                                 // 0x03C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RunningBlendInTime;                                      // 0x03C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RunningBlendOutTime;                                     // 0x03CC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsRunning;                                              // 0x03D0(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bUseSleepingAnim;                                        // 0x03D1(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_G7BY[0x2];                                   // 0x03D2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             SleepingAnimTranslationOffset;                           // 0x03D4(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsSleeping;                                             // 0x03E0(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bUseFalling;                                             // 0x03E1(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_M8X9[0x2];                                   // 0x03E2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FallingAnimPlayRate;                                     // 0x03E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FallingBlendInTime;                                      // 0x03E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FallingBlendOutTime;                                     // 0x03EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsFalling;                                              // 0x03F0(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_R6B1[0xF];                                   // 0x03F1(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.AnimInstance_DinoRootTransform
	 * Size -> 0x00F0 (FullSize[0x0430] - InheritedSize[0x0340])
	 */
	class UAnimInstance_DinoRootTransform : public UAnimInstance
	{
	public:
		bool                                                       bAllowNativeAnimations;                                  // 0x0340(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bDisableBlueprint;                                       // 0x0341(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_T0NP[0x2];                                   // 0x0342(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            RootRotationOffset;                                      // 0x0344(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             RootLocationOffset;                                      // 0x0350(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q002[0x4];                                   // 0x035C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          RootOffsetTransform;                                     // 0x0360(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor
		bool                                                       bSkipAnimGraph;                                          // 0x0390(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_PVEC[0x3];                                   // 0x0391(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MovementAnimRate;                                        // 0x0394(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MovementAnimRatePower;                                   // 0x0398(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinimumMovementSpeed;                                    // 0x039C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MovingBlendInTime;                                       // 0x03A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MovingBlendOutTime;                                      // 0x03A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsMoving;                                               // 0x03A8(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3XBU[0x3];                                   // 0x03A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinimumMovementSpeedFlying;                              // 0x03AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FlyingMoveBlendIn;                                       // 0x03B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FlyingMoveBlendOut;                                      // 0x03B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsFlying;                                               // 0x03B8(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bUseFlyingOffset;                                        // 0x03B9(0x0001) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_U9AM[0x2];                                   // 0x03BA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             FlyingOffset;                                            // 0x03BC(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             CurrentFlyingOffset;                                     // 0x03C8(0x000C) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		struct FVector                                             LandedOffset;                                            // 0x03D4(0x000C) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bUseAimOffset;                                           // 0x03E0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JD3X[0x3];                                   // 0x03E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AimPitch;                                                // 0x03E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AimYaw;                                                  // 0x03E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AimOffsetPitchScale;                                     // 0x03EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AimOffsetYawScale;                                       // 0x03F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseBlinking;                                            // 0x03F4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_72KK[0x3];                                   // 0x03F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BlinkBlend;                                              // 0x03F8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseTurning;                                             // 0x03FC(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WYR2[0x3];                                   // 0x03FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TurningEnabledBlendTime;                                 // 0x0400(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TurningDisabledBlendTime;                                // 0x0404(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TurningDirectionBlendTime;                               // 0x0408(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinTurnRateForTurnAnimation;                             // 0x040C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsTurning;                                              // 0x0410(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bTurningRight;                                           // 0x0411(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bUseRunning;                                             // 0x0412(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsRunning;                                              // 0x0413(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bUseSleepingAnim;                                        // 0x0414(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsSleeping;                                             // 0x0415(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bUseFalling;                                             // 0x0416(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_U7CH[0x1];                                   // 0x0417(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FallingAnimPlayRate;                                     // 0x0418(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FallingBlendInTime;                                      // 0x041C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FallingBlendOutTime;                                     // 0x0420(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsFalling;                                              // 0x0424(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bUseMounted;                                             // 0x0425(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsMounted;                                              // 0x0426(0x0001) Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XM4U[0x9];                                   // 0x0427(0x0009) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.AnimNotify_CustomEvent
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class UAnimNotify_CustomEvent : public UAnimNotify
	{
	public:
		class FName                                                EventName;                                               // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bSendNotifyToWeapon;                                     // 0x0040(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bSendNotifyToArmorSlot;                                  // 0x0041(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		EPrimalEquipmentType                                       ArmorSlotToSendNotify;                                   // 0x0042(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bLockHeadPositionNormalized;                             // 0x0043(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TimeToLockHeadPosition;                                  // 0x0044(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUnlockHeadPositionNormalized;                           // 0x0048(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QLQ0[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.AnimNotify_StopSound
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UAnimNotify_StopSound : public UAnimNotify
	{
	public:
		class USoundBase*                                          SoundToStop;                                             // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FadeOutTime;                                             // 0x0040(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7IVO[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.AnimNotifyState_Custom
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_Custom : public UAnimNotifyState
	{
	public:
		class FName                                                EventName;                                               // 0x0030(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bSendNotifyToWeapon;                                     // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bSendNotifyToArmorSlot;                                  // 0x0039(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		EPrimalEquipmentType                                       ArmorSlotToSendNotify;                                   // 0x003A(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JUPE[0x5];                                   // 0x003B(0x0005) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.FogOfWar
	 * Size -> 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
	 */
	class UFogOfWar : public UObject
	{
	public:
		class FString                                              MapName;                                                 // 0x0028(0x0010) ZeroConstructor, Transient
		class UTexture2D*                                          Texture;                                                 // 0x0038(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bVisible : 1;                                            // 0x0040(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_0C20[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InterpolationSpeed;                                      // 0x0044(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    SizeX;                                                   // 0x0048(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    SizeY;                                                   // 0x004C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LatitudeOrigin;                                          // 0x0050(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LatitudeScale;                                           // 0x0054(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LongitudeOrigin;                                         // 0x0058(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LongitudeScale;                                          // 0x005C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q7TH[0x8];                                   // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          BrushTexture;                                            // 0x0068(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		TArray<unsigned char>                                      VisibilityBuffer;                                        // 0x0070(0x0010) ZeroConstructor, Transient, Protected
		TArray<unsigned char>                                      BrushTextureData;                                        // 0x0080(0x0010) ZeroConstructor, Transient, Protected
		unsigned char                                              UnknownData_FSZE[0x38];                                  // 0x0090(0x0038) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalLocalProfile
	 * Size -> 0x0220 (FullSize[0x0248] - InheritedSize[0x0028])
	 */
	class UPrimalLocalProfile : public UObject
	{
	public:
		unsigned char                                              UnknownData_EGEQ[0x20];                                  // 0x0028(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FEngramCustomFolder>                         CustomFolders;                                           // 0x0048(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      UnlockedDinoEntries;                                     // 0x0058(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FPrimalMapMarkerEntryData>                   MapMarkers;                                              // 0x0068(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<int32_t>                                            DisplayedTutorials;                                      // 0x0078(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		struct FArkInventoryData                                   MyArkData;                                               // 0x0088(0x0030) NativeAccessSpecifierPublic
		TArray<uint64_t>                                           SpectatorSavedIds;                                       // 0x00B8(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FVector>                                     SpectatorPositions;                                      // 0x00C8(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FRotator>                                    SpectatorRotations;                                      // 0x00D8(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class FString>                                      FavoriteServersNames;                                    // 0x00E8(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class FString>                                      RecentlyJoinedServersNames;                              // 0x00F8(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class FString>                                      UnlockedAchievements;                                    // 0x0108(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      AchievementItemsCollectedList;                           // 0x0118(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class FString>                                      UnlockedAchievementsList;                                // 0x0128(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<uint32_t>                                           GlobalExplorerNoteUnlocks;                               // 0x0138(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class FName>                                        TamedDinoTags;                                           // 0x0148(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FFogOfWarInfoStruct>                         PerMapFogOfWars;                                         // 0x0158(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FMapMarkerPerMapInfo>                        MapMarkersPerMaps;                                       // 0x0168(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      MapMarkersColorSliderPercent;                            // 0x0178(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstThatchCraft;                   // 0x017C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstJumpPadCraft;                  // 0x017D(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstOceanPlatformCraft;            // 0x017E(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstPressurePlateCraft;            // 0x017F(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstFishingNetCraft;               // 0x0180(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstMiningDrillCraft;              // 0x0181(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstShoulderCannonCraft;           // 0x0182(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstTekGrenadeLauncherCraft;       // 0x0183(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstTekCruiseMissileCraft;         // 0x0184(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstLaserTripWireCraft;            // 0x0185(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstTekClawsCraft;                 // 0x0186(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstHoverSkiffCraft;               // 0x0187(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstShapeshifterTransform;         // 0x0188(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstShapeshifterRevert;            // 0x0189(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstShapeshifterBloodlust;         // 0x018A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstExoSuit;                       // 0x018B(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstTekBow;                        // 0x018C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstTekPistol;                     // 0x018D(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstTekCropPlot;                   // 0x018E(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstHoversail;                     // 0x018F(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstPlantSpeciesR;                 // 0x0190(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToGen2BossBattleAvailable;            // 0x0191(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstGen2ExplorerNoteFound;         // 0x0192(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       CompanionHasReactedToFirstGen2DispatcherEncountered;     // 0x0193(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    NumRespawns;                                             // 0x0194(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4ZXC[0xB0];                                  // 0x0198(0x00B0) MISSED OFFSET (PADDING)

	public:
		void SaveProfile(bool bAllowForcedItemDownload);
		void OnSaveArkTributeFinished__DelegateSignature(bool Success);
		void OnLoadArkTributePlayersDataFinished__DelegateSignature(bool Success, TArray<struct FArkTributePlayerData> PlayersData, int32_t FailureResponseCode);
		void OnFinishedLoadingAllClustersItems(bool Success, const class FString& UserId, TArray<struct FItemNetInfo>* ArkItems);
		void OnAllClustersItemsRemoved(bool Success, const class FString& UserId, TArray<struct FItemNetID> ItemsIds);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ArkCloudInventoryData
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UArkCloudInventoryData : public UObject
	{
	public:
		struct FArkInventoryData                                   MyArkData;                                               // 0x0028(0x0030) NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.BaseBoxTrigger
	 * Size -> 0x0018 (FullSize[0x0488] - InheritedSize[0x0470])
	 */
	class ABaseBoxTrigger : public AActor
	{
	public:
		class USceneComponent*                                     SceneComp;                                               // 0x0470(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UBoxComponent*                                       TriggerBox;                                              // 0x0478(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		bool                                                       bUseBPOnTriggerBeginOverlap : 1;                         // 0x0480(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnTriggerEndOverlap : 1;                           // 0x0480(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_ELAP[0x7];                                   // 0x0481(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnTriggerEndOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnTriggerBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		bool IsCharacterTouchingTrigger(class APrimalCharacter* Character);
		void GetAllCharactersTouchingTrigger(TArray<class APrimalCharacter*>* OutCharacters);
		void BPOnTriggerEndOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void BPOnTriggerBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HazardTrigger
	 * Size -> 0x0020 (FullSize[0x04A8] - InheritedSize[0x0488])
	 */
	class AHazardTrigger : public ABaseBoxTrigger
	{
	public:
		struct FVector                                             Bounds;                                                  // 0x0488(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsActive;                                               // 0x0494(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3CWF[0x3];                                   // 0x0495(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastActivationTime;                                      // 0x0498(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		bool                                                       bConformToTerrain;                                       // 0x04A0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TX3T[0x7];                                   // 0x04A1(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnDeactivated();
		void OnCharacterExit(class APrimalCharacter* Character);
		void OnCharacterEnter(class APrimalCharacter* Character);
		void OnActivated();
		bool FindFloor(const struct FVector& TestLocation, struct FFloorSlopeData* FloorSlope, float DepthOverride, bool UseActorNormal);
		void Deactivate();
		void ClientActivation(bool bActivate);
		bool CanActivate();
		void Activate();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HazardTrigger_Slide
	 * Size -> 0x00E8 (FullSize[0x0590] - InheritedSize[0x04A8])
	 */
	class AHazardTrigger_Slide : public AHazardTrigger
	{
	public:
		class UAudioComponent*                                     SoundToPlay;                                             // 0x04A8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		TArray<class USplineComponent*>                            Splines;                                                 // 0x04B0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference
		TArray<class UParticleSystem*>                             SlideFX;                                                 // 0x04C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      FinalEmitter;                                            // 0x04D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      WarningEmitter;                                          // 0x04E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      ImpactEmitter;                                           // 0x04F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class USoundBase*                                          SlideSound;                                              // 0x0500(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    StructureDamage;                                         // 0x0508(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8HMI[0x4];                                   // 0x050C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              StructureDamageType;                                     // 0x0510(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SplineSeparation;                                        // 0x0518(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinTimeBetweenActivations;                               // 0x051C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SlideSpeed;                                              // 0x0520(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WaveWidth;                                               // 0x0524(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Impulse;                                                 // 0x0528(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinWarningInterval;                                      // 0x052C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxWarningInterval;                                      // 0x0530(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ActivationChance;                                        // 0x0534(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ActivationIncrement;                                     // 0x0538(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinProjectileInterval;                                   // 0x053C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxProjectileInterval;                                   // 0x0540(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ImpulseVelocityLimit;                                    // 0x0544(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              ProjectileClass;                                         // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WarningTimer;                                            // 0x0550(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      CurrentActivationChance;                                 // 0x0554(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      ProjectileTimer;                                         // 0x0558(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XJHL[0x4];                                   // 0x055C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSlideData>                                  SlideComponents;                                         // 0x0560(0x0010) ZeroConstructor, SaveGame, ContainsInstancedReference
		TArray<struct FVector>                                     SlidePositions;                                          // 0x0570(0x0010) ZeroConstructor, SaveGame
		unsigned char                                              UnknownData_E0S5[0x10];                                  // 0x0580(0x0010) MISSED OFFSET (PADDING)

	public:
		void SpawnWarningFX();
		void SpawnProjectile(const struct FVector& Location, const struct FVector& Heading);
		void RebuildSplines();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStaticData
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPrimalStaticData : public UObject
	{
	public:
		class UPrimalStaticData* STATIC_GetPrimalStaticData(class UClass* DataType);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PointOfInterestInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPointOfInterestInterface : public UInterface
	{
	public:
		void ViewPoint(class AActor* ViewedByActor);
		void UnviewPoint(class AActor* UnviewedByActor);
		void SetPointTagUniqueState(bool bNewUniqueState);
		struct FPointOfInterestData GetPointOfInterestData();
		class UClass* GetPointCustomData();
		bool CanBeViewed(class AActor* ByActor);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PointOfInterestCompanionInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPointOfInterestCompanionInterface : public UInterface
	{
	public:
		struct FPointOfInterestCompanionBehavior GetPointCompanionBehaviorData();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionTrigger
	 * Size -> 0x0448 (FullSize[0x08D0] - InheritedSize[0x0488])
	 */
	class AMissionTrigger : public ABaseBoxTrigger
	{
	public:
		unsigned char                                              UnknownData_ZY3U[0x10];                                  // 0x0488(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                TriggerKey;                                              // 0x0498(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    TriggerOrder;                                            // 0x04A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    CustomDataInt;                                           // 0x04A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CustomDataFloat;                                         // 0x04A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZXJQ[0x4];                                   // 0x04AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              CustomDataFloatArray;                                    // 0x04B0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		struct FVector                                             CustomDataVector;                                        // 0x04C0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SFH9[0x4];                                   // 0x04CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CustomDataString;                                        // 0x04D0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		struct FPointOfInterestData                                MyPointOfInterestData;                                   // 0x04E0(0x0140) Edit, Protected
		struct FPointOfInterestCompanionBehavior                   MyPointOfInterestCompanionBehavior;                      // 0x0620(0x02B0) Edit, Protected

	public:
		bool IsPointOfInterestValid();
		struct FPointOfInterestData GetMyPointOfInterestData();
		struct FPointOfInterestCompanionBehavior GetMyPointOfInterestCompanionBehavior();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.BasePlayerController
	 * Size -> 0x0028 (FullSize[0x0838] - InheritedSize[0x0810])
	 */
	class ABasePlayerController : public APlayerController
	{
	public:
		unsigned char                                              UnknownData_9LI2[0x28];                                  // 0x0810(0x0028) MISSED OFFSET (PADDING)

	public:
		void SimulateInputKey(const struct FKey& Key, bool bPressed);
		void ServerCheat(const class FString& Msg);
		void Say(const class FString& Msg);
		void ClientStartOnlineGame();
		void ClientSetSpectatorCamera(const struct FVector& CameraLocation, const struct FRotator& CameraRotation);
		void ClientSendRoundEndEvent(bool bIsWinner, int32_t ExpendedTimeInSeconds);
		void ClientGameStarted();
		void ClientEndOnlineGame();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.RadialSelectorHUD
	 * Size -> 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
	 */
	class URadialSelectorHUD : public UObject
	{
	public:
		int32_t                                                    NumDivisions;                                            // 0x0028(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      InnerDistance;                                           // 0x002C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      OuterDistance;                                           // 0x0030(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      OuterDistanceScaleCountOffset;                           // 0x0034(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      BaseUISizeY;                                             // 0x0038(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      SelectionDistanceOffset;                                 // 0x003C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      CenterImageSizeX;                                        // 0x0040(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      CenterImageSizeY;                                        // 0x0044(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UMaterialInstance*                                   MI;                                                      // 0x0048(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UTexture2D*                                          CenterImage;                                             // 0x0050(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UTexture2D*                                          SegmentTexture;                                          // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UTexture2D*                                          SelectedTexture;                                         // 0x0060(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UMaterialInstance*                                   RadialMaterial;                                          // 0x0068(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UFont*                                               TextFont;                                                // 0x0070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    CurrentSelection;                                        // 0x0078(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    TargetSelection;                                         // 0x007C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		float                                                      SelectionTime;                                           // 0x0080(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_OF49[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              DivisionAlpha;                                           // 0x0088(0x0010) ZeroConstructor, Transient, Protected
		TArray<class FString>                                      ActionNames;                                             // 0x0098(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		class UMaterialInstanceDynamic*                            Segment_SelectedDynamicMI;                               // 0x00A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		class UMaterialInstanceDynamic*                            Segment_UnselectedDynamicMI;                             // 0x00B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_R9YF[0x20];                                  // 0x00B8(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.RadialSelectorHUD_Custom
	 * Size -> 0x0068 (FullSize[0x0140] - InheritedSize[0x00D8])
	 */
	class URadialSelectorHUD_Custom : public URadialSelectorHUD
	{
	public:
		unsigned char                                              UnknownData_FPVW[0x60];                                  // 0x00D8(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TextScaleCountOffset;                                    // 0x0138(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NEG9[0x4];                                   // 0x013C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterHUD
	 * Size -> 0x0600 (FullSize[0x0B58] - InheritedSize[0x0558])
	 */
	class AShooterHUD : public AHUD
	{
	public:
		class UClass*                                              HurtCameraShake;                                         // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UUI_SavingOverlay*                                   SavingOverlay;                                           // 0x0560(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxDamageCameraShakeScale;                               // 0x0568(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxDamageCameraShakeSpeedInverse;                        // 0x056C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowAllPlayersWhenSpectating;                           // 0x0570(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bShowAllPlayersWhenSpectatingLocal;                      // 0x0571(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DI8B[0xE];                                   // 0x0572(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PlayerInfoRequestTimeInterval;                           // 0x0580(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JU4G[0x14];                                  // 0x0584(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPlayerHUDUI*                                        MyPlayerHUD;                                             // 0x0598(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UHUDCustomStatusWidget*                              MyPlayerCustomStatusHUD;                                 // 0x05A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UHUDActiveMissionWidget*                             MyPlayerActiveMissionHUD;                                // 0x05A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UHUDPointsOfInterestContainer*                       MyPlayerPointsOfInterestHUD;                             // 0x05B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UHUDPingsContainer*                                  MyPlayerPingHUD;                                         // 0x05B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UUI_LeaderboardWidget*                               MyPlayerLeaderboardHUD;                                  // 0x05C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UUI_Subtitles*                                       MySubtitlesHUD;                                          // 0x05C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UUI_HudOverlay*                                      MyOverlayHUD;                                            // 0x05D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UUI_HudOverlay*                                      MyTopOverlayHUD;                                         // 0x05D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UUI_ChatBox*                                         ChatBoxUI;                                               // 0x05E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              HubUITemplate;                                           // 0x05E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SurvivorProfileUITemplate;                               // 0x05F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ChangeFrequencyUITemplate;                               // 0x05F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              PlayerHUDUITemplate;                                     // 0x0600(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              PlayerHUDCustomStatusTemplate;                           // 0x0608(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              PlayerHUDActiveMissionTemplate;                          // 0x0610(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              PlayerHUDPointsOfInterestTemplate;                       // 0x0618(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              LeaderboardsUITemplate;                                  // 0x0620(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SubtitlesUITemplate;                                     // 0x0628(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SavingOverlayUITemplate;                                 // 0x0630(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              OverlayHUDUITemplate;                                    // 0x0638(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              TopOverlayHUDUITemplate;                                 // 0x0640(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              InventoryUITemplate;                                     // 0x0648(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MissionListUITemplate;                                   // 0x0650(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              AdminMangmentUITemplate;                                 // 0x0658(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ConsoleDedicatedUITemplate;                              // 0x0660(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              TribeManagerUITemplate;                                  // 0x0668(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              TribeWarUITemplate;                                      // 0x0670(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              PinEntryUITemplate;                                      // 0x0678(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              TextEntryUITemplate;                                     // 0x0680(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MapMarkersUITemplate;                                    // 0x0688(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SpawnUITemplate;                                         // 0x0690(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              AllPlayersListTemplate;                                  // 0x0698(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ChatBoxUITemplate;                                       // 0x06A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              TutorialUITemplate;                                      // 0x06A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowChatBoxByDefault;                                   // 0x06B0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UON1[0x7];                                   // 0x06B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              InventoryRadialSelectorTemplate;                         // 0x06B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MultiUseRadialSelectorTemplate;                          // 0x06C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              PlayerActionRadialSelectorTemplate;                      // 0x06C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              WhistleRadialSelectorTemplate;                           // 0x06D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              EmoteRadialSelectorTemplate;                             // 0x06D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              CustomRadialSelectorTemplate;                            // 0x06E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class URadialSelectorHUD*                                  CurrentRadialSelector;                                   // 0x06E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class URadialSelectorHUD_Inventory*                        InventoryRadialSelector;                                 // 0x06F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class URadialSelectorHUD_MultiUse*                         MultiUseRadialSelector;                                  // 0x06F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class URadialSelectorHUD_PlayerAction*                     PlayerActionRadialSelector;                              // 0x0700(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class URadialSelectorHUD_PlayerAction*                     WhistleRadialSelector;                                   // 0x0708(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class URadialSelectorHUD_PlayerAction*                     EmoteRadialSelector;                                     // 0x0710(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class URadialSelectorHUD_Custom*                           CustomRadialSelector;                                    // 0x0718(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_G088[0x8];                                   // 0x0720(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFont*                                               BigFont;                                                 // 0x0728(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UFont*                                               NormalFont;                                              // 0x0730(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UFont*                                               SmallFont;                                               // 0x0738(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          HitNotifyTexture;                                        // 0x0740(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          HUDMainTextureAtlas;                                     // 0x0748(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          HUDAssets02TextureAtlas;                                 // 0x0750(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          LowHealthOverlayTexture;                                 // 0x0758(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          HitMarkerTexture;                                        // 0x0760(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MultiUseUITemplate;                                      // 0x0768(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TimeToHideChat;                                          // 0x0770(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q8KH[0x4];                                   // 0x0774(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          DeathIcon;                                               // 0x0778(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          KilledIcon;                                              // 0x0780(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ChatPopupInterval;                                       // 0x0788(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CHCD[0x4];                                   // 0x078C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          SpeechBubble;                                            // 0x0790(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OQY1[0x30];                                  // 0x0798(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCanvasIcon                                         HitNotifyIcon[0x8];                                      // 0x07C8(0x00C0)
		struct FCanvasIcon                                         Crosshair[0x5];                                          // 0x0888(0x0078)
		struct FCanvasIcon                                         HitNotifyCrosshair;                                      // 0x0900(0x0018)
		unsigned char                                              UnknownData_WCS9[0x150];                                 // 0x0918(0x0150) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHudHidden;                                              // 0x0A68(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bShowChatPopup;                                          // 0x0A69(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_P7Q9[0x2E];                                  // 0x0A6A(0x002E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUI_Inventory*                                       CurrentOpenedInventory;                                  // 0x0A98(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UUI_Hub*                                             CurrentlyOpenedHubUI;                                    // 0x0AA0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bMultiUseIsDrawingUIHUD;                                 // 0x0AA8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_P7OR[0xF];                                   // 0x0AA9(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               LastTargetedActor;                                       // 0x0AB8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FHintReplacementKeysForKeyboardControls>     GenericGamepadReplacementsForKeyboardControls;           // 0x0AC0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_YJPP[0x78];                                  // 0x0AD0(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUI_Tutorial*                                        TutorialUI;                                              // 0x0B48(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IZ7C[0x8];                                   // 0x0B50(0x0008) MISSED OFFSET (PADDING)

	public:
		bool StartCustomWheelRadialSelector(const struct FCustomWheelSettings& WheelSettings, TArray<struct FCustomWheelEntry> Entries, bool bFromGamepad, class UObject* ForcedEntryTarget);
		void ShowSpawnUI(class APrimalStructure* FastTravelIgnoreBed);
		void ShowPinEntryUI(class AActor* aTargetable, bool bIsSetting, int32_t CustomIndex);
		void ShowMultiUseUIFor(class AActor* anActor, bool bFromGamepad);
		class UUI_MissionList* ShowMissionList(class UObject* FromDispatcher);
		void ShowMissionAlert(EMissionAlertType AlertType, const class FString& AlertTitle, TArray<struct FMissionAlertEntry> AlertEntries, float DisplayTime, class USoundBase* SoundToPlay, bool FlyoutFromTop);
		class UUI_Inventory* ShowInventory(class UPrimalInventoryComponent* InventoryComp);
		class UUI_EngramsMenu* ShowEngramsMenu(bool bInputDelay);
		void ShowChatBox(bool bShow, bool bIsFromNewChat);
		void SetAllowShowChatBox(bool bAllow);
		class FString ReplaceKeyboardControlsTextWithXboxControlIconPaths(const class FString& ActionKey);
		void NotifyOutOfAmmo();
		bool IsUsingCustomWheelRadialSelector();
		bool IsMissionAlertVisible(bool bGetTopAlertVisibility);
		bool IsChatBoxVisible();
		void HideTopMissionAlert();
		void HideMissionAlert();
		void HideChatBox();
		class UUI_Subtitles* GetSubtitlesWidget();
		class AShooterPlayerController* GetShooterPC();
		bool GetSelectedCustomWheelEntry(struct FCustomWheelEntry* SelectedEntry);
		class APlayerController* GetPlayerOwner();
		bool GetMultiUseRadialSelection(struct FMultiUseEntry* SelectedEntry, bool bIncludeTimedEntries);
		class UTexture2D* GetIconForKey(const class FString& ActionKey);
		struct FVector2D GetCurrentCrosshairScreenLocation();
		class UUI_ChatBox* GetChatBoxWidget();
		void GetAdditionalExplorerNoteDynamicMaterialParams(const struct FExplorerNoteEntry& ExplorerNote, TArray<struct FNameScalarPair>* ScalarMaterialParams, TArray<struct FNameColorPair>* ColorMaterialParams);
		class FString FormatTextureAsRichText(class UTexture2D* InTexture);
		class FString FormatRichTextWithKeyBindings(const class FString& InText, bool bIgnoreMarkup);
		class FString FormatRichTextWithColor(const class FString& InText, const struct FLinearColor& InColor);
		void ForceHUDHidden(bool bForcedHidden);
		void EndMultiUseRadialSelector();
		void EndCustomWheelRadialSelector();
		void DrawCrosshairOnScreen(const struct FVector2D& AtScreenLocation, float WithCrossSpread, const struct FColor& WithDrawColor, float WithAlphaPercent);
		void CancelCustomWheelRadialSelector();
		void BPUpdateHUDRichTextOverlaysByInstigator(class AActor* ByInstigator);
		void BPUpdateHUDRichTextOverlayAtIndex(const struct FHUDRichTextOverlayData& InOverlay, int32_t index);
		void BPUpdateHUDRichTextOverlay(const struct FHUDRichTextOverlayData& InOverlay);
		void BPUpdateAllHUDRichTextOverlays(TArray<struct FHUDRichTextOverlayData> InOverlayData);
		void BPSimulateHit(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator);
		class UPrimalUI* BPShowUIScene(class UClass* UISceneTemplate, class UObject* AssociatedObject1, class UObject* AssociatedObject2, int32_t ExtraID1, int32_t ExtraID2);
		void BPSetHUDRichTextOverlayVerticalWidgetAlignment(const struct FHUDRichTextOverlayData& InOverlay, EVerticalAlignment InAlignV, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
		void BPSetHUDRichTextOverlayVerticalScreenAnchor(const struct FHUDRichTextOverlayData& InOverlay, EVerticalAlignment InAnchorV, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
		void BPSetHUDRichTextOverlayUseAutoWrap(const struct FHUDRichTextOverlayData& InOverlay, bool InAutoWrap, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
		void BPSetHUDRichTextOverlayScale(const struct FHUDRichTextOverlayData& InOverlay, float InScale, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
		void BPSetHUDRichTextOverlayPosition(const struct FHUDRichTextOverlayData& InOverlay, const struct FVector2D& InPosition, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
		void BPSetHUDRichTextOverlayInstigator(const struct FHUDRichTextOverlayData& InOverlay, class AActor* InInstigator, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
		void BPSetHUDRichTextOverlayHorizontalWidgetAlignment(const struct FHUDRichTextOverlayData& InOverlay, EHorizontalAlignment InAlignH, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
		void BPSetHUDRichTextOverlayHorizontalScreenAnchor(const struct FHUDRichTextOverlayData& InOverlay, EHorizontalAlignment InAnchorH, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
		void BPSetHUDRichTextOverlayDisplayText(const struct FHUDRichTextOverlayData& InOverlay, const class FString& InString, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
		void BPSetHUDRichTextOverlayDefaultTextColor(const struct FHUDRichTextOverlayData& InOverlay, const struct FLinearColor& InColor, struct FHUDRichTextOverlayData* OutOverlay, bool bUpdateAfterSetting);
		void BPRemoveHUDRichTextOverlaysByInstigator(class AActor* ByInstigator);
		void BPRemoveHUDRichTextOverlayAtIndex(int32_t index);
		void BPRemoveHUDRichTextOverlay(const struct FHUDRichTextOverlayData& InOverlay);
		void BPRemoveAllHUDRichTextOverlays();
		TArray<struct FHUDRichTextOverlayData> BPGetHUDRichTextOverlays();
		void BPAddHUDRichTextOverlayAtIndex(const struct FHUDRichTextOverlayData& InOverlay, int32_t InsertAtIndex);
		void BPAddHUDRichTextOverlay(const struct FHUDRichTextOverlayData& InOverlay);
		void BPAddHUDNotification(const class FString& NotificationString, const struct FColor& NotificationColor, class UMaterialInterface* NotificationMaterial, class UTexture2D* NotificationTexture, float DisplayTime, float DisplayScale, bool bIsSingleton, class USoundBase* SoundToPlay, int32_t MessageTypeID, int32_t ItemMsgType, class UClass* ItemClass, const class FString& ItemName, int32_t ItemQuantity, float ItemQuantityFloat);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalInventoryComponent
	 * Size -> 0x04C0 (FullSize[0x0598] - InheritedSize[0x00D8])
	 */
	class UPrimalInventoryComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_WIEF[0x30];                                  // 0x00D8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class AShooterPlayerController>>     RemoteViewingInventoryPlayerControllers;                 // 0x0108(0x0010) ZeroConstructor, Transient
		TArray<class UPrimalItem*>                                 InventoryItems;                                          // 0x0118(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, SaveGame
		TArray<class UPrimalItem*>                                 EquippedItems;                                           // 0x0128(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, SaveGame
		TArray<class UPrimalItem*>                                 ItemSlots;                                               // 0x0138(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, SaveGame
		TArray<class UPrimalItem*>                                 ArkTributeItems;                                         // 0x0148(0x0010) ZeroConstructor, Transient
		TArray<class UPrimalItem*>                                 AllDyeColorItems;                                        // 0x0158(0x0010) ZeroConstructor, Transient
		TArray<struct FItemCraftQueueEntry>                        ItemCraftQueueEntries;                                   // 0x0168(0x0010) ZeroConstructor, Transient, SaveGame
		int32_t                                                    OverrideInventoryDefaultTab;                             // 0x0178(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor
		bool                                                       bInitializedMe : 1;                                      // 0x017C(0x0001) BIT_FIELD SaveGame, NoDestructor
		bool                                                       bReceivingEquippedItems : 1;                             // 0x017C(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bReceivingInventoryItems : 1;                            // 0x017C(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bReceivingArkInventoryItems : 1;                         // 0x017C(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bFreeCraftingMode : 1;                                   // 0x017C(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bCanEquipItems : 1;                                      // 0x017C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanUseWeaponAsEquipment : 1;                            // 0x017C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanInventoryItems : 1;                                  // 0x017C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bConsumeCraftingRepairingRequirementsOnStart : 1;        // 0x017D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowRemoteCrafting : 1;                                // 0x017D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowDeactivatedCrafting : 1;                           // 0x017D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventAutoDecreaseDurability : 1;                      // 0x017D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowRemoteRepairing : 1;                               // 0x017D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowItemStacking : 1;                                  // 0x017D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseCraftQueue : 1;                                      // 0x017D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bShowHiddenRemoteInventoryItems : 1;                     // 0x017D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceInventoryBlueprints : 1;                           // 0x017E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceInventoryNonRemovable : 1;                         // 0x017E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideDefaultInventoryItemsFromDisplay : 1;               // 0x017E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDataListPadMaxInventoryItems : 1;                       // 0x017E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAddMaxInventoryItemsToDefaultItems : 1;                 // 0x017E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCheckForAutoCraftBlueprints : 1;                        // 0x017E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsTributeInventory : 1;                                 // 0x017E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEquipmentMustRequireExplicitOwnerClass : 1;             // 0x017E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEquipmentPlayerForceRequireExplicitOwnerClass : 1;      // 0x017F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEquipmentForceIgnoreExplicitOwnerClass : 1;             // 0x017F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPInventoryRefresh : 1;                              // 0x017F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPInitializeInventory : 1;                           // 0x017F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAllowAddInventoryItem : 1;                         // 0x017F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		TArray<EPrimalEquipmentType>                               EquippableItemTypes;                                     // 0x0180(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bHideSaddleFromInventoryDisplay : 1;                     // 0x0190(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCraftingEnabled : 1;                                    // 0x0190(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRepairingEnabled : 1;                                   // 0x0190(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bReplicateComponent : 1;                                 // 0x0190(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyOneCraftQueueItem : 1;                              // 0x0190(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRemoteInventoryOnlyAllowTribe : 1;                      // 0x0190(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideCraftingMinDurabilityRequirement : 1;           // 0x0190(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRemoteInventoryAllowRemoveItems : 1;                    // 0x0190(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRemoteInventoryAllowAddItems : 1;                       // 0x0191(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowRemoteInventory : 1;                               // 0x0191(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseCheatInventory : 1;                                  // 0x0191(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowAddingToArkTribute : 1;                            // 0x0191(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRemoteInventoryOnlyAllowSelf : 1;                       // 0x0191(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bMaxInventoryWeightUseCharacterStatus : 1;               // 0x0191(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventDropInventoryDeposit : 1;                        // 0x0191(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bShowItemDefaultFolders : 1;                             // 0x0191(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisableDropAllItems : 1;                                // 0x0192(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreMaxInventoryItems : 1;                            // 0x0192(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_FJYF[0x1];                                   // 0x0193(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CraftingItemSpeed;                                       // 0x0194(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FItemMultiplier>                             ItemSpoilingTimeMultipliers;                             // 0x0198(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bIsSecondaryInventory : 1;                               // 0x01A8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRemoteOnlyAllowBlueprintsOrItemClasses : 1;             // 0x01A8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_V83O : 2;                                    // 0x01A8(0x0001) BIT_FIELD (PADDING)
		bool                                                       bPreventInventoryViewTrace : 1;                          // 0x01A8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSpawnActorOnTopOfStructure : 1;                         // 0x01A8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDropPhysicalInventoryDeposit : 1;                       // 0x01A8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseExtendedCharacterCraftingFunctionality : 1;          // 0x01A8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceGenerateItemSets : 1;                              // 0x01A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPHandleAccessInventory : 1;                            // 0x01A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bGivesAchievementItems : 1;                              // 0x01A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPAllowUseInInventory : 1;                              // 0x01A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPRemoteInventoryAllowRemoveItems : 1;                  // 0x01A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPRemoteInventoryGetMaxVisibleSlots : 1;             // 0x01A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetExtraItemDisplay : 1;                           // 0x01A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPNotifyItemAdded : 1;                                  // 0x01A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPNotifyItemRemoved : 1;                                // 0x01AA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPNotifyItemQuantityUpdated : 1;                        // 0x01AA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPOverrideItemMinimumUseInterval : 1;                   // 0x01AA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPForceCustomRemoteInventoryAllowAddItems : 1;          // 0x01AA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPForceCustomRemoteInventoryAllowRemoveItems : 1;       // 0x01AA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceInventoryNotifyCraftingFinished : 1;               // 0x01AA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowWorldSettingsInventoryComponentAppends : 1;        // 0x01AA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventCraftingResourceConsumption : 1;                 // 0x01AA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideInventoryDepositClassDontForceDrop : 1;         // 0x01AB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPIsCraftingAllowed : 1;                             // 0x01AB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPRemoteInventoryAllowCrafting : 1;                  // 0x01AB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNotifyAddedOnClientReceive : 1;                         // 0x01AB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsTaxidermyBase : 1;                                    // 0x01AB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDeferCheckForAutoCraftBlueprintsOnInventoryChange : 1;  // 0x01AB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bShowQuickSlotPanel : 1;                                 // 0x01AB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_J7XM[0x4];                                   // 0x01AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGenericDataListEntry*                               ExtraItemDisplay;                                        // 0x01B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    MaxInventoryItems;                                       // 0x01B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxInventoryWeight;                                      // 0x01BC(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper
		unsigned char                                              TribeGroupInventoryRank;                                 // 0x01C0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5OBV[0x3];                                   // 0x01C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NumSlots;                                                // 0x01C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxItemCraftQueueEntries;                                // 0x01C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TE3O[0x4];                                   // 0x01CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              RemoteInventoryDescriptionString;                        // 0x01D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              EngramRequirementClassOverride;                          // 0x01E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      RemoteAddItemOnlyAllowItemClasses;                       // 0x01E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      RemoteAddItemPreventItemClasses;                         // 0x01F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FEventItem>                                  EventItems;                                              // 0x0208(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      DefaultInventoryItems;                                   // 0x0218(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      DefaultInventoryItems2;                                  // 0x0228(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      DefaultInventoryItems3;                                  // 0x0238(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      DefaultInventoryItems4;                                  // 0x0248(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<TAssetPtr<class UObject>>                           DefaultInventoryItemsClasses;                            // 0x0258(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FString>                                      DefaultInventoryItemsRandomCustomStrings;                // 0x0268(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<float>                                              DefaultInventoryItemsRandomCustomStringsWeights;         // 0x0278(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      CheatInventoryItems;                                     // 0x0288(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      DefaultEquippedItems;                                    // 0x0298(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      DefaultEquippedItemSkins;                                // 0x02A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      DefaultSlotItems;                                        // 0x02B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FItemSpawnActorClassOverride>                ItemSpawnActorClassOverrides;                            // 0x02C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      OnlyAllowCraftingItemClasses;                            // 0x02D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<unsigned char>                                      DefaultEngrams;                                          // 0x02E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<unsigned char>                                      DefaultEngrams2;                                         // 0x02F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<unsigned char>                                      DefaultEngrams3;                                         // 0x0308(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<unsigned char>                                      DefaultEngrams4;                                         // 0x0318(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<float>                                              DefaultInventoryQualities;                               // 0x0328(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              InventoryNameOverride;                                   // 0x0338(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      MaxRemoteInventoryViewingDistance;                       // 0x0348(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ActiveInventoryRefreshInterval;                          // 0x034C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    AbsoluteMaxInventoryItems;                               // 0x0350(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6CW2[0x4];                                   // 0x0354(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastInventoryRefreshTime;                                // 0x0358(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		class UClass*                                              DroppedItemTemplateOverride;                             // 0x0360(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      ForceAllowItemStackings;                                 // 0x0368(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		struct FRotator                                            DropItemRotationOffset;                                  // 0x0378(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2T43[0x4];                                   // 0x0384(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FItemCraftingConsumptionReplenishment>       ItemCraftingConsumptionReplenishments;                   // 0x0388(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      MaxItemCooldownTimeClear;                                // 0x0398(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5EC7[0x4];                                   // 0x039C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FItemMultiplier>                             MaxItemTemplateQuantities;                               // 0x03A0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class USoundBase*                                          ItemCraftingSoundOverride;                               // 0x03B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FActorClassAttachmentInfo>                   WeaponAsEquipmentAttachmentInfos;                        // 0x03B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference
		TArray<class UPrimalItem*>                                 CraftingItems;                                           // 0x03C8(0x0010) ZeroConstructor, SaveGame
		int32_t                                                    DisplayDefaultItemInventoryCount;                        // 0x03D8(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0R1H[0x2C];                                  // 0x03DC(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastRefreshCheckItemTime;                                // 0x0408(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8YFJ[0x14];                                  // 0x0410(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinItemSets;                                             // 0x0424(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxItemSets;                                             // 0x0428(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NumItemSetsPower;                                        // 0x042C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bSetsRandomWithoutReplacement : 1;                       // 0x0430(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAllowAllUseInInventory : 1;                        // 0x0430(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPIsValidCraftingResource : 1;                       // 0x0430(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseParentStructureIsValidCraftingResource : 1;          // 0x0430(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSetCraftingEnabledCheckForAutoCraftBlueprints : 1;      // 0x0430(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPRemoteInventoryAllowViewing : 1;                   // 0x0430(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllDefaultInventoryIsEngrams : 1;                       // 0x0430(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanGrindItems : 1;                                 // 0x0430(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bGrinderCanGrindAll : 1;                                 // 0x0431(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_TFXN[0x6];                                   // 0x0432(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSupplyCrateItemSet>                         ItemSets;                                                // 0x0438(0x0010) Edit, ZeroConstructor
		TArray<struct FSupplyCrateItemSet>                         AdditionalItemSets;                                      // 0x0448(0x0010) Edit, ZeroConstructor
		class UClass*                                              ItemSetsOverride;                                        // 0x0458(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<float>                                              SetQuantityWeights;                                      // 0x0460(0x0010) Edit, ZeroConstructor
		TArray<float>                                              SetQuantityValues;                                       // 0x0470(0x0010) Edit, ZeroConstructor
		class USoundBase*                                          ItemRemovedBySound;                                      // 0x0480(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundBase*                                          OpenInventorySound;                                      // 0x0488(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundBase*                                          CloseInventorySound;                                     // 0x0490(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxInventoryAccessDistance;                              // 0x0498(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3KXI[0x4];                                   // 0x049C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FServerCustomFolder>                         CustomFolderItems;                                       // 0x04A0(0x0010) ZeroConstructor, SaveGame
		unsigned char                                              UnknownData_Z661[0x10];                                  // 0x04B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      ForceAllowCraftingForInventoryComponents;                // 0x04C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FItemMultiplier>                             ItemClassWeightMultipliers;                              // 0x04D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      GenerateItemSetsQualityMultiplierMin;                    // 0x04E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GenerateItemSetsQualityMultiplierMax;                    // 0x04E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DefaultCraftingRequirementsMultiplier;                   // 0x04E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    DefaultCraftingQuantityMultiplier;                       // 0x04EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    ActionWheelAccessInventoryPriority;                      // 0x04F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    SavedForceDefaultInventoryRefreshVersion;                // 0x04F4(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    ForceDefaultInventoryRefreshVersion;                     // 0x04F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3VDB[0x4];                                   // 0x04FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      TamedDinoForceConsiderFoodTypes;                         // 0x0500(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_CF98[0x10];                                  // 0x0510(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          OverrideCraftingFinishedSound;                           // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QPAI[0x18];                                  // 0x0528(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             GroundDropTraceLocationOffset;                           // 0x0540(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8C9F[0x4];                                   // 0x054C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnInventoryItemAdded;                                    // 0x0550(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnInventoryItemRemoved;                                  // 0x0560(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		bool                                                       bHideTributeUploadDinosPanel : 1;                        // 0x0570(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreDLCEquipRestrictions : 1;                         // 0x0570(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreEngramEquipRestrictions : 1;                      // 0x0570(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnTransferAll : 1;                                 // 0x0570(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisableTransferEquipmentOnTransferAll : 1;              // 0x0570(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_EPNY[0x7];                                   // 0x0571(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FOverrideMultiuseButtonStyle>                MultiUseButtonStyleOverrides;                            // 0x0578(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bUseCustomSorting;                                       // 0x0588(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceAllowCustomFolders;                                // 0x0589(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0QB8[0x6];                                   // 0x058A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastCraftRequestTime;                                    // 0x0590(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor

	public:
		void UpdateTribeGroupInventoryRank(unsigned char NewRank);
		void UpdateNetWeaponClipAmmo(class UPrimalItem* anItem, int32_t ammo);
		void TransferItemToInventory(class UPrimalInventoryComponent* toInventory, int32_t ItemIndex);
		void TransferAllItemsToInventoryWithFilter(class UPrimalInventoryComponent* toInventory, TArray<class UClass*> OfItemClasses, TArray<class UClass*> IgnoreItemClasses, bool bAllowSubclasses);
		void TransferAllItemsToInventory(class UPrimalInventoryComponent* toInventory);
		void TransferAllItemsOfClassToInventory(class UPrimalInventoryComponent* toInventory, class UClass* OfItemClass, bool bAllowSubclasses);
		void TransferAllItemsOfClassesToInventory(class UPrimalInventoryComponent* toInventory, TArray<class UClass*> OfItemClasses, bool bAllowSubclasses);
		void StopAllCraftingRepairing();
		class ADroppedItem* STATIC_StaticDropNewItemWithInfo(class AActor* forActor, const struct FItemNetInfo& ItemInfo, class UClass* TheDroppedTemplateOverride, const struct FRotator& DroppedRotationOffset, bool bOverrideSpawnTransform, const struct FVector& LocationOverride, const struct FRotator& RotationOverride, bool bPreventDropImpulse, bool bThrow, bool bSecondaryAction, bool bSetItemDropLocation, class UStaticMesh* DroppedMeshOverride, const struct FVector& DroppedScaleOverride, class UMaterialInterface* DroppedMaterialOverride, float DroppedLifeSpanOverride);
		class ADroppedItem* STATIC_StaticDropNewItem(class AActor* forActor, class UClass* AnItemClass, float ItemQuality, bool bForceNoBlueprint, int32_t quantityOverride, bool bForceBlueprint, class UClass* TheDroppedTemplateOverride, const struct FRotator& DroppedRotationOffset, bool bOverrideSpawnTransform, const struct FVector& LocationOverride, const struct FRotator& RotationOverride, bool bPreventDropImpulse, bool bThrow, bool bSecondaryAction, bool bSetItemDropLocation, class UStaticMesh* DroppedMeshOverride, const struct FVector& DroppedScaleOverride, class UMaterialInterface* DroppedMaterialOverride, float DroppedLifeSpanOverride);
		void SetNextItemSpoilingID(const struct FItemNetID& NextItemID);
		void SetNextItemConsumptionID(const struct FItemNetID& NextItemID);
		void SetCraftingEnabled(bool bEnable);
		void ServerSplitItemStack(const struct FItemNetID& ItemId, int32_t AmountToSplit);
		void ServerSelectedCustomItemAction(const struct FItemNetID& ItemId, const class FName& SelectedOption, class AShooterPlayerController* ForPC);
		void ServerRequestItems(class AShooterPlayerController* ForPC, bool bEquippedItems, bool bIsFirstSpawn);
		void ServerRepairItem(const struct FItemNetID& ItemId, class AShooterPlayerController* ByPC, bool bRepairIgnoreInventoryRequirement, float RepairPercentage, float RepairSpeedMultiplier);
		void ServerRemoveItemFromSlot(const struct FItemNetID& ItemId);
		void ServerMergeItemStack(const struct FItemNetID& ItemId);
		void ServerMakeRecipeItem(class APrimalStructureItemContainer* Container, const struct FItemNetID& NoteToConsume, class UClass* RecipeItemTemplate, const class FString& CustomName, const class FString& CustomDescription, TArray<struct FColor> CustomColors, TArray<struct FCraftingResourceRequirement> CustomRequirements);
		void ServerForceMergeItemStack(const struct FItemNetID& Item1ID, const struct FItemNetID& Item2ID);
		void ServerCraftItem(struct FItemNetID* ItemId, class AShooterPlayerController* ByPC);
		void ServerAddItemToSlot(const struct FItemNetID& ItemId, int32_t SlotIndex);
		bool RemoveItem(const struct FItemNetID& ItemId, bool bDoDrop, bool bSecondryAction, bool bForceRemoval, bool showHUDMessage);
		bool RemoteInventoryAllowViewing(class AShooterPlayerController* PC, float MaxAllowedDistanceOffset);
		bool RemoteInventoryAllowRepairingItems(class AShooterPlayerController* PC, bool bIgnoreEnabled);
		bool RemoteInventoryAllowCraftingItems(class AShooterPlayerController* PC, bool bIgnoreEnabled);
		bool OverrideUseItem(class UPrimalItem* theItem);
		void NotifyClientsDurabilityChange(class UPrimalItem* anItem);
		bool IsRepairingAllowed();
		bool IsOnCraftRequestCooldown();
		bool IsLocalToPlayer(class AShooterPlayerController* ForPC);
		bool IsLocal();
		bool IsCraftingAllowed(class UPrimalItem* anItem);
		bool IsAtMaxInventoryItems();
		bool IsAllowedInventoryAccess(class APlayerController* ForPC);
		void InventoryViewersStopLocalSound(class USoundBase* aSound);
		void InventoryViewersPlayLocalSound(class USoundBase* aSound, bool bAttach);
		void InventoryRemoteViewersChanged__DelegateSignature(class UPrimalInventoryComponent* inventory);
		void InventoryRefresh();
		void InventoryItemRemoved__DelegateSignature(class UPrimalInventoryComponent* inventory, class UPrimalItem* Item, int32_t AmountRemoved);
		void InventoryItemAdded__DelegateSignature(class UPrimalInventoryComponent* inventory, class UPrimalItem* Item, int32_t AmountAdded, bool bEquippedItem);
		bool InventoryCustomSortPredicate(class UPrimalItem* LeftItem, class UPrimalItem* RightItem);
		void InventoryCustomFilter(TArray<class UPrimalItem*> UnfilteredItemsList, TArray<class UPrimalItem*>* FilteredItemsList);
		void InitializeInventory();
		bool HasResources(TArray<struct FCraftingResourceRequirement> RequiredResources);
		bool HasItemsEquipped(TArray<class UClass*> ItemTemplates, bool bRequiresExactClassMatch, bool bOnlyArkItems, bool bEnsureAllItems);
		float GetTotalEquippedItemStat(EPrimalItemStat statType);
		int32_t GetMaxInventoryItems(bool bIgnoreHiddenDefaultInventory);
		int32_t GetItemTemplateQuantity(class UClass* ItemTemplate, class UPrimalItem* IgnoreItem, bool bIgnoreBlueprints, bool bCheckValidForCrafting, bool bRequireExactClassMatch, bool bForceCheckForDupes);
		int32_t GetInventoryUpdatedFrame();
		void GetGrinderSettings(int32_t* MaxQuantityToGrind, float* GrindGiveItemsPercent, int32_t* MaxItemsToGivePerGrind);
		class UPrimalItem* GetEquippedItemOfType(EPrimalEquipmentType aType);
		class UPrimalItem* GetEquippedItemOfClass(class UClass* ItemClass);
		float GetEquippedArmorRating(EPrimalEquipmentType equipmentType);
		bool GenerateCustomCrateItems(class UClass* SourceClass, TArray<struct FSupplyCrateItemSet> CustomItemSets, float CustomMinItemSets, float CustomMaxItemSets, float CustomNumItemSetsPower, bool bCustomSetsRandomWithoutReplacement, TArray<class UPrimalItem*>* GeneratedItems, float MinQualityMultiplier, float MaxQualityMultiplier, int32_t NumPasses, float QuantityMultiplier, float SetPowerWeight, float MaxItemDifficultyClamp, bool bIsMissionReward);
		bool GenerateCrateItems(float MinQualityMultiplier, float MaxQualityMultiplier, int32_t NumPasses, float QuantityMultiplier, float SetPowerWeight, float MaxItemDifficultyClamp);
		TArray<class UPrimalItem*> FindAllItemsOfType(class UClass* ItemTemplate, bool bRequiresExactClassMatch, bool bIncludeInventoryItems, bool bIncludeEquippedItems, bool bIncludeArkTributeItems, bool bIncludeSlotItems, bool bIncludeBlueprints, bool bIncludeEngrams);
		class ADroppedItem* EjectItem(const struct FItemNetID& ItemId, bool bPreventImpule, bool bForceEject, bool bSetItemLocation, const struct FVector& LocationOverride, bool showHUDMessage, class UClass* TheDroppedTemplateOverride, bool bAssignToTribeForPickup, int32_t AssignedTribeID);
		bool ConsumeResources(TArray<struct FCraftingResourceRequirement> Resources);
		void ConsumeArmorDurability(float ConsumptionAmount, bool bAllArmorTypes, EPrimalEquipmentType SpecificArmorType);
		void ClientUpdateFreeCraftingMode(bool bNewFreeCraftingModeValue);
		void ClientOnArkTributeItemsAdded();
		void ClientItemMessageNotification(const struct FItemNetID& ItemId, EPrimalItemMessage ItemMessageType);
		void ClearCraftQueue(bool bForceClearActiveCraftRepair);
		bool CanGrindItems(class AShooterPlayerController* PC);
		bool CanGrindItem(class UPrimalItem* Item);
		bool CanEquipItem(class UPrimalItem* anItem);
		void BPRequestedInventoryItems(class AShooterPlayerController* ForPC);
		int32_t BPRemoteInventoryGetMaxVisibleSlots(int32_t NumItems, class AShooterPlayerController* PC, bool bIsLocal);
		bool BPRemoteInventoryAllowViewing(class AShooterPlayerController* PC);
		bool BPRemoteInventoryAllowRemoveItems(class AShooterPlayerController* PC, class UPrimalItem* anItemToTransfer);
		bool BPRemoteInventoryAllowCrafting(class AShooterPlayerController* PC);
		bool BPRemoteInventoryAllowAddItems(class AShooterPlayerController* PC);
		bool BPRemoteInventoryAllowAddItem_SpecificQuantity(class AShooterPlayerController* PC, class UPrimalItem* anItem, int32_t SpecificQuantityIn, int32_t* SpecificQuantityOut);
		bool BPRemoteInventoryAllowAddItem(class AShooterPlayerController* PC, class UPrimalItem* anItem);
		bool BPPreventEquipItemType(EPrimalEquipmentType equipmentType);
		bool BPPreventEquipItem(class UPrimalItem* theItem);
		void BPPreInitDefaultInventory();
		void BPPostInitDefaultInventory();
		float BPOverrideItemMinimumUseInterval(class UPrimalItem* theItem);
		void BPOnTransferAll(class UPrimalInventoryComponent* toInventory);
		void BPNotifyItemRemoved(class UPrimalItem* anItem);
		void BPNotifyItemQuantityUpdated(class UPrimalItem* anItem, int32_t amount);
		void BPNotifyItemAdded(class UPrimalItem* anItem, bool bEquipItem);
		bool BPIsValidCraftingResource(class UPrimalItem* theItem);
		bool BPIsCraftingAllowed(class UPrimalItem* anItem);
		void BPInventoryRefresh();
		void BPInitializeInventory();
		int32_t BPIncrementItemTemplateQuantity(class UClass* ItemTemplate, int32_t amount, bool bReplicateToClient, bool bIsBlueprint, bool bRequireExactClassMatch, bool bIsCraftingResourceConsumption, bool bIsFromUseConsumption, bool bIsArkTributeItem, class UPrimalItem* UseSpecificItem, bool bDontExceedMaxItems);
		class UPrimalItem* BPGetItemOfTemplate(class UClass* ItemTemplate, bool bOnlyInventoryItems, bool bOnlyEquippedItems, bool IgnoreItemsWithFullQuantity, bool bFavorSlotItems, bool bIsBlueprint, bool bRequiresExactClassMatch, bool bIgnoreSlotItems, bool bOnlyArkItems, bool bPreferEngram, bool bIsForCraftingConsumption);
		void BPGetExtraItemDisplay(bool* bShowExtraItem, class FString* Description, class FString* CustomString, class UTexture2D** EntryIcon, class UMaterialInterface** EntryMaterial);
		class UPrimalItem* BPFindItemWithID(int32_t ItemID1, int32_t ItemID2);
		void BPDropInventoryDeposit(double DestroyAtTime, int32_t OverrideMaxItemsDropped, bool bOverrideDepositLocation, const struct FVector& DepositLocationOverride);
		class APrimalStructureItemContainer* BPDropForceLocationInventoryDeposit(double DestroyAtTime, int32_t OverrideMaxItemsDropped, const struct FVector& DepositLocationOverride, int32_t DeadPlayerID);
		bool BPCustomRemoteInventoryAllowRemoveItems(class AShooterPlayerController* PC, class UPrimalItem* anItemToTransfer, int32_t RequestedQuantity, bool bRequestedByPlayer, bool bRequestDropping);
		bool BPCustomRemoteInventoryAllowAddItems(class AShooterPlayerController* PC, class UPrimalItem* anItem, int32_t anItemQuantityOverride, bool bRequestedByPlayer);
		class APrimalStructureItemContainer* BPCreateDropItemInventoryEmpty(double DestroyAtTime, class UClass* OverrideInventoryDepositClass, class APrimalStructureItemContainer* CopyStructureValues, class AActor* GroundIgnoreActor, int32_t DeadPlayerID, float DropInventoryOnGroundTraceDistance, bool bOverrideDepositLocation, const struct FVector& DepositLocationOverride);
		void BPCraftingFinishedNotification(class UPrimalItem* itemToBeCrafted);
		bool BPAllowUseInInventory(class UPrimalItem* theItem, bool bIsRemoteInventory, class AShooterPlayerController* ByPC);
		bool BPAllowAddInventoryItem(class UPrimalItem* Item, int32_t RequestedQuantity, bool bOnlyAddAll);
		void BPAccessedInventory(class AShooterPlayerController* ForPC);
		bool AllowAddInventoryItem_OnlyAddAll(class UPrimalItem* anItem);
		bool AllowAddInventoryItem_MaxQuantity(class UPrimalItem* anItem, int32_t requestedQuantityIn, int32_t* requestedQuantityOut);
		bool AllowAddInventoryItem_AnyQuantity(class UPrimalItem* anItem);
		class UPrimalItem* AddItemObjectEx(class UPrimalItem* anItem, bool bEquipItem, bool bAddToSlot, bool bDontStack, bool bShowHUDNotification, bool bDontRecalcSpoilingTime, bool bForceIncompleteStacking, class AShooterCharacter* OwnerPlayer, bool bClampStats, class UPrimalItem* InsertAfterItem, bool bInsertAtItemInstead);
		class UPrimalItem* AddItemObject(class UPrimalItem* anItem);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalPlayerData
	 * Size -> 0x04E8 (FullSize[0x0510] - InheritedSize[0x0028])
	 */
	class UPrimalPlayerData : public UObject
	{
	public:
		struct FPrimalPlayerDataStruct                             MyData;                                                  // 0x0028(0x0450) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TArray<class UPrimalBuffPersistentData*>                   MyPersistentBuffDatas;                                   // 0x0478(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LZ72[0x58];                                  // 0x0488(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FBossEngramsSoftReferenceMapping>            BossEngramReferenceMap;                                  // 0x04E0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		TArray<class FName>                                        RedeemedWorldItemSets;                                   // 0x04F0(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<class FName>                                        RedeemedWorldEquipSets;                                  // 0x0500(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic

	public:
		bool SetPlayerHexagonCount(int32_t NewHexagonCount);
		void SetChibiLevels(int32_t newLevels, class AShooterPlayerController* ForPC);
		void SavePlayerData(class UWorld* ForWorld);
		class FString LinkedPlayerIDString();
		bool HasUnlockedAllExplorerNotes();
		bool HasGeneralizedAchievementTag(const class FName& Tag);
		void GrantGeneralizedAchievementTag(const class FName& ObtainedAchievementTag, class AShooterPlayerController* ForPC);
		class FString GetUniqueIdString();
		class AShooterPlayerState* GetPlayerState(class AShooterPlayerState* ignorePlayerState, bool bOnlyCheckExistingPlayers);
		int32_t GetPlayerHexagonCount();
		class AShooterCharacter* FindCharacterForPlayer(class UWorld* inWorld);
		void BPForceDefeatedBoss(int32_t DifficultyIndex, const class FName& BossName, class AShooterPlayerController* PlayerController);
		void BPCreatedNewPlayerData();
		void BPApplyToPlayerCharacter(class AShooterPlayerState* ForPlayerState, class AShooterCharacter* NewPlayerCharacter);
		void BPAppliedToPlayerState(class AShooterPlayerState* ForPlayerState);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterPlayerState
	 * Size -> 0x0A20 (FullSize[0x0F18] - InheritedSize[0x04F8])
	 */
	class AShooterPlayerState : public APlayerState
	{
	public:
		unsigned char                                              UnknownData_S8BU[0x30];                                  // 0x04F8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPrimalPlayerData*                                   MyPlayerData;                                            // 0x0528(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FPrimalPlayerDataStruct                             MyPlayerDataStruct;                                      // 0x0530(0x0450) Net, Transient
		class UClass*                                              DefaultItemSlotClasses[0xA];                             // 0x0980(0x0050) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              DefaultItemSlotEngrams[0xA];                             // 0x09D0(0x000A) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GAXI[0x6];                                   // 0x09DA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTribeData                                          MyTribeData;                                             // 0x09E0(0x0138) Net, Transient
		struct FTribeData                                          LastTribeInviteData;                                     // 0x0B18(0x0138) Transient
		unsigned char                                              UnknownData_UQZS[0x38];                                  // 0x0C50(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TotalEngramPoints;                                       // 0x0C88(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    FreeEngramPoints;                                        // 0x0C8C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      EngramItemBlueprints;                                    // 0x0C90(0x0010) Net, ZeroConstructor, RepNotify
		unsigned char                                              UnknownData_0GJV[0x50];                                  // 0x0CA0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     NextAllowedRespawnTime;                                  // 0x0CF0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     LastFlexPipeRefreshConnectionsNetworkTime;               // 0x0CF8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      AllowedRespawnInterval;                                  // 0x0D00(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MCHM[0x4];                                   // 0x0D04(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastTimeDiedToEnemyTeam;                                 // 0x0D08(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    CurrentlySelectedDinoOrderGroup;                         // 0x0D10(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1T02[0x4];                                   // 0x0D14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDinoOrderGroup                                     DinoOrderGroups[0xA];                                    // 0x0D18(0x01E0) Transient
		double                                                     GenesisAbilityErrorLastTime;                             // 0x0EF8(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     NextAllowTurretCopySettingsTime;                         // 0x0F00(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KCK8[0x8];                                   // 0x0F08(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bQuitter : 1;                                            // 0x0F10(0x0001) BIT_FIELD NoDestructor, Protected
		unsigned char                                              UnknownData_4XMX[0x7];                                   // 0x0F11(0x0007) MISSED OFFSET (PADDING)

	public:
		void ServerUnlockEngram(class UClass* forItemEntry, bool bNotifyPlayerHUD, bool bForceUnlock);
		void ServerTribeRequestRemoveRankGroup(int32_t RankGroupIndex);
		void ServerTribeRequestNewAlliance(const class FString& AllianceName);
		void ServerTribeRequestApplyRankGroupSettings(int32_t RankGroupIndex, const struct FTribeRankGroup& newGroupSettings);
		void ServerTribeRequestAddRankGroup(const class FString& GroupName);
		void ServerSetSelectedDinoOrderGroup(int32_t newGroup);
		void ServerSetDinoGroupName(int32_t groupIndex, const class FString& GroupName);
		void ServerSetDefaultItemSlotClass(int32_t slotNum, class UClass* ItemClass, bool bIsEngram);
		void ServerRequestTransferOwnershipInMyTribe(int32_t PlayerIndexInTribe);
		void ServerRequestSpawnPointsForDownloadedCharacters(uint64_t PlayerDataID, int32_t IgnoreBedID);
		void ServerRequestSetTribeMemberGroupRank(int32_t PlayerIndexInTribe, int32_t RankGroupIndex);
		void ServerRequestSetTribeGovernment(const struct FTribeGovernment& TribeGovernment);
		void ServerRequestRenameTribe(const class FString& ServerRequestRenameTribe);
		void ServerRequestRemovePlayerIndexFromMyTribe(int32_t PlayerIndexInTribe);
		void ServerRequestRemoveAllianceMember(uint32_t AllianceID, uint32_t MemberID);
		void ServerRequestPromotePlayerInMyTribe(int32_t PlayerIndexInTribe);
		void ServerRequestPromoteAllianceMember(uint32_t AllianceID, uint32_t MemberID);
		void ServerRequestMySpawnPoints(int32_t IgnoreBedID, class UClass* FilterClass);
		void ServerRequestLeaveTribe();
		void ServerRequestLeaveAlliance(uint32_t AllianceID);
		void ServerRequestDinoOrderGroups();
		void ServerRequestDemotePlayerInMyTribe(int32_t PlayerIndexInTribe);
		void ServerRequestCreateNewTribe(const class FString& TribeName, const struct FTribeGovernment& TribeGovernment);
		void ServerRequestCreateNewPlayer(const struct FPrimalPlayerCharacterConfigStructReplicated& PlayerCharacterConfig);
		void ServerRequestApplyEngramPoints(class UClass* forItemEntry);
		void ServerRejectTribeWar(int32_t EnemyTeamID);
		void ServerGetServerOptions();
		void ServerGetPlayerWhiteListedData();
		void ServerGetPlayerConnectedData();
		void ServerGetPlayerBannedData();
		void ServerGetPlayerAdministratorData();
		void ServerGetAllPlayerNamesAndLocations();
		void ServerGetAlivePlayerConnectedData();
		void ServerDinoOrderGroup_RemoveEntryByIndex(int32_t groupIndex, bool bIsClass, int32_t entryIndex);
		void ServerDinoOrderGroup_Clear(int32_t groupIndex, bool bClearClasses, bool bClearChars);
		void ServerDinoOrderGroup_AddOrRemoveDinoClass(int32_t groupIndex, class UClass* DinoClass, bool bAdd);
		void ServerDinoOrderGroup_AddOrRemoveDinoCharacter(int32_t groupIndex, class APrimalDinoCharacter* DinoCharacter, bool bAdd);
		void ServerDeclareTribeWar(int32_t EnemyTeamID, int32_t StartDayNum, int32_t EndDayNumber, float WarStartTime, float WarEndTime);
		void ServerAcceptTribeWar(int32_t EnemyTeamID);
		void SendTribeInviteData(const struct FTribeData& TribeInviteData);
		void ResetFlexPipeGlobalCooldown();
		void OnRep_UpdatedEngrams();
		void NotifyUniqueDinoDownloaded(const class FString& TheDinoName);
		void NotifyUniqueDinoDownloadAllowed(const class FString& TheDinoName);
		void NotifyTribememberLeft(const class FString& ThePlayerName);
		void NotifyTribememberJoined(const class FString& ThePlayerName);
		void NotifyPlayerLeftTribe(const class FString& ThePlayerName, const class FString& TribeName);
		void NotifyPlayerLeft(const class FString& ThePlayerName);
		void NotifyPlayerJoinedTribe(const class FString& ThePlayerName, const class FString& TribeName);
		void NotifyPlayerJoined(const class FString& ThePlayerName);
		bool IsTribeAdmin();
		bool IsInTribe();
		bool IsFriendly(int32_t OtherTeam);
		bool IsDinoInOrderGroup(int32_t groupIndex, class APrimalDinoCharacter* dinoChar);
		bool IsDinoClassInOrderGroup(int32_t groupIndex, class UClass* DinoClass);
		bool IsAllowedToRefreshFlexPipeConnections(float Cooldown);
		bool IsAlliedWith(int32_t OtherTeam);
		bool HasEngram(class UClass* ItemClass);
		class FString GetUniqueIdString();
		int32_t GetTribeId();
		int32_t GetHexCostToPurchaseNextEngramPoint();
		TArray<class UClass*> GetDefaultItemSlotClasses();
		void DoRespec(class UPrimalPlayerData* ForPlayerData, class AShooterCharacter* ForCharacte, bool bSetRespecedAtCharacterLevel);
		void ClientRefreshDinoOrderGroup(int32_t groupIndex, const struct FDinoOrderGroup& groupData, int32_t UseCurrentlySelectedGroup);
		void ClientReceiveSpawnPoints(TArray<struct FSpawnPointInfo> SpawnPointsInfos);
		void ClientNotifyLevelUpAvailable();
		void ClientGetServerOptions(const struct FServerOptions& Info);
		void ClientGetPlayerWhiteListedData(TArray<struct FAdminPlayerDataInfo> list);
		void ClientGetPlayerConnectedData(TArray<struct FAdminPlayerDataInfo> list);
		void ClientGetPlayerBannedData(TArray<struct FAdminPlayerDataInfo> list);
		void ClientGetPlayerAdministratorData(TArray<struct FAdminPlayerDataInfo> list);
		void ClientGetAllPlayerNamesAndLocations(TArray<struct FAliveNameAndLocation> list);
		void ClientGetAlivePlayerConnectedData(TArray<struct FAlivePlayerDataInfo> list);
		void ClearTribe(bool bDontRemoveFromTribe, bool bForce, class APlayerController* ForPC);
		void BroadcastDeath(class AShooterPlayerState* KillerPlayerState, class UDamageType* KillerDamageType, class AShooterPlayerState* KilledPlayerState);
		bool AllowTribeGroupPermission(ETribeGroupPermission TribeGroupPermission, class UObject* OnObject);
		bool AllowDinoOrderByGroup(class APrimalDinoCharacter* orderDino);
		bool AddToTribe(const struct FTribeData& MyNewTribe, bool bMergeTribe, bool bForce, bool bIsFromInvite, class APlayerController* InviterPC);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterPlayerController
	 * Size -> 0x0AF8 (FullSize[0x1330] - InheritedSize[0x0838])
	 */
	class AShooterPlayerController : public ABasePlayerController
	{
	public:
		class UPaintingStreamingComponent*                         PaintingStreamingComponent;                              // 0x0838(0x0008) ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		unsigned char                                              HeldItemSlot[0xA];                                       // 0x0840(0x000A) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UsedItemSlot[0xA];                                       // 0x084A(0x000A) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_V26Z[0x4];                                   // 0x0854(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastRepeatUseConsumableTime[0xA];                        // 0x0858(0x0050) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     HeldItemSlotTime[0xA];                                   // 0x08A8(0x0050) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     LastUsedItemSlotTimes[0xA];                              // 0x08F8(0x0050) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UClass*                                              PauseMenuUITemplate;                                     // 0x0948(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DC7C[0x8];                                   // 0x0950(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             CurrentPlayerCharacterLocation;                          // 0x0958(0x000C) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IZL0[0x4];                                   // 0x0964(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       UnknownData_U2Y8 : 6;                                    // 0x0968(0x0001) BIT_FIELD (PADDING)
		bool                                                       bGamepadHotbarModifierPressed : 1;                       // 0x0968(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_UDCR[0xF];                                   // 0x0969(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APrimalStructurePlacer*                              StructurePlacer;                                         // 0x0978(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Y4MY[0x18];                                  // 0x0980(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class APrimalCharacter>                     LastDeathPrimalCharacter;                                // 0x0998(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DE9J[0x18];                                  // 0x09A0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bShowGameModeHUD;                                        // 0x09B8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4U92[0x17];                                  // 0x09B9(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           SelectSlotSound;                                         // 0x09D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              FogOfWarClass;                                           // 0x09D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UFogOfWar*                                           FogOfWar;                                                // 0x09E0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UPrimalLocalProfile*                                 PrimalLocalProfile;                                      // 0x09E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_G2R4[0x4];                                   // 0x09F0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CurrentGameModeMaxNumOfRespawns;                         // 0x09F4(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class AShooterCharacter*                                   LastDiedListenServerHost;                                // 0x09F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             LastRawInputDir;                                         // 0x0A00(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RMTC[0x1C];                                  // 0x0A0C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              StructurePlacerClass;                                    // 0x0A28(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      MaxUseDistance;                                          // 0x0A30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxUseCheckRadius;                                       // 0x0A34(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<bool>                                               SavedSurvivorProfileSettings;                            // 0x0A38(0x0010) ZeroConstructor, Transient
		bool                                                       bCachedOnlyShowOnlineTribeMembers;                       // 0x0A48(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8FM0[0x3];                                   // 0x0A49(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SavedMissionBiomeFilterMask;                             // 0x0A4C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bInitializedMissionUI;                                   // 0x0A50(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bMissionSortByDistance;                                  // 0x0A51(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_W27U[0x6];                                   // 0x0A52(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDinoMapMarkerInfo>                          MapDinos;                                                // 0x0A58(0x0010) ZeroConstructor, ContainsInstancedReference
		TArray<TWeakObjectPtr<class UPrimalInventoryComponent>>    RemoteViewingInventories;                                // 0x0A68(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference
		unsigned char                                              UnknownData_L138[0x20];                                  // 0x0A78(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               FastTravelDroppedInventory;                              // 0x0A98(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3KMA[0x18];                                  // 0x0AA0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsFirstSpawn : 1;                                       // 0x0AB8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       bIsRespawning : 1;                                       // 0x0AB8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_LT5X[0x27];                                  // 0x0AB9(0x0027) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              SteamInventoryStatusUITemplate;                          // 0x0AE0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KL05[0xC8];                                  // 0x0AE8(0x00C8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FItemNetID                                          LastSteamItemIDToRemove;                                 // 0x0BB0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FItemNetID                                          LastSteamItemIDToAdd;                                    // 0x0BB8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5P86[0x208];                                 // 0x0BC0(0x0208) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SpectatorCycleIndex;                                     // 0x0DC8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q9UW[0x1];                                   // 0x0DCC(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsFastTravelling;                                       // 0x0DCD(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bLastSpawnWasFastTravel;                                 // 0x0DCE(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H1T1[0x1A];                                  // 0x0DCF(0x001A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPreventPaintingStreaming;                               // 0x0DE9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VVC0[0xAE];                                  // 0x0DEA(0x00AE) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FServerChatMessage>                          ServerMessageQueue;                                      // 0x0E98(0x0010) ZeroConstructor, Transient
		bool                                                       bReachedTamedDinoLimit;                                  // 0x0EA8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bHasSurvivedOneDay;                                      // 0x0EA9(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bHasReachedHighestPeak;                                  // 0x0EAA(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bHasReachedLowestDepth;                                  // 0x0EAB(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XFXF[0x104];                                 // 0x0EAC(0x0104) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<unsigned char>                                      LastDownloadPlayerDataBytes;                             // 0x0FB0(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_H7LC[0x28];                                  // 0x0FC0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ViewingWheelCategory;                                    // 0x0FE8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VSWV[0x24];                                  // 0x0FEC(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       UnknownData_MU0C : 2;                                    // 0x1010(0x0001) BIT_FIELD (PADDING)
		bool                                                       bNotifyPawnBuffsOfDamageEvents : 1;                      // 0x1010(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_HXIR[0x8];                                   // 0x1011(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bForceHideGameplayUI;                                    // 0x1019(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HN97[0xE];                                   // 0x101A(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsGamepadActive;                                        // 0x1028(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_97L5[0x27];                                  // 0x1029(0x0027) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPreventDefaultCharacterItems;                           // 0x1050(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_J0S5[0x3];                                   // 0x1051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SFXVolumeMultiplier;                                     // 0x1054(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IISG[0xE0];                                  // 0x1058(0x00E0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              CreativeModeBuff;                                        // 0x1138(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PrimalStatsCacheFlushInterval;                           // 0x1140(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BH5O[0x38];                                  // 0x1144(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PingTraceDistance;                                       // 0x117C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      PingNotifyRadius;                                        // 0x1180(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      PingLifetime;                                            // 0x1184(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      PingLifetime_Dying;                                      // 0x1188(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      PingCoolDownTime;                                        // 0x118C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		class UTexture2D*                                          PingIcon_Default;                                        // 0x1190(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		class UTexture2D*                                          PingIcon_Players;                                        // 0x1198(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		class UTexture2D*                                          PingIcon_Dinos;                                          // 0x11A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		class UTexture2D*                                          PingIcon_Structures;                                     // 0x11A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		double                                                     LastPingTime;                                            // 0x11B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		TArray<struct FPingData>                                   CurrentPings;                                            // 0x11B8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected
		bool                                                       bWantsToPing : 1;                                        // 0x11C8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bEnablePingSystem : 1;                                   // 0x11C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_AY6H[0x3];                                   // 0x11C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDebugPOIs;                                              // 0x11CC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_15IH[0x3];                                   // 0x11CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      POI_SearchTickInterval_Current;                          // 0x11D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		struct FVector2D                                           POI_SearchTickInterval_RandRanges;                       // 0x11D4(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      POI_SearchRadius;                                        // 0x11DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		double                                                     POI_LastSearchTickTime;                                  // 0x11E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		TArray<class UUserWidget*>                                 SpawnedPointWidgets;                                     // 0x11E8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected
		TArray<class APointOfInterestCosmeticActor*>               SpawnedPointCosmeticActors;                              // 0x11F8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected
		TArray<struct FPointOfInterestData_ForCompanion>           NearbyPointsOfInterest;                                  // 0x1208(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected
		struct FMissionWaypointInfo                                MissionWaypoint;                                         // 0x1218(0x0028) BlueprintVisible, BlueprintReadOnly, Transient, Protected
		TArray<struct FTamingWaypointInfo>                         TamingWaypoints;                                         // 0x1240(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected
		unsigned char                                              UnknownData_RYA6[0x14];                                  // 0x1250(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       UnknownData_S369 : 1;                                    // 0x1264(0x0001) BIT_FIELD (PADDING)
		bool                                                       bWasGamepadHotbarModifierPressed_RightShoulder : 1;      // 0x1264(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_DI8O[0x5B];                                  // 0x1265(0x005B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnClientReceiveStructuresPlacedOnFloor;                  // 0x12C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_TFXB[0x20];                                  // 0x12D0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsInAdvancedCinematicMode;                              // 0x12F0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_X5HM[0x3];                                   // 0x12F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Gen1ENFixDesyncValue;                                    // 0x12F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FStructHighlightInfo>                        HighlightedStructures;                                   // 0x12F8(0x0010) ZeroConstructor, Transient
		TArray<class UClass*>                                      EnforcementRelevantStructures;                           // 0x1308(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FLinearColor>                                EnforcementColors;                                       // 0x1318(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_OWO0[0x8];                                   // 0x1328(0x0008) MISSED OFFSET (PADDING)

	public:
		void ZoneVolumeReport();
		class FString WritePNTScreenshot(const class FString& filename);
		bool ViewingAnUploadTerminal();
		void UnlockExplorerNote(int32_t ExplorerNoteIndex, bool forceShowExplorerNoteUI);
		void UnlockEmote(const class FName& EmoteName);
		void UndermeshSphere(int32_t Radius);
		void TurnOnGmBuffAndTekArmorAndStatFpsAndAlsoStatUnitBecauseThisIsEasierToTypeOnXbox();
		void TryToForceUploadCharacter();
		void ToggleWeaponAccessory();
		void ToggleHud();
		void Tick_UpdatePings(float DeltaTime);
		void Tick_SearchForPOIs(float DeltaTime);
		void TestPurchaseEP();
		void TestPhysxPerf(int32_t RayCount, float DistanceOfRays);
		void TestNotification();
		void TestAlarmNotification(const class FString& Title, const class FString& Message);
		void StopSpectating();
		void StartWhistleSelection();
		void StartSurfaceCameraForPassenger(float OnSurfaceTargetYaw, float OnSurfaceTargetPitch, float OnSurfaceTargetRoll);
		void StartSurfaceCamera(float OnSurfaceTargetYaw, float OnSurfaceTargetPitch, float OnSurfaceTargetRoll, float OnSurfaceCameraInterpolationSpeed, bool UseSurfaceCameraInterpolation, const struct FVector& CameraOffset);
		void StartPlacingStructrue(class UClass* BuildingStructure);
		void StartEmoteSelection();
		void StartArkGamepadRightShoulder();
		void StartArkGamepadLeftShoulder();
		void StartArkGamepadFaceButtonTop();
		void StartArkGamepadFaceButtonRight();
		void StartArkGamepadFaceButtonLeft();
		void StartArkGamepadFaceButtonBottom();
		void StartArkGamepadDpadUp();
		void StartArkGamepadDpadRight();
		void StartArkGamepadDpadLeft();
		void StartArkGamepadDpadDown();
		void StartArkGamepadBackButton();
		void ShowMyAdminManager();
		bool ShouldHideGameplayUI();
		void SetPlayerPos(float X, float Y, float Z);
		void SetMultiUseWheelCategory(int32_t Category, class APrimalBuff* OptionalBuff);
		void SetMissionWaypointVisible(bool bInIsVisible);
		void SetMissionWaypointInfo(const class FString& InWaypointTitle, const struct FVector& InWaypointDestination, const class FName& InWaypointID);
		void SetLastInventoryRetrievalTime();
		void SetInfiniteStats(bool bInfinite);
		void SetGodMode(bool bEnable);
		void SetDoFInterpTime(float InterpTime);
		void SetControllerGamepadActive(bool bIsActive);
		void SetCinematicModeAdvanced(bool bInCinematicMode, bool bPreventCameraAnimFPV, bool bSetHUDHidden, bool bDisableKeymappings, TArray<class FName> KeyActionNames, bool bDisableChat);
		void SetCheatPlayer(bool bEnable);
		void SetAutoPlayer(bool bEnable);
		void SetAdminIcon(bool bAdminIcon);
		void ServerVerifyStructurePlacementItemData(const struct FItemNetID& PlaceUsingItemID);
		void ServerUploadDino(class APrimalDinoCharacter* DownloadedDino);
		void ServerUploadCurrentCharacterAndItems(class UPrimalInventoryComponent* InventoryComp);
		void ServerUploadCharaterDataToArk(class UPrimalInventoryComponent* InventoryComp);
		void ServerUnlockPerMapExplorerNote(int32_t ExplorerNoteIndex, bool bAvoidBuff);
		void ServerUnbanPlayer(const class FString& PlayerSteamName, const class FString& PlayerSteamID);
		void ServerTransferToRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId, bool bAlsoTryToEqup, int32_t RequestedQuantity);
		void ServerTransferredPlayerConfirmationResult(bool bAccept);
		void ServerTransferFromRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId, int32_t RequestedQuantity, int32_t ToSlotIndex, bool bEquipItem);
		void ServerTransferAllToRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const class FString& CurrentCustomFolderFilter, const class FString& CurrentNameFilter, const class FString& CurrentDestinationFolder, bool bNoFolderView);
		void ServerTransferAllFromRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const class FString& CurrentCustomFolderFilter, const class FString& CurrentNameFilter, const class FString& CurrentDestinationFolder, bool bNoFolderView);
		void ServerSuicide();
		void ServerStopWeaponFire(class AShooterWeapon* weapon);
		void ServerStopWeaponAltFire(class AShooterWeapon* weapon);
		void ServerStopSpectating();
		void ServerStayAlive();
		void ServerStartWeaponFire(class AShooterWeapon* weapon);
		void ServerStartWeaponAltFire(class AShooterWeapon* weapon);
		void ServerSpectateToPlayerByID(uint64_t PlayerId);
		void ServerShowMessageOfTheDay();
		void ServerSetVRPlayer(bool bSetVRPlayer);
		void ServerSetSupressAdminIcon(bool bSuppress);
		void ServerSetSubscribedApp(int32_t AppID, bool bPreventDefaultItems);
		void ServerSetMessageOfTheDay(const class FString& Message);
		void ServerSetItemBalloonLocation(class APrimalStructureMovingContainer* ItemBalloon, const struct FPrimalMapMarkerEntryData& MapMarker);
		void ServerSendDirectMessage(const class FString& PlayerSteamID, const class FString& Message);
		void ServerSendChatMessage(const class FString& ChatMessage, EChatSendMode SendMode);
		void ServerSendArkDataPayloadEnd(const struct FGuid& ID, EPrimalARKTributeDataType ArkDataType);
		void ServerSendArkDataPayloadBegin(const struct FGuid& ID, EPrimalARKTributeDataType ArkDataType, const class FString& DataClass, const class FString& TagName, const class FString& Name, TArray<class FString> DataStats, uint32_t ID1, uint32_t ID2);
		void ServerSendArkDataPayload(const struct FGuid& ID, EPrimalARKTributeDataType ArkDataType, TArray<unsigned char> DataBytes);
		void ServerSelectedCustomItemAction(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId, const class FName& SelectedOption);
		void ServerSaveWorld();
		void ServerRequestUpdateActiveMissionTags();
		void ServerRequestTribeLog();
		void ServerRequestTamingInfoList();
		void ServerRequestStructuresPlacedOnFloor(TArray<class APrimalStructure*> OnStructures);
		void ServerRequestShowLeaderboards(class UClass* LeaderboardType, const class FName& MissionTag);
		void ServerRequestSetPin(class UObject* forTarget, int32_t PinValue, bool bIsSetting, int32_t TheCustomIndex);
		void ServerRequestRespawnAtPoint(int32_t SpawnPointID, int32_t spawnRegionIndex);
		void ServerRequestRemoveWeaponClipAmmo(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
		void ServerRequestRemoveWeaponAccessoryOnly(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
		void ServerRequestRemoveItemSkinOnly(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
		void ServerRequestRemoveItemSkin(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
		void ServerRequestRemoveDinoFromTamingListByID(int32_t InID1, int32_t InID2);
		void ServerRequestRemoteDropAllItems(class UPrimalInventoryComponent* InventoryComp, const class FString& CurrentCustomFolderFilter, const class FString& CurrentNameFilter);
		void ServerRequestPlaceStructure(int32_t StructureIndex, const struct FVector& BuildLocation, const struct FRotator& BuildRotation, const struct FRotator& PlayerViewRotation, class APawn* AttachToPawn, class APrimalDinoCharacter* DinoCharacter, const class FName& BoneName, const struct FItemNetID& PlaceUsingItemID, bool bSnapped, bool bIsCheat, bool bIsFlipped, int32_t SnapPointCycle);
		void ServerRequestMyTribeOnlineList();
		void ServerRequestLevelUp(class UPrimalCharacterStatusComponent* forStatusComp, EPrimalCharacterStatusValue ValueType);
		void ServerRequestInventoryUseItemWithItem(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID1, const struct FItemNetID& ItemID2, int32_t AdditionalData);
		void ServerRequestInventoryUseItemWithActor(class AActor* anActor, class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID1, int32_t AdditionalData);
		void ServerRequestInventoryUseItem(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
		void ServerRequestInventorySwapItems(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID1, const struct FItemNetID& ItemID2);
		void ServerRequestFastTravelToPoint(int32_t fromSpawnPointID, int32_t SpawnPointID);
		void ServerRequestDropAllItems(const class FString& CurrentCustomFolderFilter, const class FString& CurrentNameFilter);
		void ServerRequestDownloadPlayerCharacter(const struct FArkTributePlayerData& DownloadedCharacter, int32_t SpawnPointID, int32_t spawnRegionIndex);
		void ServerRequestDownloadDino(const struct FARKTributeDino& DownloadedDino);
		void ServerRequestDinoCharStats(class APrimalDinoCharacter* theDinoChar);
		void ServerRequestDinoAncestors(class APrimalDinoCharacter* ForDino);
		void ServerRequestCreateMissionDataBuff();
		void ServerRequestActorItems(class UPrimalInventoryComponent* forInventory, bool bInventoryItems, bool bIsFirstSpawn);
		void ServerRepeatMultiUse(class UObject* ForObject, int32_t UseIndex);
		void ServerRepairItem(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
		void ServerRemoveSteamItemSucceeded();
		void ServerRemoveSteamItem(uint32_t ItemdDefId);
		void ServerRemovePawnItem(const struct FItemNetID& ItemId, bool bSecondryAction);
		void ServerRemovePassenger();
		void ServerRemoveAdminPlayer(const class FString& PlayerSteamName, const class FString& PlayerSteamID);
		void ServerReleaseSeatingStructure();
		void ServerRefreshSteamInventory();
		void ServerRecieveSpectatorLocationAndRotation(const struct FVector& spectatorLocation, const struct FRotator& spectatorRotation);
		void ServerReadMessageOFTheDay();
		void ServerProcessItemNetExecCommandUnreliableBP(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ForItemID, bool bIsEquippedItem, const class FName& CommandName, const struct FBPNetExecParams& ExecParams);
		void ServerProcessItemNetExecCommandBP(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ForItemID, bool bIsEquippedItem, const class FName& CommandName, const struct FBPNetExecParams& ExecParams);
		void ServerPaint(class UStructurePaintingComponent* Structure, TArray<struct FPaintItem> Paints, bool bLastBatch, bool bFromLoadFile);
		void ServerNotifyEditText(const class FString& TextToUse, bool checkedBox, class UClass* ForObjectClass, uint32_t ExtraID1, uint32_t ExtraID2, class UObject* ForObject);
		void ServerMultiUse(class UObject* ForObject, int32_t UseIndex);
		void ServerLoadWorld();
		void ServerLoadUploadedDinos();
		void ServerLoadUploadedCharacters();
		void ServerLoadArkInventoryItems(TArray<struct FItemNetInfo> ArkInventoryItems, bool bFinalBatch);
		void ServerListPlayers();
		void ServerKickPlayer(const class FString& PlayerSteamName, const class FString& PlayerSteamID);
		void ServerInventoryClearCraftQueue(class UPrimalInventoryComponent* InventoryComp);
		void ServerGrindItemInRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId, bool grindStack);
		void ServerGlobalCommand(const class FString& Msg);
		void ServerGetOriginalHairColor();
		void ServerGetMessageOfTheDay();
		void ServerEquipToRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
		void ServerEquipPawnItem(const struct FItemNetID& ItemId);
		void ServerDropFromRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
		void ServerDropAllNotReadyForUploadItems();
		void ServerDPC();
		void ServerDownloadTransferredPlayer(int32_t SpawnPointID, int32_t spawnPointRegionIndex);
		void ServerDisallowPlayerToJoinNoCheck(const class FString& PlayerId);
		void ServerDeleteItemFromCustomFolder(class UPrimalInventoryComponent* forInventory, const class FString& CFolderName, int32_t InventoryCompType, const struct FItemNetID& ItemId);
		void ServerDeleteCustomFolder(class UPrimalInventoryComponent* forInventory, const class FString& CFolderName, int32_t InventoryCompType);
		void ServerDataSetRPC(TArray<struct FDataSet> dataSets);
		void ServerCycleSpectator(bool bNext);
		void ServerCraftItem(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId);
		void ServerCheckUnfreeze();
		void ServerCheckIsValidPlayerToDownload(const struct FArkTributePlayerData& PlayerData);
		void ServerCharacterUploadWithItems_UploadItem(uint64_t PlayerDataID, const struct FItemNetInfo& InvItem);
		void ServerCharacterUploadWithItems_Start(uint64_t PlayerDataID, const struct FArkTributePlayerData& PlayerData);
		void ServerCharacterUploadWithItems_FinishAndCreateCharacter(uint64_t PlayerDataID);
		void ServerCharacterUploadWithItems_CharaterPayload(uint64_t PlayerDataID, TArray<unsigned char> PlayerDataChunk);
		void ServerBanPlayer(const class FString& PlayerSteamName, const class FString& PlayerSteamID);
		void ServerAsyncLoadArkInventoryItems(TArray<struct FItemNetInfo> ArkInventoryItems, bool bFinalBatch);
		void ServerAllowPlayerToJoinNoCheck(const class FString& PlayerId);
		void ServerAddItemToCustomFolder(class UPrimalInventoryComponent* forInventory, const class FString& CFolderName, int32_t InventoryCompType, const struct FItemNetID& ItemId);
		void ServerAddItemToArkInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId, int32_t RequestedQuantity);
		void ServerAddItemFromArkInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId, int32_t RequestedQuantity);
		void ServerAddAdminPlayer(const class FString& PlayerSteamName, const class FString& PlayerSteamID);
		void ServerAddAchievementID(const class FString& AchievementID, bool bIsOnSpawn);
		void ServerActorViewRemoteInventory(class UPrimalInventoryComponent* InventoryComp);
		void ServerActorCloseRemoteInventory(class UPrimalInventoryComponent* InventoryComp);
		void Server_RespondToPing(const struct FReplicatePingData& RespondToPingData);
		void Server_Ping(const struct FReplicatePingData& WithPingData);
		void SendAlarmNotification(const class FString& SteamID, const class FString& Title, const class FString& Message);
		void SCP();
		bool SameLinkedId(int64_t Value);
		void RPCStayAlive();
		void RespondToPing(const struct FReplicatePingData& RespondToPingData);
		void RequestSpectator(const class FString& InSpectatorPass);
		void RemoveItemSucceeded();
		void QuitToMainMenu();
		void PurchaseEngramPoint(int32_t NumPointsToPurchase);
		void PrintColors();
		void PlayHitMarkerStructureAlly();
		void PlayHitMarkerStructure();
		void PlayHitMarkerCharacter(bool bHitFriendlyTarget, const struct FHitMarkerSettings& HitMarkerSettings);
		class FString PlayerCommand(const class FString& TheCommand);
		void PingNearbyPlayers(const struct FReplicatePingData& WithPingData);
		void OnWhistlePress();
		void OnToggleInGameMenu();
		void OnToggleDoFMenu();
		void OnStopTargeting();
		void OnStopFire();
		void OnStartTargeting();
		void OnStartFire();
		void OnServerRefreshSteamInventoryFinished(bool bSuccess, uint64_t SteamID);
		void OnRefreshSteamInventoryToCheckConsumeFinished(bool bSuccess, uint64_t SteamID);
		void OnRefreshSteamInventoryFinished(bool bSuccess, uint64_t SteamID);
		void OnPingUp();
		void OnPingDown();
		void OnLoadArkTributePlayersDataFinished(bool Success, TArray<struct FArkTributePlayerData> PlayersData, int32_t FailureResponseCode);
		void OnLevelView();
		void OnFirstSaveAfterCharacterDownloadFinished(bool Success);
		void OnEmoteKey2Release();
		void OnEmoteKey2Press();
		void OnEmoteKey1Release();
		void OnEmoteKey1Press();
		void OnDisableSpectator();
		void OnCurrentCharacterAndItemsUploaded(bool Success);
		void OnConsumeItemFinished(bool bSuccess, uint64_t SteamID);
		void OnClientReceiveStructuresPlacedOnFloor__DelegateSignature(class APrimalStructure* Structure, TArray<class APrimalStructure*> StructuresPlacedOnFloor);
		void OnArkTributeSaved(bool Success);
		void OnAddItemFinished(bool bSuccess, TArray<uint64_t> SteamItemUserIDs, uint64_t SteamID);
		void OnAddedItemsToAllClustersInventory(bool Success, const class FString& UserId, TArray<int32_t> MasterIndexNum);
		void NotifyTribeWarStatus(const class FString& EnemyTribeString, int32_t StatusType);
		void NotifyPawnBuffsOfDamageEvent(class AActor* DamagedActor, float DamageAmount, const struct FDamageEvent& DamageEvent);
		void LockEmote(const class FName& EmoteName);
		class FString LinkedPlayerIDString();
		void LevelView();
		void LeaveMeAlone();
		bool IsViewingInventoryUI();
		bool IsTribeAdmin();
		bool IsSpectator();
		bool IsRemoteControlling();
		bool STATIC_IsPlayerViewingPing(class AShooterPlayerController* ForPC, const struct FPingData& CheckPingData);
		bool STATIC_IsPingedItem(class UPrimitiveComponent* PingComponent);
		bool IsPawnAcknowledged();
		bool IsJumpInputPressed();
		bool IsInTribe();
		bool IsInputPressed(const class FName& InputName, const class FName& GamepadInputName);
		bool IsHudVisible();
		bool IsGameInputAllowed();
		bool IsFirstLocalPlayerOrLivingLocalPlayer();
		bool IsFirstLocalPlayer();
		bool IsEmoteUnlocked(const class FName& EmoteName);
		bool IsAtPersonalTameLimit(bool bIsForStructure);
		bool IsAltFireInputPressed();
		bool InitPing(struct FPingData* ForPingData, const struct FReplicatePingData& InitFromData);
		void InitCharacterPainting(class APrimalCharacter* Char);
		void InfiniteStats();
		void HideRiders(bool bDoHide);
		bool HasGodMode();
		bool HasBestScoreForMission(const class FName& MissionTag);
		void GlobalCommand(const class FString& Msg);
		bool GiveSlotItemNum(int32_t MasterIndexNum, int32_t slotNum, int32_t quantityOverride);
		bool GiveSlotItem(const class FString& blueprintPath, int32_t slotNum, int32_t quantityOverride);
		void GiveColors(int32_t Quantity);
		void GetTamedDinosNearBy(TArray<TWeakObjectPtr<class APrimalDinoCharacter>>* Dinos, float RangeRadius, const struct FVector& NearLocation);
		int32_t GetSubscribedAppIds();
		class AShooterHUD* GetShooterHUD();
		void GetPlayerViewPointNoModifiers(struct FVector* out_Location, struct FRotator* out_Rotation, bool ForAiming, bool bNoTPVAim);
		class FString GetPlayerCharacterName();
		class AShooterCharacter* GetPlayerCharacter();
		class FString STATIC_GetPingTitleForActor(class AActor* forActor);
		class UTexture2D* GetPingIconForComponent(class UPrimitiveComponent* ForComponent);
		class FString GetPersonalTameLimitString();
		class UPrimalInventoryComponent* GetPawnInventoryComponent();
		TArray<struct FPointOfInterestData_ForCompanion> GetNearbyPOIs();
		int32_t GetLinkedPlayerID();
		double GetLastInventoryRetrievalTime();
		class UPrimalItem* GetInventoryUISelectedItemRemote();
		class UPrimalItem* GetInventoryUISelectedItemLocal();
		TArray<unsigned char> GetHeldItemSlots();
		struct FExplorerNoteEntry GetExplorerNoteEntry(int32_t ExplorerNoteIndex);
		class AShooterCharacter* GetControllerPlayer();
		struct FLeaderboardRow GetBestScoreForMission(const class FName& MissionTag);
		void GetAllMatinees();
		bool GetAllAimedHarvestActors(float MaxDistance, TArray<class AActor*>* OutHarvestActors, TArray<class UActorComponent*>* OutHarvestComponents, TArray<int32_t>* OutHitBodyIndices);
		class AMissionType* GetActiveMission();
		class FString FormatTextWithKeyBindings(const class FString& InText, bool bIgnoreMarkup);
		void FlushPrimalStats();
		void FlushLevelStreaming();
		void FinalFlushLevelStreaming();
		void EnvQA();
		void EnforcementHighlight(bool bEnable);
		void EndWhistleSelection();
		void EndSurfaceCamera();
		void EndEmoteSelection();
		void EndArkGamepadRightShoulder();
		void EndArkGamepadLeftShoulder();
		void EndArkGamepadFaceButtonTop();
		void EndArkGamepadFaceButtonRight();
		void EndArkGamepadFaceButtonLeft();
		void EndArkGamepadFaceButtonBottom();
		void EndArkGamepadDpadRight();
		void EndArkGamepadDpadLeft();
		void EndArkGamepadDpadDown();
		void EndArkGamepadBackButton();
		void EndAArkGamepadDpadUp();
		void EnableSpectator();
		void DoServerCheckUnfreeze();
		void DoPlayerCommand(const class FString& TheCommand);
		bool DoPingTrace(struct FReplicatePingData* NewPing, bool* bIsResponding);
		bool STATIC_DoesPlayerOwnPing(class AShooterPlayerController* PlayerPC, uint32_t PingOwnerID);
		void DoCrash();
		void DisableSurfaceCameraInterpolation();
		void DisableEnemyInvisible();
		void DebugStructures();
		void DebugCheckSeven(bool bEnable);
		void CopyWorldBuffStatus();
		void CopyCoordsToClipboard();
		void ConditonalEndGamepadModiferState();
		void ClientUsedActorItem(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId);
		void ClientUploadedDinosLoaded(TArray<struct FARKTributeDinoListing> UploadedDinosDataListings);
		void ClientUploadedCharactersLoaded(bool Success, TArray<struct FArkTributePlayerDataListing> UploadedCharactersDataListings);
		void ClientUploadDino(class APrimalDinoCharacter* DownloadedDino);
		void ClientUpdateItemWeaponClipAmmo(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId, int32_t ammo);
		void ClientUpdateItemQuantity(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId, int32_t ItemQuantity);
		void ClientUpdateItemDurability(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId, float ItemDurability);
		void ClientUpdateItemCustomData(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId, const struct FCustomItemData& InData);
		void ClientUpdateInventoryCraftQueue(class UPrimalInventoryComponent* forInventory, TArray<struct FItemCraftQueueEntry> CraftQueueEntries);
		void ClientUnlockExplorerNote(int32_t ExplorerNoteIndex, bool forceShowExplorerNoteUI);
		void ClientUnlockAchievement(const class FString& AchievementID);
		void ClientTeleportSpectator(const struct FVector& Location, uint64_t PlayerId);
		void ClientSwapActorItems(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemID1, const struct FItemNetID& ItemID2);
		void ClientStopLocalSound(class USoundBase* aSound);
		void ClientStartSurfaceCameraForPassenger(float Yaw, float Pitch, float Roll, bool bInvertTurnInput);
		void ClientStartReceivingTribeLog();
		void ClientStartReceivingActorItems(class UPrimalInventoryComponent* forInventory, bool bEquippedItems);
		void ClientShowTransferredPlayerConfirmationDialog();
		void ClientShowSpawnUIForTransferringPlayer(class UClass* NewHUDClass, uint64_t TransferingPlayerID, bool bUseTimer);
		void ClientShowSpawnUI(float Delay);
		void ClientShowPaintingUI(class UObject* ObjectToPaint);
		void ClientShowLeaderboard(class UClass* LeaderboardType, const class FName& MissionTag, TArray<struct FLeaderboardRow> LeaderboardRows, bool bPlayerHasValidLatestScore, const struct FLeaderboardRow& LatestPlayerScore);
		void ClientShowCharacterCreationUI(bool bShowDownloadCharacter);
		void ClientSetSpectatorLocation(const struct FVector& NewLocation);
		void ClientSetPersonalDinoTameCount(int32_t NewPersonalDinoTameCount);
		void ClientSetHUDAndInitUIScenes(class UClass* NewHUDClass);
		void ClientSetControlRotation(const struct FRotator& NewRotation);
		void ClientSetCanEnableCheats(bool bIsPossible);
		void ClientSetArkTributeLimits(bool LimitItems, bool LimitDinos, bool LimitCharacters, int32_t MaxItems, int32_t MaxDinos, int32_t MaxCharacters);
		void ClientServerSOTFNotificationCustom(const class FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay);
		void ClientServerSOTFNotification(ESTOFNotificationType NotificationType, const class FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay, bool bLastPlayer, const class FString& TribeName, TArray<class FString> PlayerNames, const class FString& DeathReason, TArray<struct FPrimalPlayerCharacterConfigStructReplicated> DeadPlayersData);
		void ClientServerNotificationSingle(const class FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay, int32_t MessageTypeID);
		void ClientServerNotification(const class FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay);
		void ClientServerChatMessage(const class FString& MessageText, const struct FLinearColor& MessageColor, bool bIsBold);
		void ClientServerChatDirectMessage(const class FString& MessageText, const struct FLinearColor& MessageColor, bool bIsBold);
		void ClientSendItemNetExecCommandToServer(class UPrimalItem* ForItem, const class FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable);
		void ClientSendFolderData(class UPrimalInventoryComponent* forInventory, TArray<struct FServerCustomFolder> ServerCustomFolder);
		void ClientSendArkDataPayloadEnd(const struct FGuid& ID, EPrimalARKTributeDataType ArkDataType, uint64_t PlayerDataID);
		void ClientSendArkDataPayloadBegin(const struct FGuid& ID, EPrimalARKTributeDataType ArkDataType, const class FString& DataClass, const class FString& TagName, const class FString& Name, TArray<class FString> DataStats, uint32_t ID1, uint32_t ID2);
		void ClientSendArkDataPayload(const struct FGuid& ID, EPrimalARKTributeDataType ArkDataType, TArray<unsigned char> DataBytes);
		void ClientRunLocalConsoleCommand(const class FString& Command, bool bWriteToLog);
		void ClientResetRespawningFlag();
		void ClientRequestSpectatorLocationAndRotation();
		void ClientRemoveItemFromSteamInventory(TArray<uint64_t> ItemSteamUserID, int32_t Quantity);
		void ClientRemoveItemFromArk(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& RemovedItemID);
		void ClientRemoveActorItem(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId, bool showHUDMessage);
		void ClientRefreshSteamInventoryFinished(bool bSuccess);
		void ClientReceiveTribeLog(const class FString& LogString);
		void ClientReceiveTamingInfoList(TArray<struct FTamingDinoInfo> InfoList);
		void ClientReceiveStructuresPlacedOnFloor(TArray<struct FStructuresOnFloor> Structures);
		void ClientReceiveOriginalHairColor(const struct FLinearColor& HairColor);
		void ClientReceiveMyTribeOnlineList(TArray<uint32_t> OnlinePlayerIDs);
		void ClientReceiveDinoCharStats(class APrimalDinoCharacter* theDinoChar, TArray<float> CurValues, TArray<float> MaxValues);
		void ClientReceiveDinoAncestors(class APrimalDinoCharacter* ForDino, TArray<struct FDinoAncestorsEntry> DinoAncestors, TArray<struct FDinoAncestorsEntry> DinoAncestorsMale, int32_t RandomMutationsFemale, int32_t RandomMutationsMale);
		void ClientReceiveActiveMissionTags(TArray<class FName> MissionTags);
		void ClientProcessItemNetExecCommandUnreliableBP(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ForItemID, bool bIsEquippedItem, const class FName& CommandName, const struct FBPNetExecParams& ExecParams);
		void ClientProcessItemNetExecCommandBP(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ForItemID, bool bIsEquippedItem, const class FName& CommandName, const struct FBPNetExecParams& ExecParams);
		void ClientPlayLocalSound(class USoundBase* aSound, bool bAttach);
		void ClientPlayerIsValidToDownload(bool bIsValid, const struct FArkTributePlayerData& PlayerData);
		void ClientOnStartDownloadTransferredPlayerCharacter();
		void ClientOnEndDownloadTransferredPlayerCharacter(bool Success, int32_t FailureResponseCode, const class FString& FailureResponseMessage);
		void ClientOnDropAllNotReadyForUploadItemsFinished();
		void ClientOnCurrentCharacterAndItemsUploaded(uint64_t TransferringPlayerDataId);
		void ClientOnAddedItemsToAllClustersInventory(bool Success, const class FString& UserId, TArray<int32_t> MasterIndexNum);
		void ClientNotifyUnlockHairStyleOrEmote(const class FName& HairstyleOrEmoteName);
		void ClientNotifyUnlockedEngram(class UClass* ItemClass, bool bTekGram);
		void ClientNotifyUnlockedAllExplorerNotes();
		void ClientNotifyTribeXP(float HowMuch);
		void ClientNotifyTorpidityIncrease();
		void ClientNotifyTamedDino(class UClass* DinoClass);
		void ClientNotifySummonedDino(class UClass* DinoClass);
		void ClientNotifyShowProfileRequest(const struct FUniqueNetIdRepl& ProfileId);
		void ClientNotifyRemotePlayerDeath(const class FString& PlayerName, const class FString& AttackerName);
		void ClientNotifyPlayerKill(class AActor* PlayerPawn, class APawn* VictimPawn);
		void ClientNotifyPlayerDeathReason(const class FString& ReasonString);
		void ClientNotifyPlayerDeath(class APawn* InstigatingPawn);
		void ClientNotifyPaintFinished(bool bSuccess);
		void ClientNotifyMessageOfTheDay(const class FString& Message, float timeToDisplay);
		void ClientNotifyListenServerOutOfRange();
		void ClientNotifyLevelUp(class APrimalCharacter* forChar, int32_t NewLevel);
		void ClientNotifyHitHarvest();
		void ClientNotifyEditText(class UClass* ForObjectClass, uint32_t ExtraID1, uint32_t ExtraID2, class UObject* ForObject);
		void ClientNotifyDinoKill(class APrimalDinoCharacter* InstigatingPawn, class APawn* VictimPawn);
		void ClientNotifyDinoDeath(const class FString& DinoName, const class FString& AttackerName, bool bIsVehicle);
		void ClientNotifyDefeatedDino(class UClass* DinoClass);
		void ClientNotifyCantHitHarvest();
		void ClientNotifyCantHarvest();
		void ClientNotifyAdmin();
		void ClientLoadArkItems(class UPrimalInventoryComponent* forInventory, TArray<struct FItemNetInfo> itemInfos, bool bClear, bool bFinalBatch);
		void ClientInsertActorItem(class UPrimalInventoryComponent* forInventory, const struct FItemNetInfo& ItemInfo, const struct FItemNetID& InsertAfterItemID);
		void ClientHUDNotificationTypeParams(int32_t MessageType, int32_t MessageType1, int32_t MessageParam2, class UObject* ObjectParam1);
		void ClientGetMessageOfTheDay(const class FString& Message);
		void ClientFinishedReceivingActorItems(class UPrimalInventoryComponent* forInventory, bool bEquippedItems);
		void ClientFinishedLoadArkItems(class UPrimalInventoryComponent* forInventory);
		void ClientFailedToAddItemFromArkInventory();
		void ClientFailedRemoveSaddle();
		void ClientEndReceivingTribeLog();
		void ClientDrawUndermeshSphere(int32_t Radius);
		void ClientDrawBrushComponentInGame(class UBrushComponent* BrushComponent, float Duration, bool bDrawSolidBox);
		void ClientDownloadPlayerCharacterRequestFinished(bool Success);
		void ClientDownloadDinoRequestFinished(bool Success);
		void ClientDoMultiUse(class UObject* ForObject, int32_t UseIndex);
		void ClientDataSetRPC(TArray<struct FDataSet> dataSets);
		void ClientCollectedAchievementItem(class UClass* ItemClass);
		void ClientChatMessage(const struct FChatMessage& Chat);
		void ClientAddItemToArk(class UPrimalInventoryComponent* forInventory, const struct FItemNetInfo& ItemInfo, bool bFromLoad);
		void ClientAddFolderToInventoryComponent(class UPrimalInventoryComponent* forInventory, const class FString& NewCustomFolderName, int32_t InventoryCompType);
		void ClientAddFloatingText(const struct FVector_NetQuantize& AtLocation, const class FString& FloatingTextString, const struct FColor& FloatingTextColor, float ScaleX, float ScaleY, float TextLifeSpan, const struct FVector& TextVelocity, float MinScale, float FadeInTime, float FadeOutTime);
		void ClientAddFloatingDamageText(const struct FVector_NetQuantize& AtLocation, int32_t DamageAmount, int32_t FromTeamID);
		void ClientAddActorItemToFolder(class UPrimalInventoryComponent* forInventory, const struct FItemNetInfo& ItemInfo, bool bEquipItem, bool ShowHUDNotification, const class FString& ToFolder);
		void ClientAddActorItem(class UPrimalInventoryComponent* forInventory, const struct FItemNetInfo& ItemInfo, bool bEquipItem, bool ShowHUDNotification);
		void Client_ReceivePingResponse(const struct FReplicatePingData& ResponseData, class AShooterCharacter* RespondingPlayer);
		void Client_ReceivePing(const struct FReplicatePingData& ReceivedPingData);
		void Client_ReceiveBuffFromDayCycle(class UClass* GiveBuffClass, class ADayCycleManager* FromDayCycle);
		void CheckRequestSpectator(const class FString& InSpectatorPass);
		void CheckForPlayerInventory();
		void CheckforOrbiting();
		void CheckCheatsPassword(const class FString& pass);
		void CheckCanEnableCheats();
		void Cheat(const class FString& Msg);
		void CCC();
		bool CanPingPlayer(class AShooterCharacter* ForPlayer);
		bool CanDoPlayerCharacterInput(bool bIgnoreCurrentWeapon, bool bWeaponForcesMountedWeaponry);
		void BPServerHandleDataSetRPC(TArray<struct FDataSet> dataSets);
		void BPClientUnlockExplorerNote(int32_t ExplorerNoteIndex, bool forceShowExplorerNoteUI);
		void BPClientHandleDataSetRPC(TArray<struct FDataSet> dataSets);
		bool BPCheckClientPossession();
		struct FVector BPCheckCanDinoSpawnFromLocation(class UClass* DinoClass, const struct FVector& CheckLocation);
		void BPActivatedMultiUseSelection();
		void AutoCycle(float Duration);
		void AttemptTransferRedownload();
		void AsyncLoadInventory();
		bool AllowTribeGroupPermission(ETribeGroupPermission TribeGroupPermission, class UObject* OnObject);
		void AdminCheat(const class FString& Msg);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.BeamWeaponComponent
	 * Size -> 0x00C8 (FullSize[0x0730] - InheritedSize[0x0668])
	 */
	class UBeamWeaponComponent : public UPrimitiveComponent
	{
	public:
		class UParticleSystem*                                     ParticleSystemTemplate;                                  // 0x0668(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     ChargeupParticleSystemTemplate;                          // 0x0670(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     BurstWhenFiredSystemTemplate;                            // 0x0678(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     ImpactSystemTemplate;                                    // 0x0680(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Duration;                                                // 0x0688(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DamageRadius;                                            // 0x068C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              DamageType;                                              // 0x0690(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DamageDelay;                                             // 0x0698(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BaseDamage;                                              // 0x069C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Length;                                                  // 0x06A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       IsPenetrating;                                           // 0x06A4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VAJI[0x3];                                   // 0x06A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TargetTrackingSpeed;                                     // 0x06A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       UseOwnerForward;                                         // 0x06AC(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5AKK[0x3];                                   // 0x06AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Offset;                                                  // 0x06B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ChargeupTime;                                            // 0x06B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       WhenChargingWaitForCallToFire;                           // 0x06B8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       DeactivateChargeupOnFiring;                              // 0x06B9(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NE4K[0x6];                                   // 0x06BA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             BeamStoppedFiringEvent;                                  // 0x06C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		TWeakObjectPtr<class AActor>                               BeamTarget;                                              // 0x06D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UParticleSystemComponent*                            ParticleComp;                                            // 0x06D8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class UParticleSystemComponent*                            ChargeUpComp;                                            // 0x06E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class UParticleSystemComponent*                            ImpactComp;                                              // 0x06E8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_14E8[0x40];                                  // 0x06F0(0x0040) MISSED OFFSET (PADDING)

	public:
		void UpdateBeamVisuals();
		void StopFiring();
		void StartFiring();
		void StartCharging();
		void SetTarget(class AActor* Target);
		class AActor* GetTarget();
		class UParticleSystemComponent* GetParticleSystem();
		double GetLastStoppedFiringTime();
		bool GetIsFiring();
		bool GetIsCharging();
		class UParticleSystemComponent* GetImpactParticleSystem();
		class UParticleSystemComponent* GetChargeupParticleSystem();
		struct FVector GetBeamEndLocation();
		void BeamStoppedFiringEvent__DelegateSignature(class UBeamWeaponComponent* BeamComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.BeamWeaponController
	 * Size -> 0x0030 (FullSize[0x0108] - InheritedSize[0x00D8])
	 */
	class UBeamWeaponController : public UActorComponent
	{
	public:
		TArray<struct FComponentReference>                         BeamWeapons;                                             // 0x00D8(0x0010) Edit, BlueprintVisible, ZeroConstructor
		class FScriptMulticastDelegate                             BeamStoppedFiringEvent;                                  // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             BeamsStoppedFiringEvent;                                 // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable

	public:
		void StopFiringBeams();
		bool StartChargingBeams();
		bool StartChargingBeam();
		void OnBeamStoppedFiringHandler(class UBeamWeaponComponent* BeamWeaponComp);
		TArray<class UBeamWeaponComponent*> GetBeamWeaponComponents();
		bool FireBeams();
		bool FireBeam();
		void BeamsStoppedFiringEvent__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.BiomeZoneSettings
	 * Size -> 0x0090 (FullSize[0x0500] - InheritedSize[0x0470])
	 */
	class ABiomeZoneSettings : public AActor
	{
	public:
		class FString                                              BiomeZoneName;                                           // 0x0470(0x0010) Edit, ZeroConstructor
		float                                                      FinalTemperatureMultiplier;                              // 0x0480(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      FinalTemperatureExponent;                                // 0x0484(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      FinalTemperatureAddition;                                // 0x0488(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      PreOffsetTemperatureMultiplier;                          // 0x048C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      PreOffsetTemperatureExponent;                            // 0x0490(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      PreOffsetTemperatureAddition;                            // 0x0494(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      AboveTemperatureOffsetThreshold;                         // 0x0498(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      AboveTemperatureOffsetMultiplier;                        // 0x049C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      AboveTemperatureOffsetExponent;                          // 0x04A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      BelowTemperatureOffsetThreshold;                         // 0x04A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      BelowTemperatureOffsetMultiplier;                        // 0x04A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      BelowTemperatureOffsetExponent;                          // 0x04AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      AbsoluteTemperatureOverride;                             // 0x04B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		bool                                                       bPreventCrops : 1;                                       // 0x04B4(0x0001) BIT_FIELD Edit, BlueprintVisible, Interp, NoDestructor
		unsigned char                                              UnknownData_ILHY[0x3];                                   // 0x04B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EggRangeMaximumNumberOverride;                           // 0x04B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    EggMaximumNumberOverride;                                // 0x04BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      EggChanceToSpawnOverride;                                // 0x04C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      EggIntervalUnstasisChanceToSpawnOverride;                // 0x04C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      OverrideEggLimitsDinoClasses;                            // 0x04C8(0x0010) Edit, ZeroConstructor
		int32_t                                                    BiomeZonePriority;                                       // 0x04D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxMultiplier;                                           // 0x04DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundBase*                                          OverrideCombatMusicDay;                                  // 0x04E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundBase*                                          OverrideCombatMusicNight;                                // 0x04E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundBase*                                          OverrideCombatMusicDay_Heavy;                            // 0x04F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundBase*                                          OverrideCombatMusicNight_Heavy;                          // 0x04F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.BiomeZoneVolume
	 * Size -> 0x0168 (FullSize[0x0610] - InheritedSize[0x04A8])
	 */
	class ABiomeZoneVolume : public AVolume
	{
	public:
		class FString                                              BiomeZoneName;                                           // 0x04A8(0x0010) Edit, ZeroConstructor
		EBiomeZone                                                 BiomeZone;                                               // 0x04B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_T819[0x3];                                   // 0x04B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FinalTemperatureMultiplier;                              // 0x04BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      FinalTemperatureExponent;                                // 0x04C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      FinalTemperatureAddition;                                // 0x04C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      PreOffsetTemperatureMultiplier;                          // 0x04C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      PreOffsetTemperatureExponent;                            // 0x04CC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      PreOffsetTemperatureAddition;                            // 0x04D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      AboveTemperatureOffsetThreshold;                         // 0x04D4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      AboveTemperatureOffsetMultiplier;                        // 0x04D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      AboveTemperatureOffsetExponent;                          // 0x04DC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      BelowTemperatureOffsetThreshold;                         // 0x04E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      BelowTemperatureOffsetMultiplier;                        // 0x04E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      BelowTemperatureOffsetExponent;                          // 0x04E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      AbsoluteTemperatureOverride;                             // 0x04EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      AbsoluteMaxTemperature;                                  // 0x04F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      AbsoluteMinTemperature;                                  // 0x04F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		bool                                                       bPreventCrops : 1;                                       // 0x04F8(0x0001) BIT_FIELD Edit, BlueprintVisible, Interp, NoDestructor
		bool                                                       bIsOutside : 1;                                          // 0x04F8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bRemoveBuffWhenLeavingVolume : 1;                        // 0x04F8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_MN8O[0x3];                                   // 0x04F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EggRangeMaximumNumberOverride;                           // 0x04FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    EggMaximumNumberOverride;                                // 0x0500(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      EggChanceToSpawnOverride;                                // 0x0504(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      EggIntervalUnstasisChanceToSpawnOverride;                // 0x0508(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_75L5[0x4];                                   // 0x050C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      OverrideEggLimitsDinoClasses;                            // 0x0510(0x0010) Edit, ZeroConstructor
		int32_t                                                    BiomeZonePriority;                                       // 0x0520(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxMultiplier;                                           // 0x0524(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AbsoluteWindOverride;                                    // 0x0528(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      PreOffsetWindMultiplier;                                 // 0x052C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      PreOffsetWindExponent;                                   // 0x0530(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      PreOffsetWindAddition;                                   // 0x0534(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      AboveWindOffsetThreshold;                                // 0x0538(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      AboveWindOffsetMultiplier;                               // 0x053C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      AboveWindOffsetExponent;                                 // 0x0540(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      BelowWindOffsetThreshold;                                // 0x0544(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      BelowWindOffsetMultiplier;                               // 0x0548(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      BelowWindOffsetExponent;                                 // 0x054C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      FinalWindMultiplier;                                     // 0x0550(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      FinalWindExponent;                                       // 0x0554(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      FinalWindAddition;                                       // 0x0558(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		unsigned char                                              UnknownData_FGLB[0x4];                                   // 0x055C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              BiomeCustomDatas;                                        // 0x0560(0x0010) Edit, ZeroConstructor
		float                                                      StatusAdjustmentRateMultipliersPositive[0xC];            // 0x0570(0x0030) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      StatusAdjustmentRateMultipliersNegative[0xC];            // 0x05A0(0x0030) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bOnlyApplyAdjustmentRateValuesOutdoors;                  // 0x05D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bStatusAdjustRateValues;                                 // 0x05D1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bDisableDayTransitionSounds;                             // 0x05D2(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VIM4[0x5];                                   // 0x05D3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              BuffToGive;                                              // 0x05D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              BuffToPreventActiveUse;                                  // 0x05E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundBase*                                          OverrideCombatMusicDay;                                  // 0x05E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundBase*                                          OverrideCombatMusicDay_Heavy;                            // 0x05F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundBase*                                          OverrideCombatMusicNight;                                // 0x05F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundBase*                                          OverrideCombatMusicNight_Heavy;                          // 0x0600(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundBase*                                          ForceMusicInBiome;                                       // 0x0608(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		void OnEndOverlap(class AActor* Actor);
		void OnBeginOverlap(class AActor* Actor);
		bool STATIC_IsPointUnderwater(class UWorld* ForWorld, const struct FVector& AtPoint, bool bFastPath, float MinimumWaterHeight, bool bIgnoreVacuumStructures, bool bIgnorePainCausingVolumes);
		bool STATIC_IsPointInVacuumBase(class UWorld* ForWorld, const struct FVector& AtPoint);
		class APhysicsVolume* STATIC_GetPhysicsVolumeAtLocation(class UWorld* ForWorld, const struct FVector& AtPoint, bool bFastPath);
		class ABiomeZoneVolume* STATIC_GetBiomeZoneVolume(class UWorld* World, const struct FVector& Location);
		void STATIC_GetAllBiomeZones(class UWorld* World, TArray<class ABiomeZoneVolume*>* BiomeZones);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.BiomeZoneVolumeEffectUtility
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBiomeZoneVolumeEffectUtility : public UObject
	{
	public:
		void STATIC_SpawnRelevantEffect(TArray<struct FBiomeZoneVolumeEffect> Effects, class AActor* AttachTo, const struct FVector& Location, bool bIsImpactActor);
		class AActor* STATIC_SpawnImpactEffect(class UWorld* World, const struct FHitResult& HitResult, const struct FBiomeZoneImpactEffect& ImpactEffect, class AActor* Owner);
		struct FBiomeZoneVolumeEffect STATIC_GetRelevantEffect(TArray<struct FBiomeZoneVolumeEffect> Effects, class AActor* SourceActor, const struct FVector& ForLocation, bool bIsImpactActor);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.BTService_FindTarget
	 * Size -> 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
	 */
	class UBTService_FindTarget : public UBTService_BlackboardBase
	{
	public:
		bool                                                       bDontSet;                                                // 0x0090(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WI1M[0x7];                                   // 0x0091(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.BTService_UpdateAggro
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UBTService_UpdateAggro : public UBTService
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.BTTask_AttackTarget
	 * Size -> 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
	 */
	class UBTTask_AttackTarget : public UBTTaskNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.BTTask_GetRandomWanderDestination
	 * Size -> 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
	 */
	class UBTTask_GetRandomWanderDestination : public UBTTask_BlackboardBase
	{
	public:
		struct FVector                                             locOverride;                                             // 0x0080(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      randomOffsetMultiplier;                                  // 0x008C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseRandomNegativeXDir;                                  // 0x0090(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bOrientRandOffsetByRotation;                             // 0x0091(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5VB5[0x2];                                   // 0x0092(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            orientRandOffsetByRotation;                              // 0x0094(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.TerrainGenerator
	 * Size -> 0x0178 (FullSize[0x01A0] - InheritedSize[0x0028])
	 */
	class UTerrainGenerator : public UObject
	{
	public:
		unsigned char                                              UnknownData_YU39[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFloatMap*>                                   TemporaryMaps;                                           // 0x0030(0x0010) ZeroConstructor, Transient
		int32_t                                                    MapSizeX;                                                // 0x0040(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    MapSizeY;                                                // 0x0044(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    MapSeed;                                                 // 0x0048(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           MapOffset;                                               // 0x004C(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		float                                                      LandscapeRadius;                                         // 0x0054(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    SectionsPerComponent;                                    // 0x0058(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    QuadsPerSection;                                         // 0x005C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    ComponentsCountX;                                        // 0x0060(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ComponentsCountY;                                        // 0x0064(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           NorthRegion1Start;                                       // 0x0068(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           NorthRegion1End;                                         // 0x0070(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           NorthRegion2Start;                                       // 0x0078(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           NorthRegion2End;                                         // 0x0080(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           NorthRegion3Start;                                       // 0x0088(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           NorthRegion3End;                                         // 0x0090(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           SouthRegion1Start;                                       // 0x0098(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           SouthRegion1End;                                         // 0x00A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           SouthRegion2Start;                                       // 0x00A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           SouthRegion2End;                                         // 0x00B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           SouthRegion3Start;                                       // 0x00B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           SouthRegion3End;                                         // 0x00C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           EastRegion1Start;                                        // 0x00C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           EastRegion1End;                                          // 0x00D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           EastRegion2Start;                                        // 0x00D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           EastRegion2End;                                          // 0x00E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           EastRegion3Start;                                        // 0x00E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           EastRegion3End;                                          // 0x00F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           WestRegion1Start;                                        // 0x00F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           WestRegion1End;                                          // 0x0100(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           WestRegion2Start;                                        // 0x0108(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           WestRegion2End;                                          // 0x0110(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           WestRegion3Start;                                        // 0x0118(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           WestRegion3End;                                          // 0x0120(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    Version;                                                 // 0x0128(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2B5Q[0x4];                                   // 0x012C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        GenerationWeigthMapNames;                                // 0x0130(0x0010) Edit, ZeroConstructor
		class UMaterialInterface*                                  GenerationMaterial;                                      // 0x0140(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class FString>                                      CachedTerrainMaterialLayerNames;                         // 0x0148(0x0010) ZeroConstructor
		TArray<class ULandscapeMaterialInstanceConstant*>          CachedTerrainMaterials;                                  // 0x0158(0x0010) ZeroConstructor
		class UTerrainComponent*                                   TerrainComponent;                                        // 0x0168(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor
		struct FVector                                             BiomeGridSize;                                           // 0x0170(0x000C) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector                                             NPCGridSize;                                             // 0x017C(0x000C) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector2D                                           SupplyZonesGridSize;                                     // 0x0188(0x0008) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XO6C[0x10];                                  // 0x0190(0x0010) MISSED OFFSET (PADDING)

	public:
		class UGeneratorModule* VoroniModule(int32_t Seed, float Frequency, float displacement);
		class UGeneratorModule* TurbulenceModule(class UGeneratorModule* Source, int32_t Seed, float Frequency, float Power, float Roughness);
		class UFloatMap* ToFloatMap(class UFloatMap* Destination, class UGeneratorModule* Module, bool IsTemporary);
		class UGeneratorModule* ThresholdModule(class UGeneratorModule* Source, float Power, float Range, float Threshold);
		class UGeneratorModule* TerraceModule(class UGeneratorModule* Source, TArray<float> Control);
		class UFloatMap* Spread(class UFloatMap** Destination, class UFloatMap* Source, int32_t SpreadIteration, float SpreadStrength);
		class AActor* SpawnActorOnLandscape(class UClass* ActorClass, const struct FVector& Position, const struct FRotator& Rotation, const struct FVector& Scale, const struct FVector& OffsetVector);
		class AActor* SpawnActor(class UClass* ActorClass, const struct FVector& Position, const struct FRotator& Rotation, const struct FVector& Scale);
		class UGeneratorModule* SlopeModule(class UGeneratorModule* Source);
		class UFloatMap* ShrinkMask(class UFloatMap* Source, class UFloatMap* Destination, int32_t Iterations);
		class UFloatMap* SetAsTemporary(class UFloatMap* Destination);
		class UGeneratorModule* SelectModule(class UGeneratorModule* First, class UGeneratorModule* Second, class UGeneratorModule* Control, float Lower, float Upper, float EdgeFalloff);
		class UFloatMap* ScaleFloatMap(class UFloatMap* Source, float Scale, bool bClearSourceData);
		class UGeneratorModule* ScaleBiasModule(class UGeneratorModule* Source, float Scale, float Bias);
		class UFloatMap* Scale(class UFloatMap* Source, float Scale, bool bClearSourceData);
		class UGeneratorModule* SampleFloatMapModule(class UFloatMap* Source);
		class UGeneratorModule* RidgedMultiModule(int32_t Seed, float Frequency, float OctaveCount, float Lacunarity);
		class UFloatMap* Resize(class UFloatMap* Source, int32_t NewSize, bool bClearSourceData);
		void PreGenerateTerrain();
		class UGeneratorModule* PowerModule(class UGeneratorModule* First, class UGeneratorModule* Second);
		void PostCreateTerrain();
		class UObjectMap* Populate(TArray<struct FObjectListItem> ObjectsList, class UObjectMap* Destination, class UGeneratorModule* Probability, float MinDistance, float FixedZ, int32_t MaximumCount, int32_t Step, bool SingleThread);
		class UGeneratorModule* PointSampleFloatMapModule(class UFloatMap* Source);
		class UFloatMap* Pixelate(class UFloatMap* Source, int32_t CellSize);
		class UGeneratorModule* PerlinModule(int32_t Seed, float Frequency, float OctaveCount, float Persistence, float Lacunarity);
		class UGeneratorModule* OneMinusModule(class UGeneratorModule* Source);
		class UFloatMap* Normalize(class UFloatMap* Source, class UFloatMap* Destination, float Minimum, float Maximum);
		class UGeneratorModule* MultiplyModule(class UGeneratorModule* First, class UGeneratorModule* Second);
		class UGeneratorModule* MinModule(class UGeneratorModule* First, class UGeneratorModule* Second);
		class UObjectMap* MergeObjectMaps(class UObjectMap* First, class UObjectMap* Second, int32_t CellsToClear);
		class UGeneratorModule* MaxModule(class UGeneratorModule* First, class UGeneratorModule* Second);
		class UGeneratorModule* LinearModule();
		class UGeneratorModule* LinearCurveModule(class UGeneratorModule* First, TArray<float> Input, TArray<float> Output);
		class UGeneratorModule* LerpModule(class UGeneratorModule* First, class UGeneratorModule* Second, class UGeneratorModule* Alpha);
		class UGeneratorModule* InvertModule(class UGeneratorModule* Source);
		struct FVector GetPositionRelativeToTerrian(const struct FVector& Location);
		struct FVector GetLocationOnLandscape(const struct FVector& Position);
		void GenerateTerrain(class UFloatMap** HeightMap, TArray<class FString>* WeightmapsNames, TArray<class UByteMap*>* WeightMaps, class UObjectMap** ObjectMap, class UObjectMap** BiomeMap, class UObjectMap** NPCMap, class UMaterialInterface** LandscapeMaterial, class UObjectMap** PerComponentMaterialOverride, class UObjectMap** SupplyDropsMap, class UObjectMap** SupplyDropsPointsMap, TArray<struct FBiomeMiniMap>* BiomesMiniMap);
		class UFloatMap* GenerateHeightMapFromMask(class UFloatMap* Source, class UFloatMap* Destination, int32_t Iterations);
		void FloodFill(class UFloatMap* Source, float X, float Y, float Value);
		class UObjectMap* FillObjectMap(TArray<struct FObjectListItem> ObjectsList, class UObjectMap* Destination, class UGeneratorModule* Probability, float MinDistance, float FixedZ, int32_t MaximumCount, int32_t Step, bool SingleThread);
		class UGeneratorModule* ExponentModule(class UGeneratorModule* Source, float Exponent);
		class UFloatMap* EvaluateModules(class UFloatMap* Destination, class UGeneratorModule* Module);
		class UFloatMap* Erosion(class UFloatMap* HeightMap, class UFloatMap* Destination, int32_t IterationStep, float SoilCarryCapacity, float WaterEvaporationSpeed, float ErosionSpeed, float DepositionSpeed, float DirectionInertia, float MinimumSlope, float Gravity, float MinHeightForErosion, float DepositionStrength, float ErosionStrength);
		class UFloatMap* EnlargeMask(class UFloatMap* Source, class UFloatMap* Destination, int32_t Iterations);
		class UGeneratorModule* DisplaceModule(class UGeneratorModule* Source, class UGeneratorModule* X, class UGeneratorModule* Y, class UGeneratorModule* Z);
		void DeleteTemporaryMaps();
		class UGeneratorModule* CurveModule(class UGeneratorModule* Source, TArray<float> Input, TArray<float> Output);
		void CreateWater(class UClass* WaterPlane, class UClass* WaterFloorPlane, float SurfaceLevel, float FloorLevel);
		class UObjectMap* CreateObjectMapWithSize(int32_t Width, int32_t Height);
		class UObjectMap* CreateObjectMap(int32_t NewSizeX, int32_t NewSizeY);
		class UFloatMap* CreateFloatMap(int32_t SizeX, int32_t SizeY, bool IsTemporary);
		class UFloatMap* Copy(class UFloatMap* Source, class UFloatMap* Destination);
		class UByteMap* ConvertFloatMapToByteMap(class UFloatMap* FloatMap, bool bClearFloatMap);
		class UGeneratorModule* ConstModule(float Value);
		class UGeneratorModule* ClampModule(class UGeneratorModule* Source, float Lower, float Upper);
		class UGeneratorModule* CircularMaskModule(const struct FVector2D& Center, float CircleRadius, float Exp, int32_t Seed, float Frequency, float OctaveCount, float Persistence, float Lacunarity, float NoiseAmplitude);
		class UFloatMap* Cavity(class UFloatMap** Destination, class UFloatMap* Source, bool Concave, float Intensity, float Threshold, int32_t SpreadIteration, float SpreadStrength);
		class UFloatMap* Blur(class UFloatMap* First, bool bHorizontal, bool bVertical, bool additive, float Intensity);
		class UGeneratorModule* BlendModule(class UGeneratorModule* First, class UGeneratorModule* Second, class UGeneratorModule* Control);
		class UGeneratorModule* BillowModule(int32_t Seed, float Frequency, float OctaveCount, float Persistence, float Lacunarity);
		class UGeneratorModule* AddModule(class UGeneratorModule* First, class UGeneratorModule* Second);
		class UGeneratorModule* AbsModule(class UGeneratorModule* Source);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ByteMap
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UByteMap : public UObject
	{
	public:
		unsigned char                                              UnknownData_879N[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		void Init(int32_t InSizeX, int32_t InSizeY);
		int32_t GetSizeY();
		int32_t GetSizeX();
		int32_t GetSize();
		void Delete();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.CameraModifier_Climbing
	 * Size -> 0x0008 (FullSize[0x0060] - InheritedSize[0x0058])
	 */
	class UCameraModifier_Climbing : public UCameraModifier
	{
	public:
		class AShooterWeapon_Climb*                                OwningWeapon;                                            // 0x0058(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.CharacterViewPanelWidget
	 * Size -> 0x0028 (FullSize[0x0268] - InheritedSize[0x0240])
	 */
	class UCharacterViewPanelWidget : public UUserWidget
	{
	public:
		class FString                                              PreviewWidgetName;                                       // 0x0240(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_6L0B[0x18];                                  // 0x0250(0x0018) MISSED OFFSET (PADDING)

	public:
		void RefreshPreviewWidget();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ContextMenu
	 * Size -> 0x0058 (FullSize[0x0298] - InheritedSize[0x0240])
	 */
	class UContextMenu : public UUserWidget
	{
	public:
		class FScriptDelegate                                      OnPopulateMenu;                                          // 0x0240(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor
		class FScriptDelegate                                      OnPopulateMenuCustom;                                    // 0x0250(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor
		class FScriptMulticastDelegate                             OnActiveItemChanged;                                     // 0x0260(0x0010) Edit, ZeroConstructor, InstancedReference
		class FName                                                CustomName;                                              // 0x0270(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VNXN[0x20];                                  // 0x0278(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetActiveItem(class UContextMenuItem* Item);
		void PopulateContextMenuCustom__DelegateSignature(class UContextMenu* ContextMenu, const class FName& MenuName);
		void PopulateContextMenu__DelegateSignature(class UContextMenu* ContextMenu);
		class UContextMenuItem* GetActiveItem();
		void CloseMenu(bool CloseParents);
		void ActiveMenuItemChanged__DelegateSignature(class UContextMenu* menu, class UContextMenuItem* newItem, class UContextMenuItem* oldItem);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ContextMenuItem
	 * Size -> 0x0100 (FullSize[0x0340] - InheritedSize[0x0240])
	 */
	class UContextMenuItem : public UUserWidget
	{
	public:
		class FScriptDelegate                                      OnGetMenuContentEvent;                                   // 0x0240(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor
		class FScriptDelegate                                      OnGetMenuContentEventCustom;                             // 0x0250(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor
		class FScriptMulticastDelegate                             OnExecuteMainAction;                                     // 0x0260(0x0010) Edit, ZeroConstructor, InstancedReference
		class FScriptMulticastDelegate                             OnExecuteMainActionCustom;                               // 0x0270(0x0010) Edit, ZeroConstructor, InstancedReference
		class FName                                                SubmenuMenuAnchorName;                                   // 0x0280(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SubmenuIndicatorName;                                    // 0x0288(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ShortcutKeyWidgetName;                                   // 0x0290(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SwitchName;                                              // 0x0298(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SwitchContainerName;                                     // 0x02A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		EUContextMenuItemSwitchMode                                SwitchType;                                              // 0x02A8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       IsSwitchedOn;                                            // 0x02A9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZY82[0x2];                                   // 0x02AA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                CustomName;                                              // 0x02AC(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OU8H[0x8C];                                  // 0x02B4(0x008C) MISSED OFFSET (PADDING)

	public:
		void SetSubmenuEnabled(bool bEnabled);
		void SetShortcutKey(int32_t ComboKeyIdx, const struct FKey& Key);
		void SetJustification(ETextJustify Value);
		void SetCaption(const class FText& caption);
		class UWidget* OnGetContextMenuContent();
		void OnButtonClickedEventObjectCustom__DelegateSignature(class UContextMenuItem* ContextMenuItem, const class FName& SelectedOption);
		void OnButtonClickedEventObject__DelegateSignature(class UContextMenuItem* ContextMenuItem);
		void OnButtonClicked();
		void OnActiveMenuItemChanged(class UContextMenu* ContextMenu, class UContextMenuItem* NewActiveItem, class UContextMenuItem* OldActiveItem);
		bool GetSubmenuEnabled();
		class UContextMenu* GetSubmenuContentCustom__DelegateSignature(class UContextMenuItem* ContextMenuItem, const class FName& SelectedOption);
		class UContextMenu* GetSubmenuContent__DelegateSignature(class UContextMenuItem* ContextMenuItem);
		ETextJustify GetJustification();
		class FText GetCaption();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ContextMenu_DinoGroupEntry
	 * Size -> 0x0020 (FullSize[0x02B8] - InheritedSize[0x0298])
	 */
	class UContextMenu_DinoGroupEntry : public UContextMenu
	{
	public:
		class UClass*                                              ItemClass_SimpleButton;                                  // 0x0298(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ItemClass_SimpleCaption;                                 // 0x02A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ItemClass_Spinner;                                       // 0x02A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SubmenuClass;                                            // 0x02B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		void PopulateRootMenu(class UContextMenu* ContextMenu);
		void HandleActionSetGroup(class UContextMenuItem* Item);
		void HandleActionRemoveDino(class UContextMenuItem* Item);
		void HandleActionRemoveClass(class UContextMenuItem* Item);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ContextMenu_InventorySort
	 * Size -> 0x0008 (FullSize[0x02A0] - InheritedSize[0x0298])
	 */
	class UContextMenu_InventorySort : public UContextMenu
	{
	public:
		class UClass*                                              ItemClass_SortButton;                                    // 0x0298(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		void PopulateRootMenu(class UContextMenu* ContextMenu);
		void HandleActionWeight(class UContextMenuItem* Item);
		void HandleActionUnsort(class UContextMenuItem* Item);
		void HandleActionSpoilTimer(class UContextMenuItem* Item);
		void HandleActionAlphabetical(class UContextMenuItem* Item);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ContextMenu_PrimalItem
	 * Size -> 0x0030 (FullSize[0x02C8] - InheritedSize[0x0298])
	 */
	class UContextMenu_PrimalItem : public UContextMenu
	{
	public:
		class UClass*                                              ItemClass_SimpleButton;                                  // 0x0298(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ItemClass_SimpleCaption;                                 // 0x02A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ItemClass_Spinner;                                       // 0x02A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SubmenuClass;                                            // 0x02B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    SplitAmountValue;                                        // 0x02B8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    SplitAmountMax;                                          // 0x02BC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    CraftAmountValue;                                        // 0x02C0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    CraftAmountMax;                                          // 0x02C4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected

	public:
		void PopulateSubmenuSplitStack(class UContextMenu* ContextMenu);
		void PopulateSubmenuSplitAmount(class UContextMenu* ContextMenu);
		void PopulateSubmenuRemove(class UContextMenu* ContextMenu);
		void PopulateSubmenuCustom(class UContextMenu* ContextMenu, const class FName& ContextItemName);
		void PopulateSubmenuCraftAmount(class UContextMenu* ContextMenu);
		void PopulateRootMenu(class UContextMenu* ContextMenu);
		void PopulateFolderMenu(class UContextMenu* ContextMenu);
		void PopulateCraftMenu(class UContextMenu* ContextMenu);
		void HandleSplitAmountValueCommit(class UContextMenuItem_Spinner* Item, int32_t InValue, ETextCommit CommitMethod);
		class UContextMenu* HandleOnGetSubmenuSplitStackContent(class UContextMenuItem* MenuItem);
		class UContextMenu* HandleOnGetSubmenuSplitAmountContent(class UContextMenuItem* MenuItem);
		class UContextMenu* HandleOnGetSubmenuRemoveContent(class UContextMenuItem* MenuItem);
		class UContextMenu* HandleOnGetSubmenuCustomContent(class UContextMenuItem* MenuItem, const class FName& ContextItemName);
		class UContextMenu* HandleOnGetSubmenuCraftContent(class UContextMenuItem* MenuItem);
		class UContextMenu* HandleOnGetSubmenuCraftAmountContent(class UContextMenuItem* MenuItem);
		void HandleCraftAmountValueCommit(class UContextMenuItem_Spinner* Item, int32_t InValue, ETextCommit CommitMethod);
		void HandleActionUse(class UContextMenuItem* Item);
		void HandleActionUnequip(class UContextMenuItem* Item);
		void HandleActionTransfer(class UContextMenuItem* Item);
		void HandleActionSplitOne(class UContextMenuItem* Item);
		void HandleActionSplitHalf(class UContextMenuItem* Item);
		void HandleActionSplitAmount(class UContextMenuItem* Item);
		void HandleActionSplitAll(class UContextMenuItem* Item);
		void HandleActionRepair(class UContextMenuItem* Item);
		void HandleActionRenameFolder(class UContextMenuItem* Item);
		void HandleActionRemoveSkin(class UContextMenuItem* Item);
		void HandleActionRemoveAmmo(class UContextMenuItem* Item);
		void HandleActionRemoveAccessory(class UContextMenuItem* Item);
		void HandleActionFavorite(class UContextMenuItem* Item);
		void HandleActionEquipAllInFolder(class UContextMenuItem* Item);
		void HandleActionEquip(class UContextMenuItem* Item);
		void HandleActionDiscard(class UContextMenuItem* Item);
		void HandleActionDeleteFolder(class UContextMenuItem* Item);
		void HandleActionCustom(class UContextMenuItem* Item, const class FName& ContextItemName);
		void HandleActionCraftOne(class UContextMenuItem* Item);
		void HandleActionCraftAmount(class UContextMenuItem* Item);
		void HandleActionCraftAll(class UContextMenuItem* Item);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ContextMenuItem_Sort
	 * Size -> 0x0018 (FullSize[0x0358] - InheritedSize[0x0340])
	 */
	class UContextMenuItem_Sort : public UContextMenuItem
	{
	public:
		class FName                                                SorDirSwitcherName;                                      // 0x0340(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1ZA8[0x10];                                  // 0x0348(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ContextMenuItem_Spinner
	 * Size -> 0x0038 (FullSize[0x0378] - InheritedSize[0x0340])
	 */
	class UContextMenuItem_Spinner : public UContextMenuItem
	{
	public:
		class FScriptMulticastDelegate                             OnValueCommitted;                                        // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_L3B5[0x4];                                   // 0x0350(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MinValue;                                                // 0x0354(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    MaxValue;                                                // 0x0358(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_FVKL[0x1C];                                  // 0x035C(0x001C) MISSED OFFSET (PADDING)

	public:
		void SetValue(int32_t newValue);
		void SetMinValue(int32_t newValue);
		void SetMaxValue(int32_t newValue);
		void OnSpinnerValueCommitedEvent__DelegateSignature(class UContextMenuItem_Spinner* Item, int32_t InValue, ETextCommit CommitMethod);
		void HandleOnTextCommited(const class FText& Text, ETextCommit CommitMethod);
		void HandleOnTextChanged(const class FText& Text);
		void HandleOnButtonIncreaseClicked();
		void HandleOnButtonDecreaseClicked();
		int32_t GetValue();
		int32_t GetMinValue();
		int32_t GetMaxValue();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.CustomActorList
	 * Size -> 0x0018 (FullSize[0x0488] - InheritedSize[0x0470])
	 */
	class ACustomActorList : public AInfo
	{
	public:
		TArray<class AActor*>                                      ActorList;                                               // 0x0470(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate
		unsigned char                                              UnknownData_O0GD[0x8];                                   // 0x0480(0x0008) MISSED OFFSET (PADDING)

	public:
		void DestroyActors();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PointOfInterestManagerList
	 * Size -> 0x0008 (FullSize[0x0490] - InheritedSize[0x0488])
	 */
	class APointOfInterestManagerList : public ACustomActorList
	{
	public:
		bool                                                       bRefreshPointsArray : 1;                                 // 0x0488(0x0001) BIT_FIELD Edit, DisableEditOnTemplate, NoDestructor, Protected
		unsigned char                                              UnknownData_WFGQ[0x7];                                   // 0x0489(0x0007) MISSED OFFSET (PADDING)

	public:
		void ScanForAllValidPointsOfInterest();
		void ReConstructPointsInList();
		void PopulatePointsActorList();
		bool ManualAddPointOfInterestActor(class AActor* AddActor);
		bool CheckListForTagCollisions(class AActor* ForSpecificActor);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.CustomButtonWidget
	 * Size -> 0x0058 (FullSize[0x04E8] - InheritedSize[0x0490])
	 */
	class UCustomButtonWidget : public UButton
	{
	public:
		struct FCustomButtonWidgetStyle                            ExtendedWidgetStyle;                                     // 0x0490(0x0048) Edit, BlueprintVisible
		bool                                                       IsToggleButton;                                          // 0x04D8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       IsToggledOn;                                             // 0x04D9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YLPO[0xE];                                   // 0x04DA(0x000E) MISSED OFFSET (PADDING)

	public:
		void SetToggledState(bool IsToggled);
		void SetIsToggleButton(bool IsToggle);
		bool GetToggledState();
		bool GetIsToggleButton();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DraggableObjectInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UDraggableObjectInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.CustomCanvasWidget
	 * Size -> 0x0050 (FullSize[0x04E0] - InheritedSize[0x0490])
	 */
	class UCustomCanvasWidget : public UButton
	{
	public:
		unsigned char                                              UnknownData_QF8T[0x8];                                   // 0x0490(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bOverrideScreenCanvasProjection;                         // 0x0498(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIgnoreParentAlpha;                                      // 0x0499(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_023Q[0x6];                                   // 0x049A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnDraggedObject;                                         // 0x04A0(0x0010) ZeroConstructor, InstancedReference
		unsigned char                                              UnknownData_S880[0x30];                                  // 0x04B0(0x0030) MISSED OFFSET (PADDING)

	public:
		void OnDraggedClickedEventObject__DelegateSignature(class UWidget* draggeddWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DataListEntryButton
	 * Size -> 0x0118 (FullSize[0x05F8] - InheritedSize[0x04E0])
	 */
	class UDataListEntryButton : public UCustomCanvasWidget
	{
	public:
		unsigned char                                              UnknownData_QBXA[0x8];                                   // 0x04E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              DisplayString;                                           // 0x04E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              AdditionalDisplayString;                                 // 0x04F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                ContextMenuAnchorName;                                   // 0x0508(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          ItemIcon;                                                // 0x0510(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        ForegroundColor;                                         // 0x0518(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseSelectedBackgroundColor;                             // 0x0528(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QAJB[0x3];                                   // 0x0529(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        SelectedBackgroundColor;                                 // 0x052C(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q5VL[0x4];                                   // 0x053C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          AltHighlightBGTexture;                                   // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NameOffset;                                              // 0x0548(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bClickable;                                              // 0x054C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bEnabled;                                                // 0x054D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseDisplayString;                                       // 0x054E(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TGRM[0x1];                                   // 0x054F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        DisplayStringColor;                                      // 0x0550(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           DisplayStringOffset;                                     // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TextDisplayStringSize;                                   // 0x0568(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           DisplayStringScale;                                      // 0x056C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisplayStringCenterX;                                   // 0x0574(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisplayStringCenterY;                                   // 0x0575(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bSetIndexPlusOneToDisplayString;                         // 0x0576(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowClickingWhenNoEntry;                               // 0x0577(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UFont*                                               DisplayStringFont;                                       // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          SelectedIcon;                                            // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        DisabledColor;                                           // 0x0588(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        TintColorOverride;                                       // 0x0598(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDataListAutomaticallyOverrideText : 1;                  // 0x05A8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDataListAutomaticallyOverrideEnabled : 1;               // 0x05A8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bWrapText : 1;                                           // 0x05A8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseDataProviderCustomColor : 1;                         // 0x05A8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideTintColor : 1;                                  // 0x05A8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bShowDisplayStringWhenHasItem : 1;                       // 0x05A8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseCustomTextColor : 1;                                 // 0x05A8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSelected : 1;                                           // 0x05A8(0x0001) BIT_FIELD NoDestructor
		bool                                                       bForceDraggingDisabled : 1;                              // 0x05A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDraggable : 1;                                          // 0x05A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_N03Q : 2;                                    // 0x05A9(0x0001) BIT_FIELD (PADDING)
		bool                                                       bAllowExtraIcon : 1;                                     // 0x05A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bToggleButton : 1;                                       // 0x05A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_5FT4[0x16];                                  // 0x05AA(0x0016) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          OverrideDisabledIcon;                                    // 0x05C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           WrappedTextSpacingAdjust;                                // 0x05C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6NC5[0x18];                                  // 0x05D0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic*                            MyIconMat;                                               // 0x05E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		class UMenuAnchor*                                         ContextMenuAnchor;                                       // 0x05F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected

	public:
		class UWidget* OnGetContextMenuContent();
		void ClickedSecondaryButton(class UWidget* clickedWidget);
		void ClickedButton(class UWidget* clickedWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.AdminPlayerInfoEntryButton
	 * Size -> 0x0050 (FullSize[0x0648] - InheritedSize[0x05F8])
	 */
	class UAdminPlayerInfoEntryButton : public UDataListEntryButton
	{
	public:
		bool                                                       bIsCustom : 1;                                           // 0x05F8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_Q6B7[0x7];                                   // 0x05F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PlayerName;                                              // 0x0600(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              SteamPlayerName;                                         // 0x0610(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              LinkedPlayerID;                                          // 0x0620(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bCenterDisplayName;                                      // 0x0630(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RKRU[0x3];                                   // 0x0631(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        DisplayStringSelectedColor;                              // 0x0634(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZBCR[0x4];                                   // 0x0644(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.AllPaintingsEntryButton
	 * Size -> 0x0030 (FullSize[0x0628] - InheritedSize[0x05F8])
	 */
	class UAllPaintingsEntryButton : public UDataListEntryButton
	{
	public:
		class FString                                              filename;                                                // 0x05F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              FilePath;                                                // 0x0608(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		struct FLinearColor                                        DisplayStringSelectedColor;                              // 0x0618(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.AllPlayersEntryButton
	 * Size -> 0x0048 (FullSize[0x0640] - InheritedSize[0x05F8])
	 */
	class UAllPlayersEntryButton : public UDataListEntryButton
	{
	public:
		class FString                                              PlayerName;                                              // 0x05F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              TribeName;                                               // 0x0608(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		uint64_t                                                   PlayerId;                                                // 0x0618(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		uint64_t                                                   TargetingTeamID;                                         // 0x0620(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class AShooterCharacter*                                   CurrentCharachter;                                       // 0x0628(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FLinearColor                                        DisplayStringSelectedColor;                              // 0x0630(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.CheatFunctionInfoEntryButton
	 * Size -> 0x0030 (FullSize[0x0628] - InheritedSize[0x05F8])
	 */
	class UCheatFunctionInfoEntryButton : public UDataListEntryButton
	{
	public:
		bool                                                       bIsCustom : 1;                                           // 0x05F8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_8RLW[0x7];                                   // 0x05F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              FunctionName;                                            // 0x0600(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bCenterDisplayName;                                      // 0x0610(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Z3Q2[0x3];                                   // 0x0611(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        DisplayStringSelectedColor;                              // 0x0614(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FolderNameTextClipOffset;                                // 0x0624(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DataListEntryButton_CustomOverlay
	 * Size -> 0x0090 (FullSize[0x0688] - InheritedSize[0x05F8])
	 */
	class UDataListEntryButton_CustomOverlay : public UDataListEntryButton
	{
	public:
		struct FSlateBrush                                         CustomOverlayImage;                                      // 0x05F8(0x0078) Edit, DisableEditOnInstance
		class UMaterialInterface*                                  Material;                                                // 0x0670(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bCustomOverlayEnabled : 1;                               // 0x0678(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_BZ9Y[0x3];                                   // 0x0679(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           CustomOverlayScale;                                      // 0x067C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TZQ8[0x4];                                   // 0x0684(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DataListEntryButton_PrimalFolder
	 * Size -> 0x00A0 (FullSize[0x0698] - InheritedSize[0x05F8])
	 */
	class UDataListEntryButton_PrimalFolder : public UDataListEntryButton
	{
	public:
		struct FVector2D                                           ItemNameSpacing;                                         // 0x05F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsItemSlotButton : 1;                                   // 0x0600(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSimpleIconOnly : 1;                                     // 0x0600(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_OIC0[0x3];                                   // 0x0601(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TextScaleMultiplier;                                     // 0x0604(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseNewRenderingPath;                                    // 0x0608(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9R6P[0x3];                                   // 0x0609(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                TextLabelName;                                           // 0x060C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JKUV[0x4];                                   // 0x0614(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPrimalFolderIcons                                  IconsNormal;                                             // 0x0618(0x0020) Edit, DisableEditOnInstance
		struct FPrimalFolderIcons                                  IconsSelected;                                           // 0x0638(0x0020) Edit, DisableEditOnInstance
		class FString                                              FolderName;                                              // 0x0658(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      FolderNameTextClipOffset;                                // 0x0668(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FolderNameTextFontScale;                                 // 0x066C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          FolderIcon;                                              // 0x0670(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		EFolderWidgetType                                          FolderType;                                              // 0x0678(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_31P6[0x3];                                   // 0x0679(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FColor                                              FontColor;                                               // 0x067C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              FolderLevel;                                             // 0x0680(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TR7K[0x7];                                   // 0x0681(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataListPanel*                                      ParentPanel;                                             // 0x0688(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_B6X5[0x8];                                   // 0x0690(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DataListEntryButton_PrimalItem
	 * Size -> 0x0568 (FullSize[0x0B60] - InheritedSize[0x05F8])
	 */
	class UDataListEntryButton_PrimalItem : public UDataListEntryButton
	{
	public:
		struct FVector2D                                           DesiredSize;                                             // 0x05F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              MiscInfoStringColor;                                     // 0x0600(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              ItemNameColor;                                           // 0x0604(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              ItemCategoryColor;                                       // 0x0608(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_URT0[0x4];                                   // 0x060C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FButtonStyle                                        WidgetStyleWhenBroken;                                   // 0x0610(0x0248) Edit, BlueprintVisible
		struct FDataListEntryButtonBorderColors                    NormalBorderColors;                                      // 0x0858(0x0010) Edit, DisableEditOnInstance
		struct FDataListEntryButtonBorderColors                    BrokenBorderColors;                                      // 0x0868(0x0010) Edit, DisableEditOnInstance
		float                                                      DurabilityBarBorderThickness;                            // 0x0878(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DurabilityBarThickness;                                  // 0x087C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              DurabilityBarFgColor;                                    // 0x0880(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              DurabilityBarBgColor;                                    // 0x0884(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              SpoilingBarFgColor;                                      // 0x0888(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              SpoilingBarBgColor;                                      // 0x088C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FSlateBrush                                         WidgetSelectedStyleBrush;                                // 0x0890(0x0078) Edit, BlueprintVisible
		struct FSlateBrush                                         WidgetActiveStyleBrush;                                  // 0x0908(0x0078) Edit, BlueprintVisible
		struct FSlateBrush                                         WidgetBrokenOverlayStyleBrush;                           // 0x0980(0x0078) Edit, BlueprintVisible
		struct FColor                                              UnselectedTintColor;                                     // 0x09F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              TintEngramRequirementsMet;                               // 0x09FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              TintEngramRequirementsUnmet;                             // 0x0A00(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              TintBlueprintRequirementsMet;                            // 0x0A04(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              TintBlueprintRequirementsUnmet;                          // 0x0A08(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              TintTekBlueprintRequirementsMet;                         // 0x0A0C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              TintTekBlueprintRequirementsUnmet;                       // 0x0A10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              TintCompatibleWithDraggedItem;                           // 0x0A14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              CraftRepairIconTint;                                     // 0x0A18(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FMargin                                             BorderSizePx;                                            // 0x0A1C(0x0010) Edit, DisableEditOnInstance
		unsigned char                                              UnknownData_YOGK[0x4];                                   // 0x0A2C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          EngramBg;                                                // 0x0A30(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          BlueprintBg;                                             // 0x0A38(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          TekgramBg;                                               // 0x0A40(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          ItemQualityOverlay;                                      // 0x0A48(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          SlottedIcon;                                             // 0x0A50(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          ActiveSlotIcon;                                          // 0x0A58(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          CraftingIcon;                                            // 0x0A60(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          RepairingIcon;                                           // 0x0A68(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          BrokenIcon;                                              // 0x0A70(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           QuantityTxtPosition;                                     // 0x0A78(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           AmmoTxtPosition;                                         // 0x0A80(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           WeightTxtPosition;                                       // 0x0A88(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           NameTxtPositionPercent;                                  // 0x0A90(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           NameTxtBoxSizePercent;                                   // 0x0A98(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           CategoryTxtPosition;                                     // 0x0AA0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           ItemNameSpacing;                                         // 0x0AA8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    UseItemCraftQueueIndex;                                  // 0x0AB0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseRemoteCraftQueue : 1;                                // 0x0AB4(0x0001) BIT_FIELD NoDestructor
		bool                                                       bIsItemSlotButton : 1;                                   // 0x0AB4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_UW41[0x3];                                   // 0x0AB5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TextScaleMultiplier;                                     // 0x0AB8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TextArmorDamageSize;                                     // 0x0ABC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TextQuantitySize;                                        // 0x0AC0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TextAmmoSize;                                            // 0x0AC4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TextWeightSize;                                          // 0x0AC8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TextNameSize;                                            // 0x0ACC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TextCategorySize;                                        // 0x0AD0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       EnableTextShadow;                                        // 0x0AD4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       EnableTextGlow;                                          // 0x0AD5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0OE6[0x2];                                   // 0x0AD6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        TextGlowColor;                                           // 0x0AD8(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           TextGlowInnerRadius;                                     // 0x0AE8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           TextGlowOuterRadius;                                     // 0x0AF0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UFont*                                               DetailTextFont;                                          // 0x0AF8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ItemIconScale;                                           // 0x0B00(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_F4GK[0x5C];                                  // 0x0B04(0x005C) MISSED OFFSET (PADDING)

	public:
		void HandleOnContextMenuIsOpenChanged(bool bIsOpen);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HostSessionEntryButton
	 * Size -> 0x0058 (FullSize[0x0650] - InheritedSize[0x05F8])
	 */
	class UHostSessionEntryButton : public UDataListEntryButton
	{
	public:
		bool                                                       bIsCustom : 1;                                           // 0x05F8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsProcedural : 1;                                       // 0x05F8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_CYQG[0x7];                                   // 0x05F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              DisplayName;                                             // 0x0600(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bCenterDisplayName;                                      // 0x0610(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WBOA[0x7];                                   // 0x0611(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              MapName;                                                 // 0x0618(0x0010) ZeroConstructor, Transient
		class FString                                              ModName;                                                 // 0x0628(0x0010) ZeroConstructor, Transient
		class FString                                              ModPath;                                                 // 0x0638(0x0010) ZeroConstructor, Transient
		uint64_t                                                   ModItemId;                                               // 0x0648(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.OnlineSessionEntryButton
	 * Size -> 0x0198 (FullSize[0x0790] - InheritedSize[0x05F8])
	 */
	class UOnlineSessionEntryButton : public UDataListEntryButton
	{
	public:
		class FString                                              GameName;                                                // 0x05F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              BuildId;                                                 // 0x0608(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              OwnerName;                                               // 0x0618(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              MapName;                                                 // 0x0628(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              DayTimeStr;                                              // 0x0638(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		uint32_t                                                   NumPlayers;                                              // 0x0648(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		uint32_t                                                   MaxNumPlayers;                                           // 0x064C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		uint64_t                                                   ModId;                                                   // 0x0650(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		uint64_t                                                   TotalConversionId;                                       // 0x0658(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		uint64_t                                                   Ping;                                                    // 0x0660(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bHasPassword;                                            // 0x0668(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsFavourite;                                            // 0x0669(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsPVEServer;                                            // 0x066A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KLK1[0x5];                                   // 0x066B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          PasswordTexture;                                         // 0x0670(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsOfficialServer;                                       // 0x0678(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUsingBattleEye;                                         // 0x0679(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowDownloadCharacters;                                // 0x067A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowDownloadItems;                                     // 0x067B(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_K98W[0x4];                                   // 0x067C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          BattleEyeTexture;                                        // 0x0680(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          OfficialServerTexture;                                   // 0x0688(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          PVPServerTexture;                                        // 0x0690(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          PVEServerTexture;                                        // 0x0698(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        DisplayStringSelectedColor;                              // 0x06A0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_92EM[0xE0];                                  // 0x06B0(0x00E0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ServerInfoInfoEntryButton
	 * Size -> 0x0048 (FullSize[0x0640] - InheritedSize[0x05F8])
	 */
	class UServerInfoInfoEntryButton : public UDataListEntryButton
	{
	public:
		bool                                                       bIsCustom : 1;                                           // 0x05F8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_64U9[0x7];                                   // 0x05F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              InfoName;                                                // 0x0600(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              InfoValue;                                               // 0x0610(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bCenterDisplayName;                                      // 0x0620(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YBSK[0x3];                                   // 0x0621(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        DisplayStringSelectedColor;                              // 0x0624(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TextClipOffset;                                          // 0x0634(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FolderNameTextFontScale;                                 // 0x0638(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4D3W[0x4];                                   // 0x063C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DraggedDecoratorWidget
	 * Size -> 0x0018 (FullSize[0x04F8] - InheritedSize[0x04E0])
	 */
	class UDraggedDecoratorWidget : public UCustomCanvasWidget
	{
	public:
		unsigned char                                              UnknownData_QH4E[0x18];                                  // 0x04E0(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HUDOVerlayWidget
	 * Size -> 0x0050 (FullSize[0x0530] - InheritedSize[0x04E0])
	 */
	class UHUDOVerlayWidget : public UCustomCanvasWidget
	{
	public:
		float                                                      NotificationsYOffset;                                    // 0x04E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsUnderlay;                                             // 0x04E4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2Y82[0x4B];                                  // 0x04E5(0x004B) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ProgressBarWidget
	 * Size -> 0x00F8 (FullSize[0x05D8] - InheritedSize[0x04E0])
	 */
	class UProgressBarWidget : public UCustomCanvasWidget
	{
	public:
		class UTexture2D*                                          ProgressBarBackground;                                   // 0x04E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          ProgressBarForeground;                                   // 0x04E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CurrentPercent;                                          // 0x04F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        BarForegroundColor;                                      // 0x04F4(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PercentInterpolationSpeed;                               // 0x0504(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        BarFlashColor;                                           // 0x0508(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        BarFlashColorBackground;                                 // 0x0518(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BarFlashSpeed;                                           // 0x0528(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BarFlashThreshold;                                       // 0x052C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BarFlashDuration;                                        // 0x0530(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4AMD[0x4];                                   // 0x0534(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              DisplayString;                                           // 0x0538(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		struct FLinearColor                                        DisplayStringColor;                                      // 0x0548(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UFont*                                               DisplayStringFont;                                       // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           DisplayStringOffset;                                     // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           DisplayStringScale;                                      // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisplayStringCenterX : 1;                               // 0x0570(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisplayStringCenterY : 1;                               // 0x0570(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPrintNumbersInDisplayString : 1;                        // 0x0570(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAlwaysDrawDisplayString : 1;                            // 0x0570(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisplayStringNumbersUseFloats : 1;                      // 0x0570(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBarFlashThresholdAbsolute : 1;                          // 0x0570(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDoBarFlashOnDecrease : 1;                               // 0x0570(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDoBarFlashOnIncrease : 1;                               // 0x0570(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bInterpolatePercent : 1;                                 // 0x0571(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseDisplayString : 1;                                   // 0x0571(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseLinkedCharacterStatus : 1;                           // 0x0571(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseOutlineDropShadow : 1;                               // 0x0571(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		EPrimalCharacterStatusValue                                LinkedCharacterStatusValueType;                          // 0x0572(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HHDH[0x1];                                   // 0x0573(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        BarBackgroundColor;                                      // 0x0574(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q0MK[0x54];                                  // 0x0584(0x0054) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.SpawnMapWidget
	 * Size -> 0x0068 (FullSize[0x0548] - InheritedSize[0x04E0])
	 */
	class USpawnMapWidget : public UCustomCanvasWidget
	{
	public:
		class UMaterialInstance*                                   MI;                                                      // 0x04E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableMapDrawing;                                      // 0x04E8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableMarkersAndSpawnPoints;                           // 0x04E9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RARN[0x2];                                   // 0x04EA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                FogOfWarTextureParameterName;                            // 0x04EC(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TimeToUpdateTooltipForEachSpawnPoint;                    // 0x04F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SpawnPointAreaToMapAreaPercentage;                       // 0x04F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DTOM[0x4];                                   // 0x04FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              SpawnPointUITemplate;                                    // 0x0500(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInstanceDynamic*                            Map_DynamicMI;                                           // 0x0508(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  RegionMarkerMI;                                          // 0x0510(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           RegionMarkerSize;                                        // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XCFD[0x20];                                  // 0x0520(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUI_Spawn*                                           SpawnUI;                                                 // 0x0540(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.StoreItemWidget
	 * Size -> 0x00C0 (FullSize[0x05A0] - InheritedSize[0x04E0])
	 */
	class UStoreItemWidget : public UCustomCanvasWidget
	{
	public:
		float                                                      ItemPrice;                                               // 0x04E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_S6IY[0x4];                                   // 0x04E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ItemName;                                                // 0x04E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		struct FSlateBrush                                         ItemIcon;                                                // 0x04F8(0x0078) Edit, DisableEditOnInstance
		struct FSlateColor                                         ForegroundColor;                                         // 0x0570(0x0028) Edit, DisableEditOnInstance
		float                                                      PriceOffset;                                             // 0x0598(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NameOffset;                                              // 0x059C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_PreviewWidget
	 * Size -> 0x0198 (FullSize[0x0678] - InheritedSize[0x04E0])
	 */
	class UUI_PreviewWidget : public UCustomCanvasWidget
	{
	public:
		unsigned char                                              UnknownData_1QFR[0x8];                                   // 0x04E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FOV;                                                     // 0x04E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FV72[0x4];                                   // 0x04EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UTextureRenderTarget2D*>                      RenderTargets;                                           // 0x04F0(0x0010) Edit, ZeroConstructor
		struct FVector                                             MeshScale;                                               // 0x0500(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            MeshRotation;                                            // 0x050C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             CameraPivotOffset;                                       // 0x0518(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           PanExtents;                                              // 0x0524(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PanSpeed;                                                // 0x052C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PanBrakeSpeed;                                           // 0x0530(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CameraDistance;                                          // 0x0534(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaximumZoomMultiplier;                                   // 0x0538(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinimumZoomMultiplier;                                   // 0x053C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DefaultZoomMultiplier;                                   // 0x0540(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bLimitPivotOffset;                                       // 0x0544(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TODB[0x3];                                   // 0x0545(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxLimitPivotOffset;                                     // 0x0548(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BrakeSpeed;                                              // 0x054C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ZoomInterpSpeed;                                         // 0x0550(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WheelDeltaMultiplier;                                    // 0x0554(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RotationSpeed;                                           // 0x0558(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinPitch;                                                // 0x055C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxPitch;                                                // 0x0560(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bAutoRotateWidget;                                       // 0x0564(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7JIO[0x3];                                   // 0x0565(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            AutoRotator;                                             // 0x0568(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		ESkyLightSourceType                                        AmbientSourceType;                                       // 0x0574(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_R9AR[0x3];                                   // 0x0575(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextureCube*                                        AmbientCubemap;                                          // 0x0578(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              AmbientLightColor;                                       // 0x0580(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AmbientBrightness;                                       // 0x0584(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bSwapInput : 1;                                          // 0x0588(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bChangeDirectionalLightRelativeRotation : 1;             // 0x0588(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_33UE[0x3];                                   // 0x0589(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            DirectionalLightRelativeRotation;                        // 0x058C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             DirectionalLightRelativeLocation;                        // 0x0598(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              DirectionalLightColor;                                   // 0x05A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DirectionalLightBrightness;                              // 0x05A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RTQualityMultiplier;                                     // 0x05AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      OverrideShadowBias;                                      // 0x05B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GSYP[0x4];                                   // 0x05B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextureRenderTarget2D*                              RenderTarget;                                            // 0x05B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ZoomMultiplier;                                          // 0x05C0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WDUN[0x24];                                  // 0x05C4(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWorld*                                              GameWorld;                                               // 0x05E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		float                                                      TargetZoomMultiplier;                                    // 0x05F0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_PEPK[0x4];                                   // 0x05F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USceneComponent*>                             PreviewComponents;                                       // 0x05F8(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected
		struct FVector2D                                           RotationVelocity;                                        // 0x0608(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		struct FVector2D                                           PanVelocity;                                             // 0x0610(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		struct FVector2D                                           Pan;                                                     // 0x0618(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UMeshComponent*                                      PreviewMesh;                                             // 0x0620(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected
		class UWorld*                                              PreviewWorld;                                            // 0x0628(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class USceneCaptureComponent2D*                            CaptureComponent;                                        // 0x0630(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected
		class UDirectionalLightComponent*                          DirctionalLight;                                         // 0x0638(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected
		class USkyLightComponent*                                  SkyLight;                                                // 0x0640(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected
		class ULineBatchComponent*                                 LineBatcher;                                             // 0x0648(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected
		struct FLinearColor                                        PreviewWidgetColorFactor;                                // 0x0650(0x0010) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_6O2S[0xC];                                   // 0x0660(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            OrbitRotation;                                           // 0x066C(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DamageVolumeBase
	 * Size -> 0x0030 (FullSize[0x04D8] - InheritedSize[0x04A8])
	 */
	class ADamageVolumeBase : public AVolume
	{
	public:
		float                                                      DamageAmount;                                            // 0x04A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DamageInterval;                                          // 0x04AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              DamageType;                                              // 0x04B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FDamageNegatingItem>                         DamageNegatingItems;                                     // 0x04B8(0x0010) Edit, ZeroConstructor
		unsigned char                                              UnknownData_MISK[0x10];                                  // 0x04C8(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnEndOverlap(class AActor* Actor);
		void OnBeginOverlap(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DamageVolumeSwamp
	 * Size -> 0x0008 (FullSize[0x04E0] - InheritedSize[0x04D8])
	 */
	class ADamageVolumeSwamp : public ADamageVolumeBase
	{
	public:
		unsigned char                                              UnknownData_HVXW[0x8];                                   // 0x04D8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DatabaseShared
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UDatabaseShared : public UObject
	{
	public:
		bool                                                       bInitialized : 1;                                        // 0x0028(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_4N61[0x3F];                                  // 0x0029(0x003F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.Database_LoginData
	 * Size -> 0x0010 (FullSize[0x0078] - InheritedSize[0x0068])
	 */
	class UDatabase_LoginData : public UDatabaseShared
	{
	public:
		unsigned char                                              UnknownData_AIX1[0x10];                                  // 0x0068(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.Database_LoginData_Redis
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UDatabase_LoginData_Redis : public UDatabase_LoginData
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.Database_PubSub_GeneralNotifications
	 * Size -> 0x0010 (FullSize[0x0078] - InheritedSize[0x0068])
	 */
	class UDatabase_PubSub_GeneralNotifications : public UDatabaseShared
	{
	public:
		unsigned char                                              UnknownData_5W7S[0x10];                                  // 0x0068(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.Database_PubSub_GeneralNotifications_Redis
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UDatabase_PubSub_GeneralNotifications_Redis : public UDatabase_PubSub_GeneralNotifications
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DataListEntryWidget
	 * Size -> 0x00B0 (FullSize[0x02F0] - InheritedSize[0x0240])
	 */
	class UDataListEntryWidget : public UUserWidget
	{
	public:
		class FName                                                DataListButtonName;                                      // 0x0240(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    ExistingButtonExplicitIndexType;                         // 0x0248(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TraditionalButtonName;                                   // 0x024C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TraditionalLabelName;                                    // 0x0254(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DK6F[0x4];                                   // 0x025C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          ButtonBackgroundOverride;                                // 0x0260(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              DisplayStringOverride;                                   // 0x0268(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		int32_t                                                    PrimalItemButton_UseItemCraftQueueIndex;                 // 0x0278(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       PrimalItemButton_bUseRemoteCraftQueue : 1;               // 0x027C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideButtonShowDisplayStringWhenHasItem : 1;         // 0x027C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideButtonShowDisplayStringWhenHasItemValue : 1;    // 0x027C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideButtonDisplayStringCenterX : 1;                 // 0x027C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideButtonDisplayStringCenterXValue : 1;            // 0x027C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideButtonDisplayStringCenterY : 1;                 // 0x027C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideButtonDisplayStringCenterYValue : 1;            // 0x027C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideButtonDisplayStringOffset : 1;                  // 0x027C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_LOJY[0x3];                                   // 0x027D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           OverrideButtonDisplayStringOffsetValue;                  // 0x0280(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bOverrideButtonDisplayStringScale : 1;                   // 0x0288(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideButtonDisplayStringFontSize : 1;                // 0x0288(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseEngramToolTips : 1;                                  // 0x0288(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_QITC[0x3];                                   // 0x0289(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OverrideButtonDisplayStringFontSizeValue;                // 0x028C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           OverrideButtonDisplayStringScaleValue;                   // 0x0290(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          OverrideButtonSelectedIcon;                              // 0x0298(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bBoundToDragging;                                        // 0x02A0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       CanBeHighlightedWhenEmpty;                               // 0x02A1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_L9F5[0x4E];                                  // 0x02A2(0x004E) MISSED OFFSET (PADDING)

	public:
		void OnDraggedClickedEventObject(class UWidget* draggeddWidget);
		void InitializeMeDefaults();
		class UDataListEntryButton* GetDataListButton();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DataListInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UDataListInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DataListPanel
	 * Size -> 0x01A8 (FullSize[0x07E8] - InheritedSize[0x0640])
	 */
	class UDataListPanel : public UScrollBox
	{
	public:
		class UClass*                                              EntryWidgetTemplate;                                     // 0x0640(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              EntryListTemplate;                                       // 0x0648(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              NullEntryWidgetTemplate;                                 // 0x0650(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              PaddingEntryWidgetTemplate;                              // 0x0658(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              FolderWidgetTemplate;                                    // 0x0660(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              GenericWidgetTemplate;                                   // 0x0668(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class FString>                                      CustomFolders;                                           // 0x0670(0x0010) ZeroConstructor, Transient
		class UTexture2D*                                          FolderIcon;                                              // 0x0680(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              FolderColor;                                             // 0x0688(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_32XX[0x4];                                   // 0x068C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          BackFolderIcon;                                          // 0x0690(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              BackFolderColor;                                         // 0x0698(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_L4R9[0x4];                                   // 0x069C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          CustomFolderIcon;                                        // 0x06A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              CustomFolderColor;                                       // 0x06A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bSupportsCustomFolders : 1;                              // 0x06AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowMultiLevelCustomFolders : 1;                       // 0x06AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsePaddingTemplate : 1;                                 // 0x06AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseForEngramList : 1;                                   // 0x06AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceRefreshDataListWidgetAdjacents : 1;                // 0x06AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_20PM[0x3];                                   // 0x06AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bBringHoveredItemsToTop;                                 // 0x06B0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bEnableSupportCustomFolders;                             // 0x06B1(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bForceDragging;                                          // 0x06B2(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bForceEntryDisplayString;                                // 0x06B3(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceEntryClickWhenNoData;                              // 0x06B4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseExistingButtons;                                     // 0x06B5(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseExistingButtonExplicitEntryIndexTypeMapping;         // 0x06B6(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bSelectEntriesOnHighlight;                               // 0x06B7(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MinimalItemCount;                                        // 0x06B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bSupplyAdjacentsToChildren;                              // 0x06BC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bCanBeSelectedWhenEmpty;                                 // 0x06BD(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_G6P1[0x2];                                   // 0x06BE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    FilledRowsBeforeEnablingScrolling;                       // 0x06C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_D78A[0x4];                                   // 0x06C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDataListEntryWidget*>                        EntryWidgets;                                            // 0x06C8(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_9Z64[0x70];                                  // 0x06D8(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              CustomFolderBlueprint;                                   // 0x0748(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bCreateFolders;                                          // 0x0750(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int8_t                                                     FolderLevel;                                             // 0x0751(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YDNF[0x6];                                   // 0x0752(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CustomFolderFilter;                                      // 0x0758(0x0010) ZeroConstructor, Transient
		int8_t                                                     SortType;                                                // 0x0768(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YF2V[0x7];                                   // 0x0769(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              NameFilter;                                              // 0x0770(0x0010) ZeroConstructor, Transient
		unsigned char                                              UnknownData_7KS8[0x28];                                  // 0x0780(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MyDataListType;                                          // 0x07A8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H1IM[0x4];                                   // 0x07AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDataListEntryWidget*>                        CurrentCustomFolders;                                    // 0x07B0(0x0010) ZeroConstructor, Transient
		class UDataListEntryWidget*                                BackWidget;                                              // 0x07C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_T7QA[0x20];                                  // 0x07C8(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DayCycleAmbientSound
	 * Size -> 0x0030 (FullSize[0x04A0] - InheritedSize[0x0470])
	 */
	class ADayCycleAmbientSound : public AActor
	{
	public:
		class UAudioComponent*                                     AudioComponentDay;                                       // 0x0470(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UAudioComponent*                                     AudioComponentNight;                                     // 0x0478(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		float                                                      DayTimeSoundMorningFadeInStart;                          // 0x0480(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DayTimeSoundMorningFadeInEnd;                            // 0x0484(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DayTimeSoundEveningFadeOutStart;                         // 0x0488(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DayTimeSoundEveningFadeOutEnd;                           // 0x048C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsAlwaysAudible : 1;                                    // 0x0490(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bAllowConcurrentWithPostProcessSound : 1;                // 0x0490(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bOnlyAudibleWhenRaining : 1;                             // 0x0490(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bBlueprintAudibleWhenRainingEnabled : 1;                 // 0x0490(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_B1XY[0xF];                                   // 0x0491(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HUDInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UHUDInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DayCycleManager
	 * Size -> 0x0138 (FullSize[0x05A8] - InheritedSize[0x0470])
	 */
	class ADayCycleManager : public AInfo
	{
	public:
		unsigned char                                              UnknownData_8XQX[0x8];                                   // 0x0470(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CurrentTime;                                             // 0x0478(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      TrueSkyTime;                                             // 0x047C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      GlobalTrueSkyBrightness;                                 // 0x0480(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		struct FVector                                             GlobalTrueSkyColorMultiplier;                            // 0x0484(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      GlobalIBLCaptureBrightness;                              // 0x0490(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      GlobalBakeAndStreamIBLMultiplier;                        // 0x0494(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      GlobalGroundColorMultiplier;                             // 0x0498(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      GlobalSkyColorMultiplier;                                // 0x049C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      SM4SkyLightMult;                                         // 0x04A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      SM4DirLightMult;                                         // 0x04A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		struct FVector                                             AtmosphericFogMultiplier;                                // 0x04A8(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      SkyIBLIntensityMultiplier;                               // 0x04B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      BaseTemperature;                                         // 0x04B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      BaseWind;                                                // 0x04BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      SkyWeatherSequenceBlend_Normal;                          // 0x04C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      SkyWeatherSequenceBlend_Hot;                             // 0x04C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      SkyWeatherSequenceBlend_Cold;                            // 0x04C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      SkyWeatherSequenceBlend_Rainy;                           // 0x04CC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      SkyWeatherSequenceBlend_Fog;                             // 0x04D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		bool                                                       bIsRaining;                                              // 0x04D4(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5NUF[0x3];                                   // 0x04D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          Sound_TransitionToMorning;                               // 0x04D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_TransitionToMidDay;                                // 0x04E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundBase*                                          Sound_TransitionToNight;                                 // 0x04E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Sound_TransitionToMorningTime;                           // 0x04F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Sound_TransitionToNightTime;                             // 0x04F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Sound_TransitionToMidDayTime;                            // 0x04F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DayTimeStart;                                            // 0x04FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DayTimeEnd;                                              // 0x0500(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DayTimeLengthMultiplier;                                 // 0x0504(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MPIY[0x8];                                   // 0x0508(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bCheckForStructureActivation;                            // 0x0510(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUsesWind;                                               // 0x0511(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bCheckForWeaponFiring;                                   // 0x0512(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPOverrideItemAutoDecreaseDurability;                // 0x0513(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bHideSupplyCrates;                                       // 0x0514(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AUNQ[0x3];                                   // 0x0515(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      PreventBuffClassesInDayCycleLevel;                       // 0x0518(0x0010) Edit, ZeroConstructor
		class FScriptMulticastDelegate                             OnStartDaytime;                                          // 0x0528(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnStartNighttime;                                        // 0x0538(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnDayChange;                                             // 0x0548(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnHazardChange;                                          // 0x0558(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		TArray<class UClass*>                                      GenesisTradableOptions;                                  // 0x0568(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              HexagonVFXActorClass;                                    // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9EVP[0x8];                                   // 0x0580(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      GivePlayersBuffsOnSpawn;                                 // 0x0588(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FStringAssetReference>                       GivePlayersBuffAssetsOnSpawn;                            // 0x0598(0x0010) Edit, ZeroConstructor, DisableEditOnInstance

	public:
		void ShooterCharacterSpawned(class AShooterCharacter* TheShooterCharacter);
		void ShooterCharacterPossessed(class AShooterCharacter* TheShooterCharacter);
		bool IsRainingAtLocation(const struct FVector& Location);
		bool IsDaytime();
		float GetWindAtLocation(const struct FVector& AtLocation, class APrimalCharacter* ForPrimalCharacter);
		float GetWaterLineStartZ(const struct FVector& AtLocation);
		float GetTemperatureAtLocation(const struct FVector& AtLocation, class APrimalCharacter* ForPrimalCharacter);
		TArray<class UClass*> GetPreventBuffClassesInDayCycleLevel();
		float GetDeepWaterStartZ(const struct FVector& AtLocation);
		class FString GetDayNumberString(bool bIncludeDayString);
		void DayCycleManagerStartNighttime__DelegateSignature();
		void DayCycleManagerStartDaytime__DelegateSignature();
		void DayCycleManagerOnDayChange__DelegateSignature(int32_t DayNumber);
		void BPPostDrawSpawnMap(class AShooterPlayerController* ForPC, class UCanvas* ItemCanvas, const struct FVector2D& ItemCanvasSize);
		bool BPOverrideItemAutoDecreaseDurability(class UPrimalItem* anItem);
		float BPOverrideGameStateMatineePlayRate(class AActor* forMatinee, float InPlayRate);
		void BPOnDCMCheat(const class FName& CheatName, float Value);
		TArray<struct FPrimalMapMarkerEntryData> BPGetAdditionalMapMarkers(class AShooterPlayerController* ForPC);
		bool BPAllowSpawningCrate(class UClass* CrateType);
		float BPAdjustTemperature(float TemperatureIn, class ABiomeZoneVolume* BiomeZoneVolume, const struct FVector& AtLocation, class APrimalCharacter* ForPrimalCharacter);
		void AttemptWeaponFiring(class AShooterWeapon* theWeapon);
		bool AllowWeaponFiring(class AActor* theWeaponOrStructure);
		bool AllowStructureActivation(class APrimalStructure* theStructure);
		float AdjustStructureItemInsulation(class AShooterCharacter* forCharacter, class UPrimalItem* ForPrimalItem, EPrimalItemStat TypeInsulation, float insulationValue);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DestroyedMeshActor
	 * Size -> 0x0018 (FullSize[0x04A8] - InheritedSize[0x0490])
	 */
	class ADestroyedMeshActor : public ADestructibleActor
	{
	public:
		float                                                      TimeToSetNoCollision;                                    // 0x0490(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                NoCollisionProfileName;                                  // 0x0494(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DefaultCollisionProfileName;                             // 0x049C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DO4O[0x4];                                   // 0x04A4(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetNoCollisionProfile();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DinoSetupDataAsset
	 * Size -> 0x00F0 (FullSize[0x0118] - InheritedSize[0x0028])
	 */
	class UDinoSetupDataAsset : public UDataAsset
	{
	public:
		struct FDinoSetup                                          DinoSetup;                                               // 0x0028(0x00F0) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DirectionalAmbientLight
	 * Size -> 0x0000 (FullSize[0x0480] - InheritedSize[0x0480])
	 */
	class ADirectionalAmbientLight : public ALight
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DirectionalInjectedLight
	 * Size -> 0x0000 (FullSize[0x0480] - InheritedSize[0x0480])
	 */
	class ADirectionalInjectedLight : public ALight
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DroppedItem
	 * Size -> 0x0298 (FullSize[0x0708] - InheritedSize[0x0470])
	 */
	class ADroppedItem : public AActor
	{
	public:
		unsigned char                                              UnknownData_BK13[0x8];                                   // 0x0470(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FItemNetInfo                                        MyItemInfo;                                              // 0x0478(0x01B0) BlueprintVisible, Net
		class UPrimalItem*                                         MyItem;                                                  // 0x0628(0x0008) BlueprintVisible, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		bool                                                       bApplyImpulseOnSpawn : 1;                                // 0x0630(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDestroyOnStasis : 1;                                    // 0x0630(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseCollisionTrace : 1;                                  // 0x0630(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventPickup : 1;                                      // 0x0630(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDestroyOutOfWater : 1;                                  // 0x0630(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseClientDroppedItemPhysics : 1;                        // 0x0630(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsUnderwater : 1;                                       // 0x0630(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bNotifyPreviousOwnerOfPickup : 1;                        // 0x0630(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bAssignedToTribePickupOnly : 1;                          // 0x0631(0x0001) BIT_FIELD Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_OUK8[0x2];                                   // 0x0632(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    AssignedToTribeID;                                       // 0x0634(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bLowQuality : 1;                                         // 0x0638(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_ENWI[0x3];                                   // 0x0639(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ImpulseMagnitude;                                        // 0x063C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ForceSleepTimer;                                         // 0x0640(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             DroppedItemScale;                                        // 0x0644(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           OverlayTooltipPadding;                                   // 0x0650(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           OverlayTooltipScale;                                     // 0x0658(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              HUDOverlayToolTipWidget;                                 // 0x0660(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              DroppedByName;                                           // 0x0668(0x0010) Net, ZeroConstructor, Transient, SaveGame
		uint64_t                                                   DroppedByPlayerID;                                       // 0x0678(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		double                                                     DroppedItemDestructionTime;                              // 0x0680(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             DroppedItemInterpTarget;                                 // 0x0688(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bClientDisablePhysics;                                   // 0x0694(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6JC5[0x3];                                   // 0x0695(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         NetDroppedMeshOverride;                                  // 0x0698(0x0008) BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  NetDroppedMeshMaterialOverride;                          // 0x06A0(0x0008) BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector                                             NetDroppedMeshOverrideScale3D;                           // 0x06A8(0x000C) BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_T1I6[0xC];                                   // 0x06B4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     SpawnDropSoundTime;                                      // 0x06C0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DOK2[0xC];                                   // 0x06C8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               DroppedByActor;                                          // 0x06D4(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RI7A[0x1C];                                  // 0x06DC(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FreezePhysicsAfterTime;                                  // 0x06F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PickupAllRange;                                          // 0x06FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZR3H[0x4];                                   // 0x0700(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bBPOnItemPickedUp : 1;                                   // 0x0704(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_OJAF[0x3];                                   // 0x0705(0x0003) MISSED OFFSET (PADDING)

	public:
		void ResetLifeSpan(float NewLifeSpan);
		void KeepPhysicsActiveForDuration(float Duration);
		bool IsAllowedToPickupItem(class APlayerController* PC);
		void FreezePhysics();
		void ForceSleep();
		void BPOnItemPickedUp(class APlayerController* ByPC, class UPrimalItem* InventoryItem);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DroppedItemEgg
	 * Size -> 0x0030 (FullSize[0x0738] - InheritedSize[0x0708])
	 */
	class ADroppedItemEgg : public ADroppedItem
	{
	public:
		class UClass*                                              SpawnDinoEmitter;                                        // 0x0708(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      IndoorsHypoThermalInsulation;                            // 0x0710(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      IndoorsHyperThermalInsulation;                           // 0x0714(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      EggThermalInsulationTemperatureMultiplier;               // 0x0718(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsEggTooHot : 1;                                        // 0x071C(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       bIsEggTooCold : 1;                                       // 0x071C(0x0001) BIT_FIELD Net, Transient, NoDestructor
		unsigned char                                              UnknownData_3Q5E[0x3];                                   // 0x071D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ABiomeZoneVolume*                                    MyBiomeZone;                                             // 0x0720(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BOIJ[0x10];                                  // 0x0728(0x0010) MISSED OFFSET (PADDING)

	public:
		void NetSpawnDinoEmitter();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DroppedItemLowQuality
	 * Size -> 0x0000 (FullSize[0x0708] - InheritedSize[0x0708])
	 */
	class ADroppedItemLowQuality : public ADroppedItem
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DroppedItemTorch
	 * Size -> 0x0018 (FullSize[0x0720] - InheritedSize[0x0708])
	 */
	class ADroppedItemTorch : public ADroppedItemLowQuality
	{
	public:
		float                                                      LifeTimeMeter;                                           // 0x0708(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PassiveDurabilityCostPerInterval;                        // 0x070C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PassiveDurabilityCostInterval;                           // 0x0710(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LastDurabilityConsumptionTime;                           // 0x0714(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		bool                                                       FireIsOn;                                                // 0x0718(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		unsigned char                                              UnknownData_IBR6[0x7];                                   // 0x0719(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnRep_FireIsOn();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DroppedItemMission
	 * Size -> 0x0010 (FullSize[0x0718] - InheritedSize[0x0708])
	 */
	class ADroppedItemMission : public ADroppedItem
	{
	public:
		bool                                                       bPickupOnlyAllowMissionPlayers : 1;                      // 0x0708(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bShowHUDMissionInfo : 1;                                 // 0x0708(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_S7M0[0x7];                                   // 0x0709(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AMissionType*                                        OwnerMission;                                            // 0x0710(0x0008) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		class AMissionType* GetOwnerMission();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.FadingDestructibleActor
	 * Size -> 0x0050 (FullSize[0x04E0] - InheritedSize[0x0490])
	 */
	class AFadingDestructibleActor : public ADestructibleActor
	{
	public:
		bool                                                       bFadeOut : 1;                                            // 0x0490(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bRotationalFall : 1;                                     // 0x0490(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_QXY9[0x3];                                   // 0x0491(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Fall_RotAccel;                                           // 0x0494(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Fall_RotAccelRate;                                       // 0x0498(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             Fall_Direction_Right;                                    // 0x049C(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      Fall_Spin_Rand;                                          // 0x04A8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      Fall_SpinVelocity;                                       // 0x04AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Fall_SpinAccel;                                          // 0x04B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Fall_SpinAccelRate;                                      // 0x04B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Fall_RotVelocity;                                        // 0x04B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FadeOutDelayTime;                                        // 0x04BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FadeOutTime;                                             // 0x04C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QF0M[0x14];                                  // 0x04C4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                StaticMeshComponent;                                     // 0x04D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		void SetupFade();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.FallDamageType
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class UFallDamageType : public UDamageType
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.FloatMap
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UFloatMap : public UObject
	{
	public:
		unsigned char                                              UnknownData_SXQC[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		void Init(int32_t InSizeX, int32_t InSizeY);
		int32_t GetSizeY();
		int32_t GetSizeX();
		int32_t GetSize();
		void Delete();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.FlockingBehavior
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFlockingBehavior : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_UpdateFlockComponentLocations_ParticleBoids(TArray<struct FBoid> BoidArray, TArray<class UParticleSystemComponent*> ComponentArray);
		void STATIC_UpdateFlockComponentLocations(TArray<struct FBoid> BoidArray, TArray<class UStaticMeshComponent*> ComponentArray);
		void STATIC_UpdateBoidComponentLocation(const struct FBoid& ThisBoid, class USceneComponent* Comp);
		void STATIC_TickPersistentFlockData(class UObject* WorldContextObject, struct FFlockPersistentData* InOutFlockData, TArray<struct FBoid> BoidArray, float DeltaTime, int32_t MaxNumTracesPerSecond, bool bDrawDebug);
		void STATIC_SetAvoidanceAreaTransform(struct FAvoidanceArea* InOutAvoidanceArea, const struct FTransform& NewTransform);
		void STATIC_SetAvoidanceAreaArrayTransform(TArray<struct FAvoidanceArea>* InOutAvoidanceAreas, const struct FTransform& NewTransform);
		void STATIC_MakeIndexArray(int32_t StartIndex, int32_t NumIndices, TArray<int32_t>* OutIndexArray);
		bool STATIC_IsPointInsideAvoidanceArea(const struct FAvoidanceArea& Area, const struct FVector& WorldLocation);
		bool STATIC_IsPointInsideAnyAvoidanceArea(TArray<struct FAvoidanceArea> Areas, const struct FVector& WorldLocation);
		void STATIC_InterpVectorArrayToSphere(TArray<struct FVector>* InOutVectorArray, const struct FVector& Origin, float Radius, int32_t NumRows, ESimpleCurve LatitudeDistribution, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
		void STATIC_InterpVectorArrayToRandom(TArray<struct FVector>* InOutVectorArray, const struct FVector& Origin, float MinRadius, float MaxRadius, int32_t RandomSeed, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
		void STATIC_InterpVectorArrayToGrid(TArray<struct FVector>* InOutVectorArray, const struct FVector& Origin, const struct FRotator& Rotation, float HorizSize, float VertSize, int32_t NumRows, int32_t NumCols, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
		void STATIC_InterpVectorArrayToCircle(TArray<struct FVector>* InOutVectorArray, const struct FVector& Origin, const struct FRotator& Rotation, float Radius, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
		void STATIC_InterpVectorArray(TArray<struct FVector>* InOutVectorArray, TArray<struct FVector> RelativeTargetLocations, const struct FVector& Origin, const struct FRotator& Rotation, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
		void STATIC_InterpBoidArrayToSphere(TArray<struct FBoid>* InOutBoidArray, const struct FTransform& WorldTransform, float Radius, int32_t NumRows, ESimpleCurve LatitudeDistribution, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
		void STATIC_InterpBoidArrayToRandom(TArray<struct FBoid>* InOutBoidArray, const struct FTransform& WorldTransform, float MinRadius, float MaxRadius, int32_t RandomSeed, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
		void STATIC_InterpBoidArrayToGrid(TArray<struct FBoid>* InOutBoidArray, const struct FTransform& WorldTransform, const struct FRotator& Rotation, float HorizSize, float VertSize, int32_t NumRows, int32_t NumCols, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
		void STATIC_InterpBoidArrayToCircle(TArray<struct FBoid>* InOutBoidArray, const struct FTransform& WorldTransform, const struct FRotator& CircleRotation, float Radius, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
		void STATIC_InterpBoidArray(TArray<struct FBoid>* InOutBoidArray, TArray<struct FBoid> RelativeTargetLocations, const struct FTransform& WorldTransform, const struct FRotator& Rotation, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax);
		float STATIC_GetFlockRadius(TArray<struct FBoid> BoidArray, const struct FVector& FlockCentroid, bool bIgnoreLeaders);
		void STATIC_GetFlockMembersOfType(TArray<struct FBoid> BoidArray, EBoidType BoidType, TArray<int32_t>* OutIndices);
		struct FVector STATIC_GetFlockCentroid(TArray<struct FBoid> BoidArray, bool bIgnoreLeaders);
		struct FVector STATIC_GetClosestSurfacePointOnAvoidanceArea(const struct FAvoidanceArea& Area, const struct FVector& Loc);
		struct FVector STATIC_GetAvoidanceDirection(const struct FAvoidanceArea& Area, const struct FVector& CurrentLoc, const struct FVector& CurrentDir);
		struct FVector STATIC_GetAvoidanceAreaWorldLocation(const struct FAvoidanceArea& Area);
		void STATIC_FlockTickSphereFormation(TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData, bool bUseBoidIndexWhitelist, TArray<int32_t> BoidIndexWhitelist, float DeltaTime, const struct FTransform& WorldTransform, const struct FBoidBehavior& Behavior, float MinInterpDistance, float Radius, int32_t NumRows, ESimpleCurve LatitudeDistribution, float HelixSpeed);
		void STATIC_FlockTickLeaders(TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData, bool bUseBoidIndexWhitelist, TArray<int32_t> BoidIndexWhitelist, float DeltaTime, const struct FTransform& ParentTransform, float LeaderInterpSpeed, float LeaderAreaWidth);
		void STATIC_FlockTickGridFormation(TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData, bool bUseBoidIndexWhitelist, TArray<int32_t> BoidIndexWhitelist, float DeltaTime, const struct FTransform& WorldTransform, const struct FBoidBehavior& Behavior, float MinInterpDistance, const struct FRotator& GridRotation, float GridHorizSize, float GridVertSize, int32_t GridNumRows, int32_t GridNumCols);
		void STATIC_FlockTickFollowersAndFreeAgents(TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData, bool bUseBoidIndexWhitelist, TArray<int32_t> BoidIndexWhitelist, float DeltaTime, const struct FBoidBehavior& Behavior);
		void STATIC_FlockTickCircleFormation(TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData, bool bUseBoidIndexWhitelist, TArray<int32_t> BoidIndexWhitelist, float DeltaTime, const struct FTransform& WorldTransform, const struct FBoidBehavior& Behavior, const struct FRotator& CircleRotation, float CircleRadius, float MinInterpDistance);
		void STATIC_FlockSetMaxSpeedAndForce(TArray<struct FBoid>* InOutBoidArray, bool bUseBoidIndexWhitelist, TArray<int32_t> BoidIndexWhitelist, const struct FVector2D& MaxSpeedRange, const struct FVector2D& MaxForceRange);
		void STATIC_FlockCreate(TArray<struct FBoid>* NewBoids, const struct FTransform& WorldTransform, int32_t NumFlockBoids, int32_t NumLeaderBoids, float InitialSpawnRadius, const struct FVector2D& MaxSpeedRange, const struct FVector2D& MaxForceRange, const struct FVector2D& TurnRateRange);
		void STATIC_DrawDebugAvoidanceArea(class UObject* WorldContextObject, const struct FAvoidanceArea& Area, float DrawDuration);
		void STATIC_BoidTick(int32_t BoidIndex, TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData, float DeltaTime, const struct FBoidBehavior& Behavior);
		void STATIC_BoidStopTargeting(int32_t BoidIndex, TArray<struct FBoid>* InOutBoidArray);
		void STATIC_BoidSetTarget(int32_t BoidIndex, TArray<struct FBoid>* InOutBoidArray, const struct FVector& TargetWorldLocation);
		void STATIC_BoidSetAlive(int32_t BoidIndex, TArray<struct FBoid>* InOutBoidArray, bool bIsAlive);
		void STATIC_BoidMoveTo(int32_t BoidIndex, TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData, const struct FBoidBehavior& Behavior, float DeltaTime, const struct FVector& NewWorldLocation, float TargetDistanceThreshold, bool bUseIterp, float InterpSpeed);
		void STATIC_AddAvoidanceAreaToFlockData(struct FFlockPersistentData* InOutFlockData, const struct FAvoidanceArea& Area);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.GamepadButtonLegendWidget
	 * Size -> 0x0040 (FullSize[0x0280] - InheritedSize[0x0240])
	 */
	class UGamepadButtonLegendWidget : public UUserWidget
	{
	public:
		class FText                                                ButtonDescription;                                       // 0x0240(0x0018) ELEMENT_SIZE_MISMATCH Edit, BlueprintReadOnly, DisableEditOnInstance
		unsigned char                                              UnknownData_X5SM[0x10];                                  // 0x0258(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class UTexture2D*                                          ButtonIcon;                                              // 0x0268(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NABL[0x10];                                  // 0x0270(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.GeneratorModule
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UGeneratorModule : public UObject
	{
	public:
		unsigned char                                              UnknownData_NKSZ[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UGeneratorModule*>                            LinkedModules;                                           // 0x0038(0x0010) ZeroConstructor, Transient

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.GenericDataListEntry
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class UGenericDataListEntry : public UObject
	{
	public:
		unsigned char                                              UnknownData_ERSR[0x28];                                  // 0x0028(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              Description;                                             // 0x0050(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		int32_t                                                    CustomData;                                              // 0x0060(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MN1V[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CustomString;                                            // 0x0068(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UTexture2D*                                          EntryIcon;                                               // 0x0078(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  EntryMaterial;                                           // 0x0080(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsEnabled;                                              // 0x0088(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IAMC[0x3];                                   // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ExplicitEntryIndexType;                                  // 0x008C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HexagonTradableOption
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UHexagonTradableOption : public UObject
	{
	public:
		class UClass*                                              ItemClass;                                               // 0x0028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              OverrideName;                                            // 0x0030(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		int32_t                                                    Quantity;                                                // 0x0040(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    ItemCost;                                                // 0x0044(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bOverrideTradeAction : 1;                                // 0x0048(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAllowedToBePurchased : 1;                          // 0x0048(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetItemCost : 1;                                   // 0x0048(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsEngramTradeOption : 1;                                // 0x0048(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_6381[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              OverrideDescription;                                     // 0x0050(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		int32_t                                                    OverwrittenRecievedItemCount;                            // 0x0060(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxItemPurchaseTimes;                                    // 0x0064(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FOXN[0x8];                                   // 0x0068(0x0008) MISSED OFFSET (PADDING)

	public:
		int32_t GetItemCost(class AShooterPlayerController* PlayerController);
		bool BPOverrideTradeAction(class AShooterPlayerController* PlayerController);
		int32_t BPGetItemCost(class AShooterPlayerController* PlayerController);
		bool BPAllowedToBePurchased(class AShooterPlayerController* PlayerController);
		bool AllowedToBePurchased(class AShooterPlayerController* PlayerController);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HexagonVFXActor
	 * Size -> 0x0000 (FullSize[0x0470] - InheritedSize[0x0470])
	 */
	class AHexagonVFXActor : public AActor
	{
	public:
		void SetVolume(float NewVolume);
		void HoverThenAttract();
		void BeginMovingDirectlyToActor();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HibernationManager
	 * Size -> 0x00A8 (FullSize[0x0518] - InheritedSize[0x0470])
	 */
	class AHibernationManager : public AActor
	{
	public:
		unsigned char                                              UnknownData_6C5P[0xA8];                                  // 0x0470(0x00A8) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HordeCrateManager
	 * Size -> 0x0058 (FullSize[0x04C8] - InheritedSize[0x0470])
	 */
	class AHordeCrateManager : public AActor
	{
	public:
		bool                                                       bIsEnabled;                                              // 0x0470(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseBPForceStartHorde;                                   // 0x0471(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1JC0[0x2];                                   // 0x0472(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinDelayBeforeInitialEvent;                              // 0x0474(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxDelayBeforeInitialEvent;                              // 0x0478(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinEventCheckInterval;                                   // 0x047C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxEventCheckInterval;                                   // 0x0480(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinDistanceFromOtherEvent;                               // 0x0484(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FHordeCrateDifficultyLevel>                  CrateDifficultyLevels;                                   // 0x0488(0x0010) Edit, ZeroConstructor
		TArray<struct FHordeCrateDifficultyLevel>                  ElementNodeDifficultyLevels;                             // 0x0498(0x0010) Edit, ZeroConstructor
		TArray<class AActor*>                                      ActiveSpawnZones;                                        // 0x04A8(0x0010) Edit, ZeroConstructor
		TArray<struct FHordeCrateEvent>                            ActiveEvents;                                            // 0x04B8(0x0010) BlueprintVisible, ZeroConstructor, SaveGame

	public:
		void ForceStartHorde(class AActor* SpawnNetwork, class AShooterPlayerController* PC, class UClass* ActorClass, int32_t DifficultyIndex);
		void BPForceStartHorde(class AActor* SpawnNetwork, class AShooterPlayerController* PC, class UClass* ActorClass, int32_t DifficultyIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HUDElementBarWidget
	 * Size -> 0x00D8 (FullSize[0x0318] - InheritedSize[0x0240])
	 */
	class UHUDElementBarWidget : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_FJ1I[0x8];                                   // 0x0240(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              hatClass;                                                // 0x0248(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UClass*                                              shirtClass;                                              // 0x0250(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UClass*                                              glovesClass;                                             // 0x0258(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UClass*                                              pantsClass;                                              // 0x0260(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UClass*                                              bootsClass;                                              // 0x0268(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UClass*                                              shoulderCannonClass;                                     // 0x0270(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                HelmetBarName;                                           // 0x0278(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                ShirtBarName;                                            // 0x0280(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                GlovesBarName;                                           // 0x0288(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                PantsBarName;                                            // 0x0290(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                BootsBarName;                                            // 0x0298(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                BoostIconName;                                           // 0x02A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                ShoulderCannonBarName;                                   // 0x02A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      iconsBottomOffset;                                       // 0x02B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      iconSeparation;                                          // 0x02B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		bool                                                       bBoostIconHidden;                                        // 0x02B8(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_3T09[0x47];                                  // 0x02B9(0x0047) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      helmetMaxAmmo;                                           // 0x0300(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      shirtMaxAmmo;                                            // 0x0304(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      glovesMaxAmmo;                                           // 0x0308(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      pantsMaxAmmo;                                            // 0x030C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      bootsMaxAmmo;                                            // 0x0310(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      shoulderMaxAmmo;                                         // 0x0314(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected

	public:
		void UpdateBoostIconVisibility();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HUDStatusBarsWidget
	 * Size -> 0x0160 (FullSize[0x03A0] - InheritedSize[0x0240])
	 */
	class UHUDStatusBarsWidget : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_2TY6[0x8];                                   // 0x0240(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              HealthBarName;                                           // 0x0248(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		class FString                                              StaminaBarName;                                          // 0x0258(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		class FString                                              OxygenBarName;                                           // 0x0268(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		class FString                                              FoodBarName;                                             // 0x0278(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		class FString                                              WaterBarName;                                            // 0x0288(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		class FString                                              WeightBarName;                                           // 0x0298(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		class FString                                              TorpidityBarName;                                        // 0x02A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		class FName                                                XPBarName;                                               // 0x02B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                IndoorsImageName;                                        // 0x02C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                HarvestableImageName;                                    // 0x02C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                CharacterLabelName;                                      // 0x02D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UTexture2D*                                          UsableHarvestableAllowed;                                // 0x02D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UTexture2D*                                          HarvestableAllowed;                                      // 0x02E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UTexture2D*                                          HarvestablePrevented;                                    // 0x02E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UTexture2D*                                          UsableHarvestablePrevented;                              // 0x02F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		struct FLinearColor                                        poopFoodColor;                                           // 0x02F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		struct FLinearColor                                        regularFoodColor;                                        // 0x0308(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_TIKA[0x88];                                  // 0x0318(0x0088) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.InputKeyDisplayWidget
	 * Size -> 0x02B8 (FullSize[0x0440] - InheritedSize[0x0188])
	 */
	class UInputKeyDisplayWidget : public UWidget
	{
	public:
		struct FTextBlockStyle                                     KeyTextStyle;                                            // 0x0188(0x0118) Edit, BlueprintVisible
		struct FTextBlockStyle                                     SeparatorTextStyle;                                      // 0x02A0(0x0118) Edit, BlueprintVisible
		struct FVector2D                                           ButtonImageSize;                                         // 0x03B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class FString                                              TextPrefix;                                              // 0x03C0(0x0010) Edit, BlueprintVisible, ZeroConstructor
		class FString                                              TextSuffix;                                              // 0x03D0(0x0010) Edit, BlueprintVisible, ZeroConstructor
		unsigned char                                              UnknownData_PJ7V[0x60];                                  // 0x03E0(0x0060) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.InventoryPanelContainerWidget
	 * Size -> 0x0000 (FullSize[0x02E0] - InheritedSize[0x02E0])
	 */
	class UInventoryPanelContainerWidget : public UBorder
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.JsonObject
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UJsonObject : public UObject
	{
	public:
		unsigned char                                              UnknownData_R16X[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetVectorField(const class FString& Key, const struct FVector& Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetVectorArrayField(const class FString& Key, TArray<struct FVector> Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetStructField(const class FString& Key, class UProperty* Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetStringField(const class FString& Key, const class FString& Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetStringArrayField(const class FString& Key, TArray<class FString> Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetRotatorField(const class FString& Key, const struct FRotator& Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetRotatorArrayField(const class FString& Key, TArray<struct FRotator> Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetNullField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter);
		void SetJsonObjectField(const class FString& Key, class UJsonObject* Object, bool bForceSingleKey, const class FString& Delimiter);
		void SetJsonObjectArrayField(const class FString& Key, TArray<class UJsonObject*> Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetIntField(const class FString& Key, int32_t Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetIntArrayField(const class FString& Key, TArray<int32_t> Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetFloatField(const class FString& Key, float Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetFloatArrayField(const class FString& Key, TArray<float> Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetDoubleField(const class FString& Key, double Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetDoubleArrayField(const class FString& Key, TArray<double> Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetByteField(const class FString& Key, unsigned char Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetByteArrayField(const class FString& Key, TArray<unsigned char> Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetBoolField(const class FString& Key, bool Value, bool bForceSingleKey, const class FString& Delimiter);
		void SetBoolArrayField(const class FString& Key, TArray<bool> Value, bool bForceSingleKey, const class FString& Delimiter);
		class FString JsonSerialize();
		class UJsonObject* STATIC_JsonDeserialize(const class FString& JsonData, class FString* OutErrorMessage, class UObject* WorldContextObject);
		bool IsNullField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter);
		bool GetVectorField(const class FString& Key, struct FVector* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetVectorArrayField(const class FString& Key, TArray<struct FVector>* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetStructField(const class FString& Key, class UProperty** DestStruct, bool bForceSingleKey, const class FString& Delimiter);
		bool GetStringField(const class FString& Key, class FString* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetStringArrayField(const class FString& Key, TArray<class FString>* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetRotatorField(const class FString& Key, struct FRotator* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetRotatorArrayField(const class FString& Key, TArray<struct FRotator>* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetKeys(const class FString& Key, TArray<class FString>* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetJsonObjectField(const class FString& Key, class UJsonObject** OutObject, bool bForceSingleKey, const class FString& Delimiter);
		bool GetJsonObjectArrayField(const class FString& Key, TArray<class UJsonObject*>* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetIntField(const class FString& Key, int32_t* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetIntArrayField(const class FString& Key, TArray<int32_t>* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetFloatField(const class FString& Key, float* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetFloatArrayField(const class FString& Key, TArray<float>* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetDoubleField(const class FString& Key, double* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetDoubleArrayField(const class FString& Key, TArray<double>* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetByteField(const class FString& Key, unsigned char* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetByteArrayField(const class FString& Key, TArray<unsigned char>* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetBoolField(const class FString& Key, bool* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		bool GetBoolArrayField(const class FString& Key, TArray<bool>* OutValue, bool bForceSingleKey, const class FString& Delimiter);
		class UJsonObject* STATIC_CreateJsonObject(class UObject* WorldContextObject);
		bool STATIC_CompareJsonValues(class UJsonObject* A, class UJsonObject* B);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.KeyInputWidget
	 * Size -> 0x0028 (FullSize[0x0500] - InheritedSize[0x04D8])
	 */
	class UKeyInputWidget : public UEditableText
	{
	public:
		unsigned char                                              UnknownData_XV21[0x28];                                  // 0x04D8(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.LandscapeUtils
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class ULandscapeUtils : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.Leaderboard
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class ULeaderboard : public UObject
	{
	public:
		class UClass*                                              LeaderboardRowType;                                      // 0x0028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		struct FLeaderboardDisplayRow                              HeaderRow;                                               // 0x0030(0x0020) Edit, DisableEditOnInstance
		ELeaderboardColumnName                                     DefaultOrderByColumn;                                    // 0x0050(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		ELeaderboardOrdering                                       DefaultOrdering;                                         // 0x0051(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		ELeaderboardGroupByMode                                    DefaultGroupByMode;                                      // 0x0052(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		ELeaderboardColumnName                                     DefaultGroupByColumn;                                    // 0x0053(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		int32_t                                                    DefaultNumRowsToDisplay;                                 // 0x0054(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization

	public:
		bool STATIC_GetLeaderboardRows(class UObject* WorldContextObject, class UClass* LeaderboardType, const class FName& MissionTag, TArray<struct FLeaderboardRow>* LeaderboardRows);
		void STATIC_FormatLeaderboardRows(class UClass* LeaderboardType, const class FName& MissionTag, TArray<struct FLeaderboardRow> Rows, TArray<struct FLeaderboardDisplayRow>* DisplayRows, const class FString& PlayerNetIDString);
		void STATIC_FormatLeaderboardRow(class UClass* LeaderboardType, const class FName& MissionTag, const struct FLeaderboardRow& Row, struct FLeaderboardDisplayRow* DisplayRow, const class FString& PlayerNetIDString);
		int32_t STATIC_CountLeaderboardRows(class UObject* WorldContextObject, class UClass* LeaderboardType, const class FName& MissionTag);
		void BPGetLeaderboardRows(const class FName& MissionTag, class AShooterGameMode* GameMode, TArray<struct FLeaderboardRow>* LeaderboardRows);
		struct FLeaderboardDisplayRow BPFormatLeaderboardRow(const class FName& MissionTag, int32_t index, const struct FLeaderboardRow& DatabaseRow);
		int32_t BPCountLeaderboardRows(const class FName& MissionTag, class AShooterGameMode* GameMode);
		bool BPAddLeaderboardRow(class AShooterGameMode* GameMode, const struct FLeaderboardRow& NewRow);
		bool STATIC_AddLeaderboardRow(class UWorld* WorldContextObject, class UClass* LeaderboardType, const struct FLeaderboardRow& NewRow);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MatineeCapture
	 * Size -> 0x0030 (FullSize[0x04A0] - InheritedSize[0x0470])
	 */
	class AMatineeCapture : public AActor
	{
	public:
		class AMatineeActor*                                       MatineeActor;                                            // 0x0470(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CaptureFPS;                                              // 0x0478(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ResX;                                                    // 0x047C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ResY;                                                    // 0x0480(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PreviewMatineeTime;                                      // 0x0484(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bBeginCapture;                                           // 0x0488(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bCancelCapture;                                          // 0x0489(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VR2T[0x16];                                  // 0x048A(0x0016) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionDispatcherPoint
	 * Size -> 0x0010 (FullSize[0x0480] - InheritedSize[0x0470])
	 */
	class AMissionDispatcherPoint : public AActor
	{
	public:
		TArray<class FName>                                        MissionTags;                                             // 0x0470(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionMetaTagInfo
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class UMissionMetaTagInfo : public UObject
	{
	public:
		struct FMetaTagIDInfo                                      MetaTagInfo[0xB];                                        // 0x0028(0x0084) Edit, DisableEditOnInstance
		unsigned char                                              UnknownData_R826[0x4];                                   // 0x00AC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionModuleBase
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMissionModuleBase : public UObject
	{
	public:
		float BPGetTargetingDesire(class APrimalDinoCharacter* MissionDino, class AActor* forTarget, float ForTargetingDesireValue);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionModuleInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMissionModuleInterface : public UInterface
	{
	public:
		class UNewMissionModuleBase* RunMissionModule(class UClass* ModuleClass);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionObjectiveEntryWidget
	 * Size -> 0x0028 (FullSize[0x0268] - InheritedSize[0x0240])
	 */
	class UMissionObjectiveEntryWidget : public UUserWidget
	{
	public:
		class FString                                              ItemLabelName;                                           // 0x0240(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_PA7L[0x18];                                  // 0x0250(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionPrerequisite
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMissionPrerequisite : public UObject
	{
	public:
		bool IsSatisfied(class APlayerController* Controller, class AShooterCharacter* PlayerPawn, class APrimalBuff_MissionData* PlayerMissionData, class FString* OutReason);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionRequirementEntryWidget
	 * Size -> 0x0020 (FullSize[0x0260] - InheritedSize[0x0240])
	 */
	class UMissionRequirementEntryWidget : public UUserWidget
	{
	public:
		class FString                                              DisplayText;                                             // 0x0240(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		class FName                                                CustomTag;                                               // 0x0250(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JIRR[0x8];                                   // 0x0258(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetDisplayText(const class FString& Text);
		void SetCustomTag(const class FName& Tag);
		void Initialize();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionServerSidePoint
	 * Size -> 0x0048 (FullSize[0x04B8] - InheritedSize[0x0470])
	 */
	class AMissionServerSidePoint : public ANote
	{
	public:
		class FName                                                TriggerKey;                                              // 0x0470(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    TriggerOrder;                                            // 0x0478(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    CustomDataInt;                                           // 0x047C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CustomDataFloat;                                         // 0x0480(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WW4A[0x4];                                   // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              CustomDataFloatArray;                                    // 0x0488(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		struct FVector                                             CustomDataVector;                                        // 0x0498(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UX8W[0x4];                                   // 0x04A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CustomDataString;                                        // 0x04A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor

	public:
		void SetTriggerKey(const class FName& NewTriggerKey);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionSpline
	 * Size -> 0x0058 (FullSize[0x04D0] - InheritedSize[0x0478])
	 */
	class AMissionSpline : public ASplineActor
	{
	public:
		bool                                                       bValidateSpline;                                         // 0x0478(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_U0T7[0x3];                                   // 0x0479(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SplineValidationMinTotalLength;                          // 0x047C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		ECollisionChannel                                          SplineValidationChannel;                                 // 0x0480(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_W2OZ[0x3];                                   // 0x0481(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SplineValidationNumTracesPerSplineSegment;               // 0x0484(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SplineValidationDebugDrawDuration;                       // 0x0488(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                TriggerKey;                                              // 0x048C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    TriggerOrder;                                            // 0x0494(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    CustomDataInt;                                           // 0x0498(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CustomDataFloat;                                         // 0x049C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<float>                                              CustomDataFloatArray;                                    // 0x04A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		struct FVector                                             CustomDataVector;                                        // 0x04B0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LFXH[0x4];                                   // 0x04BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CustomDataString;                                        // 0x04C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor

	public:
		void SpawnerUpdate(float DeltaTime);
		bool FindLocationAndDirectionClosestToWorldLocation(const struct FVector& WorldLocation, struct FVector* OutLocation, struct FVector* OutDirection, float* OutSplineKey);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionTimerWidget
	 * Size -> 0x0010 (FullSize[0x0250] - InheritedSize[0x0240])
	 */
	class UMissionTimerWidget : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_T3WY[0x10];                                  // 0x0240(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.TargetableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTargetableInterface : public UInterface
	{
	public:
		class UObject* ToUObject();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalTargetableActor
	 * Size -> 0x0110 (FullSize[0x0580] - InheritedSize[0x0470])
	 */
	class APrimalTargetableActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_RLP3[0x10];                                  // 0x0470(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     HurtFX;                                                  // 0x0480(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FDamageTypeAdjuster>                         DamageTypeAdjusters;                                     // 0x0488(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_0E3F[0x8];                                   // 0x0498(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DestructionActorTemplate;                                // 0x04A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      LifeSpanAfterDeath;                                      // 0x04A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_XFXW[0x4];                                   // 0x04AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           DeathSound;                                              // 0x04B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      PassiveDamageHealthReplicationPercentInterval;           // 0x04B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      DamageNotifyTeamAggroMultiplier;                         // 0x04BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      DamageNotifyTeamAggroRange;                              // 0x04C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      DamageNotifyTeamAggroRangeFalloff;                       // 0x04C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		struct FVector                                             DestructibleMeshLocationOffset;                          // 0x04C8(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		struct FVector                                             DestructibleMeshScaleOverride;                           // 0x04D4(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		struct FRotator                                            DestructibleMeshRotationOffset;                          // 0x04E0(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		bool                                                       bDestructionActorTemplateServerOnly : 1;                 // 0x04EC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDestroyedMeshUseSkeletalMeshComponent : 1;              // 0x04EC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventZeroDamageInstigatorSelfDamage : 1;              // 0x04EC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsDead : 1;                                             // 0x04EC(0x0001) BIT_FIELD SaveGame, NoDestructor
		bool                                                       bDamageNotifyTeamAggroAI : 1;                            // 0x04EC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_3YNX : 1;                                    // 0x04EC(0x0001) BIT_FIELD (PADDING)
		bool                                                       bWithinPreventionVolume : 1;                             // 0x04EC(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       bAllowDamageByFriendlyDinos : 1;                         // 0x04EC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAdjustDamage : 1;                                  // 0x04ED(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceZeroDamageProcessing : 1;                          // 0x04ED(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceFloatingDamageNumbers : 1;                         // 0x04ED(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDoAllowRadialDamageWithoutVisiblityTrace : 1;           // 0x04ED(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreDestructionEffects : 1;                           // 0x04ED(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreDamageRepairCooldown : 1;                         // 0x04ED(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseHarvestingComponent : 1;                             // 0x04ED(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPDied : 1;                                          // 0x04ED(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_K8O3[0x2];                                   // 0x04EE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              DescriptiveName;                                         // 0x04F0(0x0010) Edit, ZeroConstructor
		class UClass*                                              DestroyedMeshActorClass;                                 // 0x0500(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UDestructibleMesh*                                   DestroyedMesh;                                           // 0x0508(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ReplicatedHealth;                                        // 0x0510(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, PersistentInstance
		float                                                      Health;                                                  // 0x0514(0x0004) Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		float                                                      MaxHealth;                                               // 0x0518(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      DestructibleMeshDeathImpulseScale;                       // 0x051C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FBoneDamageAdjuster>                         BoneDamageAdjusters;                                     // 0x0520(0x0010) Edit, ZeroConstructor
		unsigned char                                              UnknownData_2JRD[0x8];                                   // 0x0530(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPrimalHarvestingComponent*                          MyHarvestingComponent;                                   // 0x0538(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_P50X[0x10];                                  // 0x0540(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EShooterPhysMaterialType                                   TargetableDamageFXDefaultPhysMaterial;                   // 0x0550(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0RYI[0x3];                                   // 0x0551(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       BPOverrideDestroyedMeshTextures : 1;                     // 0x0554(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_MJ2Z[0x3];                                   // 0x0555(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              StructureSettingsClass;                                  // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HYUF[0x20];                                  // 0x0560(0x0020) MISSED OFFSET (PADDING)

	public:
		void PlayHitEffectRadial(float DamageTaken, const struct FRadialDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
		void PlayHitEffectPoint(float DamageTaken, const struct FPointDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
		void PlayHitEffectGeneric(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
		void PlayDyingRadial(float KillingDamage, const struct FRadialDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
		void PlayDyingPoint(float KillingDamage, const struct FPointDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
		void PlayDyingGeneric(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
		void OverrideDestroyedMeshTextures(class UMeshComponent* MeshComp);
		void OnRep_ReplicatedHealth();
		void NetUpdatedHealth(int32_t NewHealth);
		bool IsInvincible();
		void HarvestingDepleted(class UPrimalHarvestingComponent* fromComponent);
		float GetMaxHealth();
		class FString GetDescriptiveName();
		bool BPSupressImpactEffects(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath, class UPrimitiveComponent* HitComponent);
		void BPHitEffect(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath, class UPrimitiveComponent* HitComponent, const struct FVector& DamageLoc, const struct FRotator& HitNormal);
		void BPDied(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
		float BPAdjustDamage(float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructure
	 * Size -> 0x0568 (FullSize[0x0AE8] - InheritedSize[0x0580])
	 */
	class APrimalStructure : public APrimalTargetableActor
	{
	public:
		unsigned char                                              UnknownData_C9Z0[0x28];                                  // 0x0580(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           OverlayTooltipPadding;                                   // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           OverlayTooltipScale;                                     // 0x05B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                StructureTag;                                            // 0x05B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ConsumesPrimalItem;                                      // 0x05C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ScaleFactor;                                             // 0x05C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    StructureSnapTypeFlags;                                  // 0x05CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FStructureVariant>                           Variants;                                                // 0x05D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		int32_t                                                    CurrentVariant;                                          // 0x05E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, RepNotify, NoDestructor
		bool                                                       bIsFlippable : 1;                                        // 0x05E4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsFlipped : 1;                                          // 0x05E4(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bShowInPlaceableList : 1;                                // 0x05E4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsRepairing : 1;                                        // 0x05E4(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       UnknownData_Q0EB : 1;                                    // 0x05E4(0x0001) BIT_FIELD (PADDING)
		bool                                                       bForceAllowWallAttachments : 1;                          // 0x05E4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPRefreshedStructureColors : 1;                      // 0x05E4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsBed : 1;                                              // 0x05E4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bClientAddPlacedOnFloorStructures : 1;                   // 0x05E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPreventStasis : 1;                                 // 0x05E5(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bDestroyOnStasis : 1;                                    // 0x05E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTriggerBPStasis : 1;                                    // 0x05E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPostLoadedFromSaveGame : 1;                        // 0x05E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPlacementUsesWeaponClipAmmo : 1;                        // 0x05E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreDyingWhenDemolished : 1;                          // 0x05E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAbsoluteTakeAnythingAsGround : 1;                       // 0x05E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisablePlacementOnDynamicsFoliageAndDoors : 1;          // 0x05E6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSeatedDisableCollisionCheck : 1;                        // 0x05E6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPIsAllowedToBuildEx : 1;                            // 0x05E6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPHandleStructureEnabled : 1;                        // 0x05E6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForcePlacingOnVerticalGround : 1;                       // 0x05E6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPlacementShouldNotBeHorizontal : 1;                     // 0x05E6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRequiresGroundedPlacement : 1;                          // 0x05E6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowPlacingOnOtherTeamStructuresPvPOnly : 1;           // 0x05E6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceUseSkeletalMeshComponent : 1;                      // 0x05E7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UseBPOverrideTargetLocation : 1;                         // 0x05E7(0x0001) BIT_FIELD Edit, BlueprintVisible, Net, NoDestructor
		bool                                                       bOverrideFoundationSupportDistance : 1;                  // 0x05E7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor
		float                                                      PlacementOffsetForVerticalGround;                        // 0x05E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceDisableFootSound : 1;                              // 0x05EC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTraceThruEncroachmentPoints : 1;                        // 0x05EC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDidSpawnEffects : 1;                                    // 0x05EC(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       bPreventDinoPlacementDistanceIncrease : 1;               // 0x05EC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPendingRemoval : 1;                                     // 0x05EC(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bWasAttachedToPawn : 1;                                  // 0x05EC(0x0001) BIT_FIELD BlueprintVisible, Transient, SaveGame, NoDestructor
		bool                                                       bDontOverrideCollisionProfile : 1;                       // 0x05EC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseAdvancedRotationPlacement : 1;                       // 0x05EC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_ZFE3 : 2;                                    // 0x05ED(0x0001) BIT_FIELD (PADDING)
		bool                                                       bRootFoundationLimitBuildArea : 1;                       // 0x05ED(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCenterOffscreenFloatingHUDWidgets : 1;                  // 0x05ED(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_4B5S[0x2];                                   // 0x05EE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PlacementInitialTracePointOffsetForVerticalGround;       // 0x05F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4K6I[0x4];                                   // 0x05F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      StructuresAllowedToBeVerticalGround;                     // 0x05F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      TraceDistanceFromActorToWallVerticalGround;              // 0x0608(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             PlacementHitLocOffset;                                   // 0x060C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             PlacementEncroachmentCheckOffset;                        // 0x0618(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             PlacementEncroachmentBoxExtent;                          // 0x0624(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             PlacementTraceScale;                                     // 0x0630(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             SnapAlternatePlacementTraceScale;                        // 0x063C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FRotator                                            PlacementRotOffset;                                      // 0x0648(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FRotator                                            PlacementTraceRotOffset;                                 // 0x0654(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FRotator                                            SnappingRotationOffset;                                  // 0x0660(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowAttachToPawn : 1;                                  // 0x066C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowAttachToSaddle : 1;                                // 0x066C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPlacementTraceIgnorePawns : 1;                          // 0x066C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRequireFreePrimarySnappedStructure : 1;                 // 0x066C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyAllowPlacementInWater : 1;                          // 0x066C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForcePlacingOnGround : 1;                               // 0x066C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTakeAnythingAsGround : 1;                               // 0x066C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsFoundation : 1;                                       // 0x066C(0x0001) BIT_FIELD Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bForceCheckNearbyEnemyFoundation : 1;                    // 0x066D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsFloor : 1;                                            // 0x066D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceFloorCollisionGroup : 1;                           // 0x066D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsWall : 1;                                             // 0x066D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisallowPreventCropsBiomes : 1;                         // 0x066D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanBeRepaired : 1;                                      // 0x066D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bReturnDamageOnHitFromPawn : 1;                          // 0x066D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventStasis : 1;                                      // 0x066D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowUseFromRidingDino : 1;                             // 0x066E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsFenceFoundation : 1;                                  // 0x066E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseFenceFoundation : 1;                                 // 0x066E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseOnlyBlockSelfTraceChannel : 1;                       // 0x066E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bWasPlacementSnapped : 1;                                // 0x066E(0x0001) BIT_FIELD SaveGame, NoDestructor
		bool                                                       bIsCoreStructure : 1;                                    // 0x066E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDeprecateStructure : 1;                                 // 0x066E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRequiresToBeInsideZoneVolume : 1;                       // 0x066E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowLoadBearing : 1;                                   // 0x066F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsEnvironmentStructure : 1;                             // 0x066F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_JFEP : 4;                                    // 0x066F(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUseBPOnVariantSwitch : 1;                               // 0x066F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_WJ5Q[0x4];                                   // 0x0670(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RepairCheckInterval;                                     // 0x0674(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PlacementFloorCheckZExtentUp;                            // 0x0678(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RepairPercentPerInterval;                                // 0x067C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DecayDestructionPeriod;                                  // 0x0680(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		unsigned char                                              UnknownData_IQI1[0x4];                                   // 0x0684(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      PreventPlacingOnFloorClasses;                            // 0x0688(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      AllowPlacingOnFloorClasses;                              // 0x0698(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UStaticMeshComponent*                                MyStaticMesh;                                            // 0x06A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UStaticMeshComponent*                                CosmeticVariantStaticMesh;                               // 0x06B0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class USceneComponent*                                     MyRootTransform;                                         // 0x06B8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		bool                                                       bRequiresPlacementOnStructureFloors : 1;                 // 0x06C0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisablePlacementOnStructureFloors : 1;                  // 0x06C0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDestroyStructureIfFloorDestroyed : 1;                   // 0x06C0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsePlacementCollisionCheck : 1;                         // 0x06C0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRequiresSnapping : 1;                                   // 0x06C0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSnappingRequiresNearbyFoundation : 1;                   // 0x06C0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowSnapRotation : 1;                                  // 0x06C0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAllowSnapRotationForStructure : 1;                 // 0x06C0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPlacementChooseRotation : 1;                            // 0x06C1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRequiresPlacingOnWall : 1;                              // 0x06C1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSnapRequiresPlacementOnGround : 1;                      // 0x06C1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowSnapOntoSameLocation : 1;                          // 0x06C1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyFoundationIfSnappedToFoundation : 1;                // 0x06C1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bFoundationRequiresGroundTrace : 1;                      // 0x06C1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPlacingOnGroundRequiresNoStructure : 1;                 // 0x06C1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTakeGroundNormal : 1;                                   // 0x06C1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTakeGroundNormalDirectly : 1;                           // 0x06C2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bFinalPlacementDontAdjustForMaxRange : 1;                // 0x06C2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowStructureColors : 1;                               // 0x06C2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDebug : 1;                                              // 0x06C2(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bUseFadeInEffect : 1;                                    // 0x06C2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsingStructureColors : 1;                               // 0x06C2(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
		bool                                                       bPreventDefaultVariant : 1;                              // 0x06C2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsSPlusStructure : 1;                                   // 0x06C2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowPickingUpStructureAfterPlacement : 1;              // 0x06C3(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisablePickingUpStructureAfterPlacementOnTryMultiUse : 1; // 0x06C3(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBlueprintAnimNotifyCustomEvent : 1;                  // 0x06C3(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		int32_t                                                    TraceIgnoreStructuresWithTypeFlags;                      // 0x06C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUsesHealth : 1;                                         // 0x06C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreSnappedToOtherFloorStructures : 1;                // 0x06C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEnforceStructureLinkExactRotation : 1;                  // 0x06C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceSnappedStructureToGround : 1;                      // 0x06C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceBlockIK : 1;                                       // 0x06C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bStationaryStructure : 1;                                // 0x06C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnorePawns : 1;                                        // 0x06C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanDemolish : 1;                                        // 0x06C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowPlacingOnOtherTeamStructures : 1;                  // 0x06C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventPlacementInWater : 1;                            // 0x06C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowInRegularStructurePreventionZones : 1;             // 0x06C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDontSetStructureCollisionChannels : 1;                  // 0x06C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForcePreventEnemyStructuresNearby : 1;                  // 0x06C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowEnemyDemolish : 1;                                 // 0x06C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDontActuallySnapJustPlacement : 1;                      // 0x06C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreMaxStructuresInRange : 1;                         // 0x06C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPaintingUseSkeletalMesh : 1;                            // 0x06CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsesPaintingComponent : 1;                              // 0x06CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanBuildUpon : 1;                                       // 0x06CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHasResetDecayTime : 1;                                  // 0x06CA(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor
		bool                                                       bForceAllowInPreventionVolumes : 1;                      // 0x06CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceCreateDynamicMaterials : 1;                        // 0x06CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetInfoFromConsumedItemForPlacedStructure : 1;     // 0x06CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bImmuneToAutoDemolish : 1;                               // 0x06CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreMaxStructuresInSmallRadius : 1;                   // 0x06CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowTargetingByCorruptDinos : 1;                       // 0x06CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPTreatAsFoundationForSnappedStructure : 1;          // 0x06CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnStructurePickup : 1;                             // 0x06CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPerInstanceSnapPoints : 1;                              // 0x06CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSnapToWaterSurface : 1;                                 // 0x06CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPUpdatedHealth : 1;                                 // 0x06CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_268L[0x4];                                   // 0x06CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPrimalStructureSnapPoint>                   SnapPoints;                                              // 0x06D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		int32_t                                                    bTraceCheckOnlyUseStructuresWithTypeFlags;               // 0x06E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              AllowStructureColorSets[0x6];                            // 0x06E4(0x0006) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5JYT[0x2];                                   // 0x06EA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             WaterVolumeCheckPointOffset;                             // 0x06EC(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WaterPlacementMinimumWaterHeight;                        // 0x06F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PlacementMaxZDelta;                                      // 0x06FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PlacementChooseRotationMaxRangeOverride;                 // 0x0700(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PlacementMaxRange;                                       // 0x0704(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxSnapLocRange;                                         // 0x0708(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SnapOverlapCheckRadius;                                  // 0x070C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaximumFoundationSupport2DBuildDistance;                 // 0x0710(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PlacementFloorCheckZExtent;                              // 0x0714(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LastHealthPercentage;                                    // 0x0718(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FRotator                                            TakeGroundNormalRotationOffset;                          // 0x071C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DemolishGiveItemCraftingResourcePercentage;              // 0x0728(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDestroyOnStasisUnlessPrevented : 1;                     // 0x072C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_8P8M[0x3];                                   // 0x072D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              AllowReplacementByStructureClassType;                    // 0x0730(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              PreventReplacementOfStructureClassType;                  // 0x0738(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaximumHeightAboveWorldGround;                           // 0x0740(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaximumHeightUnderWorldMaxKillZ;                         // 0x0744(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FRotator                                            PreviewCameraRotation;                                   // 0x0748(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             PreviewCameraPivotOffset;                                // 0x0754(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PreviewCameraDistanceScaleFactor;                        // 0x0760(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PreviewCameraDefaultZoomMultiplier;                      // 0x0764(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PreviewCameraMaxZoomMultiplier;                          // 0x0768(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ReturnDamageAmount;                                      // 0x076C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    StructureRangeTypeFlag;                                  // 0x0770(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    LimitMaxStructuresInRangeTypeFlag;                       // 0x0774(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ReturnDamageImpulse;                                     // 0x0778(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NI5J[0x4];                                   // 0x077C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ReturnDamageType;                                        // 0x0780(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      ReturnDamageExcludeIncomingTypes;                        // 0x0788(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      ReturnDamageOnlyForIncomingTypes;                        // 0x0798(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		int32_t                                                    OwningPlayerID;                                          // 0x07A8(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8KKA[0x4];                                   // 0x07AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              OwningPlayerName;                                        // 0x07B0(0x0010) BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame
		double                                                     LastInAllyRangeTime;                                     // 0x07C0(0x0008) BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		double                                                     PickupAllowedBeforeNetworkTime;                          // 0x07C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      DecayDestructionPeriodMultiplier;                        // 0x07D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		TWeakObjectPtr<class APrimalDinoCharacter>                 SaddleDino;                                              // 0x07D4(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3TYO[0x4];                                   // 0x07DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class APrimalDinoCharacter*>                        LatchedDinos;                                            // 0x07E0(0x0010) BlueprintVisible, ZeroConstructor
		class UMaterialInterface*                                  PreviewMaterial;                                         // 0x07F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UMaterialInstanceDynamic*>                    PreviewMaterialInstances;                                // 0x07F8(0x0010) ZeroConstructor, Transient
		class FName                                                PreviewMaterialColorParamName;                           // 0x0808(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<struct FVector>                                     PlacementTraceDirections;                                // 0x0810(0x0010) ZeroConstructor, Transient
		TArray<class APrimalStructure*>                            LinkedStructures;                                        // 0x0820(0x0010) ZeroConstructor, Transient, SaveGame
		TArray<uint32_t>                                           LinkedStructuresID;                                      // 0x0830(0x0010) Net, ZeroConstructor, Transient
		TArray<class APrimalStructure*>                            StructuresPlacedOnFloor;                                 // 0x0840(0x0010) ZeroConstructor, Transient, SaveGame
		TArray<class UClass*>                                      SnapToStructureTypesToExclude;                           // 0x0850(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      SnapFromStructureTypesToExclude;                         // 0x0860(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FName>                                        SnapToStructureTagsToExclude;                            // 0x0870(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FName>                                        SnapFromStructureTagsToExclude;                          // 0x0880(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class APrimalStructure*                                    PlacedOnFloorStructure;                                  // 0x0890(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		class APrimalStructure*                                    PrimarySnappedStructureChild;                            // 0x0898(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		class APrimalStructure*                                    PrimarySnappedStructureParent;                           // 0x08A0(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		class FString                                              OwnerName;                                               // 0x08A8(0x0010) Net, ZeroConstructor, Transient, SaveGame
		int16_t                                                    StructureColors[0x6];                                    // 0x08B8(0x000C) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, RepNotify, NoDestructor
		unsigned char                                              UnknownData_DKP6[0x4];                                   // 0x08C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APawn*                                               AttachedTo;                                              // 0x08C8(0x0008) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		class APrimalStructureExplosiveTransGPS*                   AttachedTransponder;                                     // 0x08D0(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		uint32_t                                                   StructureID;                                             // 0x08D8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		uint32_t                                                   AttachedToDinoID1;                                       // 0x08DC(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      OnlyAllowStructureClassesToAttach;                       // 0x08E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      OnlyAllowStructureClassesFromAttach;                     // 0x08F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_52FN[0x28];                                  // 0x0900(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  StructureIconMaterial;                                   // 0x0928(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             AdvancedRotationPlacementOffset;                         // 0x0930(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0KCU[0x4];                                   // 0x093C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              SpawnEmitter;                                            // 0x0940(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             SpawnEmitterLocationOffset;                              // 0x0948(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FRotator                                            SpawnEmitterRotationOffset;                              // 0x0954(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              PickupGivesItem;                                         // 0x0960(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExcludeInStructuresRadius;                               // 0x0968(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1ARP[0x4];                                   // 0x096C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      ExcludeInStructuresRadiusClasses;                        // 0x0970(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_MAWC[0x18];                                  // 0x0980(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStructurePaintingComponent*                         PaintingComponent;                                       // 0x0998(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor
		TArray<class FString>                                      PreventBuildStructureReasonStringOverrides;              // 0x09A0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		struct FVector                                             FloatingHudLocTextOffset;                                // 0x09B0(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NDVC[0x4];                                   // 0x09BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ForceLimitStructuresInRange;                             // 0x09C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPreventAttachToSaddle : 1;                              // 0x09C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForcePersonalStructureOwnership : 1;                    // 0x09C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPOverrideAllowStructureAccess : 1;                     // 0x09C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPOverideDemolish : 1;                                  // 0x09C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnDemolish : 1;                                    // 0x09C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPOverrideAllowSnappingWith : 1;                        // 0x09C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPOverrideAllowSnappingWithButAlsoCallSuper : 1;        // 0x09C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnLinkedStructureDestroyed : 1;                    // 0x09C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseTribeGroupStructureRank : 1;                         // 0x09C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceBlockStationaryTraces : 1;                         // 0x09C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAttachToStaticMeshSocket : 1;                           // 0x09C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAttachToStaticMeshSocketRotation : 1;                   // 0x09C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceGroundForFoundation : 1;                           // 0x09C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPOverrideSnappedToTransform : 1;                       // 0x09C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPOverrideSnappedFromTransform : 1;                     // 0x09C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPOverridePlacementRotation : 1;                        // 0x09C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisableStructureOnElectricStorm : 1;                    // 0x09C6(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bNoCollision : 1;                                        // 0x09C6(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       UnknownData_MISX : 1;                                    // 0x09C6(0x0001) BIT_FIELD (PADDING)
		bool                                                       bIsPreviewStructure : 1;                                 // 0x09C6(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bStructureUseAltCollisionChannel : 1;                    // 0x09C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDemolishJustDestroy : 1;                                // 0x09C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHighPriorityDemolish : 1;                               // 0x09C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisableSnapStructure : 1;                               // 0x09C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTriggerBPUnstasis : 1;                                  // 0x09C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBlueprintDrawHUD : 1;                                   // 0x09C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBlueprintDrawPreviewHUD : 1;                            // 0x09C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsesWorldSpaceMaterial : 1;                             // 0x09C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceIgnoreStationaryObjectTrace : 1;                   // 0x09C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAllowNearSupplyCrateSpawns : 1;                    // 0x09C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPPostSetStructureCollisionChannels : 1;                // 0x09C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPickupGiveItemRequiresAccess : 1;                       // 0x09C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAllowPickupGiveItem : 1;                           // 0x09C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventAttachedChildStructures : 1;                     // 0x09C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_FK2R[0x3];                                   // 0x09C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PlacementMaterialForwardDirIndex;                        // 0x09CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPreventPreviewIfWeaponPlaced : 1;                       // 0x09D0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bStructuresInRangeTypeFlagUseAltCollisionChannel : 1;    // 0x09D0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_4831 : 1;                                    // 0x09D0(0x0001) BIT_FIELD (PADDING)
		bool                                                       bIgnoredByTargeting : 1;                                 // 0x09D0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_9MOY[0x3];                                   // 0x09D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ForcePreventPlacingInOfflineRaidStructuresRadius;        // 0x09D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AttachToStaticMeshSocketNameBase;                        // 0x09D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              StructureHarvestingComponent;                            // 0x09E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UPrimalHarvestingComponent*                          MyStructureHarvestingComponent;                          // 0x09E8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SUZA[0x10];                                  // 0x09F0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ItemsUseAlternateActorClassAttachment;                   // 0x0A00(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UnstasisAutoDestroyAfterTime;                            // 0x0A08(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              TribeGroupStructureRank;                                 // 0x0A0C(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HTL9[0x3];                                   // 0x0A0D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      PreventSaddleDinoClasses;                                // 0x0A10(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      AllowSaddleDinoClasses;                                  // 0x0A20(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                PlaceOnWallUseStaticMeshTag;                             // 0x0A30(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SnapStructureClass;                                      // 0x0A38(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DemolishActivationTime;                                  // 0x0A40(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             GroundEncroachmentCheckLocationOffset;                   // 0x0A44(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    StructureMinAllowedVersion;                              // 0x0A50(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    SavedStructureMinAllowedVersion;                         // 0x0A54(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      OverrideEnemyFoundationPreventionRadius;                 // 0x0A58(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      OverridePVPEnemyFoundationPreventionRadius;              // 0x0A5C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExpandEnemyFoundationPreventionRadius;                   // 0x0A60(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    BedID;                                                   // 0x0A64(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      ForceAllowWallAttachmentClasses;                         // 0x0A68(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      LimitMaxStructuresInRangeRadius;                         // 0x0A78(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EGOB[0x4];                                   // 0x0A7C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      FastDecayLinkedStructureClasses;                         // 0x0A80(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      PlacementMaxZAbovePlayerHeight;                          // 0x0A90(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_01MR[0xC];                                   // 0x0A94(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USceneComponent*>                             OverrideTargetComponents;                                // 0x0AA0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference
		float                                                      OverrideApproachRadius;                                  // 0x0AB0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VA1Z[0x4];                                   // 0x0AB4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AMissionType*                                        OwnerMission;                                            // 0x0AB8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bBPCheckItemRequiementsToBuild : 1;                      // 0x0AC0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_CKK8[0x3];                                   // 0x0AC1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FItemNetID                                          PlaceUsingItemID;                                        // 0x0AC4(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H4S4[0x4];                                   // 0x0ACC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        CustomDataModifiedOnStructurePickup;                     // 0x0AD0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bUseBPGetAggroDinoOnDamageSettings : 1;                  // 0x0AE0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_0MTY : 1;                                    // 0x0AE0(0x0001) BIT_FIELD (PADDING)
		bool                                                       bCanAttachToExosuit : 1;                                 // 0x0AE0(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bCanBeStoredByExosuit : 1;                               // 0x0AE0(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bStructureIgnoreDying : 1;                               // 0x0AE0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bClientReceivedStructuresPlacedOnFloor : 1;              // 0x0AE0(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       bHasAnyStructuresPlacedOnFloor : 1;                      // 0x0AE0(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       bUseBPPreventCharacterBasing : 1;                        // 0x0AE0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_B0P9[0x7];                                   // 0x0AE1(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateTribeGroupStructureRank(unsigned char NewRank);
		void UpdateStencilValuesWithStenilDepth(EStencilAlliance InAlliance);
		void UpdateStencilValues();
		void UpdatedHealth(bool bDoReplication);
		bool TickPlacingStructure(class APrimalStructurePlacer* PlacerActor, float DeltaTime);
		void StartRepair();
		bool SetVariant(int32_t VariantIndex, bool bForceSet);
		void SetupDynamicMeshMaterials(class UMeshComponent* MeshComp);
		void SetStructureColorValue(int32_t ColorRegionIndex, int32_t SetVal);
		void SetStaticMobility();
		void SetPreventSaving(bool bPrevent);
		void SetHarvestingActive(bool bActive, bool bOverrideBaseHealth, float BaseHarvestHealthMult, bool bAssignToTribe, int32_t AssignedToTribeID);
		void SetEnabledPrimarySnappedStructureParent(bool bEnabled);
		void SetEnabled(bool bEnabled);
		void SetDynamicMobility();
		void SetContainerActive(bool bNewActive);
		void SetBoundsScale(float NewScale);
		void SetBedEnabled(bool bEnabled);
		bool RefreshStructurePlacement(class APlayerController* PC, const struct FVector& AtLocation, const struct FRotator& AtRotation, const struct FRotator& PlayerViewRotation, class APawn* AttachToPawn, const class FName& BoneName, bool bFlipped);
		TArray<class APrimalStructure*> PreviewCulledStructures(TArray<class APrimalStructure*>* InOutStructuresOnFloor);
		void PrepareAsPlacementPreview();
		void PickupStructureAndDependingLinkedStructures(class APlayerController* ForPC);
		class UPrimalItem* PickupStructure(bool bIsQuickPickup, class AShooterPlayerController* PC);
		void OverrideOwner(class AActor* NewOwner, bool ForceOnlyRelevantToOwner);
		void OnStructurePlacementRefreshed();
		void OnRep_StructureColors();
		void OnRep_CurrentVariant();
		void NonPlayerFinalStructurePlacement(int32_t PlacementTargetingTeam, int32_t PlacementOwningPlayerID, const class FString& PlacementOwningPlayerName, class APrimalStructure* ForcePrimaryParent);
		void NetUpdateTeamAndOwnerName(int32_t NewTeam, const class FString& NewOwnerName);
		void NetUpdateOriginalOwnerNameAndID(int32_t NewOriginalOwnerID, const class FString& NewOriginalOwnerName);
		void NetSpawnCoreStructureDeathActor();
		void NetSetIgnoreDestructionEffects(bool bNewIgnoreDestructionEffects);
		void NetResetClientReceivedStructuersPlacedOnFloors();
		void NetDoSpawnEffects();
		void MultiSetPickupAllowedBeforeNetworkTime(double NewTime);
		void MultiRefreshVariantSettings(int32_t NewVariantIndex);
		void MultiAddStructuresPlacedOnFloor(class APrimalStructure* Structure);
		void LinkStructure(class APrimalStructure* NewLinkedStructure);
		bool IsValidSnapPointTo(class APrimalStructure* childStructure, int32_t MySnapPointToIndex);
		bool IsValidSnapPointFrom(class APrimalStructure* ParentStructure, int32_t MySnapPointFromIndex);
		bool IsValidForSnappingFrom(class APrimalStructure* OtherStructure);
		bool IsRepairAllowed();
		bool STATIC_IsPointObstructedByWorldGeometry(class UWorld* ForWorld, const struct FVector& ThePoint, bool bIgnoreTerrain, bool bOnlyCheckTerrain, bool bIgnoreFoliage, float OBSTRUCTION_CHECK_DIST);
		bool STATIC_IsPointNearSupplyCrateSpawn(class UWorld* TheWorld, const struct FVector& AtPoint);
		bool IsPinLocked();
		bool IsOnlyLinkedToFastDecayStructures();
		bool IsLinkedToWaterOrPowerSource();
		bool IsAllowedToDemolish(class AShooterPlayerController* ForPC);
		int32_t IsAllowedToBuild(class APlayerController* PC, const struct FVector& AtLocation, const struct FRotator& AtRotation, struct FPlacementData* OutPlacementData, bool bDontAdjustForMaxRange, const struct FRotator& PlayerViewRotation, bool bFinalPlacement);
		bool IsActiveEventStructure();
		void STATIC_GetStructuresInRange(class UWorld* TheWorld, const struct FVector& AtLocation, float WithinRange, class UClass* StructureClass, TArray<class APrimalStructure*>* StructuresOut, bool bUseInternalOctree, class APrimalStructure* IgnoreStructure);
		int32_t GetStructureColorValue(int32_t ColorRegionIndex);
		struct FLinearColor GetStructureColor(int32_t ColorRegionIndex);
		class FName GetSnapPointName(int32_t SnapPointIndex);
		int32_t GetPinCode();
		int32_t STATIC_GetNumStructuresInRangeStructureTypeFlag(class UWorld* TheWorld, const struct FVector& AtLocation, int32_t TypeFlag, float WithinRange, bool bCheckBPCountStructureInRange, bool bUseInternalOctree, class APrimalStructure* IgnoreStructure, bool bCheckWithAltCollisionChannel);
		void STATIC_GetNearbyStructuresOfClass(class UWorld* World, class UClass* StructureClass, const struct FVector& Location, float Range, TArray<class APrimalStructure*>* Structures);
		struct FStructureVariant GetDefaultVariant();
		class ADayCycleManager* GetDayCycleManager();
		class APrimalStructure* STATIC_GetClosestStructureToPoint(class UWorld* ForWorld, const struct FVector& AtPoint, float OverlapRadius);
		class UClass* GetBedFilterClass();
		class UStaticMeshComponent* GetAdditionalComponentForDyePreview();
		void ForceReplicateLinkedStructures();
		bool FinalStructurePlacement(class APlayerController* PC, const struct FVector& AtLocation, const struct FRotator& AtRotation, const struct FRotator& PlayerViewRotation, class APawn* AttachToPawn, const class FName& BoneName, bool bFlipped);
		void DisableStructurePickup();
		void DestroyStructuresPlacedOnFloor();
		void Demolish(class APlayerController* ForPC, class AActor* DamageCauser);
		void DelayedDisableSnapParent();
		void CreateDynamicMaterials(class UMeshComponent* ForceCreateForComponent);
		void ClientUpdateLinkedStructures(TArray<uint32_t> NewLinkedStructures);
		void ClearStructureLinks(class APlayerController* ForPC);
		void ClearCustomColors();
		bool CanPickupStructureFromRecentPlacement();
		bool CanBeStoredByExosuit(class AShooterPlayerController* ForPC);
		bool CanAttachToExosuit(class AShooterPlayerController* ForPC);
		void CallDrawHUD(class AShooterHUD* HUD);
		void CallDrawFloatingHUD(class AShooterHUD* HUD);
		bool BPUseCountStructureInRange();
		void BPUpdatedHealth(bool bDoReplication);
		void BPUnstasis();
		void BPTriggerStasisEvent();
		bool BPTreatAsFoundationForSnappedStructure(class APrimalStructure* OtherStructure, const struct FPlacementData& WithPlacementData);
		void BPStructurePreGetMultiUseEntries(class APlayerController* ForPC);
		void BPRefreshedStructureColors();
		bool BPPreventUsingAsFloorForStructure(const struct FPlacementData& theOutPlacementData, class APrimalStructure* StructureToPlaceOnMe);
		bool BPPreventStasis();
		bool BPPreventSpawnForPlayer(class AShooterPlayerController* PC, bool bCheckCooldownTime, class APrimalStructure* FromStructure);
		bool BPPreventPlacingStructureOntoMe(class APlayerController* PC, class APrimalStructure* ForNewStructure, const struct FHitResult& ForHitResult);
		bool BPPreventPlacingOnFloorStructure(const struct FPlacementData& theOutPlacementData, class APrimalStructure* FloorStructure);
		bool BPPreventPlacementOnPawn(class APlayerController* PC, class APrimalCharacter* forCharacter, const class FName& ForBone);
		bool BPPreventCharacterBasing(class AActor* OtherActor, class UPrimitiveComponent* BasedOnComponent);
		void BPPostSetStructureCollisionChannels();
		void BPPostLoadedFromSaveGame();
		void BPPlayDying(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
		void BPPlacedStructure(class APlayerController* ForPC);
		struct FVector BPOverrideTargetLocation(const struct FVector& attackPos);
		bool BPOverrideSnappedToTransform(class APrimalStructure* childStructure, int32_t ChildSnapFromIndex, const class FName& ChildSnapFromName, const struct FVector& UnsnappedPlacementPos, const struct FRotator& UnsnappedPlacementRot, const struct FVector& SnappedPlacementPos, const struct FRotator& SnappedPlacementRot, int32_t SnapToIndex, const class FName& SnapToName, struct FVector* OutLocation, struct FRotator* OutRotation, int32_t* bForceInvalidateSnap);
		bool BPOverrideSnappedFromTransform(class APrimalStructure* ParentStructure, int32_t ParentSnapFromIndex, const class FName& ParentSnapFromName, const struct FVector& UnsnappedPlacementPos, const struct FRotator& UnsnappedPlacementRot, const struct FVector& SnappedPlacementPos, const struct FRotator& SnappedPlacementRot, int32_t SnapToIndex, const class FName& SnapToName, struct FVector* OutLocation, struct FRotator* OutRotation, int32_t* bForceInvalidateSnap);
		struct FRotator BPOverridePlacementRotation(const struct FVector& ViewPos, const struct FRotator& ViewRot);
		bool BPOverrideDemolish(class AShooterPlayerController* ForPC);
		class FString BPOverrideCantBuildReasonString(int32_t CantBuildReason);
		bool BPOverrideAllowStructureAccess(class AShooterPlayerController* ForPC, bool bIsAccessAllowed, bool bForInventoryOnly);
		void BPOnVariantSwitch(int32_t NewVariantIndex);
		void BPOnStructurePickup(class APlayerController* PlayerController, class UClass* ItemType, class UPrimalItem* NewlyPickedUpItem, bool bIsQuickPickup);
		void BPOnLinkedStructureDestroyed(class APrimalStructure* DestroyedStructure);
		void BPOnDemolish(class APlayerController* ForPC, class AActor* DamageCauser);
		void BPNotifyAmmoBoxReloadedStructure(class APrimalStructure* ReloadedStructure);
		void BPNetRefreshStructureColors(bool bUseColors);
		int32_t BPIsAllowedToBuildEx(const struct FPlacementData& OutPlacementData, int32_t CurrentAllowedReason, class APlayerController* PC, bool bFinalPlacement, bool bChoosingRotation);
		int32_t BPIsAllowedToBuild(const struct FPlacementData& OutPlacementData, int32_t CurrentAllowedReason);
		bool BPImpactEffect(const struct FHitResult& HitRes, const struct FVector& ShootDirection);
		void BPHandleStructureEnabled(bool bEnabled);
		bool BPHandleBedFastTravel(class AShooterPlayerController* ForPC, class APrimalStructure* ToBed);
		int32_t STATIC_BPGetStructureID(class APrimalStructure* PrimalStructure);
		TArray<struct FPrimalStructureSnapPoint> BPGetSnapPoints();
		void BPGetInfoFromConsumedItemForPlacedStructure(class UPrimalItem* ItemToConsumed);
		class APrimalStructure* STATIC_BPGetFromID(class UWorld* World, int32_t TheStructureID);
		float BPGetAmmoBoxReloadPercent();
		void BPGetAllLinkedStructures(TArray<class APrimalStructure*>* OutLinkedStructures);
		void BPGetAggroDinoOnDamageSettings(TArray<class FName>* AggroDinoClassesCustomTags, float* AggroDinoClassesRange);
		bool BPForceConsideredEnemyFoundation(class APlayerController* PC, class APrimalStructure* ForNewStructure, const struct FVector& TestAtLocation);
		void BPDefaultProcessEditText(class AShooterPlayerController* ForPC, const class FString& TextToUse, bool checkedBox);
		int32_t BPCheckItemRequiementsToBuild(class UPrimalItem* ItemToConsumed);
		void BPBeginPreview();
		void BPApplyCustomDurabilityOnPickup(class UPrimalItem* PickedUp);
		bool BPAllowSwitchToVariant(int32_t VariantIndex);
		bool BPAllowSnapRotationForStructure(int32_t ThisSnapPointIndex, const class FName& ThisSnapPointName, class APrimalStructure* OtherStructure, int32_t OtherStructureSnapPointIndex, const class FName& OtherStructureSnapPointName);
		bool BPAllowSnappingWith(class APrimalStructure* OtherStructure, class APlayerController* ForPC);
		bool BPAllowPickupGiveItem(class APlayerController* ForPC);
		void BP_OnPaintingComponentInitialized(class UStructurePaintingComponent* PaintingComp);
		void BlueprintDrawPreviewHUD(class AShooterHUD* HUD, float CenterX, float CenterY);
		void BlueprintDrawHUD(class AShooterHUD* HUD, float CenterX, float CenterY);
		void BlueprintAnimNotifyCustomEvent(const class FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject);
		void ApplyPrimalItemSettingsToStructure(class UMeshComponent* meshToColorize, class UPrimalItem* AssociatedPrimalItem);
		bool AllowStructureAccess(class APlayerController* ForPC);
		bool AllowSnappingWith(class APrimalStructure* OtherStructure, class APlayerController* ForPC);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureItemContainer
	 * Size -> 0x0328 (FullSize[0x0E10] - InheritedSize[0x0AE8])
	 */
	class APrimalStructureItemContainer : public APrimalStructure
	{
	public:
		class UPrimalInventoryComponent*                           MyInventoryComponent;                                    // 0x0AE8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor
		bool                                                       bAdjustDamageAsPlayerWithEquipmenet : 1;                 // 0x0AF0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyConsumeDurabilityOnEquipmentForEnemies : 1;         // 0x0AF0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAutoActivateContainer : 1;                              // 0x0AF0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanToggleActivation : 1;                                // 0x0AF0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAutoActivateWhenFueled : 1;                             // 0x0AF0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowCustomName : 1;                                    // 0x0AF0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bContainerActivated : 1;                                 // 0x0AF0(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, SaveGame, NoDestructor
		bool                                                       bOnlyUseSpoilingMultipliersIfActivated : 1;              // 0x0AF0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCraftingSubstractConnectedWater : 1;                    // 0x0AF1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceNoPinLocking : 1;                                  // 0x0AF1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bServerBPNotifyInventoryItemChanges : 1;                 // 0x0AF1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bClientBPNotifyInventoryItemChanges : 1;                 // 0x0AF1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisplayActivationOnInventoryUI : 1;                     // 0x0AF1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetFuelConsumptionMultiplier : 1;                  // 0x0AF1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventToggleActivation : 1;                            // 0x0AF1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bServerBPNotifyInventoryItemChangesUseQuantity : 1;      // 0x0AF1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bStartedUnderwater : 1;                                  // 0x0AF2(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bCheckStartedUnderwater : 1;                             // 0x0AF2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisplayActivationOnInventoryUISecondary : 1;            // 0x0AF2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisplayActivationOnInventoryUITertiary : 1;             // 0x0AF2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bFuelAllowActivationWhenNoPower : 1;                     // 0x0AF2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPoweredAllowBattery : 1;                                // 0x0AF2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPoweredUsingBattery : 1;                                // 0x0AF2(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
		bool                                                       bPoweredHasBattery : 1;                                  // 0x0AF2(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
		bool                                                       bPoweredAllowSolar : 1;                                  // 0x0AF3(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPoweredUsingSolar : 1;                                  // 0x0AF3(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
		float                                                      SolarRefreshIntervalMin;                                 // 0x0AF4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SolarRefreshIntervalMax;                                 // 0x0AF8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SolarRefreshInterval;                                    // 0x0AFC(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		double                                                     LastSolarRefreshTime;                                    // 0x0B00(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		class UClass*                                              BatteryClassOverride;                                    // 0x0B08(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    PoweredOverrideCounter;                                  // 0x0B10(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      NotifyNearbyPowerGeneratorDistance;                      // 0x0B14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    NotifyNearbyPowerGeneratorOctreeGroup;                   // 0x0B18(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       UseBPApplyPinCode : 1;                                   // 0x0B1C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_87ZN[0x3];                                   // 0x0B1D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInterface*>                          ActivateMaterials;                                       // 0x0B20(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UMaterialInterface*>                          InActivateMaterials;                                     // 0x0B30(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FItemToDisplayInStructureTooltip>            ItemsToDisplayInStructureTooltip;                        // 0x0B40(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UChildActorComponent*                                MyChildEmitterSpawnable;                                 // 0x0B50(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		bool                                                       bIsLocked : 1;                                           // 0x0B58(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, PersistentInstance
		bool                                                       bIsPinLocked : 1;                                        // 0x0B58(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, PersistentInstance
		bool                                                       bHasFuel : 1;                                            // 0x0B58(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, PersistentInstance
		bool                                                       bIsUnderwater : 1;                                       // 0x0B58(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor
		unsigned char                                              UnknownData_APSP[0x7];                                   // 0x0B59(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              BoxName;                                                 // 0x0B60(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame
		int32_t                                                    MaxBoxNameLength;                                        // 0x0B70(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableActivationUnderwater : 1;                        // 0x0B74(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForcePreventAutoActivateWhenConnectedToWater : 1;       // 0x0B74(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSupportsLocking : 1;                                    // 0x0B74(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSupportsPinLocking : 1;                                 // 0x0B74(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDropInventoryOnDestruction : 1;                         // 0x0B74(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDestroyWhenAllItemsRemoved : 1;                         // 0x0B74(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDrinkingWater : 1;                                      // 0x0B74(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPoweredWaterSourceWhenActive : 1;                       // 0x0B74(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bActiveRequiresPower : 1;                                // 0x0B75(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsPowerJunction : 1;                                    // 0x0B75(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAutoActivateIfPowered : 1;                              // 0x0B75(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bLastToggleActivated : 1;                                // 0x0B75(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor
		bool                                                       bSupportsPinActivation : 1;                              // 0x0B75(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsPowered : 1;                                          // 0x0B75(0x0001) BIT_FIELD Net, SaveGame, NoDestructor, PersistentInstance
		bool                                                       bOnlyAllowTeamActivation : 1;                            // 0x0B75(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bReplicateItemFuelClass : 1;                             // 0x0B75(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseOpenSceneAction : 1;                                 // 0x0B76(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_TFGT : 1;                                    // 0x0B76(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUseBPActivated : 1;                                     // 0x0B76(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanBeActivated : 1;                                // 0x0B76(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanBeActivatedByPlayer : 1;                        // 0x0B76(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPOnContainerActiveHealthDecrease : 1;                  // 0x0B76(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPIsValidWaterSourceForPipe : 1;                        // 0x0B76(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowAutoActivateWhenNoPower : 1;                       // 0x0B76(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAutoActivateWhenNoPower : 1;                            // 0x0B77(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, PersistentInstance
		float                                                      InsulationRange;                                         // 0x0B78(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HyperThermiaInsulation;                                  // 0x0B7C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HypoThermiaInsulation;                                   // 0x0B80(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ContainerActiveDecreaseHealthSpeed;                      // 0x0B84(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FuelConsumptionIntervalsMultiplier;                      // 0x0B88(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DropInventoryOnDestructionLifespan;                      // 0x0B8C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              ActivateContainerString;                                 // 0x0B90(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              DeactivateContainerString;                               // 0x0BA0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              ContainerActiveHealthDecreaseDamageTypePassive;          // 0x0BB0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      ActiveRequiresFuelItems;                                 // 0x0BB8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<float>                                              FuelItemsConsumeInterval;                                // 0x0BC8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      FuelItemsConsumedGiveItems;                              // 0x0BD8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		double                                                     NetDestructionTime;                                      // 0x0BE8(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		uint32_t                                                   CurrentPinCode;                                          // 0x0BF0(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JO6Q[0x4];                                   // 0x0BF4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     CurrentFuelTimeCache;                                    // 0x0BF8(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		double                                                     LastCheckedFuelTime;                                     // 0x0C00(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    LinkedPowerJunctionStructureID;                          // 0x0C08(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, PersistentInstance
		int32_t                                                    CurrentItemCount;                                        // 0x0C0C(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    MaxItemCount;                                            // 0x0C10(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class APrimalStructure>                     LinkedPowerJunctionStructure;                            // 0x0C14(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FJUA[0x4];                                   // 0x0C1C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              NextConsumeFuelGiveItemType;                             // 0x0C20(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DGWY[0x8];                                   // 0x0C28(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastActiveStateChangeTime;                               // 0x0C30(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Y85P[0x8];                                   // 0x0C38(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPrimalMapMarkerEntryData                           MapMarkerLocationInfo;                                   // 0x0C40(0x0028) Net, Transient
		float                                                      BasedCharacterDamageInterval;                            // 0x0C68(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BasedCharacterDamageAmount;                              // 0x0C6C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              BasedCharacterDamageType;                                // 0x0C70(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              EngramRequirementClassOverride;                          // 0x0C78(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class AActor*                                              LinkedBlueprintSpawnActorPoint;                          // 0x0C80(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              PoweredNearbyStructureTemplate;                          // 0x0C88(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PoweredNearbyStructureRange;                             // 0x0C90(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MS98[0x4];                                   // 0x0C94(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     JunctionLinkParticleTemplate;                            // 0x0C98(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              UISceneTemplate;                                         // 0x0CA0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              OpenSceneActionName;                                     // 0x0CA8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              DisabledOpenSceneActionName;                             // 0x0CB8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              RequiresItemForOpenSceneAction;                          // 0x0CC8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bRequiresItemExactClass : 1;                             // 0x0CD0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDestroyWhenAllItemsRemovedExceptDefaults : 1;           // 0x0CD0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bInventoryForcePreventRemoteAddItems : 1;                // 0x0CD0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bInventoryForcePreventItemAppends : 1;                   // 0x0CD0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_U2ZX : 1;                                    // 0x0CD0(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUseDeathCacheCharacterID : 1;                           // 0x0CD0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideAutoActivateToggle : 1;                             // 0x0CD0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseCooldownOnTransferAll : 1;                           // 0x0CD0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseAmmoContainerBuff : 1;                               // 0x0CD1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_HJY0[0x6];                                   // 0x0CD2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     DeathCacheCreationTime;                                  // 0x0CD8(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KZLY[0x18];                                  // 0x0CE0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent*                            JunctionLinkCableParticle;                               // 0x0CF8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		struct FVector                                             JunctionCableBeamOffsetStart;                            // 0x0D00(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             JunctionCableBeamOffsetEnd;                              // 0x0D0C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          ContainerActivatedSound;                                 // 0x0D18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          ContainerDeactivatedSound;                               // 0x0D20(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              DemolishInventoryDepositClass;                           // 0x0D28(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              FuelItemTrueClass;                                       // 0x0D30(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		class UClass*                                              ReplicatedFuelItemClass;                                 // 0x0D38(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		int16_t                                                    ReplicatedFuelItemColorIndex;                            // 0x0D40(0x0002) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QNG4[0x6];                                   // 0x0D42(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     DefaultParticleTemplate;                                 // 0x0D48(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          DefaultAudioTemplate;                                    // 0x0D50(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      OverrideParticleTemplateItemClasses;                     // 0x0D58(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UParticleSystem*>                             OverrideParticleTemplates;                               // 0x0D68(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class USoundBase*>                                  OverrideAudioTemplates;                                  // 0x0D78(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      MaxActivationDistance;                                   // 0x0D88(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DR10[0x4];                                   // 0x0D8C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              BoxNamePrefaceString;                                    // 0x0D90(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              TribeGroupInventoryRank;                                 // 0x0DA0(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		bool                                                       bUseBPGetQuantityOfItemWithoutCheckingInventory : 1;     // 0x0DA1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPSetPlayerConstructor : 1;                          // 0x0DA1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bReplicateLastActivatedTime : 1;                         // 0x0DA1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsAmmoContainer : 1;                                    // 0x0DA1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bServerBPNotifyInventoryItemChangesUseSwapped : 1;       // 0x0DA1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPNotifyRemoteViewerChange : 1;                         // 0x0DA1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOverrideDescriptiveName : 1;                       // 0x0DA1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_5M44[0x6];                                   // 0x0DA2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              FuelConsumeDecreaseDurabilityAmounts;                    // 0x0DA8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      RandomFuelUpdateTimeMin;                                 // 0x0DB8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RandomFuelUpdateTimeMax;                                 // 0x0DBC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     LastDeactivatedTime;                                     // 0x0DC0(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		double                                                     LastActivatedTime;                                       // 0x0DC8(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      ValidCraftingResourceMaxDurability;                      // 0x0DD0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ActivationCooldownTime;                                  // 0x0DD4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UsablePriority;                                          // 0x0DD8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_B4IU[0x4];                                   // 0x0DDC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint64_t                                                   DeathCacheCharacterID;                                   // 0x0DE0(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		class UParticleSystemComponent*                            LocalCorpseEmitter;                                      // 0x0DE8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		float                                                      SinglePlayerFuelConsumptionIntervalsMultiplier;          // 0x0DF0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PoweredBatteryDurabilityToDecreasePerSecond;             // 0x0DF4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DropInventoryDepositTraceDistance;                       // 0x0DF8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UUU5[0x4];                                   // 0x0DFC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class AShooterPlayerController>>     ValidatedByPinCodePlayerControllers;                     // 0x0E00(0x0010) ZeroConstructor, Transient

	public:
		bool VerifyPinCode(int32_t pinCode);
		void UpdateTribeGroupInventoryRank(unsigned char NewRank);
		void UpdateSolarPower();
		void UpdateContainerActiveHealthDecrease();
		void TryActivation();
		void SetPoweredOverrideCounter(int32_t NewPoweredOverrideCounter);
		void RefreshPowerJunctionLink();
		void RefreshInventoryItemCounts();
		void PowerGeneratorBuiltNearbyPoweredStructure(class APrimalStructureItemContainer* PoweredStructure);
		void OnContainerRenamed();
		void NetUpdateLocation(const struct FVector& NewLocation);
		void NetUpdateBoxName(const class FString& NewName);
		void NetSetContainerActive(bool bSetActive, class UClass* NetReplicatedFuelItemClass, int16_t NetReplicatedFuelItemColorIndex);
		void MovePowerJunctionLink();
		bool IsValidForDinoFeedingContainer(class APrimalDinoCharacter* ForDino);
		bool IsValidatedPinCodePlayerController(class APlayerController* ForPC);
		bool IsPlayerControllerInPinCodeValidationList(class APlayerController* PlayerController);
		bool HasSamePinCode(class APrimalStructureItemContainer* otherContainer);
		int32_t GetDeathCacheCharacterID();
		void EnableActive();
		bool CanBeActivated();
		void BPSetPlayerConstructor(class APlayerController* PC);
		void BPRename(const class FString& NewName);
		void BPPreGetMultiUseEntries(class APlayerController* ForPC);
		class FString BPOverrideDescriptiveName();
		void BPOnContainerActiveHealthDecrease();
		void BPNotifyRemoteViewerChange(bool bOpened);
		void BPNotifyPowerChanged();
		void BPNotifyInventoryItemChange(bool bIsItemAdd, class UPrimalItem* theItem, bool bEquipItem);
		bool BPIsValidWaterSourceForPipe(class APrimalStructureWaterPipe* ForWaterPipe);
		int32_t BPGetQuantityOfItemWithoutCheckingInventory(class UClass* ItemToCheckFor);
		float BPGetFuelConsumptionMultiplier();
		void BPContainerDeactivated();
		void BPContainerActivated();
		bool BPCanBeActivatedByPlayer(class AShooterPlayerController* PC);
		bool BPCanBeActivated();
		bool BPApplyPinCode(class AShooterPlayerController* ForPC, int32_t appledPinCode, bool bIsSetting, int32_t TheCustomIndex);
		bool AllowToggleActivation(class AShooterPlayerController* ForPC);
		bool AdjustNetDestructionTime(float Delta);
		int32_t AddToValidatedByPinCodePlayerControllers(class AShooterPlayerController* ForPC);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionDispatcher
	 * Size -> 0x00C0 (FullSize[0x0ED0] - InheritedSize[0x0E10])
	 */
	class AMissionDispatcher : public APrimalStructureItemContainer
	{
	public:
		class UStaticMeshComponent*                                StaticMeshComponent;                                     // 0x0E10(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UParticleSystemComponent*                            ParticleSystemComponent;                                 // 0x0E18(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UPrimalInventoryComponent*                           TheInventoryComponent;                                   // 0x0E20(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		TArray<class AActor*>                                      MissionActors;                                           // 0x0E28(0x0010) Edit, ZeroConstructor
		TArray<class UClass*>                                      MissionTypes;                                            // 0x0E38(0x0010) Edit, BlueprintVisible, ZeroConstructor, CPF_SkipSerialization
		int32_t                                                    AutoStartMissionTypesIndex;                              // 0x0E48(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		EMissionDispatcherTriggerMode                              MissionDispatcherTriggerMode;                            // 0x0E4C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		unsigned char                                              UnknownData_IAQX[0x3];                                   // 0x0E4D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        AdditionalMissionTriggerKeys;                            // 0x0E50(0x0010) Edit, BlueprintVisible, ZeroConstructor, CPF_SkipSerialization
		bool                                                       bAllowConcurrentMissions : 1;                            // 0x0E60(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, CPF_SkipSerialization
		bool                                                       bAllowJoinMissionInProgress : 1;                         // 0x0E60(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, CPF_SkipSerialization
		bool                                                       bForceStartMission : 1;                                  // 0x0E60(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseBPCanSpawnMission : 1;                               // 0x0E60(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseBPGetMissionStartLocation : 1;                       // 0x0E60(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseBPOnMissionStarted : 1;                              // 0x0E60(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseBPActivateMissionActors : 1;                         // 0x0E60(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseBPDeactivateMissionActors : 1;                       // 0x0E60(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseBPOnRunningMissionDeactivated : 1;                   // 0x0E61(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseBPOverrideMultiUseMissionList : 1;                   // 0x0E61(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bParticleSystemActiveOnlyWhenMissionNotRunning : 1;      // 0x0E61(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseMissionMetaTags : 1;                                 // 0x0E61(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		unsigned char                                              UnknownData_MKVG[0x6];                                   // 0x0E62(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AMissionType*                                        RunningMission;                                          // 0x0E68(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      MaxDistanceAllowToStartMission;                          // 0x0E70(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JVQA[0x5C];                                  // 0x0E74(0x005C) MISSED OFFSET (PADDING)

	public:
		class AMissionType* StartMission(class UClass* MissionTypeClass, class AShooterCharacter* StartingCharacter, class FString* OutClientFailureReason);
		void OnRunningMissionDeactivated(class AMissionType* Mission);
		void MultiSetParticleSystemActive(bool bIsActive);
		void MultiDeactivateMissionActors();
		void MultiActivateMissionActors();
		bool IsValidDispatcherForMissionType(class UClass* MissionTypeClass, class AShooterCharacter* StartingCharacter);
		int32_t GetFallbackSeed(class UClass* ForMission, bool bRemoveSeed);
		void GenerateFallbackSeeds();
		void ClearFallbackSeeds(class UClass* OptionalForMission);
		TArray<class UClass*> BPOverrideMultiUseMissionList(class APlayerController* ForPC, class AShooterCharacter* StartingCharacter);
		void BPOnRunningMissionDeactivated(class AMissionType* Mission);
		void BPOnMissionStarted(class AMissionType* NewMission, class AShooterCharacter* StartingCharacter);
		void BPOnMissionFailToStart(class UClass* MissionTypeClass, class AShooterCharacter* StartingCharacter);
		struct FVector BPGetMissionStartLocation(class UClass* MissionTypeClass, class AShooterCharacter* StartingCharacter);
		void BPDeactivateMissionActors();
		bool BPCanSpawnMission(class UClass* MissionTypeClass, class AShooterCharacter* StartingCharacter);
		void BPActivateMissionActors();
		void AddFallbackSeed(class UClass* ForMission, int32_t Seed, int32_t MaxNumberOfFallbackSeeds);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionType
	 * Size -> 0x0648 (FullSize[0x0AB8] - InheritedSize[0x0470])
	 */
	class AMissionType : public AActor
	{
	public:
		class USceneComponent*                                     MissionRoot;                                             // 0x0470(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UPrimalInventoryComponent*                           MissionInventory;                                        // 0x0478(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    MissionVersion;                                          // 0x0480(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		unsigned char                                              UnknownData_4ALQ[0x4];                                   // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        PrereqMissionTags;                                       // 0x0488(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization
		TArray<class FName>                                        PreventsStargingMissionsOfTags;                          // 0x0498(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization
		TArray<class FName>                                        BuffTagsThatPreventMission;                              // 0x04A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization
		TArray<class UClass*>                                      UnlockPrequisites;                                       // 0x04B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization
		TArray<class UClass*>                                      PrereqMissionTypes;                                      // 0x04C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization
		float                                                      MissionTimeOfDayUnlockTime;                              // 0x04D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		float                                                      MissionTimeOfDayLockTime;                                // 0x04DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		EMissionDispatchMode                                       DispatchMode;                                            // 0x04E0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		unsigned char                                              UnknownData_W4AE[0x3];                                   // 0x04E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MissionDispatcherMaxDistance;                            // 0x04E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		float                                                      MissionWildDinoOutgoingDamageScale;                      // 0x04E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MissionWildDinoIncomingDamageScale;                      // 0x04EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxPlayerCount;                                          // 0x04F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		int32_t                                                    MaxDinosPerPlayerAllowedOnMission;                       // 0x04F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GlobalMissionCooldown;                                   // 0x04F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		float                                                      PerPlayerMissionCooldown;                                // 0x04FC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		int32_t                                                    TargetPlayerLevel;                                       // 0x0500(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		int32_t                                                    MinPlayerLevel;                                          // 0x0504(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		int32_t                                                    MaxPlayerLevel;                                          // 0x0508(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		bool                                                       bSupportsMissionTimeOfDayLocking : 1;                    // 0x050C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyAllowMountsOnMission : 1;                           // 0x050C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor
		bool                                                       bTreatPlayerLevelRangeAsHardCap : 1;                     // 0x050C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseBPStaticIsPlayerEligibleForMission : 1;              // 0x050C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bAutoSendMissionCompleteNotification : 1;                // 0x050C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bAutoSendMissionCompleteAlert : 1;                       // 0x050C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bAutoRewardLootOnMissionComplete : 1;                    // 0x050C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bAutoRewardXPOnMissionComplete : 1;                      // 0x050C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseBPGetExtraLocalMissionIndicators : 1;                // 0x050D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bMissionPreventsCryoDeploy : 1;                          // 0x050D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bMissionPreventsMekDeploy : 1;                           // 0x050D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bMissionPreventsDinoSpawner : 1;                         // 0x050D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bMissionPreventsFlyers : 1;                              // 0x050D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bMissionPreventsVehicle : 1;                             // 0x050D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanRideMissionDino : 1;                            // 0x050D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisabledOnXboxSinglePlayer : 1;                         // 0x050D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisabledOnPS4SinglePlayer : 1;                          // 0x050E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_V2GQ[0x1];                                   // 0x050F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              MissionDisplayName;                                      // 0x0510(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		class FString                                              MissionDescription;                                      // 0x0520(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		class FString                                              MissionSuccessMessage;                                   // 0x0530(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		struct FLinearColor                                        MissionSuccessMessageColor;                              // 0x0540(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		class FString                                              MissionFailedMessage;                                    // 0x0550(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		struct FLinearColor                                        MissionFailedMessageColor;                               // 0x0560(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		class FString                                              MissionAlertTitle;                                       // 0x0570(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		class FString                                              MissionInitiatedString;                                  // 0x0580(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		float                                                      MissionCompleteAlertDisplayTime;                         // 0x0590(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		unsigned char                                              UnknownData_7U1G[0x4];                                   // 0x0594(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          MissionIcon;                                             // 0x0598(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		class USoundBase*                                          CombatMusicOverride;                                     // 0x05A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		TArray<struct FLootTableEntry>                             RewardLootTable;                                         // 0x05A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization
		int32_t                                                    RewardItemCount;                                         // 0x05B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		float                                                      RewardXPRatio;                                           // 0x05BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		int32_t                                                    FirstTimeCompletionHexagonRewardBonus;                   // 0x05C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		int32_t                                                    FirstTimeCompletionHexagonRewardOverride;                // 0x05C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		int32_t                                                    HexagonsOnCompletion;                                    // 0x05C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		bool                                                       bDivideHexogonsOnCompletion;                             // 0x05CC(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		bool                                                       bAutoRewardFromCustomItemSets;                           // 0x05CD(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		bool                                                       bRollExtraLootSetsPerPlayer;                             // 0x05CE(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		unsigned char                                              UnknownData_KJAM[0x1];                                   // 0x05CF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MinimumItemSetGenerationRolls;                           // 0x05D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		bool                                                       bEqualRewardsToAllParticipants;                          // 0x05D4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		unsigned char                                              UnknownData_0L5L[0x3];                                   // 0x05D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GenerateItemSetsQualityMultiplierMin;                    // 0x05D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		float                                                      GenerateItemSetsQualityMultiplierMax;                    // 0x05DC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		float                                                      MinItemSets;                                             // 0x05E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		float                                                      MaxItemSets;                                             // 0x05E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		float                                                      NumItemSetsPower;                                        // 0x05E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		bool                                                       bSetsRandomWithoutReplacement : 1;                       // 0x05EC(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, CPF_SkipSerialization
		unsigned char                                              UnknownData_RWL3[0x3];                                   // 0x05ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSupplyCrateItemSet>                         CustomItemSets;                                          // 0x05F0(0x0010) Edit, BlueprintVisible, ZeroConstructor, CPF_SkipSerialization
		bool                                                       bUseCustomMissionsUIRewardsLabelText : 1;                // 0x0600(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		unsigned char                                              UnknownData_ZBF6[0x7];                                   // 0x0601(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CustomMissionsUIRewardsLabelText;                        // 0x0608(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization
		class FName                                                InitialMissionPhase;                                     // 0x0618(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		TArray<struct FMissionPhase>                               Phases;                                                  // 0x0620(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization
		TArray<struct FMissionPhaseData>                           PhaseData;                                               // 0x0630(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic
		class UClass*                                              MissionInventoryTemplate;                                // 0x0640(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		class UClass*                                              LeaderboardType;                                         // 0x0648(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		TArray<struct FLeaderboardRow>                             DefaultLeaderboardRows;                                  // 0x0650(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization
		TArray<struct FMissionWorldBuffData>                       SuccessWorldBuffs;                                       // 0x0660(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization
		TArray<struct FMissionWorldBuffData>                       FailureWorldBuffs;                                       // 0x0670(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization
		TArray<class FName>                                        DisableTekArmorBuffs;                                    // 0x0680(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization
		bool                                                       bAlwaysCreateMissionInventory : 1;                       // 0x0690(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bAutoUpdateRequirements : 1;                             // 0x0690(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bAutoUpdateWorldIndicators : 1;                          // 0x0690(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUsePerPlayerWorldIndicators : 1;                        // 0x0690(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUsePerPlayerPhaseRequirements : 1;                      // 0x0690(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bAutoDeactivateMissionBuff : 1;                          // 0x0690(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bMissionWeaponsHaveInfiniteAmmo : 1;                     // 0x0690(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseDinoEvents : 1;                                      // 0x0690(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bDestroyMissionDinosOnDeactivate : 1;                    // 0x0691(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bAllowHarvestingMissionDinos : 1;                        // 0x0691(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUsePlayerEvents : 1;                                    // 0x0691(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseInventoryEvents : 1;                                 // 0x0691(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseTriggerEvents : 1;                                   // 0x0691(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseStructureEvents : 1;                                 // 0x0691(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseBPTryCompletePhase : 1;                              // 0x0691(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseBPGenerateMissionRewards : 1;                        // 0x0691(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bDebugWorldIndicators : 1;                               // 0x0692(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bAutoDeactivateMissionWithNoPlayers : 1;                 // 0x0692(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bAutoSaveMissionCompleteStatusPerPlayer : 1;             // 0x0692(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bRepeatableMission : 1;                                  // 0x0692(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bDisableLevelUpSoundDuringMission : 1;                   // 0x0692(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseBPOverrideMissionTimerColor : 1;                     // 0x0692(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseBPOverrideMissionIndicatorString : 1;                // 0x0692(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bForceCompleteOnDeactivate : 1;                          // 0x0692(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bRemovePlayerFromMissionOnDeath : 1;                     // 0x0693(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bPersistentMission : 1;                                  // 0x0693(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, CPF_SkipSerialization
		bool                                                       bUseMissionTagAsStringIfLookupFails : 1;                 // 0x0693(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bScaleMinDistanceToWaypointByRotationRate : 1;           // 0x0693(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_5Z9A : 1;                                    // 0x0693(0x0001) BIT_FIELD (PADDING)
		bool                                                       bPreventShowingMissionTime : 1;                          // 0x0693(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowNegativeMissionStartNetworkTime : 1;               // 0x0693(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bShowInUI : 1;                                           // 0x0693(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_7AJT[0x4];                                   // 0x0694(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FTaggedString>                               CustomMissionRequirements;                               // 0x0698(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		bool                                                       bSingletonMission : 1;                                   // 0x06A8(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_JOSW[0x3];                                   // 0x06A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinDistanceToWaypointMultiplier;                         // 0x06AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MissionDebugFlags;                                       // 0x06B0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_18RG[0x4];                                   // 0x06B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        TriggerKeys;                                             // 0x06B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, CPF_SkipSerialization
		float                                                      MissionMaxDurationSeconds;                               // 0x06C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		float                                                      MissionDurationConsoleOffsetSeconds;                     // 0x06CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		EMissionTimerMode                                          MissionTimerUIMode;                                      // 0x06D0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		EMissionTimerMode                                          MissionDurationUIMode;                                   // 0x06D1(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		unsigned char                                              UnknownData_EYOK[0x6];                                   // 0x06D2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              MissionObjectiveTimeLabelString;                         // 0x06D8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, CPF_SkipSerialization
		float                                                      LifetimeAfterDeactivated;                                // 0x06E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		unsigned char                                              UnknownData_ACCG[0x4];                                   // 0x06EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FTaggedString>                               MissionStrings;                                          // 0x06F0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              MissionBuffType;                                         // 0x0700(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		bool                                                       bListEntryOnly;                                          // 0x0708(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseThrottledTick;                                       // 0x0709(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		unsigned char                                              UnknownData_XNNJ[0x2];                                   // 0x070A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimeRange                                          ThrottledTickTimeRange;                                  // 0x070C(0x0008) Edit, DisableEditOnInstance, CPF_SkipSerialization
		bool                                                       bUseThrottledServerTick;                                 // 0x0714(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		unsigned char                                              UnknownData_M8PV[0x3];                                   // 0x0715(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimeRange                                          ThrottledServerTickTimeRange;                            // 0x0718(0x0008) Edit, DisableEditOnInstance, CPF_SkipSerialization
		bool                                                       bUseThrottledClientTick;                                 // 0x0720(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, CPF_SkipSerialization
		unsigned char                                              UnknownData_EK2X[0x3];                                   // 0x0721(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimeRange                                          ThrottledClientTickTimeRange;                            // 0x0724(0x0008) Edit, DisableEditOnInstance, CPF_SkipSerialization
		unsigned char                                              UnknownData_4JR8[0x4];                                   // 0x072C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AShooterCharacter*                                   StartedByCharacter;                                      // 0x0730(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<struct FCharacterAndControllerPair>                 PlayersOnMission;                                        // 0x0738(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic
		double                                                     MissionStartNetworkTime;                                 // 0x0748(0x0008) BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		double                                                     PostSetupMissionStartNetworkTime;                        // 0x0750(0x0008) BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		EMissionState                                              MissionState;                                            // 0x0758(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_59N7[0x7];                                   // 0x0759(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          CurrentMissionMusic;                                     // 0x0760(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		TArray<class AMissionSpline*>                              DinoPathingSplines;                                      // 0x0768(0x0010) Edit, BlueprintVisible, ZeroConstructor
		bool                                                       UseDynamicMissionStrings;                                // 0x0778(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MEGH[0x3];                                   // 0x0779(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PrepAreaRadius;                                          // 0x077C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PrepDuration;                                            // 0x0780(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPrepUseTargetingTeamOfStartingPlayer;                   // 0x0784(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		ETargetingTeamBehavior                                     PrepTargetingTeamBehavior;                               // 0x0785(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NM1I[0x2];                                   // 0x0786(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              PrepAreaEmitter;                                         // 0x0788(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bSetPrepAreaEmitterLifespanToPrepDuration;               // 0x0790(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4T62[0x7];                                   // 0x0791(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     PrepAreaPlayerInclusionParticles;                        // 0x0798(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPrepAreaAutoSendNotificationToIncludedPlayers;          // 0x07A0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VMZC[0x7];                                   // 0x07A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PrepAreaNotificationPrefix;                              // 0x07A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class USoundBase*                                          MissionSuccessSound;                                     // 0x07B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          MissionFailedSound;                                      // 0x07C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class FName>                                        LevelsToLoad;                                            // 0x07C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FName>                                        LevelsToLoadSinglePlayerAndListenServer;                 // 0x07D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FScriptMulticastDelegate                             MissionPhaseStartedEvent;                                // 0x07E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             MissionPhaseEndedEvent;                                  // 0x07F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             MissionDeactivatedEvent;                                 // 0x0808(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             MissionResetTimerEvent;                                  // 0x0818(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class UClass*                                              MissionCustomData;                                       // 0x0828(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class APrimalDinoCharacter*>                        MissionDinos;                                            // 0x0830(0x0010) ZeroConstructor, Transient, SaveGame, Protected, NativeAccessSpecifierPublic
		TArray<class APrimalStructure*>                            MissionStructures;                                       // 0x0840(0x0010) ZeroConstructor, Transient, SaveGame, Protected, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_47J4[0x50];                                  // 0x0850(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ADroppedItemMission*>                         MissionDroppedItems;                                     // 0x08A0(0x0010) ZeroConstructor, Transient, SaveGame, Protected, NativeAccessSpecifierPublic
		TArray<struct FTeleportedCharacter>                        TeleportedCharacters;                                    // 0x08B0(0x0010) ZeroConstructor, Transient, SaveGame, Protected, NativeAccessSpecifierPublic
		TArray<struct FPlayerItems>                                PlayerUsableItems;                                       // 0x08C0(0x0010) ZeroConstructor, Transient, SaveGame, Protected, NativeAccessSpecifierPublic
		class AActor*                                              MissionDispatcher;                                       // 0x08D0(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		TArray<class AShooterCharacter*>                           PlayersPendingAddToMission;                              // 0x08D8(0x0010) ZeroConstructor, Transient, Protected
		unsigned char                                              UnknownData_VBT0[0x8];                                   // 0x08E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              Gen2TeleportBuff;                                        // 0x08F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_ZY6Y[0x20];                                  // 0x08F8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MissionPhaseIndex;                                       // 0x0918(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MQET[0xA8];                                  // 0x091C(0x00A8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseGen2TeleportBuff : 1;                                // 0x09C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_90FP : 1;                                    // 0x09C4(0x0001) BIT_FIELD (PADDING)
		bool                                                       bHasRunSetup : 1;                                        // 0x09C4(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bSuspendedDueToStasis : 1;                               // 0x09C4(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bSaveMissionItemData : 1;                                // 0x09C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAbsoluteForcePreventLeavingMission : 1;                 // 0x09C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHasActivatedSuccessFailureWorldBuffs : 1;               // 0x09C4(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bUseBPGetMissionTargetingDesire : 1;                     // 0x09C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOverrideRandomWanderLocation : 1;                  // 0x09C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowTargetingOtherMissionDinos : 1;                    // 0x09C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyReverseTeleportOnMissionDeactivation : 1;           // 0x09C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsesFallbackSeeds : 1;                                  // 0x09C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_8CRN[0x2];                                   // 0x09C6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              MissionDepositInventoryClass;                            // 0x09C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     LastThrottledTickEventTime;                              // 0x09D0(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      CurrentThrottledTickEventInterval;                       // 0x09D8(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U1S9[0x4];                                   // 0x09DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastThrottledServerTickEventTime;                        // 0x09E0(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      CurrentThrottledServerTickEventInterval;                 // 0x09E8(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FH3Y[0x4];                                   // 0x09EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastThrottledClientTickEventTime;                        // 0x09F0(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      CurrentThrottledClientTickEventInterval;                 // 0x09F8(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JY3L[0x4];                                   // 0x09FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastAutoSwitchPhaseTime;                                 // 0x0A00(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      CurrentAutoSwitchPhaseInterval;                          // 0x0A08(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N5OZ[0xC];                                   // 0x0A0C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        SplineSpanwerTriggerKeys;                                // 0x0A18(0x0010) Edit, ZeroConstructor
		class FName                                                OnFailureKillAllTamesInTileStreamingVolumeCustomTag;     // 0x0A28(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class AMissionSpline*>                              SplineSpawners;                                          // 0x0A30(0x0010) Edit, ZeroConstructor
		unsigned char                                              UnknownData_XZD9[0x58];                                  // 0x0A40(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      ActivePreventsMissions;                                  // 0x0A98(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UObject*>                                     ExtraReferences;                                         // 0x0AA8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance

	public:
		void UpdateWorldIndicators(bool bForceNetUpdate);
		void UpdateRequirements(bool bForceNetUpdate);
		void UpdateMissionPrepArea(const struct FVector& PrepAreaWorldLocation, float MinUpdateFrequencyInSeconds);
		bool TryCompletePhase(bool bForceChange);
		bool TryChangeMissionPhase(const class FName& NewPhase, bool bForceChange);
		float STATIC_TotalMaxHealth_Players(TArray<class AShooterCharacter*> PlayerArray);
		float STATIC_TotalMaxHealth_Dinos(TArray<class APrimalDinoCharacter*> DinoArray);
		float STATIC_TotalMaxHealth_Characters(TArray<class APrimalCharacter*> CharacterArray);
		float STATIC_TotalCurrentHealth_Players(TArray<class AShooterCharacter*> PlayerArray);
		float STATIC_TotalCurrentHealth_Dinos(TArray<class APrimalDinoCharacter*> DinoArray);
		float STATIC_TotalCurrentHealth_Characters(TArray<class APrimalCharacter*> CharacterArray);
		bool TeleportCharacterForMission(class APrimalCharacter* Character, const struct FVector& NewLocation, bool bOverrideRotation, const struct FRotator& RotationOverride, bool bForceSetReturnLocation, bool bWasMountedDino, bool bSkipDinoFailChecks);
		void SuspendMission();
		void StopMissionMusic();
		void StaticOnReplicatedMissionDataUpdated(class APrimalBuff_MissionData* missionData);
		void StaticOnMissionDataInitialized(class APrimalBuff_MissionData* missionData);
		bool STATIC_StaticGetTaggedString(class UClass* MissionType, const class FName& Tag, class FString* OutString);
		class AShooterWeapon* SpawnMissionWeapon(class AShooterCharacter* ForPlayer, class UClass* WeaponItem, float ItemQuality, bool AutoEquip);
		class APrimalStructure* SpawnMissionStructure(class UClass* StructureType, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AShooterPlayerController* OwnerPlayerController, int32_t TargetingTeamOverride);
		class ADroppedItemMission* SpawnMissionItem(class UClass* AnItemClass, float ItemQuality, bool bForceNoBlueprint, int32_t quantityOverride, bool bForceBlueprint, class UClass* TheDroppedTemplateOverride, const struct FVector& WorldLocation, const struct FRotator& WorldRotation, class UStaticMesh* DroppedMeshOverride, const struct FVector& DroppedScaleOverride, class UMaterialInterface* DroppedMaterialOverride, float DroppedLifeSpanOverride);
		TArray<class APrimalDinoCharacter*> SpawnMissionDinoGroupExtended(int32_t NumDinos, float SpawnRadius, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, TArray<struct FDinoSetup> DinoSetups, ESpawnPattern Pattern, class AShooterPlayerController* OwnerPlayerController, float DebugDrawDuration, bool bApplyRotationToSpawnOffset, class UBehaviorTree* OverrideMissionBehaviorTree, bool bRandomizeDinos, bool bDontWander, bool bTargetingIgnoredByWildDinos, bool bTargetingIgnoreWildDinos, float AIRangeMultiplier, class UClass* ColorSet, bool bDoLosCheck, bool bDoOverlapCheck);
		TArray<class APrimalDinoCharacter*> SpawnMissionDinoGroup(int32_t NumDinos, float SpawnRadius, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, ESpawnPattern Pattern, class AShooterPlayerController* OwnerPlayerController, float DebugDrawDuration, bool bApplyRotationToSpawnOffset, class UBehaviorTree* OverrideMissionBehaviorTree, bool bDontWander, bool bTargetingIgnoredByWildDinos, bool bTargetingIgnoreWildDinos, float AIRangeMultiplier);
		class APrimalDinoCharacter* SpawnMissionDino(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, class AShooterPlayerController* OwnerPlayerController, float DebugDrawDuration, bool bApplyRotationToSpawnOffset, class UBehaviorTree* OverrideMissionBehaviorTree, bool bDontWander, bool bTargetingIgnoredByWildDinos, bool bTargetingIgnoreWildDinos, float AIRangeMultiplier, class UClass* ColorSet, bool bDoLosCheck, bool bDoOverlapCheck);
		class AMissionType* STATIC_SpawnMission(class UObject* WorldContextObject, class UClass* MissionType, class AShooterCharacter* forCharacter, const struct FVector& Location, class FString* FailureReason, class AActor* MissionDispatcherActor, bool bForceSpawn);
		void SpawnEmitterForPlayers(TArray<class AShooterCharacter*> Players, class UClass* EmitterType, const struct FTransform& EmitterTransform, float EmitterLifespan);
		void STATIC_SortMissionWorldIndicatorArrayByDistance(const struct FVector& WorldLocation, class APrimalCharacter* forCharacter, bool bReverseSort, TArray<struct FMissionWorldIndicator>* InOutWorldIndicators);
		void SetupMissionPrepArea(const struct FVector& PrepAreaWorldLocation, const struct FRotator& PrepAreaEmitterRotation, const struct FVector& PrepAreaEmitterScale);
		void SetSpecificSplineKeyTarget(class APrimalDinoCharacter* ForDino, int32_t index);
		void SetReverseTeleportReturnLocation(class APrimalCharacter* Character, const struct FVector& NewLocation, const struct FRotator& NewRotation);
		void SetPlayerPrepAreaState(class AShooterCharacter* PlayerPawn, bool bInsidePrepArea);
		void STATIC_SetPlayerParticleSystemIndicator(class AShooterCharacter* PlayerPawn, class UParticleSystem* IndicatorParticles, float RemoveAfterDuration, bool bForceNetUpdate);
		void SetPhaseStartedDelegate(const class FName& PhaseName, const class FScriptDelegate& Delegate);
		void SetPhaseEndedDelegate(const class FName& PhaseName, const class FScriptDelegate& Delegate);
		void SetPhaseCompleted(int32_t PhaseIndex, bool bCompleted);
		void SetMissionTimeRemaining(float SecondsRemaining);
		void SetMissionMusic(class USoundBase* LoopingMusicTrack);
		void SetMissionDeactivationTimer(float NumSeconds);
		bool SetMissionCompletedStatus(class AShooterCharacter* PlayerCharacter, bool bCompleted, bool bUseOverrideVersion, int32_t OverrideVersion, bool bUseOverrideCompleteUtcTime, double CompleteUtcTime);
		bool SetDinoAITargetActor(class APrimalDinoCharacter* Dino, class AActor* NewTarget, float AcceptableRadius);
		bool SetDinoAINavigationTargetActor(class APrimalDinoCharacter* Dino, class AActor* NewTarget);
		bool SetDinoAIForcedTargetActor(class APrimalDinoCharacter* Dino, class AActor* NewTarget);
		void ServerRequestToggleWeapon(class AShooterCharacter* Character);
		void SendNotificationToPlayer(class AShooterCharacter* Player, const class FName& StringTagName, const struct FLinearColor& MessageColor, class UTexture2D* MessageIcon, float DisplayTime, float DisplayScale, bool bIsSingleton, class USoundBase* SoundToPlay);
		void SendNotificationToAllPlayers(const class FName& StringTagName, const struct FLinearColor& MessageColor, class UTexture2D* MessageIcon, float DisplayTime, float DisplayScale, bool bIsSingleton, class USoundBase* SoundToPlay);
		void SendMissionAlertToPlayer(class AShooterCharacter* Player, EMissionAlertType AlertType, const class FString& AlertTitle, TArray<struct FMissionAlertEntry> AlertEntries, float DisplayTime, class USoundBase* SoundToPlay, bool FlyoutFromTop, bool bTreatStringsAsFnameTags);
		void SendMissionAlertToAllPlayers(EMissionAlertType AlertType, const class FString& AlertTitle, TArray<struct FMissionAlertEntry> AlertEntries, float DisplayTime, class USoundBase* SoundToPlay, bool FlyoutFromTop, bool bTreatStringsAsFnameTags);
		bool ReverseTeleportCharacter(class APrimalCharacter* Character);
		void ResetSplinePoints(class APrimalDinoCharacter* ForDino);
		void ResetMissionTimer();
		void RemovePlayerUsableItem(class AShooterCharacter* Character, const struct FItemNetID& ItemId);
		void RemovePlayerFromMission(class AShooterCharacter* PlayerCharacter, bool bCompletedSuccessfully, bool bRemoveSilently);
		int32_t RemoveItemsFromInventory_Balanced(bool* bIsBalanced, TArray<class APrimalCharacter*> FromCharacters, class UClass* ItemClass, int32_t TotalAmountToRemove, bool bMoveToMissionInventory, bool bOnlyRemoveIfEnough, bool bExactClassMatch, bool bIgnoreHotbar);
		int32_t RemoveItemsFromInventory(class UPrimalInventoryComponent* inventory, class UClass* ItemClass, int32_t AmountToRemove, bool bMoveToMissionInventory, bool bExactClassMatch, bool bIgnoreHotbar);
		void ReAddPlayerFromReconnect(class AShooterCharacter* Player);
		void ReactivateSuspendedMission();
		void STATIC_RacePlayerData_SetTargetCheckpoint(TArray<struct FRacePlayerData>* InOutPlayerData, int32_t PlayerIndex, int32_t NewTargetCheckpoint);
		void STATIC_RacePlayerData_SetCheckpointData(TArray<struct FRacePlayerData>* InOutPlayerData, int32_t PlayerIndex, int32_t CheckpointIndex, bool bCheckpointReached, float CheckpointTime);
		int32_t STATIC_RacePlayerData_NumCheckpoints(TArray<struct FRacePlayerData> PlayerData);
		void STATIC_RacePlayerData_Initialize(TArray<struct FRacePlayerData>* InOutPlayerData, TArray<class AShooterPlayerController*> Controllers, int32_t NumCheckpoints);
		int32_t STATIC_RacePlayerData_IndexOfController(TArray<struct FRacePlayerData> PlayerData, class AShooterPlayerController* Controller);
		int32_t STATIC_RacePlayerData_GetTargetCheckpoint(TArray<struct FRacePlayerData> PlayerData, int32_t PlayerIndex);
		int32_t STATIC_RacePlayerData_GetPlayerRanking(TArray<struct FRacePlayerData> PlayerData, const struct FVector& MissionStartLocation, TArray<class AMissionTrigger*> Checkpoints, int32_t PlayerIndex);
		void STATIC_RacePlayerData_GetCheckpointData(TArray<struct FRacePlayerData> PlayerData, int32_t PlayerIndex, int32_t CheckpointIndex, bool* bCheckpointReached, float* CheckpointTime);
		void STATIC_RacePlayerData_GetAllPlayerRankings(TArray<struct FRacePlayerData> PlayerData, TArray<int32_t>* OutRankings, const struct FVector& MissionStartLocation, TArray<class AMissionTrigger*> Checkpoints);
		bool STATIC_RacePlayerData_FixupControllers(TArray<struct FRacePlayerData>* InOutPlayerData);
		bool RaceClosestPlayerToCheckpoint(TArray<struct FRacePlayerData> PlayerData, const struct FVector& MissionStartLocation, TArray<class AMissionTrigger*> Checkpoints, int32_t A, int32_t B);
		void PostLoadWorldFixup();
		void PlayMissionMusic(class USoundBase* LoopingMusicToPlay);
		void OpenLeaderboardsForPlayer(class AShooterCharacter* Player, TArray<struct FLeaderboardRow> Rows);
		void OpenLeaderboardsForAllPlayers(TArray<struct FLeaderboardRow> Rows);
		void OnUpdateRequirements(const class FName& PhaseName, TArray<struct FMissionPhaseRequirement> NewRequirements);
		void OnThrottledTick(float DeltaTime);
		void OnThrottledServerTick(float DeltaTime);
		void OnThrottledClientTick(float DeltaTime);
		void OnRep_MissionState();
		void OnRep_MissionPhaseIndex();
		void OnPlayerSpawned(class AShooterCharacter* PlayerPawn);
		void OnMissionTriggerEndOverlap(class AMissionTrigger* Trigger, const class FName& TriggerKey, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnMissionTriggerBeginOverlap(class AMissionTrigger* Trigger, const class FName& TriggerKey, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnMissionPhaseStarted(const class FName& OldPhase, const class FName& NewPhase);
		void OnMissionPhaseEvent__DelegateSignature(class AMissionType* Mission, const class FName& OldPhaseName, const class FName& NewPhaseName);
		void OnMissionPhaseEnded(const class FName& OldPhase, const class FName& NewPhase);
		void OnMissionEvent__DelegateSignature(class AMissionType* Mission);
		void OnInventoryItemRemoved(class UPrimalInventoryComponent* inventory, class UPrimalItem* Item, int32_t AmountRemoved);
		void OnInventoryItemAdded(class UPrimalInventoryComponent* inventory, class UPrimalItem* Item, int32_t AmountAdded, bool bEquippedItem);
		int32_t STATIC_NumLivingPlayers(TArray<class AShooterCharacter*> PlayerArray);
		int32_t STATIC_NumLivingDinos(TArray<class APrimalDinoCharacter*> DinoArray);
		int32_t STATIC_NumLivingCharacters(TArray<class APrimalCharacter*> CharacterArray);
		class FString NonStaticGetPhaseRequirementDescription(const struct FMissionPhaseRequirement& Req);
		void MultiResetMissionTimer(double NewMissionStartNetworkTime);
		void MultiMissionStateChange(EMissionState NewState);
		void MultiMissionPhaseStarted(const class FName& OldPhaseName, const class FName& NewPhaseName);
		void MultiMissionPhaseEnded(const class FName& OldPhaseName, const class FName& NewPhaseName);
		void MissionPhaseHandler__DelegateSignature(const class FName& OldPhaseName, const class FName& NewPhaseName);
		int32_t MissionFindPathAsync(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class AActor* PathfindingContext, class UClass* FilterClass);
		void MissionAI_SetReversPathForDino(class APrimalDinoCharacter* ForDino, bool ShouldReverseAtEnd);
		void MissionAI_SetForcePathSplineForDino(class APrimalDinoCharacter* ForDino, class USplineComponent* Path);
		bool MissionAI_IsAtPathDestination(class APrimalDinoCharacter* ForDino, float MaxDistance, const struct FVector& TargetOffset, ECollisionChannel TraceChannel, float DebugDrawDuration);
		class AActor* MissionAI_GetTarget(class APrimalDinoCharacter* ForDino);
		void STATIC_MissionAI_GetMissionFromController(class AActor* ControllerActor, EBoolExecResult* OutResult, class AMissionType** Mission, class APrimalDinoCharacter** DinoPawn, class APrimalDinoAIController** DinoController);
		bool MissionAI_FindPathToTarget(class APrimalDinoCharacter* ForDino, struct FVector* NextTargetLocation);
		struct FMissionAlertEntry STATIC_ItemToAlertEntry(class UPrimalItem* Item);
		bool IsPlayerOnMission(class AShooterCharacter* PlayerCharacter);
		bool STATIC_IsPlayerEligibleForMission(class UClass* MissionType, class APlayerController* Controller, class FString* Reason);
		bool IsPhaseNameValid(const class FName& Name);
		bool IsPhaseComplete(const class FName& PhaseName);
		bool IsMissionComplete(class AShooterCharacter* forCharacter, class AShooterPlayerController* ForController);
		bool STATIC_IsMetaDataMissionType(class UObject* WorldContextObject, class UClass* MissionType);
		bool STATIC_IsFriendlyWithAnyTargetingTeam(class APrimalCharacter* Character, TArray<int32_t> TargetingTeams);
		bool STATIC_IsFriendlyWithAllTargetingTeams(class APrimalCharacter* Character, TArray<int32_t> TargetingTeams);
		bool IsActive();
		bool STATIC_HasPlayerCompletedMissionByTag(const class FName& MissionTagName, class AShooterCharacter* Character, int32_t* VersionCompleted, double* UtcTimeCompleted);
		bool STATIC_HasPlayerCompletedMission(class UClass* MissionType, class AShooterCharacter* Character, int32_t* VersionCompleted, double* UtcTimeCompleted);
		void STATIC_GivePlayerXP(class AShooterCharacter* Player, float XPAmount);
		TArray<class UPrimalItem*> STATIC_GivePlayerLoot(class AShooterCharacter* Player, TArray<struct FLootTableEntry> LootTable);
		void GetTargetingTeamsOfAllPlayersOnMission(TArray<int32_t>* OutTargetingTeams);
		bool GetTaggedString(const class FName& Tag, class FString* OutString);
		bool GetReverseTeleportReturnLocation(class APrimalCharacter* Character, struct FVector* ReverseTeleportLocation, struct FRotator* ReverseTeleportRotation);
		float GetRemainingTime();
		class FName STATIC_GetRealMissionTagFromMetaData(class UObject* WorldContextObject, class UClass* MissionType);
		void GetPlayerUsableItems(class AShooterCharacter* Character, TArray<struct FItemNetID>* OutItemIDs);
		void GetPhaseRequirements(const class FName& PhaseName, TArray<struct FMissionPhaseRequirement>* Requirements, class AShooterCharacter* ForPlayer);
		float STATIC_GetPhaseRequirementProgress(const struct FMissionPhaseRequirement& Req);
		class FString STATIC_GetPhaseRequirementDescription(class UClass* ForMission, const struct FMissionPhaseRequirement& Req);
		class FString GetPhaseDisplayText();
		void GetPerPlayerWorldIndicators(class AShooterPlayerController* Controller, class AShooterCharacter* Character, TArray<struct FMissionWorldIndicator>* WorldIndicators);
		void GetNearbyStructures(class UObject* WorldContextObject, TArray<class APrimalStructure*>* OutStructures, class UClass* StructureType, bool bExactTypeMatch, const struct FVector& Location, float Radius);
		void STATIC_GetNearbyPlayersEligibleForMission(class UObject* WorldContextObject, TArray<class AShooterCharacter*>* OutCharacters, class UClass* MissionType, const struct FVector& Location, float Radius, bool bSortByDistanceToLocation, bool bRespectMissionMaxPlayerCount, int32_t InTargetingTeam, ETargetingTeamBehavior TargetingTeamBehavior);
		void STATIC_GetNearbyPlayersAndTamedDinos(class UObject* WorldContextObject, TArray<class APrimalCharacter*>* OutCharacters, const struct FVector& Location, float Radius, int32_t OnlyFriendlyWithTargetingTeam);
		void STATIC_GetNearbyPlayers(class UObject* WorldContextObject, TArray<class AShooterCharacter*>* OutCharacters, const struct FVector& Location, float Radius, int32_t OnlyFriendlyWithTargetingTeam);
		void STATIC_GetNearbyMissionDispatchers(class UObject* WorldContextObject, class UClass* ForMissionType, class AShooterCharacter* ForPlayer, const struct FVector& SearchOrigin, TArray<class AMissionDispatcher*>* OutDispatchers, float Radius, bool bSortByDistance, bool bRequireMissionInDisaptcher);
		void STATIC_GetNearbyDinos(class UObject* WorldContextObject, TArray<class APrimalDinoCharacter*>* OutCharacters, const struct FVector& Location, float Radius, bool bIncludeTamed, bool bIncludeWild, int32_t OnlyFriendlyWithTargetingTeam);
		void STATIC_GetNearbyCharacters(class UObject* WorldContextObject, TArray<class APrimalCharacter*>* OutCharacters, const struct FVector& Location, float Radius);
		struct FVector STATIC_GetMissionWorldIndicatorWorldLocation(const struct FMissionWorldIndicator& WorldIndicator, class APrimalCharacter* forCharacter);
		class UTexture2D* STATIC_GetMissionWorldIndicatorIcon(const struct FMissionWorldIndicator& WorldIndicator);
		class FString STATIC_GetMissionWorldIndicatorDescription(class UClass* FromMissionType, const struct FMissionWorldIndicator& WorldIndicator);
		class FName STATIC_GetMissionTagForMission(class UClass* MissionType);
		class FName GetMissionTag();
		bool GetMissionLeaderboardRows(TArray<struct FLeaderboardRow>* OutRows);
		float STATIC_GetMissionDurationInSeconds(class UClass* MissionType);
		class FString STATIC_GetMissionDurationFromTag(const class FName& MissionTag, class AShooterCharacter* Character);
		class FString GetMissionDisplayName(class APlayerController* ShootCont);
		class APrimalBuff_MissionData* STATIC_GetMissionDataForCharacter(class AShooterCharacter* Character, bool bCreateIfMissing);
		class FName GetMissionClassName();
		class APrimalBuff* GetMissionBuff(class AShooterCharacter* Character);
		int32_t GetIntFromMissionType(const class FName& Tag, class AShooterCharacter* PlayerPawn);
		struct FVector STATIC_GetDispatcherPointLocation(class UObject* WorldContextObject, class UClass* ForMissionType);
		bool GetDifficultyString(class UWorld* World, class FString* diffString, struct FLinearColor* diffColor);
		void GetCurrentWorldIndicators(TArray<struct FMissionWorldIndicator>* WorldIndicators);
		int32_t GetCurrentSplineKeyTarget(class APrimalDinoCharacter* ForDino);
		class FName GetCurrentMissionPhaseName();
		int32_t GetCurrentMissionPhaseIndex();
		void GetAllPlayersOnMission(TArray<class AShooterCharacter*>* OutCharacters);
		void GetAllPlayerControllersOnMission(TArray<class AShooterPlayerController*>* OutControllers);
		void GetAllPlayerControllersInvolvedInMission(TArray<class AShooterPlayerController*>* OutPlayerControllers);
		void GetAllPlayerCharactersInvolvedInMission(TArray<class AShooterCharacter*>* OutPlayerCharacters);
		void STATIC_GetAllMissionTriggersWithKey(class UObject* WorldContextObject, const class FName& TriggerKey, TArray<class AMissionTrigger*>* OutTriggerActors, bool bSortByTriggerOrder, bool bReverseSort);
		TArray<class FName> GetAllMissionTriggerKeys();
		void STATIC_GetAllMissionSplinesWithKey(class UObject* WorldContextObject, const class FName& TriggerKey, TArray<class AMissionSpline*>* OutSplineActors, bool bSortByTriggerOrder, bool bReverseSort);
		void STATIC_GetAllMissionServerSidePointsWithKey(class UObject* WorldContextObject, const class FName& TriggerKey, TArray<class AMissionServerSidePoint*>* OutServerSidePointActors, bool bSortByTriggerOrder, bool bReverseSort, bool bExcludeMissionBounds);
		void GeneratePhaseRequirements(const class FName& PhaseName, TArray<struct FMissionPhaseRequirement>* Requirements);
		void GeneratePerPlayerPhaseRequirements(class AShooterPlayerController* Controller, class AShooterCharacter* Character, const class FName& PhaseName, TArray<struct FMissionPhaseRequirement>* Requirements);
		void STATIC_FindMissionsMatchingTag(class UObject* WorldContextObject, const class FName& MissionTag, TArray<class UClass*>* Missions);
		class AMissionSpline* STATIC_FindClosestSplineActorWithTriggerKey(class UObject* WorldContextObject, const struct FVector& WorldLocation, const class FName& TriggerKey);
		class AMissionSpline* STATIC_FindClosestSplineActor(const struct FVector& WorldLocation, TArray<class AMissionSpline*> Splines);
		class USplineComponent* FindClosestPathingSpline(const struct FVector& WorldLocation);
		int32_t FinalizeMissionPrep(bool bForceAdd);
		void DeactivateMission();
		int32_t CountMissionLeaderboardRows();
		int32_t CountInventoryItemsFromAllPlayersInMission(class UClass* ItemType, bool bRequireExactClassMatch);
		int32_t STATIC_CountInventoryItems(class APrimalCharacter* Character, class UClass* ItemType, bool bRequireExactClassMatch);
		bool ClearReverseTeleportReturnLocation(class APrimalCharacter* Character);
		bool ClearDinoAINavigationTargetActor(class APrimalDinoCharacter* Dino);
		bool ClearDinoAIForcedTargetActor(class APrimalDinoCharacter* Dino);
		void CleanupInvalidPlayers(bool RemoveIfInvalid);
		bool CanStartPhase(const class FName& PhaseName);
		bool STATIC_CanStartMission(class UClass* MissionType, class APlayerController* Controller, class FString* ClientFailureReason, class AActor** OutMissionDispatcher);
		float STATIC_CalcXPRatio(ELevelExperienceRampType RampType, int32_t Level, float Ratio);
		float CalculateMissionExperienceForPlayer(class AShooterCharacter* Player);
		bool BPTryCompletePhase(const class FName& PhaseName);
		bool BPStaticIsPlayerEligibleForMission(class APlayerController* Controller, class AShooterCharacter* PlayerPawn, class APrimalBuff_MissionData* PlayerMissionData, class FString* OutReason);
		bool BPStaticCanStartMission(class APlayerController* Controller, class AShooterCharacter* PlayerPawn, class APrimalBuff_MissionData* PlayerMissionData, class FString* ClientFailureReason, class AActor** OutSelectedMissionDispatcher);
		int32_t BPPhaseNameToIndex(const class FName& Name, bool* bIndexIsValid);
		bool BPOverrideRandomWanderLocation(class APrimalDinoCharacter* Dino, const struct FVector& inVec, struct FVector* outVec);
		bool BPOverrideMissionTimerColor(class AShooterPlayerController* ShooterContr, const struct FLinearColor& DefaultColor, const struct FLinearColor& CurrentColor, struct FLinearColor* TimerOverrideColor);
		class FString BPOverrideMissionIndicatorString(class AShooterCharacter* forCharacter, const struct FMissionWorldIndicator& Indicator, const class FString& String);
		void BPOnReceivedMissionPathFindingResult(int32_t ID, class UNavigationPath* Path, unsigned char Result);
		void BPOnPlayerRemovedFromMission(class AShooterCharacter* Player, class AShooterPlayerController* Controller, bool bFromMissionCompleteEvent, bool bLastPhaseSuccess);
		void BPOnPlayerAddedToMission(class AShooterCharacter* Player, class AShooterPlayerController* Controller);
		void BPOnMissionTriggerEndOverlap(class AMissionTrigger* Trigger, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void BPOnMissionTriggerBeginOverlap(class AMissionTrigger* Trigger, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void BPOnMissionTimedOut();
		void BPOnMissionSuspended();
		void BPOnMissionStructureDestroyed(class APrimalStructure* Structure, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
		void BPOnMissionStructureDamage(class APrimalStructure* Structure, float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		void BPOnMissionServerSetup();
		void BPOnMissionPlayerRespawned(class AShooterCharacter* Player, class AShooterPlayerController* Controller);
		void BPOnMissionPlayerRemovedInventoryItem(class AShooterCharacter* Player, class UPrimalInventoryComponent* inventory, class UPrimalItem* Item, int32_t AmountRemoved);
		void BPOnMissionPlayerDied(class AShooterCharacter* Player, class AShooterPlayerController* Controller, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
		void BPOnMissionPlayerAddedInventoryItem(class AShooterCharacter* Player, class UPrimalInventoryComponent* inventory, class UPrimalItem* Item, int32_t AmountAdded, bool bEquippedItem);
		void BPOnMissionDroppedItemPickedUp(class ADroppedItemMission* DroppedItem, class APlayerController* ByPC, class UPrimalItem* InventoryItem);
		void BPOnMissionDinoDied(class APrimalDinoCharacter* Dino, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
		void BPOnMissionDinoDamage(class APrimalDinoCharacter* Dino, float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		void BPOnMissionDeactivated();
		void BPOnMissionComplete(class AShooterCharacter* ForPlayer, class AShooterPlayerController* ForController, bool bLastPhaseSuccess, float XPRewarded, TArray<class UPrimalItem*> ItemsRewarded);
		void BPOnMissionCheat(const class FName& CheatName, bool bSetValue, float Value);
		void BPOnMissionActivated();
		bool BPIsPhaseComplete(const class FName& PhaseName);
		class FString BPGetPhaseDisplayText(const class FName& PhaseName);
		class FString BPGetMissionTimerText(class AShooterPlayerController* ShootCont);
		float BPGetMissionTargetingDesire(class APrimalDinoCharacter* MissionDino, class AActor* forTarget, float ForTargetingDesireValue);
		class FString BPGetMissionDurationText(class AShooterPlayerController* ShootCont);
		void BPGetMetaTagsAsInts(TArray<int32_t>* OutTagIds);
		void BPGetExtraLocalMissionIndicators(class APlayerController* Controller, class AShooterCharacter* PlayerPawn, TArray<struct FMissionWorldIndicator> IndicatorsIn, TArray<struct FMissionWorldIndicator>* IndicatorsOut);
		void BPGenerateMissionRewards(const struct FCharacterAndControllerPair& Player, bool bCompletedSuccessfully, float* XPReward, TArray<class UPrimalItem*>* GeneratedItems);
		bool BPCanRideMissionDino(class AShooterCharacter* Character, class APrimalDinoCharacter* Dino);
		bool BPAllowTimeout();
		bool BPAllowPlayerToLeaveMission(class AShooterCharacter* PlayerPawn);
		bool AllowMissionCreation(class AShooterCharacter* forCharacter, const struct FVector& Location, class AActor* MissionDispatcherActor, class FString* FailureReason);
		void AddPlayerUsableItem(class AShooterCharacter* Character, class UPrimalItem* Item);
		bool AddPlayerToMission(class AShooterCharacter* PlayerCharacter, bool bForceAdd);
		int32_t AddPlayersInRadiusToMission(const struct FVector& WorldLocation, float Radius, int32_t MaxPlayersToAdd, bool bPrioritizeByDistanceToWorldLocation, int32_t InTargetingTeam, ETargetingTeamBehavior TargetingTeamBehavior, bool bForceAdd);
		bool AddMissionLeaderboardRow(class AShooterPlayerController* Controller, double NetworkTime, float FloatValue, int32_t IntValue, const class FName& NameValue, const class FString& StringValue);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.NewMissionModuleBase
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class UNewMissionModuleBase : public UObject
	{
	public:
		bool                                                       DebugLifetime : 1;                                       // 0x0028(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       IsSubModule : 1;                                         // 0x0028(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       RequiresUpateMissionPrepAreaByMission : 1;               // 0x0028(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       DeactivateMissionOnModuleLimitPassed : 1;                // 0x0028(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_6QVF[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ModuleTimeLimit;                                         // 0x002C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FStruct_MissionModule_Travel                        TravelStruct;                                            // 0x0030(0x0038) Edit, BlueprintVisible, DisableEditOnInstance
		TArray<class UClass*>                                      SubmodulesToRunAtStart;                                  // 0x0068(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      SubmodulesToRunOnComplete;                               // 0x0078(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		class AMissionType_ModularMissionBase*                     MyOuter;                                                 // 0x0088(0x0008) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		TArray<class AMissionServerSidePoint*>                     ModuleNavPoints;                                         // 0x0090(0x0010) Edit, BlueprintVisible, ZeroConstructor, EditConst
		bool                                                       ModuleEndedBefore : 1;                                   // 0x00A0(0x0001) BIT_FIELD Edit, BlueprintVisible, EditConst, NoDestructor
		bool                                                       CurrentlyDelayed : 1;                                    // 0x00A0(0x0001) BIT_FIELD Edit, BlueprintVisible, EditConst, NoDestructor
		unsigned char                                              UnknownData_6PE5[0x7];                                   // 0x00A1(0x0007) MISSED OFFSET (PADDING)

	public:
		void TriggerHandleMissionModuleBegin();
		int32_t SetOuter(class AMissionType_ModularMissionBase* NewOuter);
		void RunSubModulesOnComplete();
		void RunSubModulesAtStart();
		void OnOuterDestroyed();
		int32_t HandleMissionTriggerOverlapEnd(class AMissionTrigger* Trigger, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		int32_t HandleMissionTriggerOverlapBegin(class AMissionTrigger* Trigger, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		int32_t HandleMissionStructureDestroyed(class APrimalStructure* Structure, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
		int32_t HandleMissionStructureDamaged(class APrimalStructure* Structure, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
		int32_t HandleMissionProjectileExploded(class AShooterProjectile* Projectile);
		int32_t HandleMissionPlayerRemovedInventoryItem(class AShooterCharacter* Player, class UPrimalInventoryComponent* inventory, class UPrimalItem* Item, int32_t AmountRemoved);
		int32_t HandleMissionPlayerAddedInventoryItem(class AShooterCharacter* Player, class UPrimalInventoryComponent* inventory, class UPrimalItem* Item, int32_t AmountAdded, bool bEquippedItem);
		int32_t HandleMissionModuleEnd();
		int32_t HandleMissionModuleBegin();
		TArray<struct FMissionWorldIndicator> HandleMissionGetPerPlayerIndicators(class AShooterCharacter* Character);
		int32_t HandleMissionDroppedItemPickedUp(class ADroppedItemMission* DroppedItem, class APlayerController* PC, class UPrimalItem* Item);
		int32_t HandleMissionDinoDied(class APrimalDinoCharacter* Dino, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
		int32_t HandleMissionDinoDamaged(class APrimalDinoCharacter* Dino, float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		int32_t HandleLastMissionStructureDestroyed(class APrimalStructure* Structure, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
		int32_t HandleLastMissionProjectileExploded(class AShooterProjectile* Projectile);
		int32_t HandleLastMissionDinoDied(class APrimalDinoCharacter* Dino, float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
		class UWorld* GetWorld();
		class FString GetModuleRequirementsTitle();
		TArray<struct FMissionPhaseRequirement> GetModuleRequirementsMessage();
		float BPGetTargetingDesire(class APrimalDinoCharacter* MissionDino, class AActor* forTarget, float ForTargetingDesireValue);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionType_ModularMissionBase
	 * Size -> 0x0090 (FullSize[0x0B48] - InheritedSize[0x0AB8])
	 */
	class AMissionType_ModularMissionBase : public AMissionType
	{
	public:
		unsigned char                                              UnknownData_NSSE[0x8];                                   // 0x0AB8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      Modules;                                                 // 0x0AC0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		float                                                      DelayBeforeInitalModule;                                 // 0x0AD0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MissionTimeRemainingAfterEscapePhase;                    // 0x0AD4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class AShooterProjectile*>                          MissionProjectiles;                                      // 0x0AD8(0x0010) Edit, BlueprintVisible, ZeroConstructor, EditConst
		bool                                                       MissionCompleted : 1;                                    // 0x0AE8(0x0001) BIT_FIELD Edit, BlueprintVisible, EditConst, NoDestructor
		bool                                                       CurrentModuleCompleted : 1;                              // 0x0AE8(0x0001) BIT_FIELD Edit, BlueprintVisible, EditConst, NoDestructor
		unsigned char                                              UnknownData_O9A9[0x3];                                   // 0x0AE9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CurrModule;                                              // 0x0AEC(0x0004) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		class FName                                                CurrRequirementsTitle;                                   // 0x0AF0(0x0008) Edit, BlueprintVisible, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		class UNewMissionModuleBase*                               CurrentModule;                                           // 0x0AF8(0x0008) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		double                                                     CurrentModuleStartTime;                                  // 0x0B00(0x0008) Edit, BlueprintVisible, Net, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      CurrentModuleTimeLimit;                                  // 0x0B08(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    NumDeadMissionDinos;                                     // 0x0B0C(0x0004) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		int32_t                                                    NumDestroyedMissionStructures;                           // 0x0B10(0x0004) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VFI5[0x4];                                   // 0x0B14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      SpawnedForModuleActors;                                  // 0x0B18(0x0010) Edit, BlueprintVisible, ZeroConstructor, EditConst
		TArray<struct FMissionWorldIndicator>                      SpecialWorldIndicators;                                  // 0x0B28(0x0010) Edit, BlueprintVisible, ZeroConstructor, EditConst
		TArray<class UNewMissionModuleBase*>                       AdditionalModules;                                       // 0x0B38(0x0010) ZeroConstructor, Transient

	public:
		class AActor* SpawnActorForMissionModule(class UClass* ActorClass, const struct FTransform& ActorTransform, bool bSpawnEvenIfColliding);
		void SetupMissionModules();
		void RemoveSpecialWorldIndicator(const struct FMissionWorldIndicator& IndicatorToRemove);
		void RemoveAllSpecialWorldIndicators();
		void RegisterProjectile(class AShooterProjectile* theProjectile);
		void MultiMissionSpawnCosmetic(class USoundBase* SoundTemplate, class UParticleSystem* ParticleTemplate, const struct FTransform& TheTransform, float OverrideTimeDilation);
		void MultiFireProjectiles(class UClass* ProjectileClass, const struct FVector& Location, const struct FVector& Velocity, TArray<class AActor*> SubprojectileTargets, class AActor* FiringActor);
		void MultiDeactivateWarmerColderHUD();
		void MultiActivateWarmerColderHUD(const struct FHUDElement& Background, const struct FHUDElement& Icon, float MinAlpha, float MaxAlpha, float AlphaPower, const struct FLinearColor& RightColor, const struct FLinearColor& WrongColor, bool bClearLocationsFirst, TArray<struct FVector> Locations);
		void MissionSpawnCosmetic(class USoundBase* SoundTemplate, class UParticleSystem* ParticleTemplate, const struct FTransform& TheTransform, float OverrideTimeDilation);
		class AShooterProjectile* FireProjectiles(class UClass* ProjectileClass, const struct FVector& Location, const struct FVector& Velocity, TArray<class AActor*> SubprojectileTargets, class AActor* FiringActor);
		void ExecuteNextMissionModule();
		void DeactivateWarmerColderHUD();
		void CreateLeaderboardEntry(class AShooterPlayerController* ForPC);
		void BPOnMissionProjectileExpoloded(class AShooterProjectile* theProjectile);
		void AddSpecialWorldIndicator(const struct FMissionWorldIndicator& IndicatorToAdd);
		void ActivateWarmerColderHUD(const struct FHUDElement& Background, const struct FHUDElement& Icon, float MinAlpha, float MaxAlpha, float AlphaPower, const struct FLinearColor& RightColor, const struct FLinearColor& WrongColor, bool bClearLocationsFirst, TArray<struct FVector> Locations);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.NPCSpawnEntriesContainer
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UNPCSpawnEntriesContainer : public UObject
	{
	public:
		TArray<struct FNPCSpawnEntry>                              NPCSpawnEntries;                                         // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FNPCSpawnLimit>                              NPCSpawnLimits;                                          // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      MaxDesiredNumEnemiesMultiplier;                          // 0x0048(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7ID1[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.NPCZoneManager
	 * Size -> 0x0190 (FullSize[0x0600] - InheritedSize[0x0470])
	 */
	class ANPCZoneManager : public AInfo
	{
	public:
		TArray<class ANPCZoneVolume*>                              LinkedZoneVolumes;                                       // 0x0470(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate
		TArray<struct FLinkedZoneSpawnVolumeEntry>                 LinkedZoneSpawnVolumeEntries;                            // 0x0480(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate
		TArray<class AActor*>                                      DefaultZoneSpawnVolumeFloors;                            // 0x0490(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate
		TArray<class FName>                                        DefaultZoneSpawnVolumeFloorTags;                         // 0x04A0(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate
		class UClass*                                              NPCSpawnEntriesContainerObject;                          // 0x04B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bEnabled;                                                // 0x04B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bForceInEditor;                                          // 0x04B9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bNeverSpawnInWater;                                      // 0x04BA(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bOnlySpawnInWater;                                       // 0x04BB(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CAFF[0x4];                                   // 0x04BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        OnlyAllowSpawningOnActorTags;                            // 0x04C0(0x0010) Edit, ZeroConstructor
		bool                                                       bAllowExtentTest;                                        // 0x04D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bOnlyCheckMySublevelWater;                               // 0x04D1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3ZIW[0x2];                                   // 0x04D2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MinDesiredNumberOfNPC;                                   // 0x04D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    SP_MinDesiredNumberOfNPC;                                // 0x04D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EVYW[0x4];                                   // 0x04DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DesiredNumberOfNPCMultiplier;                            // 0x04E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TheSpawnPointMinimumFloorNormal;                         // 0x04E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TheNewNewEditorNumberOfNPCMultiplier;                    // 0x04E8(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		float                                                      KillOffOverweightNPCStasisTime;                          // 0x04EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_A91N[0x4];                                   // 0x04F0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TheMinimumPlayerDistanceFromSpawnPoint;                  // 0x04F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TheIncreaseNPCInterval;                                  // 0x04F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SP_TheIncreaseNPCInterval;                               // 0x04FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TheIncreaseNPCIntervalMax;                               // 0x0500(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TheDecreaseNPCInterval;                                  // 0x0504(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		float                                                      NPCAIRangeMultiplier;                                    // 0x0508(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NPCAIAggroNotifyNeighborsRangeMultiplier;                // 0x050C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bNPCDontWander;                                          // 0x0510(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bNPCWildIgnoreWild;                                      // 0x0511(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bNPCNoKillXP;                                            // 0x0512(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bNPCPreventSaving;                                       // 0x0513(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bForceUntameable;                                        // 0x0514(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUsesManualSpawning;                                     // 0x0515(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIgnoreVolumeEcompassingCheck;                           // 0x0516(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bSpawnAllNPCEntries;                                     // 0x0517(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bOnlyUseInSingleplayer;                                  // 0x0518(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bOnlyUseInDedicatedServer;                               // 0x0519(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UNVZ[0x2];                                   // 0x051A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NPCWanderRadiusMultiplier;                               // 0x051C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    MaxNumberSpawnZoneRandomPointChecks;                     // 0x0520(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    TheNPCFullIncreaseMaximumIterations;                     // 0x0524(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TheMinimumTamedDinoDistanceFromSpawnPoint;               // 0x0528(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TheMinimumStructureDistanceFromSpawnPoint;               // 0x052C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NPCLerpToMaxRandomBaseLevel;                             // 0x0530(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ManualSpawningNPCLerpToMaxRandomBaseLevel;               // 0x0534(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    MaximumNumberNearbyCoreStructures;                       // 0x0538(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    AbsoluteMaximumNumberNearbyCoreStructures;               // 0x053C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bAutoKillUseGlobalStasisArray;                           // 0x0540(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1ANS[0x7];                                   // 0x0541(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ANPCZoneVolume*                                      HardLimitWildDinosToVolume;                              // 0x0548(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bTraceForSpawnAgainstWater;                              // 0x0550(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bNPCForcePreventExitingWater;                            // 0x0551(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseSpawnPointOverrideRotation;                          // 0x0552(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YKZV[0x5];                                   // 0x0553(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AVolume*                                             NPCLimitTargetsToVolume;                                 // 0x0558(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NPCLevelMultiplier;                                      // 0x0560(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ForceOverrideNPCBaseLevel;                               // 0x0564(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_T2RL[0x2C];                                  // 0x0568(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NumNPCSpawned;                                           // 0x0594(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    NumSpawnFailures;                                        // 0x0598(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_36JP[0x4];                                   // 0x059C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastIncreaseNPCTime;                                     // 0x05A0(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		double                                                     LastDecreaseNPCTime;                                     // 0x05A8(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZT9W[0x8];                                   // 0x05B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CloseStructureDistanceFromSpawnPoint;                    // 0x05B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8O8N[0x4];                                   // 0x05BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      SpawnPointOverrides;                                     // 0x05C0(0x0010) Edit, ZeroConstructor
		class FName                                                NonDedicatedFreezeWildDinoPhysicsIfLevelUnloaded;        // 0x05D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class FName>                                        NonDedicatedFreezeWildDinoPhysicsIfLevelsUnloaded;       // 0x05D8(0x0010) Edit, ZeroConstructor
		float                                                      MinimumManualSpawnInterval;                              // 0x05E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_C6DZ[0x4];                                   // 0x05EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastManuallySpawnedTime;                                 // 0x05F0(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		bool                                                       bIgnoreNPCRandomClassReplacements;                       // 0x05F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bAllowSpawnPointOverridesNonDedicatedLevelUnloadedFreezing; // 0x05F9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3XMP[0x2];                                   // 0x05FA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TheNPCDynamicIncreaseMaximumIterations;                  // 0x05FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		TArray<class APrimalDinoCharacter*> STATIC_StaticSpawnNPCs(class UObject* WorldContext, class ANPCZoneManager* AtZoneManager, class UClass* TheNPCSpawnEntries, const struct FVector& AtSpawnPoint, const struct FRotator& AtRotation, int32_t UseSpawnVolumeIndex);
		void CheckIncreaseNPC();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.NPCZoneSpawnVolume
	 * Size -> 0x0000 (FullSize[0x04A8] - InheritedSize[0x04A8])
	 */
	class ANPCZoneSpawnVolume : public AVolume
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.NPCZoneVolume
	 * Size -> 0x0058 (FullSize[0x0500] - InheritedSize[0x04A8])
	 */
	class ANPCZoneVolume : public AVolume
	{
	public:
		bool                                                       bOnlyCountWaterDinos : 1;                                // 0x04A8(0x0001) BIT_FIELD Edit, DisableEditOnTemplate, NoDestructor
		bool                                                       bOnlyCountLandDinos : 1;                                 // 0x04A8(0x0001) BIT_FIELD Edit, DisableEditOnTemplate, NoDestructor
		bool                                                       bDoHigherQualityLedgeDetection : 1;                      // 0x04A8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bCountTamedDinos : 1;                                    // 0x04A8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_CVL7[0x7];                                   // 0x04A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      OnlyCountDinoClasses;                                    // 0x04B0(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate
		TArray<class UClass*>                                      IgnoreDinoClasses;                                       // 0x04C0(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate
		TArray<struct FHibernationCountInfo>                       HibernatedEntities;                                      // 0x04D0(0x0010) ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic
		float                                                      HibernatedCountWeights;                                  // 0x04E0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_F37F[0x1C];                                  // 0x04E4(0x001C) MISSED OFFSET (PADDING)

	public:
		void OnEndOverlap(class AActor* Actor);
		void OnBeginOverlap(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ObjectMap
	 * Size -> 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
	 */
	class UObjectMap : public UObject
	{
	public:
		TArray<struct FObjectListItem>                             ObjectsList;                                             // 0x0028(0x0010) ZeroConstructor, Transient
		unsigned char                                              UnknownData_JVWV[0x50];                                  // 0x0038(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SizeX;                                                   // 0x0088(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierPublic
		int32_t                                                    SizeY;                                                   // 0x008C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierPublic
		int32_t                                                    CellSize;                                                // 0x0090(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EJVK[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (PADDING)

	public:
		void Init(int32_t InSizeX, int32_t InSizeY, int32_t InCellSize);
		int32_t GetSizeY();
		int32_t GetSizeX();
		int32_t GetSize();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ObjectSerializer
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UObjectSerializer : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.OceanDinoManager
	 * Size -> 0x01F8 (FullSize[0x0668] - InheritedSize[0x0470])
	 */
	class AOceanDinoManager : public AActor
	{
	public:
		float                                                      ViewerNumDinosGatherRadius;                              // 0x0470(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ViewerDinoSpawnRadiusMin;                                // 0x0474(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ViewerDinoSpawnRadiusMax;                                // 0x0478(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ViewerDinoSpawnViewOffsetMin;                            // 0x047C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ViewerDinoSpawnViewOffsetMax;                            // 0x0480(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BSB8[0x4];                                   // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FOceanDinoDepthEntry>                        OceanDinoDepthEntries;                                   // 0x0488(0x0010) Edit, ZeroConstructor
		int32_t                                                    MaxValidSpawnPointAttempts;                              // 0x0498(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    MaxNumViewersToUpdatePerFrame;                           // 0x049C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ViewerNumDinosTargetMinPlayers;                          // 0x04A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ViewerNumDinosTargetMaxPlayers;                          // 0x04A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RaftMinViewerSpeed;                                      // 0x04A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3H4P[0x54];                                  // 0x04AC(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NumDinosMinPlayers;                                      // 0x0500(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NumDinosMaxPlayers;                                      // 0x0504(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              KilledOceanDinoAreaDeathBuff;                            // 0x0508(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class FName>                                        OceanVolumeTags;                                         // 0x0510(0x0010) Edit, ZeroConstructor
		unsigned char                                              UnknownData_1XVJ[0x140];                                 // 0x0520(0x0140) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinViewerDeltaDistanceToRefreshOceanSpawns;              // 0x0660(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VTJY[0x4];                                   // 0x0664(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PaintingTexture
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UPaintingTexture : public UObject
	{
	public:
		uint32_t                                                   Revision;                                                // 0x0028(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0KNV[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          Texture;                                                 // 0x0030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_GN4T[0x28];                                  // 0x0038(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PaintingCache
	 * Size -> 0x00C0 (FullSize[0x00E8] - InheritedSize[0x0028])
	 */
	class UPaintingCache : public UObject
	{
	public:
		unsigned char                                              UnknownData_FBV5[0x90];                                  // 0x0028(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UPaintingTexture*>                            PaintingTextures;                                        // 0x00B8(0x0010) ZeroConstructor, Transient, Protected
		unsigned char                                              UnknownData_UHPJ[0x20];                                  // 0x00C8(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PaintingStreamingComponent
	 * Size -> 0x0070 (FullSize[0x0148] - InheritedSize[0x00D8])
	 */
	class UPaintingStreamingComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_FOW0[0x70];                                  // 0x00D8(0x0070) MISSED OFFSET (PADDING)

	public:
		void ServerSendNextChunk(class UStructurePaintingComponent* PaintingComponent);
		void ServerRequestPaintingStream(class UStructurePaintingComponent* PaintingComponent);
		void ServerCancelPaintingStream(class UStructurePaintingComponent* PaintingComponent);
		void ClientRecieveChunk(class UStructurePaintingComponent* PaintingComponent, TArray<unsigned char> Bytes);
		void ClientEndStreamingJob(class UStructurePaintingComponent* PaintingComponent);
		void ClientCancelSteamingJob(class UStructurePaintingComponent* PaintingComponent);
		void ClientBeginStreamingJob(class UStructurePaintingComponent* PaintingComponent, int32_t Revision);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PointOfInterestActor
	 * Size -> 0x0440 (FullSize[0x08B0] - InheritedSize[0x0470])
	 */
	class APointOfInterestActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_SJ5N[0x10];                                  // 0x0470(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     PointRootComp;                                           // 0x0480(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class USphereComponent*                                    PointUseSphereComp;                                      // 0x0488(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UTextRenderComponent*                                PointTextComp;                                           // 0x0490(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UTextRenderComponent*                                PointTitleTextComp;                                      // 0x0498(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		struct FPointOfInterestData                                MyPointOfInterestData;                                   // 0x04A0(0x0140) Edit, Protected
		struct FPointOfInterestCompanionBehavior                   MyPointOfInterestCompanionBehavior;                      // 0x05E0(0x02B0) Edit, Protected
		struct FVector                                             UseSphereLocOffset;                                      // 0x0890(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      UseSphereRadius;                                         // 0x089C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      TitleTextZOffset;                                        // 0x08A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		bool                                                       bHasBeenViewed : 1;                                      // 0x08A4(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected
		bool                                                       bSyncWithPointManager : 1;                               // 0x08A4(0x0001) BIT_FIELD Edit, DisableEditOnTemplate, NoDestructor, Protected
		bool                                                       bPreventViewMultiUseEntry : 1;                           // 0x08A4(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		bool                                                       bDebugPointActor_Persistent : 1;                         // 0x08A4(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		bool                                                       bDebugPointActor_Single : 1;                             // 0x08A4(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		bool                                                       bDebugPointActor_ClearDebugLines : 1;                    // 0x08A4(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		unsigned char                                              UnknownData_9MJJ[0x3];                                   // 0x08A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APointOfInterestManagerList*                         MyPointManager;                                          // 0x08A8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected

	public:
		void RefreshPointData();
		bool IsPointOfInterestValid();
		struct FPointOfInterestData GetMyPointOfInterestData();
		struct FPointOfInterestCompanionBehavior GetMyPointOfInterestCompanionBehavior();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalEmitterSpawnable
	 * Size -> 0x0060 (FullSize[0x0520] - InheritedSize[0x04C0])
	 */
	class APrimalEmitterSpawnable : public AEmitter
	{
	public:
		class USceneComponent*                                     RootTransformComp;                                       // 0x04C0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UAudioComponent*                                     SoundToPlay;                                             // 0x04C8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UClass*                                              CameraShake;                                             // 0x04D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CameraShakeInnerRadius;                                  // 0x04D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CameraShakeOuterRadius;                                  // 0x04DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CameraShakeFalloff;                                      // 0x04E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CameraShakeScaleMultiplier;                              // 0x04E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FDecalData                                          DecalToSpawn;                                            // 0x04E8(0x0020) Edit, DisableEditOnInstance
		bool                                                       bCameraShakeOrientTowardsEpicenter : 1;                  // 0x0508(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHighPrioritySound : 1;                                  // 0x0508(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bShallowEmitterSpawnable : 1;                            // 0x0508(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bShallowEmitterDontSpawnOutOfView : 1;                   // 0x0508(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowLoopingEmitter : 1;                                // 0x0508(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceNoRotation : 1;                                    // 0x0508(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTickSoundInRangePlayback : 1;                           // 0x0508(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_NX5E[0x3];                                   // 0x0509(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ShallowEmitterDontSpawnOutOfViewCheckRadius;             // 0x050C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ShallowEmitterOverrideSecondsBeforeInactive;             // 0x0510(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ActivateSoundFadeInDuration;                             // 0x0514(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DeactivateSoundFadeOutDuration;                          // 0x0518(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ShallowEmitterSpawnableMaxDistance;                      // 0x051C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalBuff
	 * Size -> 0x0460 (FullSize[0x0980] - InheritedSize[0x0520])
	 */
	class APrimalBuff : public APrimalEmitterSpawnable
	{
	public:
		float                                                      DeactivationLifespan;                                    // 0x0520(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                InstigatorAttachmentSocket;                              // 0x0524(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                InstigatorAttachmentSocket_PlayerOverride;               // 0x052C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bSlowInstigatorFalling : 1;                              // 0x0534(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDeactivateOnJump : 1;                                   // 0x0534(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventJump : 1;                                        // 0x0534(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventDinoRiding : 1;                                  // 0x0534(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventDinoDismount : 1;                                // 0x0534(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_A6RK[0x3];                                   // 0x0535(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseBPNotifyPreventDismounting : 1;                      // 0x0538(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_2NZC[0x3];                                   // 0x0539(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPreventCarryOrPassenger : 1;                            // 0x053C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDeactivated : 1;                                        // 0x053C(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       bUsesInstigator : 1;                                     // 0x053C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bFollowTarget : 1;                                       // 0x053C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAddCharacterValues : 1;                                 // 0x053C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyAddCharacterValuesUnderwater : 1;                   // 0x053C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisableIfCharacterUnderwater : 1;                       // 0x053C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseInstigatorItem : 1;                                  // 0x053C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDestroyOnTargetStasis : 1;                              // 0x053D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAoETraceToTargets : 1;                                  // 0x053D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAOEOnlyApplyOtherBuffToWildDinos : 1;                   // 0x053D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAoEIgnoreDinosTargetingInstigator : 1;                  // 0x053D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAoEOnlyOnDinosTargetingInstigator : 1;                  // 0x053D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBuffForceNoTick : 1;                                    // 0x053D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBuffForceNoTickDedicated : 1;                           // 0x053D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCustomDepthStencilIgnoreHealth : 1;                     // 0x053D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCompleteCustomDepthStencilOverride : 1;                 // 0x053E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseActivateSoundFadeInDuration : 1;                     // 0x053E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDinoIgnoreBuffPostprocessEffectWhenRidden : 1;          // 0x053E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPlayerIgnoreBuffPostprocessEffectWhenRidingDino : 1;    // 0x053E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRemoteForcedFlee : 1;                                   // 0x053E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_T5L9[0x1];                                   // 0x053F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RemoteForcedFleeDuration;                                // 0x0540(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             AoETraceToTargetsStartOffset;                            // 0x0544(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class AActor>                               Target;                                                  // 0x0550(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class UPrimalItem>                          InstigatorItem;                                          // 0x0558(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SlowInstigatorFallingAddZVelocity;                       // 0x0560(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SlowInstigatorFallingDampenZVelocity;                    // 0x0564(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DeactivateAfterTime;                                     // 0x0568(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WeaponRecoilMultiplier;                                  // 0x056C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ReceiveDamageMultiplier;                                 // 0x0570(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MeleeDamageMultiplier;                                   // 0x0574(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DepleteInstigatorItemDurabilityPerSecond;                // 0x0578(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ValuesToAddPerSecond[0xC];                               // 0x057C(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KUEV[0x4];                                   // 0x05AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FStatusValueModifierDescription                     BuffDescription;                                         // 0x05B0(0x0050) Edit, BlueprintVisible, DisableEditOnInstance
		float                                                      CharacterAdd_DefaultHyperthermicInsulation;              // 0x0600(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CharacterAdd_DefaultHypothermicInsulation;               // 0x0604(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CharacterMultiplier_ExtraWaterConsumptionMultiplier;     // 0x0608(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CharacterMultiplier_ExtraFoodConsumptionMultiplier;      // 0x060C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CharacterMultiplier_SubmergedOxygenDecreaseSpeed;        // 0x0610(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ViewMinExposureMultiplier;                               // 0x0614(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ViewMaxExposureMultiplier;                               // 0x0618(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      XPtoAdd;                                                 // 0x061C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      XPtoAddRate;                                             // 0x0620(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    DinoColorizationPriority;                                // 0x0624(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DinoColorizationInterpSpeed;                             // 0x0628(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPDinoRefreshColorization : 1;                       // 0x062C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideInventoryWeightMultipliers : 1;                 // 0x062C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDeactivateAfterAddingXP : 1;                            // 0x062C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_4E83[0x3];                                   // 0x062D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FItemMultiplier>                             OverrideInventoryItemClassWeightMultipliers;             // 0x0630(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_0M3T[0x60];                                  // 0x0640(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bOnlyActivateSoundForInstigator : 1;                     // 0x06A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAOEBuffCarnosOnly : 1;                                  // 0x06A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCausesCryoSickness : 1;                                 // 0x06A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bModifyMaxSpeed : 1;                                     // 0x06A0(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bDisplayHUDProgressBar : 1;                              // 0x06A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceUsePreventTargeting : 1;                           // 0x06A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceUsePreventTargetingTurret : 1;                     // 0x06A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPOverrideWeaponBob : 1;                                // 0x06A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPModifyPlayerBoneModifiers : 1;                     // 0x06A1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDediServerUseBPModifyPlayerBoneModifiers : 1;           // 0x06A1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPNonDedicatedPlayerPostAnimUpdate : 1;              // 0x06A1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPIsCharacterHardAttached : 1;                       // 0x06A1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDoCharacterDetachment : 1;                              // 0x06A1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDoCharacterDetachmentIncludeRiding : 1;                 // 0x06A1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDoCharacterDetachmentIncludeCarrying : 1;               // 0x06A1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPInitializedCharacterAnimScriptInstance : 1;        // 0x06A1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanBeCarried : 1;                                  // 0x06A2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsePostAdjustDamage : 1;                                // 0x06A2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventFallDamage : 1;                                  // 0x06A2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnInstigatorCapsuleComponentHit : 1;               // 0x06A2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_3URV : 1;                                    // 0x06A2(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUseBPOverrideCameraViewTarget : 1;                      // 0x06A2(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPForceCameraStyle : 1;                              // 0x06A2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPIsValidUnstasisActor : 1;                          // 0x06A2(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPOverrideIsNetRelevantFor : 1;                      // 0x06A3(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bPreventClearRiderOnDinoImmobilize : 1;                  // 0x06A3(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bAlwaysShowBuffDescription : 1;                          // 0x06A3(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		float                                                      SubmergedMaxSpeedModifier;                               // 0x06A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      UnsubmergedMaxSpeedModifier;                             // 0x06A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SubmergedMaxAccelerationModifier;                        // 0x06AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      UnsubmergedMaxAccelerationModifier;                      // 0x06B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SubmergedRotationRateModifier;                           // 0x06B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      UnsubmergedRotationRateModifier;                         // 0x06B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FrictionModifier;                                        // 0x06BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FDamagePrimalCharacterStatusValueModifier>   CharacterStatusValueModifiers;                           // 0x06C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		double                                                     BuffStartTime;                                           // 0x06D0(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GIJL[0x8];                                   // 0x06D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bForcedOnSpectatorPlayerController;                      // 0x06E0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UUDJ[0x7];                                   // 0x06E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  BuffPostProcessEffect;                                   // 0x06E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      PreventActorClassesTargeting;                            // 0x06F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<float>                                              PreventActorClassesTargetingRanges;                      // 0x0700(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class AMissionType*                                        RelatedMission;                                          // 0x0710(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bHasRelatedMission;                                      // 0x0718(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5ZDT[0x3];                                   // 0x0719(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bAOEApplyOtherBuffOnPlayers : 1;                         // 0x071C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAOEApplyOtherBuffOnDinos : 1;                           // 0x071C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAOEApplyOtherBuffIgnoreSameTeam : 1;                    // 0x071C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAOEApplyOtherBuffRequireSameTeam : 1;                   // 0x071C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBuffDrawFloatingHUD : 1;                                // 0x071C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAddResetsBuffTime : 1;                                  // 0x071C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAoEBuffAllowIfAlreadyBuffed : 1;                        // 0x071C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNetResetBuffStart : 1;                                  // 0x071C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bImmobilizeTarget : 1;                                   // 0x071D(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bForcePlayerProne : 1;                                   // 0x071D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideBuffFromHUD : 1;                                    // 0x071D(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bHideTimerFromHUD : 1;                                   // 0x071D(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bBPAddMultiUseEntries : 1;                               // 0x071D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsBuffPersistent : 1;                                   // 0x071D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPUseBumpedByPawn : 1;                                  // 0x071D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPUseBumpedPawn : 1;                                    // 0x071D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowBuffWhenInstigatorDead : 1;                        // 0x071E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNotifyDamage : 1;                                       // 0x071E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowBuffStasis : 1;                                    // 0x071E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bApplyStatModifierToPlayers : 1;                         // 0x071E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bApplyStatModifierToDinos : 1;                           // 0x071E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventOnWildDino : 1;                                  // 0x071E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventOnDino : 1;                                      // 0x071E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventOnPlayer : 1;                                    // 0x071E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventOnBigDino : 1;                                   // 0x071F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventOnBossDino : 1;                                  // 0x071F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventOnRobotDino : 1;                                 // 0x071F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsDisease : 1;                                          // 0x071F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPreventAddingOtherBuff : 1;                        // 0x071F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPreventRunning : 1;                                // 0x071F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		float                                                      PreventIfMovementMassGreaterThan;                        // 0x0720(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_M779[0x4];                                   // 0x0724(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              AOEOtherBuffToApply;                                     // 0x0728(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AOEBuffRange;                                            // 0x0730(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CharacterAOEBuffDamage;                                  // 0x0734(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CharacterAOEBuffResistance;                              // 0x0738(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      Maximum2DVelocityForStaminaRecovery;                     // 0x073C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAddReactivates : 1;                                     // 0x0740(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAoEApplyDamageAllTargetables : 1;                       // 0x0740(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAdjustCharacterMovementImpulse : 1;                // 0x0740(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAdjustImpulseFromDamage : 1;                       // 0x0740(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetHUDElements : 1;                                // 0x0740(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetCameraShakeScalar : 1;                          // 0x0740(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceDrawMissionDinoTargetHealthbars : 1;               // 0x0740(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_H78Y[0x7];                                   // 0x0741(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInterface*>                          PostprocessBlendablesToExclude;                          // 0x0748(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_370W[0x18];                                  // 0x0758(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              BuffToGiveOnDeactivation;                                // 0x0770(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      BuffClassesToCancelOnActivation;                         // 0x0778(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      ActivePreventsBuffClasses;                               // 0x0788(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      BuffRequiresOwnerClass;                                  // 0x0798(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      BuffPreventsOwnerClass;                                  // 0x07A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      XPEarningMultiplier;                                     // 0x07B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPSetupForInstigator;                                // 0x07BC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPDeactivated;                                       // 0x07BD(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPOverrideBuffToGiveOnDeactivation;                  // 0x07BE(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPCustomAllowAddBuff;                                // 0x07BF(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPInformDamageCauserOfBuffAdded;                     // 0x07C0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPActivated : 1;                                     // 0x07C1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPHandleOnStartFire : 1;                             // 0x07C1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPHandleOnStartAltFire : 1;                          // 0x07C1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPHandleOnStopAltFire : 1;                           // 0x07C1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPreventFlight : 1;                                 // 0x07C1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRequireController : 1;                                  // 0x07C1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDontPlayInstigatorActiveSoundOnDino : 1;                // 0x07C1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAddExtendBuffTime : 1;                                  // 0x07C1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseTickingDeactivation : 1;                             // 0x07C2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCheckPreventInput : 1;                                  // 0x07C2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPDrawBuffStatusHUD : 1;                                // 0x07C2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEnableStaticPathing : 1;                                // 0x07C2(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       bHUDFormatTimerAsTimecode : 1;                           // 0x07C2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_SFCH[0x1];                                   // 0x07C3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             staticPathingDestination;                                // 0x07C4(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GCA8[0x8];                                   // 0x07D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseBPPreventThrowingItem : 1;                           // 0x07D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventInputDoesOffset : 1;                             // 0x07D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNotifyExperienceGained : 1;                             // 0x07D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyTickWhenVisible : 1;                                // 0x07D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPAdjustStatusValueModification : 1;                    // 0x07D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_K1RY : 1;                                    // 0x07D8(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUseBPNotifyOtherBuffActivated : 1;                      // 0x07D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPNotifyOtherBuffDeactivated : 1;                    // 0x07D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPreventFirstPerson : 1;                            // 0x07D9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAddUnderwaterCharacterStatusValues : 1;            // 0x07D9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventInstigatorAttack : 1;                            // 0x07D9(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPOnInstigatorMovementModeChangedNotify : 1;         // 0x07D9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPreventInstigatorMovementMode : 1;                 // 0x07D9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOverrideTalkerCharacter : 1;                       // 0x07D9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBuffHandleInstigatorMultiUseEntries : 1;                // 0x07D9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPreventInstigatorAttack : 1;                       // 0x07D9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPreventOnStartJump : 1;                            // 0x07DA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_6I81[0x5];                                   // 0x07DB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPrimalBuffPersistentData*                           MyBuffPersistentData;                                    // 0x07E0(0x0008) BlueprintVisible, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		class UClass*                                              BuffPersistentDataClass;                                 // 0x07E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FMaxStatScaler>                              MaxStatScalers;                                          // 0x07F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TWeakObjectPtr<class AActor>                               DamageCauser;                                            // 0x0800(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundBase*                                          ExtraActivationSoundToPlay;                              // 0x0808(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPersistentBuffSurvivesLevelUp;                          // 0x0810(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MIUQ[0x3];                                   // 0x0811(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AoEApplyDamage;                                          // 0x0814(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AoEApplyDamageInterval;                                  // 0x0818(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_59WV[0x4];                                   // 0x081C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              AoEApplyDamageType;                                      // 0x0820(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ForceNetworkSpatializationMaxLimitBuffType;              // 0x0828(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    ForceNetworkSpatializationBuffMaxLimitNum;               // 0x0830(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ForceNetworkSpatializationBuffMaxLimitRange;             // 0x0834(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InsulationRange;                                         // 0x0838(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HyperThermiaInsulation;                                  // 0x083C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HypoThermiaInsulation;                                   // 0x0840(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             AoEBuffLocOffset;                                        // 0x0844(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      AoEClassesToInclude;                                     // 0x0850(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      AoEClassesToExclude;                                     // 0x0860(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bUseBPExcludeAoEActor;                                   // 0x0870(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bOverrideBuffDescription;                                // 0x0871(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bOverrideBuffType;                                       // 0x0872(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bOnlyTickIfPlayerCharacter;                              // 0x0873(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bOnlyTickWhenPossessed;                                  // 0x0874(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDestroyWhenUnpossessed;                                 // 0x0875(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6SNT[0xA];                                   // 0x0876(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OnlyForInstigatorSoundFadeInTime;                        // 0x0880(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBuffTickServer;                                      // 0x0884(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBuffTickClient;                                      // 0x0885(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1GCJ[0x2];                                   // 0x0886(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BuffTickServerMaxTime;                                   // 0x0888(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BuffTickServerMinTime;                                   // 0x088C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BuffTickClientMaxTime;                                   // 0x0890(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BuffTickClientMinTime;                                   // 0x0894(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseRemoteClientTick;                                    // 0x0898(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_T3C4[0x3];                                   // 0x0899(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BuffTickRemoteClientMaxTime;                             // 0x089C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BuffTickRemoteClientMinTime;                             // 0x08A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bContinueTickingServerAfterDeactivate;                   // 0x08A4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bContinueTickingClientAfterDeactivate;                   // 0x08A5(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YA4D[0x26];                                  // 0x08A6(0x0026) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    AddBuffMaxNumStacks;                                     // 0x08CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          DeactivatedSound;                                        // 0x08D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDeactivatedSoundOnlyLocal;                              // 0x08D8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableBloom;                                           // 0x08D9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bBPModifyCharacterFOV;                                   // 0x08DA(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CNKD[0x1];                                   // 0x08DB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PostProcessInterpSpeedDown;                              // 0x08DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PostProcessInterpSpeedUp;                                // 0x08E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TPVCameraSpeedInterpolationMultiplier;                   // 0x08E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsCarryBuff;                                            // 0x08E8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UO47[0x7];                                   // 0x08E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPostProcessMaterialAdjuster>                PostprocessMaterialAdjusters;                            // 0x08F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bBPOverrideCharacterWalkVelocity : 1;                    // 0x0900(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bBPOverrideCharacterSwimmingVelocity : 1;                // 0x0900(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bBPOverrideCharacterNewFallVelocity : 1;                 // 0x0900(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bBPOverrideCharacterFlyingVelocity : 1;                  // 0x0900(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bForceOverrideCharacterWalkingVelocity : 1;              // 0x0900(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bForceOverrideCharacterSwimmingVelocity : 1;             // 0x0900(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bForceOverrideCharacterFlyingVelocity : 1;               // 0x0900(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bForceOverrideCharacterNewFallVelocity : 1;              // 0x0900(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bOverrideCharacterLanding : 1;                           // 0x0901(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bOverrideCharacterMovementInput : 1;                     // 0x0901(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_O39D[0xE];                                   // 0x0902(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AOEBuffIntervalMin;                                      // 0x0910(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AOEBuffIntervalMax;                                      // 0x0914(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaximumVelocityZForSlowingFall;                          // 0x0918(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XA1B[0x4];                                   // 0x091C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bAllowMultiUseEntriesFromSelf : 1;                       // 0x0920(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_QMBI[0x3];                                   // 0x0921(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseBPHandleOnStopFire : 1;                              // 0x0924(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceCrosshair : 1;                                     // 0x0924(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventLogoutSleeping : 1;                              // 0x0924(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseInterceptInstigatorPlayerEmote : 1;                  // 0x0924(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTriggerBPStasis : 1;                                    // 0x0924(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTriggerBPUnstasis : 1;                                  // 0x0924(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAddTPVCameraOffset;                                     // 0x0925(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bOverrideTPVCameraOffset;                                // 0x0926(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WTSC[0x1];                                   // 0x0927(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             TPVCameraOffset;                                         // 0x0928(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bOverrideTPVCameraOffsetMultiplier;                      // 0x0934(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FC2W[0x3];                                   // 0x0935(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             TPVCameraOffsetMultiplier;                               // 0x0938(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseCenteredTPVCamera;                                   // 0x0944(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseBlueprintAnimNotifications;                          // 0x0945(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPGetGravity : 1;                                    // 0x0946(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseBPOnOwnerMassTeleportEvent : 1;                      // 0x0946(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseBPShouldForceOwnerDedicatedMovementTickPerFrame : 1; // 0x0946(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_8KE7[0x1];                                   // 0x0947(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bAllowOnlyCustomFallDamage : 1;                          // 0x0948(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_RRB6[0x3];                                   // 0x0949(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseBPGetMoveAnimRate : 1;                               // 0x094C(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseBPOverrideTargetingDesire : 1;                       // 0x094C(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bBuffPreventsApplyingLevelUps : 1;                       // 0x094C(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bBuffPreSerializeForInstigator : 1;                      // 0x094C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPOverrideWaterJumpVelocity : 1;                     // 0x094C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_C1UQ[0x3];                                   // 0x094D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseBP_OnOwnerDealtDamage : 1;                           // 0x0950(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseGetGravityZScale : 1;                                // 0x0950(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBP_AdjustDamageEx : 1;                               // 0x0950(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBP_OverrideTerminalVelocity : 1;                     // 0x0950(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBuffOverrideFinalWanderLocation : 1;                 // 0x0950(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bModifyMaxAcceleration : 1;                              // 0x0950(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bModifyRotationRate : 1;                                 // 0x0950(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bModifyFriction : 1;                                     // 0x0950(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bDisableFootstepsParticles : 1;                          // 0x0951(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAllowAddingWithoutController : 1;                  // 0x0951(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAllowWhileBuried : 1;                              // 0x0951(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBP_OnOwnerTeleported : 1;                            // 0x0951(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPAdjustRadialDamage : 1;                            // 0x0951(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseForcedBuffAimOverride : 1;                           // 0x0951(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPreventTekArmorBuffs : 1;                          // 0x0951(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBuffPreventsInventoryAccess : 1;                        // 0x0951(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bReactivateWithNewDamageCauser : 1;                      // 0x0952(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPDinoNameColorOverride : 1;                         // 0x0952(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bBuffPreventsCryo : 1;                                   // 0x0952(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBuffOverrideInventoryAccessInput : 1;                // 0x0952(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bListenForInput : 1;                                     // 0x0952(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bInterceptUseAction : 1;                                 // 0x0952(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bInterceptWeaponToggle : 1;                              // 0x0952(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPreventNotifySound : 1;                            // 0x0952(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBuffDrawFloatingHUDRemotePlayers : 1;                   // 0x0953(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseConsolidatedMultiUseWheel : 1;                       // 0x0953(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		float                                                      CharacterMultiplier_DefaultExtraDamageMultiplier;        // 0x0954(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceAlwaysAllowBuff : 1;                               // 0x0958(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceSelfTick : 1;                                      // 0x0958(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceInstigatorTick : 1;                                // 0x0958(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSkipInstigatorTick : 1;                                 // 0x0958(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_M264 : 2;                                    // 0x0958(0x0001) BIT_FIELD (PADDING)
		bool                                                       bAllowTurretsToTargetInstigatorIfTraceHitsBuff : 1;      // 0x0958(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsHighRiskMissionBuff : 1;                              // 0x0958(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_JPJC[0x3];                                   // 0x0959(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StaminaDrainMultiplier;                                  // 0x095C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class FName>                                        DisabledWeaponTags;                                      // 0x0960(0x0010) Edit, BlueprintVisible, ZeroConstructor
		bool                                                       bUseBPGetCrosshairColor;                                 // 0x0970(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPGetPlayerFootStepSound;                            // 0x0971(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPModifyArmorValue;                                  // 0x0972(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowMammalIncubationOptions;                            // 0x0973(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExtendBuffTimeOverride;                                  // 0x0974(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1XKZ[0x8];                                   // 0x0978(0x0008) MISSED OFFSET (PADDING)

	public:
		struct FVector UpdateStaticPathingDestination(const struct FVector& locOverride, float randomOffsetMultiplier, bool useRandomNegativeXDir, bool orientRandOffsetByRotation, const struct FRotator& randOffsetByRotation, float GroundCheckSpreadOverride);
		void UpdateBuffPersistentData();
		void UpdateBuffLifetime(float NewLifetime, bool bRestartBuffLifetime);
		class APrimalBuff* STATIC_StaticAddBuff(class UClass* BuffClass, class APrimalCharacter* forCharacter, class UPrimalItem* AssociatedItem, class AActor* DamageCauser, bool bForceOnClient);
		bool ShouldForceOwnerDedicatedMovementTickPerFrame();
		void SetValueToAddPerSecond(EPrimalCharacterStatusValue StatusValueType, float Value);
		void SetupForInstigator();
		void SetGestationMonitoringTarget(class APrimalDinoCharacter* forTarget, bool bEnable);
		void SetBuffCauser(class AActor* CausedBy);
		void ServerRequestRelatedMissionData();
		void ResetServerBuffTick(float MinTime, float MaxTime);
		void ResetClientBuffTick(float MinTime, float MaxTime);
		bool ResetBuffStart();
		bool ReduceBuffTime(float AmountOfTimeToReduce);
		bool PreventJump();
		bool PreventInstigatorMovementMode(EMovementMode NewMovementMode, unsigned char NewCustomMode);
		bool PreventInstigatorAttack(int32_t AttackIndex);
		bool PreventBlockingWithShield();
		bool PreventActorTargeting(class AActor* ByActor);
		void OnOwnerTeleported();
		void OnInputEvent(class APrimalCharacter* ForPrimalCharacter, EPrimalCharacterInputType inputType);
		void OnCapsuleHitCallback(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void OnBuffLifetimeUpdated();
		void NotifyDamage(float DamageAmount, class UClass* DamageClass, class AController* EventInstigator, class AActor* TheDamageCauser);
		void NotifyBumpedPawn(class APrimalCharacter* BumpedPawn);
		void NotifyBumpedByPawn(class APrimalCharacter* BumpedBy);
		void NetSyncBuffLifetime();
		void NetResetBuffStart();
		void NetDeactivate();
		void Multi_SyncBuffLifetime(float NewDeactivateAfterTime);
		bool IsOwningClient();
		bool InterceptInstigatorPlayerEmoteAnim(class UAnimMontage* EmoteAnim);
		void InstigatorDie();
		bool HideBuffFromHUD();
		void HandleBuffAnimNotify(const class FName& AnimNotifyName, const class FString& AnimNotifyStringData);
		float GetValueToAddPerSecond(EPrimalCharacterStatusValue StatusValueType);
		class FString GetUniqueName();
		float GetTimeLeft();
		float GetRemainingTime();
		float GetOverrideWaterJumpVelocity(float OutOfWaterZ);
		class APlayerController* GetInstigatorPlayerController();
		float GetHUDProgressBarPercent();
		struct FRotator GetForcedBuffAimOverride(bool bIsWeaponAim);
		TArray<class APrimalDinoCharacter*> GetEnabledGestationMonitoringTargets();
		class FString GetDebugInfoString();
		double GetDeactivationTime();
		int32_t GetBuffType();
		float GetBuffTickServerDeltaTime();
		float GetBuffTickClientDeltaTime();
		class UMaterialInstanceDynamic* GetBuffPostprocessMaterial();
		float GetBuffPostprocessIntensity();
		struct FStatusValueModifierDescription GetBuffDescription();
		bool ExtendBuffTime(float AmountOfAdditionalTime);
		void DrawBuffFloatingHUD(int32_t BuffIndex, class AShooterHUD* HUD, float CenterX, float CenterY, float DrawScale);
		void DinoInstigatorReceivedRider(class AShooterCharacter* Rider);
		void DinoInstigatorClearedRider();
		void ClientReceiveRelatedMissionData(class AMissionType* InMission, bool InHasRelatedMission);
		void BuffTickServer(float DeltaTime);
		void BuffTickClient(float DeltaTime);
		void BuffPostAdjustDamage(float Damage, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* TheDamgeType);
		bool BuffOverrideInventoryAccessInput(class AController* InController, bool bInputPressed);
		bool BuffOverrideFinalWanderLocation(struct FVector* outVec);
		float BuffAdjustDamage(float Damage, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* TheDamgeType);
		void BPUnstasis();
		void BPStasis();
		bool BPShouldForceOwnerDedicatedMovementTickPerFrame();
		void BPSetupForInstigator(class AActor* ForInstigator);
		void BPResetBuffStart();
		void BPReactivateWithDamageCauser(class AActor* ForInstigator, class AActor* ForDamageCauser);
		bool BPPreventThrowingItem(class UPrimalItem* ForItem);
		TArray<class FName> BPPreventTekArmorBuffs();
		bool BPPreventRunning();
		bool BPPreventRidingInstigator(class APrimalCharacter* ForPawn);
		bool BPPreventOnStartJump();
		bool BPPreventNotifySound(class USoundBase* SoundIn);
		bool BPPreventInstigatorMovementMode(EMovementMode NewMovementMode, unsigned char NewCustomMode);
		bool BPPreventInstigatorAttack(int32_t AttackIndex);
		bool BPPreventflight();
		bool BPPreventFirstPerson();
		bool BPPreventCharacterStatusValueModifiers(class APrimalCharacter* ForInstigator);
		bool BPPreventCharacterLanding(const struct FVector& ImpactPoint, const struct FVector& ImpactAccel, const struct FVector& ImpactVelocity, struct FVector* NewVelocity);
		bool BPPreventAddingOtherBuff(class UClass* anotherBuffClass);
		void BPPreSetupForInstigator(class AActor* ForInstigator);
		void BPPreSerializeForInstigator(bool bBeginningSerialize);
		struct FVector BPOverrideWeaponBob(const struct FVector& InWeaponBob);
		float BPOverrideTargetingDesire(class AActor* forTarget, float ForTargetingDesireValue);
		class APrimalCharacter* BPOverrideTalkerCharacter();
		bool BPOverrideIsNetRelevantFor(class APlayerController* RealViewer, class AActor* Viewer, const struct FVector& SrcLocation);
		struct FVector BPOverrideCharacterNewFallVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime);
		void BPOverrideCameraViewTarget(const class FName& CurrentCameraMode, const struct FVector& DesiredCameraLocation, const struct FRotator& DesiredCameraRotation, float DesiredFOV, bool* bOverrideCameraLocation, struct FVector* CameraLocation, bool* bOverrideCameraRotation, struct FRotator* CameraRotation, bool* bOverrideCameraFOV, float* CameraFOV);
		class UClass* BPOverrideBuffToGiveOnDeactivation();
		void BPOnPreventedFiringDisabledWeapon(class AShooterWeapon* weapon, const class FName& PreventingTag);
		void BPOnOwnerMassTeleportEvent(EMassTeleportState EventState, class APrimalCharacter* TeleportInitiatedByChar);
		void BPOnInstigatorMovementModeChangedNotify(EMovementMode PrevMovementMode, unsigned char PreviousCustomMode, EMovementMode NewMovementMode, unsigned char NewCustomMode);
		void BPOnInstigatorCapsuleComponentHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void BPOnInputEvent(EPrimalCharacterInputType inputType);
		void BPNotifyPreventDismounting(class APrimalDinoCharacter* FromDino);
		void BPNotifyOtherBuffDeactivated(class APrimalBuff* OtherBuff);
		void BPNotifyOtherBuffActivated(class APrimalBuff* OtherBuff);
		void BPNotifyExperienceGained(float ActualExpGained, float ExpectedExpGain, EXPType ExpTypeGained);
		void BPNonDedicatedPlayerPostAnimUpdate();
		TArray<struct FBoneModifier> BPModifyPlayerBoneModifiers(TArray<struct FBoneModifier> InBoneModifiers);
		float BPModifyArmorValue(class UPrimalItem* ForItem, float BaseArmorValue);
		bool BPIsValidUnStasisCaster();
		bool BPIsCharacterHardAttached();
		bool BPInterceptWeaponToggle();
		bool BPInterceptUseAction();
		void BPInstigatorUnpossessed();
		void BPInstigatorSleeped(bool bIsSleeped);
		void BPInstigatorReceivedKillingDamage();
		void BPInstigatorPossessed(class AController* ByController);
		void BPInstigatorLocalPossessed(class AShooterPlayerController* ByController);
		void BPInstigatorDied();
		void BPInitializedCharacterAnimScriptInstance();
		bool BPInformDamageCauserOfBuffAdded(class APrimalCharacter* forCharacter, class AActor* DamageCauser);
		void BPHandleOnStopFire(bool bFromGamepad);
		void BPHandleOnStopAltFire(bool bFromGamepad);
		void BPHandleOnStartFire(bool bFromGamepad);
		void BPHandleOnStartAltFire(bool bFromGamepad);
		class USoundCue* BPGetPlayerFootStepSound();
		float BPGetMoveAnimRate();
		void BPGetHUDElements(class APlayerController* ForPC, TArray<struct FHUDElement>* OutElements);
		float BPGetGravityZScale(float currentScale);
		struct FColor BPGetDinoNameColorOverride(class AShooterHUD* HUD, const struct FColor& ColorToOverride);
		class FString BPGetDebugInfoString();
		struct FColor BPGetCrosshairColor();
		float BPGetBabyImprintingSpeedMultiplier();
		int32_t BPForceDinoNameTargetingTeamOverride(class AShooterHUD* HUD, int32_t TargetingTeamToCheck);
		ECameraStyle BPForceCameraStyle(class APrimalCharacter* ForViewTarget);
		bool BPExcludeAoEActor(class AActor* ActorToConsider);
		void BPDrawBuffStatusHUD(class AShooterHUD* HUD, float XPos, float YPos, float ScaleMult);
		void BPDinoRefreshColorization(TArray<struct FLinearColor> DinoColors, TArray<struct FLinearColor>* OverrideColors);
		void BPDeactivated(class AActor* ForInstigator);
		void BPDeactivate();
		bool BPCustomAllowAddBuff(class APrimalCharacter* forCharacter, class AActor* DamageCauser);
		bool BPCheckPreventInput(EPrimalCharacterInputType inputType);
		void BPCharacterDetach();
		bool BPCanBeCarried(class APrimalCharacter* ByCarrier);
		bool BPBuffPreventUploading();
		float BPBPGetCameraShakeScalar(class UClass* currentShake, float currentScale);
		void BPAnimNotifyCustomState_End(const class FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotifyState* AnimNotifyObject);
		void BPAnimNotifyCustomState_Begin(const class FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, class UAnimNotifyState* AnimNotifyObject);
		void BPAnimNotifyCustomEvent(const class FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject);
		float BPAdjustStatusValueModification(class UPrimalCharacterStatusComponent* ForComponent, EPrimalCharacterStatusValue ValueType, float InAmount, class UClass* DamageTypeClass, bool bManualModification);
		float BPAdjustRadialDamage(float currentDamage, const struct FVector& Origin, const struct FRadialDamageEvent& DamageEvent);
		struct FVector BPAdjustImpulseFromDamage(const struct FVector& DesiredImpulse, float DamageTaken, const struct FDamageEvent& TheDamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo);
		float BPAdjustDamage_Ex(float Damage, const struct FHitResult& HitInfo, const struct FVector& ImpulseDir, class AController* EventInstigator, class AActor* InDamageCauser, class UClass* TheDamgeType);
		struct FVector BPAdjustCharacterMovementImpulse(const struct FVector& Impulse, bool bVelocityChange, float MassScaleImpulseExponent, bool bOverrideMaxImpulseZ);
		void BPActivated(class AActor* ForInstigator);
		float BP_OverrideTerminalVelocity();
		float BP_OverrideMoveRightInput(float CurrentInput);
		float BP_OverrideMoveForwardInput(float CurrentInput);
		struct FVector BP_OverrideCharacterWalkingVelocity(const struct FVector& InitialVelocity, float Friction, float DeltaTime);
		struct FVector BP_OverrideCharacterSwimmingVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float FluidFriction, float NetBuoyancy, float DeltaTime);
		struct FVector BP_OverrideCharacterFlyingVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime);
		void BP_OnOwnerTeleported();
		void BP_OnOwnerDealtDamage(class AActor* DamagedActor, float DamageAmount, const struct FDamageEvent& DamageEvent);
		void BP_OnBuffLifetimeUpdated();
		float BP_ModifyCharacterFOV(float inFOV);
		bool AllowPostProcessEffect();
		void AddDamageStatusValueModifier(class APrimalCharacter* addToCharacter, EPrimalCharacterStatusValue ValueType, bool bSpeedToAddInSeconds, bool bContinueOnUnchangedValue, bool bResetExistingModifierDescriptionIndex, bool bSetValue, bool bSetAdditionalValue, float LimitExistingModifierDescriptionToMaxAmount, float DamageMultiplierAmountToAdd, float SpeedToAdd, int32_t StatusValueModifierDescriptionIndex, bool bUsePercentualDamage, bool bMakeUntameable, float PercentualDamage, class UClass* ScaleValueByCharacterDamageType);
		void AddBuffLifetime(float AdditionalLifetime);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalBuff_Companion
	 * Size -> 0x07B0 (FullSize[0x1130] - InheritedSize[0x0980])
	 */
	class APrimalBuff_Companion : public APrimalBuff
	{
	public:
		class USceneComponent*                                     CompanionRoot;                                           // 0x0980(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class USkeletalMeshComponent*                              CompanionMeshComp;                                       // 0x0988(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class USphereComponent*                                    CompanionUseSphereComp;                                  // 0x0990(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class AShooterCharacter>                    MyPlayer;                                                // 0x0998(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class AShooterPlayerController>             MyPC;                                                    // 0x09A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bDebugCompanion : 1;                                     // 0x09A8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bIsOrbitingPointOfInterest : 1;                          // 0x09A8(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
		bool                                                       bHasReachedPointOrbit : 1;                               // 0x09A8(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
		unsigned char                                              UnknownData_I858[0x3];                                   // 0x09A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ReachPointOrbitWithinDist;                               // 0x09AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ReactionDialogVolumeMultiplier;                          // 0x09B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CompanionViewDot;                                        // 0x09B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundAttenuation*                                   CompanionSoundAttenuation;                               // 0x09B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              DefaultMissionCompanionReactionData;                     // 0x09C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UParticleSystemComponent*                            CurrentCompanionReactionVFX;                             // 0x09C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class UAudioComponent*                                     CurrentCompanionReactionSFX;                             // 0x09D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		TArray<struct FPointOfInterestData_ForCompanion>           CurrentPointsOfInterest;                                 // 0x09D8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient
		ECompanionState                                            CompanionState_Current;                                  // 0x09E8(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		ECompanionState                                            CompanionState_Previous;                                 // 0x09E9(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XL8O[0x6];                                   // 0x09EA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FCompanionReactionData>                      ReactionStack;                                           // 0x09F0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient
		TArray<class UMaterialInterface*>                          DialogueIconOverrideStack;                               // 0x0A00(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient
		TArray<int32_t>                                            CurrentIDStack;                                          // 0x0A10(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient
		struct FVector                                             CurrentFocusedLocation;                                  // 0x0A20(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5ERW[0x4];                                   // 0x0A2C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPointOfInterestData_ForCompanion                   CurrentFocusedPointData;                                 // 0x0A30(0x03F0) BlueprintVisible, BlueprintReadOnly, Transient
		struct FCompanionEventData                                 CurrentEventData;                                        // 0x0E20(0x0050) BlueprintVisible, BlueprintReadOnly, Transient
		class AActor*                                              CurrentEventActor;                                       // 0x0E70(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class FName                                                LastPointTag_StartOrbit;                                 // 0x0E78(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class FName                                                LastPointTag_ReachedOrbit;                               // 0x0E80(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     LastPlayedReactionNetworkTime;                           // 0x0E88(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bShowsHexagonsInInventory : 1;                           // 0x0E90(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bEnableDebugReactions : 1;                               // 0x0E90(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_3N1P[0x7];                                   // 0x0E91(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCompanionReactionData                              PreviouslyPlayedReaction;                                // 0x0E98(0x00A0) Edit, BlueprintVisible, DisableEditOnTemplate
		bool                                                       bDontPlayEnglishLinesAsLocalizationFallback : 1;         // 0x0F38(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_H4XS[0x7];                                   // 0x0F39(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      FullyTranslatedLanguages;                                // 0x0F40(0x0010) Edit, ZeroConstructor
		class UClass*                                              HUDOverlayToolTipWidgetExtended;                         // 0x0F50(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<int32_t>                                            ReactionExplorerNotesToUnlock;                           // 0x0F58(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient
		class UTexture2D*                                          AsyncLoadedDialogueAnimTexture;                          // 0x0F68(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class USoundCue*                                           AsyncLoadedSoundCue;                                     // 0x0F70(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class USoundWave*                                          AsyncLoadedSoundWave;                                    // 0x0F78(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class FName                                                AnimTextureParamName;                                    // 0x0F80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                AnimTextureStartTimeParamName;                           // 0x0F88(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                AnimTextureDurationParamName;                            // 0x0F90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      AnimTextureDurationOffset;                               // 0x0F98(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		bool                                                       bIsAwaitingLoadedTexture : 1;                            // 0x0F9C(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		bool                                                       bHasFinishedLoadingTexture : 1;                          // 0x0F9C(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		bool                                                       bIsAwaitingLoadedSoundCue : 1;                           // 0x0F9C(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		bool                                                       bHasFinishedLoadingSoundWave : 1;                        // 0x0F9C(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		bool                                                       bIsAwaitingLoadedSoundWave : 1;                          // 0x0F9C(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		bool                                                       bIsAwaitingFallbackSubtitleAudio : 1;                    // 0x0F9C(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		bool                                                       bHasFinishedLoadingSoundCue : 1;                         // 0x0F9C(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		bool                                                       bProbablyPlayingReaction : 1;                            // 0x0F9C(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		bool                                                       bHasSomePaddingBeforePlayingReaction : 1;                // 0x0F9D(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		bool                                                       bGoingToTryToSplitSoundCueForLocalization : 1;           // 0x0F9D(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		bool                                                       bHasPlayedDefaultReactionAnimTexture : 1;                // 0x0F9D(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		bool                                                       bIsPlayingFallbackReactionAnimTexture : 1;               // 0x0F9D(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		bool                                                       bForceCompanionHidden : 1;                               // 0x0F9D(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		unsigned char                                              UnknownData_5PLN[0x2];                                   // 0x0F9E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CurrentReactionSFXIndex;                                 // 0x0FA0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    PreviousReactionSFXIndex;                                // 0x0FA4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		struct FStringAssetReference                               CurrentSoundWaveStringAssetReference;                    // 0x0FA8(0x0010) Edit, ZeroConstructor, Protected
		struct FStringAssetReference                               CurrentSoundCueStringAssetReference;                     // 0x0FB8(0x0010) Edit, ZeroConstructor, Protected
		struct FStringAssetReference                               CurrentAnimTextureStringAssetReference;                  // 0x0FC8(0x0010) Edit, ZeroConstructor, Protected
		struct FStringAssetReference                               FallbackSubtitleAudioString;                             // 0x0FD8(0x0010) Edit, ZeroConstructor, Protected
		TArray<class UMaterialInstanceDynamic*>                    MeshDynamicMaterials;                                    // 0x0FE8(0x0010) ZeroConstructor, Transient, Protected
		class UMaterialInterface*                                  CompanionReactionSubtitleIcon;                           // 0x0FF8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		struct FStringAssetReference                               DefaultReactionAnimtexture;                              // 0x1000(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected
		struct FLocalizedSoundWaveAnimTexturePairArrays            LocalizedAudioTracks;                                    // 0x1010(0x0020) Edit, Protected
		bool                                                       IsUsingLocalizedAudioTrack;                              // 0x1030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		bool                                                       DebugBypassVRTeleportRestrictions;                       // 0x1031(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       ForcedMonologueCheat;                                    // 0x1032(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5IYO[0x5];                                   // 0x1033(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TAssetPtr<class UClass>                                    FinalBossFightEasy;                                      // 0x1038(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible
		unsigned char                                              UnknownData_YJBF[0x4];                                   // 0x1054(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		TAssetPtr<class UClass>                                    FinalBossFightMed;                                       // 0x1058(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible
		unsigned char                                              UnknownData_R32A[0x4];                                   // 0x1074(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		TAssetPtr<class UClass>                                    FinalBossFightHard;                                      // 0x1078(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible
		unsigned char                                              UnknownData_U2WZ[0x4];                                   // 0x1094(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		TAssetPtr<class UClass>                                    FinalBossFightFlowTest;                                  // 0x1098(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible
		unsigned char                                              UnknownData_92II[0x4];                                   // 0x10B4(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		float                                                      AllowedHLNAFocusedSelectedRemoteTargetDistance;          // 0x10B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XIN1[0x1C];                                  // 0x10BC(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnReactionPlayed_Delegate;                               // 0x10D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnReactionStopped_Delegate;                              // 0x10E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnReactionAnimPlayed_Delegate;                           // 0x10F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnReactionComponentSpawned_VFX_Delegate;                 // 0x1108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnReactionComponentSpawned_SFX_Delegate;                 // 0x1118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_4377[0x8];                                   // 0x1128(0x0008) MISSED OFFSET (PADDING)

	public:
		bool TraceForCompanionBlockersFromPlayer(struct FVector* AdjustedLocation, const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bDebug, float TraceRadius);
		void Tick_UpdateCompanionTransform(float DeltaTime);
		void Tick_UpdateCompanionState(float DeltaTime);
		void Tick_CompanionSearchForPOIs(float DeltaTime);
		void Tick_CompanionReactions(float DeltaTime);
		void Tick_CompanionEvents(float DeltaTime);
		void StopCompanionReaction();
		void StopCompanionMontage(class UAnimMontage* AnimToStop, float BlendOutTime);
		void StopCompanionEventExternal();
		void StopCompanionEvent();
		void StartCompanionEventExternal(class AActor* EventActor, struct FCompanionEventData* WithEventData);
		void StartCompanionEvent(class AActor* EventActor, struct FCompanionEventData* WithEventData);
		bool ShouldOrbitPointOfInterest(const struct FPointOfInterestData_ForCompanion& WithPointData);
		void SetUpAnimTexture();
		void SetCompaionHiddenSetting(bool isHidden);
		void Server_SetCompanionState(ECompanionState NewState);
		void RefreshCompanionColorization();
		void PlayLinkedCompanionReactionsByExplorerNoteIndex(int32_t index);
		float PlayCompanionMontage(class UAnimMontage* AnimToPlay, float BlendInTime, float BlendOutTime, float PlayRate);
		void OutputAsyncLoadedFiles();
		void OnSpawnHexagons(float OverrideCollectSFXVolume, bool VFXImmediatelyAttracts);
		void OnSpawnedForPlayer();
		void OnRep_CompanionState();
		void OnPlayerPlayAnimation(class UAnimMontage* PlayedAnim, float AnimDuration, const class FName& StartSectionName);
		void OnPlayerDeath(class APrimalCharacter* DiedCharacter);
		void OnMyPlayerMissionStarted(class APrimalBuff_MissionData* MissionDataBuff, class AMissionType* Mission);
		void OnMyPlayerMissionComplete(class APrimalBuff_MissionData* MissionDataBuff, class AMissionType* Mission, bool bSuccess);
		void OnMadeHexagonPurchase();
		void OnFoundPoI(struct FPointOfInterestData_ForCompanion* FoundPointData, class AActor* FoundPointActor);
		void OnEndOverlapCompanionEventTrigger(class AActor* ForTrigger);
		void OnCompanionStateChanged();
		void OnCompanionReactionStopped(const struct FCompanionReactionData& StoppedReactionData, int32_t UniqueID);
		void OnCompanionReactionPlayed(const struct FCompanionReactionData& PlayedReactionData, int32_t UniqueID);
		void OnCompanionEventStarted(const struct FCompanionEventData& StartingEventData);
		void OnCompanionEventEnded(const struct FCompanionEventData& StoppingEventData);
		void OnBeginOverlapCompanionEventTrigger(class AActor* ForTrigger);
		void NotifyItemCrafted(class UPrimalItem* anItem);
		void NotifyItemAddedToCropPlot(class UPrimalItem* anItem);
		void NotifyHasTamedDino(class UClass* DinoClass);
		void Net_SetCompanionState(ECompanionState NewState);
		bool IsPlayingCompanionReaction();
		bool IsPlayerLookingAtCompanion();
		bool IsPlayerADS();
		bool IsCompanionReadyToMonologue();
		bool IsCompanionAbleToMonologue();
		bool HasCompanionReachedPointOrbit(const struct FPointOfInterestData_ForCompanion& OfPointData);
		struct FVector STATIC_GetPointCompanionWorldOrbitOrigin(const struct FPointOfInterestData_ForCompanion& ForPointData);
		class AShooterHUD* GetMyPlayerHUD();
		struct FCompanionReactionData GetCurrentCompanionReactionData();
		struct FCompanionEventData GetCurrentCompanionEventData();
		struct FVector GetCompanionWorldLocation();
		bool GetClosestNearbyPointOfInterest(struct FPointOfInterestData_ForCompanion* ClosestPointData, struct FVector* ClosestPointLoc);
		TArray<class AActor*> STATIC_GetAllExplorerNotesInWorld(class UWorld* World);
		bool ForceUnhibernateAtLocation(const struct FVector& AtLocation);
		bool ForceHibernateAtLocation(const struct FVector& AtLocation, TArray<class AActor*> ActorsToHibernate);
		void FocusOnRemoteTarget();
		void DrawFocusedActorToolTip(class AActor* targetedActor);
		void Delegate_OnCompanionReactionVfxSpawned__DelegateSignature(class APrimalBuff_Companion* SpawnedByCompanion, class UParticleSystemComponent* SpawnedComp_VFX);
		void Delegate_OnCompanionReactionStopped__DelegateSignature(class APrimalBuff_Companion* ReactingCompanion, const struct FCompanionReactionData& ReactionData, int32_t UniqueID);
		void Delegate_OnCompanionReactionSfxSpawned__DelegateSignature(class APrimalBuff_Companion* SpawnedByCompanion, class UAudioComponent* SpawnedComp_SFX);
		void Delegate_OnCompanionReactionPlayed__DelegateSignature(class APrimalBuff_Companion* ReactingCompanion, const struct FCompanionReactionData& ReactionData, int32_t UniqueID);
		void Delegate_OnCompanionReactionAnimPlayed__DelegateSignature(class APrimalBuff_Companion* SpawnedByCompanion, class UAnimMontage* PlayedAnim);
		void ClientToggleForceMonologue(bool Newval);
		void ClientOutputAsyncLoadedFiles();
		void ClientAllowVRTeleport();
		void Client_AddCompanionReaction(const struct FCompanionReactionData& WithReactionData, bool bForcePlayNow, class UMaterialInterface* DialogueIconOverride, int32_t UniqueID);
		bool CanStartCompanionEvent(class AActor* EventActor, struct FCompanionEventData* WithEventData);
		bool CanRemotelyFocusOnRemoteActorForTooltip(class AActor* targetedActor);
		bool CanPlayEnvironmentalCompanionReaction(const struct FCompanionReactionData& CanPlayReactionData);
		bool CanPlayCompanionReaction(const struct FCompanionReactionData& CanPlayReactionData);
		void BPServerside_IsPerMapExplorerNoteUnlocked(int32_t ExplorerNoteIndex, bool* CouldDetermine, bool* HasPlayerUnlockedNote);
		void AnimateOutHLNASubtitleIcon();
		void AnimateInHLNASubtitleIcon();
		void AddCompanionReaction(struct FCompanionReactionData* WithReactionData, bool bForcePlayNow, class UMaterialInterface* DialogueIconOverride, int32_t UniqueID);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.CompanionEventTrigger
	 * Size -> 0x0060 (FullSize[0x0910] - InheritedSize[0x08B0])
	 */
	class ACompanionEventTrigger : public APointOfInterestActor
	{
	public:
		class UBoxComponent*                                       BoxTriggerComp;                                          // 0x08B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UTextRenderComponent*                                EventTitleTextComp;                                      // 0x08B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		struct FCompanionEventData                                 MyEventData;                                             // 0x08C0(0x0050) Edit, DisableEditOnTemplate, Protected

	public:
		void OnEndOverlap(class AActor* Actor);
		void OnBeginOverlap(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PointOfInterestCosmeticActor
	 * Size -> 0x0150 (FullSize[0x05C0] - InheritedSize[0x0470])
	 */
	class APointOfInterestCosmeticActor : public AActor
	{
	public:
		class USceneComponent*                                     CosmeticRootComp;                                        // 0x0470(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UParticleSystemComponent*                            CosmeticParticlesComp;                                   // 0x0478(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		struct FPointOfInterestData                                MyPointOfInterestData;                                   // 0x0480(0x0140) BlueprintVisible, BlueprintReadOnly, Transient

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PreviewImage
	 * Size -> 0x00B8 (FullSize[0x00E0] - InheritedSize[0x0028])
	 */
	class UPreviewImage : public UObject
	{
	public:
		unsigned char                                              UnknownData_X2W8[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FOV;                                                     // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_POGY[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextureRenderTarget2D*                              RenderTarget;                                            // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             MeshScale;                                               // 0x0040(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LightBrightness;                                         // 0x004C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            LightRotation;                                           // 0x0050(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            MeshRotation;                                            // 0x005C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             CameraLocation;                                          // 0x0068(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            CameraRotation;                                          // 0x0074(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		ESkyLightSourceType                                        AmbientSourceType;                                       // 0x0080(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VHXV[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextureCube*                                        AmbientCubemap;                                          // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              AmbientLightColor;                                       // 0x0090(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AmbientBrightness;                                       // 0x0094(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UWorld*                                              GameWorld;                                               // 0x0098(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		TArray<class USceneComponent*>                             PreviewComponents;                                       // 0x00A0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected
		class UMeshComponent*                                      PreviewMesh;                                             // 0x00B0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected
		class UWorld*                                              PreviewWorld;                                            // 0x00B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class USceneCaptureComponent2D*                            CaptureComponent;                                        // 0x00C0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected
		class UDirectionalLightComponent*                          DirctionalLight;                                         // 0x00C8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected
		class USkyLightComponent*                                  SkyLight;                                                // 0x00D0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected
		class ULineBatchComponent*                                 LineBatcher;                                             // 0x00D8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalAIState
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UPrimalAIState : public UObject
	{
	public:
		class APrimalDinoCharacter*                                Pawn;                                                    // 0x0028(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class FName                                                AnimationCustomName;                                     // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UPrimalAIState*>                              ChildStates;                                             // 0x0038(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient
		class UPrimalAIState*                                      ParentState;                                             // 0x0048(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       IsInAnimationState : 1;                                  // 0x0050(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
		bool                                                       IsInAttackState : 1;                                     // 0x0050(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       bShouldResetInLosingTarget : 1;                          // 0x0050(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor
		bool                                                       bBPCanUseState : 1;                                      // 0x0050(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPSkipIntervalCheck : 1;                             // 0x0050(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPSkipRangeCheck : 1;                                // 0x0050(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanAttack;                                         // 0x0051(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPOverrideAttackWeight;                              // 0x0052(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_INEH[0x5];                                   // 0x0053(0x0005) MISSED OFFSET (PADDING)

	public:
		void TickAnimationStateEvent(float DeltaTime, const class FName& CustomEventName, ENetRole Role);
		void TickAnimationState(float DeltaTime, const class FName& CustomEventName, ENetRole Role);
		void StartAnimationStateEvent(const class FName& CustomEventName, ENetRole Role);
		void StartAnimationState(const class FName& CustomEventName, ENetRole Role);
		bool ShouldSkipRangeCheckEvent();
		bool ShouldSkipIntervalCheckEvent();
		void SetLastAttackTime();
		void SetInAnimationStateActive(bool Value);
		void OnTickEvent(float DeltaSeconds);
		void OnTick(float DeltaSeconds);
		void OnEndEvent();
		void OnEnd();
		void OnChildStateEndedEvent(class UPrimalAIState* PrimalAIState);
		bool OnCanUseStateEvent();
		void OnBeginEvent(class UPrimalAIState* InParentState);
		void OnBegin(class UPrimalAIState* InParentState);
		class FString GetDebugInfoString();
		void EndAnimationStateEvent(const class FName& CustomEventName, ENetRole Role);
		void EndAnimationState(const class FName& CustomEventName, ENetRole Role);
		bool CanUseState();
		float BPOverrideAttackWeight(float inputWeight, float Distance, float attackRangeOffset, class AActor* OtherTarget);
		bool BPIsChildState();
		class FString BPGetDebugInfoString();
		bool BPCanAttack(float Distance, float attackRangeOffset, class AActor* OtherTarget);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalAIStateBPBase
	 * Size -> 0x0048 (FullSize[0x00A0] - InheritedSize[0x0058])
	 */
	class UPrimalAIStateBPBase : public UPrimalAIState
	{
	public:
		bool                                                       bCanAttackWhileFlying : 1;                               // 0x0058(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bClearAttackStateOnEnd : 1;                              // 0x0058(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnClearAttackState : 1;                            // 0x0058(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_Z5O1 : 1;                                    // 0x0058(0x0001) BIT_FIELD (PADDING)
		bool                                                       bIsMeleeAttack : 1;                                      // 0x0058(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseTickEvent : 1;                                       // 0x0058(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_ND53[0x3];                                   // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinTickEventTime;                                        // 0x005C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxTickEventTime;                                        // 0x0060(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseTickAnimationStateEvent : 1;                         // 0x0064(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPShouldEndAttack : 1;                               // 0x0064(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnAnimNotifyCustomEvent : 1;                       // 0x0064(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEndStateWhenAttackAnimCompletes : 1;                    // 0x0064(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnAttackStart : 1;                                 // 0x0064(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnAttackEnd : 1;                                   // 0x0064(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnAttackTick : 1;                                  // 0x0064(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_MZQS[0x3];                                   // 0x0065(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinAttackTickTime;                                       // 0x0068(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxAttackTickTime;                                       // 0x006C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_STM7[0x30];                                  // 0x0070(0x0030) MISSED OFFSET (PADDING)

	public:
		bool SpawnAndFireProjectile(class UClass* ProjectileClass, const class FName& ProjectileSocket, float ProjectileInterval, bool bOverrideProjectileSpawn, const struct FVector& OverrideSpawnLoc, const struct FRotator& OverrideSpawnRot);
		void SetLastAttackTimeToNow(float Offset);
		bool IsTimeSinceStateBegin(float CheckTimeSince, bool bForceTrueAtZeroTime);
		float GetTimeSinceStateBegin();
		double GetStateBeginTime();
		void GetLastAttackTimeAndInterval(double* LastAttackTime, float* AttackInterval);
		void FinishState();
		void DealMeleeDamageDirect(class AActor* TargetActor, const struct FVector& DamageSourceWorldLocation, float DamageAmount, float DamageImpulse, class UClass* DamageTypeClass, bool bUseBlueprintAdjustOutputDamage, bool bInstantlyHarvestCorpse);
		void DealMeleeDamage(class AActor* Actor, const struct FHitResult& FromHitResult);
		bool BPShouldEndAttack();
		void BPOnClearAttackState();
		void BPOnAttackTick(float DeltaTime);
		void BPOnAttackStart(int32_t AttackIndex);
		void BPOnAttackEnd(int32_t AttackIndex);
		void BPOnAnimNotifyCustomEvent(const class FName& CustomEventName, class UAnimSequenceBase* Animation, ENetRole Role);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalAIStateDinoMeleeState
	 * Size -> 0x0038 (FullSize[0x0090] - InheritedSize[0x0058])
	 */
	class UPrimalAIStateDinoMeleeState : public UPrimalAIState
	{
	public:
		class UClass*                                              SpawnProjectileClass;                                    // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SpawnProjectileInterval;                                 // 0x0060(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SpawnProjectileSocket;                                   // 0x0064(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bCanAttackWhileFlying : 1;                               // 0x006C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bClearAttackStateOnEnd : 1;                              // 0x006C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDoSecondarySwingTrace : 1;                              // 0x006C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_25KX : 2;                                    // 0x006C(0x0001) BIT_FIELD (PADDING)
		bool                                                       bDontActuallyDealDamage : 1;                             // 0x006C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnHitActor : 1;                                    // 0x006C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetSocketLocation : 1;                             // 0x006C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_50NX[0x3];                                   // 0x006D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      SecondarySwingRadiusTargetClasses;                       // 0x0070(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      SecondarySwingRadius;                                    // 0x0080(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             SecondarySwingLocOffset;                                 // 0x0084(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		void BPOnHitActor(const struct FHitResult& HitResult);
		void BPGetSocketLocation(const class FName& SocketName, struct FVector* SocketLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalAIStateDinoFlyerGrab
	 * Size -> 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
	 */
	class UPrimalAIStateDinoFlyerGrab : public UPrimalAIStateDinoMeleeState
	{
	public:
		class APrimalCharacter*                                    FirstHit;                                                // 0x0090(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalAIStateDinoGrabAndReleaseState
	 * Size -> 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
	 */
	class UPrimalAIStateDinoGrabAndReleaseState : public UPrimalAIStateDinoMeleeState
	{
	public:
		class APrimalCharacter*                                    FirstHit;                                                // 0x0090(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalAIStateDinoRangedState
	 * Size -> 0x0048 (FullSize[0x00A0] - InheritedSize[0x0058])
	 */
	class UPrimalAIStateDinoRangedState : public UPrimalAIState
	{
	public:
		float                                                      AccuracyWeight;                                          // 0x0058(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ClampAngle;                                              // 0x005C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             WorldGeometryTargetLocOffset;                            // 0x0060(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             CharacterTargetLocOffset;                                // 0x006C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bScaleProjDamageByDinoDamage : 1;                        // 0x0078(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bGetTargetDirection : 1;                                 // 0x0078(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       bUseAimSocket : 1;                                       // 0x0078(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_OS06 : 1;                                    // 0x0078(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUseRangedSockets : 1;                                   // 0x0078(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPRangedAttack : 1;                                  // 0x0078(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPRangedAttackOnBegin : 1;                           // 0x0078(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bLeadTarget : 1;                                         // 0x0078(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_RRV4[0x3];                                   // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                AimSocket;                                               // 0x007C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NTUH[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        RangedSockets;                                           // 0x0088(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      SpreadOffset;                                            // 0x0098(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WUJW[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (PADDING)

	public:
		void PreventAttackForTime(float Time);
		struct FVector OffsetVectorRandomlyReturnsAltered(const struct FVector& InVector, float minPercent, float maxPercent);
		float GetZGravityOffset(const struct FVector& ProjectileVelocity, const struct FVector& ProjectileStartLocation, const struct FVector& ProjectileFinalLocation);
		struct FVector FindDirectionToLeadTarget(const struct FVector& VectorToHitTargetStandingStill, float extraTimeAllowed, const struct FVector& currentVelocityOfTarget);
		struct FVector ClampProjectileVectorInForwardDirection(const struct FVector& OriginalShootingDirection, const class FName& RangedSocket);
		void BPRangedAttackOnBegin(const struct FVector& TargetLocation, const struct FVector& TargetVelocity);
		void BPRangedAttack(const struct FVector& TargetLocation, const struct FVector& TargetVelocity);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalAIStateBotRangedState
	 * Size -> 0x0020 (FullSize[0x00C0] - InheritedSize[0x00A0])
	 */
	class UPrimalAIStateBotRangedState : public UPrimalAIStateDinoRangedState
	{
	public:
		bool                                                       bDrawDebug;                                              // 0x00A0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6T39[0x3];                                   // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ChanceBotWillAimDirectlyAtPlayer;                        // 0x00A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ChanceBotWillAimDirectlyAtDino;                          // 0x00A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ChanceBotWillCompletelyMissPlayer;                       // 0x00AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ChanceBotWillCompletelyMissDino;                         // 0x00B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ConeHalfAngle;                                           // 0x00B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ConeHalfAngleRandRange;                                  // 0x00B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPGetSocketLocation;                                 // 0x00BC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_L9O2[0x3];                                   // 0x00BD(0x0003) MISSED OFFSET (PADDING)

	public:
		struct FVector BPGetSocketLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalAIStateDinoSpiderRangedWebState
	 * Size -> 0x0030 (FullSize[0x00D0] - InheritedSize[0x00A0])
	 */
	class UPrimalAIStateDinoSpiderRangedWebState : public UPrimalAIStateDinoRangedState
	{
	public:
		class FName                                                SprayStartSocket;                                        // 0x00A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SprayEndSocket;                                          // 0x00A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bClampDirection : 1;                                     // 0x00B0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_MLYM[0x3];                                   // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeBetweenProjectile;                                   // 0x00B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LeadTime;                                                // 0x00B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EJ58[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     NextSprayTime;                                           // 0x00C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      SpreadOffsetPitch;                                       // 0x00C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    NumberOfProjectilesMultiplier;                           // 0x00CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalAIStateDinoSpineyLizardTailRangeState
	 * Size -> 0x0008 (FullSize[0x00A8] - InheritedSize[0x00A0])
	 */
	class UPrimalAIStateDinoSpineyLizardTailRangeState : public UPrimalAIStateDinoRangedState
	{
	public:
		unsigned char                                              UnknownData_6G41[0x8];                                   // 0x00A0(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalAIStateDinoSpiderMinions
	 * Size -> 0x0078 (FullSize[0x00D0] - InheritedSize[0x0058])
	 */
	class UPrimalAIStateDinoSpiderMinions : public UPrimalAIState
	{
	public:
		class UClass*                                              MinionCharacterTypeClass;                                // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      MinionCharacterTypeClasses;                              // 0x0060(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<float>                                              MinionCharacterTypeClassesWeights;                       // 0x0070(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              MinionMaxCount;                                          // 0x0080(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QKND[0x17];                                  // 0x0081(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             SpawnRandomOffset;                                       // 0x0098(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             SpawnFixedOffset;                                        // 0x00A4(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EggSocket;                                               // 0x00B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bFirstBatch;                                             // 0x00B8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bPreventMinionTaming;                                    // 0x00B9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPreventMinionSaving;                                    // 0x00BA(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TNEH[0x1];                                   // 0x00BB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BatchMinionCoolDown;                                     // 0x00BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LastBatchTime;                                           // 0x00C0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              BatchCount;                                              // 0x00C4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              AbsoluteMaxMinions;                                      // 0x00C5(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              RemainingMinionBatchCount;                               // 0x00C6(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0CG1[0x1];                                   // 0x00C7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    OverrideMinionBaseLevel;                                 // 0x00C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    NumMinionsToSpawn;                                       // 0x00CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalAIStateDinoSpiderRangedAcidState
	 * Size -> 0x0018 (FullSize[0x0070] - InheritedSize[0x0058])
	 */
	class UPrimalAIStateDinoSpiderRangedAcidState : public UPrimalAIState
	{
	public:
		class FName                                                SprayStartSocket;                                        // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TimeBetweenProjectile;                                   // 0x0060(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bScaleProjDamageByDinoDamage;                            // 0x0064(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAimAtTarget;                                            // 0x0065(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GXNU[0x2];                                   // 0x0066(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     NextSprayTime;                                           // 0x0068(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalBotRidingComponent
	 * Size -> 0x0010 (FullSize[0x00E8] - InheritedSize[0x00D8])
	 */
	class UPrimalBotRidingComponent : public UActorComponent
	{
	public:
		TWeakObjectPtr<class APrimalBotCharacter>                  Rider;                                                   // 0x00D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class APrimalBotCharacter>                  Claimer;                                                 // 0x00E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalBuffPersistentData
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UPrimalBuffPersistentData : public UObject
	{
	public:
		bool                                                       bPermanentlyPersist;                                     // 0x0028(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_PAC0[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ForPrimalBuffClass;                                      // 0x0030(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		class FString                                              ForPrimalBuffClassString;                                // 0x0038(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalBuffPersistentData_MissionData
	 * Size -> 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
	 */
	class UPrimalBuffPersistentData_MissionData : public UPrimalBuffPersistentData
	{
	public:
		class AMissionType*                                        ActiveMission;                                           // 0x0048(0x0008) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    ActiveMissionIndex;                                      // 0x0050(0x0004) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CFG2[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSerializedMissionData>                      missionData;                                             // 0x0058(0x0010) BlueprintVisible, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalCableActor
	 * Size -> 0x0008 (FullSize[0x0478] - InheritedSize[0x0470])
	 */
	class APrimalCableActor : public AActor
	{
	public:
		class UPrimalCableComponent*                               CableComponent;                                          // 0x0470(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalCableComponent
	 * Size -> 0x0068 (FullSize[0x06E0] - InheritedSize[0x0678])
	 */
	class UPrimalCableComponent : public UMeshComponent
	{
	public:
		unsigned char                                              UnknownData_Z84S[0x8];                                   // 0x0678(0x0008) Fix Super Size
		struct FComponentReference                                 AttachEndTo;                                             // 0x0680(0x0018) Edit
		struct FVector                                             EndLocation;                                             // 0x0698(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CableLength;                                             // 0x06A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    NumSegments;                                             // 0x06A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SubstepTime;                                             // 0x06AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		int32_t                                                    SolverIterations;                                        // 0x06B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxParticleSpeed;                                        // 0x06B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CableWidth;                                              // 0x06B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    NumSides;                                                // 0x06BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TileMaterial;                                            // 0x06C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bRenderFirstHalfOnly;                                    // 0x06C4(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VNGV[0x1B];                                  // 0x06C5(0x001B) MISSED OFFSET (PADDING)

	public:
		void SpreadOutParticles(const struct FVector& StartPosition, const struct FVector& EndPosition);
		void SetAttachEndOverrideComponent(class USceneComponent* Component);
		void MarkRenderDynamicDataDirtyBP();
		void GetEndPositions(struct FVector* OutStartPosition, struct FVector* OutEndPosition);
		struct FCableParticle GetCableParticle(int32_t idx);
		struct FVector GetCableMidPoint();
		class USceneComponent* GetAttachEndOverrideComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalCharacter
	 * Size -> 0x0AA0 (FullSize[0x1170] - InheritedSize[0x06D0])
	 */
	class APrimalCharacter : public ACharacter
	{
	public:
		unsigned char                                              UnknownData_Y41N[0x8];                                   // 0x06D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             OldLocation;                                             // 0x06D8(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FRotator                                            OldRotation;                                             // 0x06E4(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      EffectorInterpSpeed;                                     // 0x06F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      HalfLegLength;                                           // 0x06F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TwoLeggedVirtualPointDistFactor;                         // 0x06F8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FullIKDistance;                                          // 0x06FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IKAfterFallingTime;                                      // 0x0700(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SimpleIkRate;                                            // 0x0704(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             GroundCheckExtent;                                       // 0x0708(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DQZM[0x4];                                   // 0x0714(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastForceAimedCharactersTime;                            // 0x0718(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        JumpAnim;                                                // 0x0720(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        LandedAnim;                                              // 0x0728(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        HurtAnim;                                                // 0x0730(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        HurtAnim_Flying;                                         // 0x0738(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        PinnedAnim;                                              // 0x0740(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     HurtFX;                                                  // 0x0748(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundCue*                                           HurtSound;                                               // 0x0750(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RootBodyBoneName;                                        // 0x0758(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FDecalData                                          HurtDecalData;                                           // 0x0760(0x0020) Edit, DisableEditOnInstance
		unsigned char                                              UnknownData_C4DX[0x18];                                  // 0x0780(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsVoiceTalking;                                         // 0x0798(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BQ4I[0x1];                                   // 0x0799(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseBlueprintJumpInputEvents : 1;                        // 0x079A(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPOverrideAccessInventoryInput : 1;                  // 0x079A(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bDisableCameraShakeOnNotifyHit : 1;                      // 0x079A(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bHasBuffPreSerializeForInstigator : 1;                   // 0x079A(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_CWBJ[0x5];                                   // 0x079B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              TribeName;                                               // 0x07A0(0x0010) Edit, BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame
		float                                                      WaterSubmergedDepthThreshold;                            // 0x07B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ProneWaterSubmergedDepthThreshold;                       // 0x07B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EMovementMode                                              SubmergedWaterMovementMode;                              // 0x07B8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		EMovementMode                                              UnSubmergedWaterMovementMode;                            // 0x07B9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JRM9[0x6];                                   // 0x07BA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDamageTypeAdjuster>                         DamageTypeAdjusters;                                     // 0x07C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      SnapshotScale;                                           // 0x07D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AUUF[0x4];                                   // 0x07D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPrimalSnapshotPose>                         SnapshotPoses;                                           // 0x07D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              PoopItemClass;                                           // 0x07E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              TaxidermySkinClass;                                      // 0x07F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DragBoneName;                                            // 0x07F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                DragSocketName;                                          // 0x0800(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxDragDistance;                                         // 0x0808(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxDragDistanceTimeout;                                  // 0x080C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class FName>                                        BonesToIngoreWhileDragged;                               // 0x0810(0x0010) Edit, ZeroConstructor
		float                                                      PreviewCameraMaxZoomMultiplier;                          // 0x0820(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PreviewCameraDefaultZoomMultiplier;                      // 0x0824(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PreviewCameraDistanceScaleFactor;                        // 0x0828(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6TFL[0x4];                                   // 0x082C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          StartDraggedSound;                                       // 0x0830(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          EndDraggedSound;                                         // 0x0838(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class APrimalCharacter*                                    DraggedCharacter;                                        // 0x0840(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class APrimalCharacter*                                    DraggingCharacter;                                       // 0x0848(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IQIV[0x40];                                  // 0x0850(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StasisConsumerRangeMultiplier;                           // 0x0890(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bIsSleeping : 1;                                         // 0x0894(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, SaveGame, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bWantsToRun : 1;                                         // 0x0894(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
		bool                                                       bActiveRunToggle : 1;                                    // 0x0894(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bIsBeingDragged : 1;                                     // 0x0894(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       bDisableSpawnDefaultController : 1;                      // 0x0894(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
		bool                                                       bIsDragging : 1;                                         // 0x0894(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       bIsDraggingWithGrapHook : 1;                             // 0x0894(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       bDeathKeepCapsuleCollision : 1;                          // 0x0894(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRemoteRunning : 1;                                      // 0x0895(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       bCanRun : 1;                                             // 0x0895(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseHealthDamageMaterialOverlay : 1;                     // 0x0895(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsBlinking : 1;                                         // 0x0895(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bSleepedWaterRagdoll : 1;                                // 0x0895(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       bCanBeTorpid : 1;                                        // 0x0895(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDebugIK : 1;                                            // 0x0895(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bDebugIK_ShowTraceNames : 1;                             // 0x0895(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bForceAlwaysUpdateMesh : 1;                              // 0x0896(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRagdollIgnoresPawnCapsules : 1;                         // 0x0896(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsePoopAnimationNotify : 1;                             // 0x0896(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bIsBigDino : 1;                                          // 0x0896(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDeathUseRagdoll : 1;                                    // 0x0896(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanBeCarried : 1;                                       // 0x0896(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanNotifyTeamAggroAI : 1;                          // 0x0896(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDamageNotifyTeamAggroAI : 1;                            // 0x0896(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bUseBP_OverrideCameraTargetOriginLocation : 1;           // 0x0897(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetOverrideCameraInterpSpeed : 1;                  // 0x0897(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRecentlyUpdateIk : 1;                                   // 0x0897(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bIKEnabled : 1;                                          // 0x0897(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bIsCarried : 1;                                          // 0x0897(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bIsCarriedAsPassenger : 1;                               // 0x0897(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bUseBPPreventFallDamage : 1;                             // 0x0897(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPNotifyIsDamageCauserOfAddedBuff : 1;               // 0x0897(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventProjectileAttachment : 1;                        // 0x0898(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_1HT2[0x7];                                   // 0x0899(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              ImmobilizationActor;                                     // 0x08A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bForceIKOnDedicatedServer : 1;                           // 0x08A8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bIgnoreAllImmobilizationTraps : 1;                       // 0x08A8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceTriggerIgnoredTraps : 1;                           // 0x08A8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsImmobilized : 1;                                      // 0x08A8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, NoDestructor
		bool                                                       bCanIgnoreWater : 1;                                     // 0x08A8(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, NoDestructor
		bool                                                       bIsDead : 1;                                             // 0x08A8(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, Net, EditConst, SaveGame, RepNotify, NoDestructor
		bool                                                       ReplicateAllBones : 1;                                   // 0x08A8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       AutoStopReplicationWhenSleeping : 1;                     // 0x08A8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bCanDrag : 1;                                            // 0x08A9(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bCanBeDragged : 1;                                       // 0x08A9(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUsesRunningAnimation : 1;                               // 0x08A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceNetDidLand : 1;                                    // 0x08A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventSimpleIK : 1;                                    // 0x08A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyAllowRunningWhileFlying : 1;                        // 0x08A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOrbitCamera : 1;                                        // 0x08A9(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       UnknownData_LPEA : 1;                                    // 0x08A9(0x0001) BIT_FIELD (PADDING)
		bool                                                       UnknownData_B5SV : 7;                                    // 0x08AA(0x0001) BIT_FIELD (PADDING)
		bool                                                       bDraggedFromExtremitiesOnly : 1;                         // 0x08AA(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bEnableIK : 1;                                           // 0x08AB(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bOnlyPlayPoopAnimWhileWalking : 1;                       // 0x08AB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBlueprintAnimNotifyCustomEvent : 1;                  // 0x08AB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNoDamageImpulse : 1;                                    // 0x08AB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventImmobilization : 1;                              // 0x08AB(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_0TB2[0x4];                                   // 0x08AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       UnknownData_L0S3 : 1;                                    // 0x08B0(0x0001) BIT_FIELD (PADDING)
		bool                                                       bSleepingUseRagdoll : 1;                                 // 0x08B0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDediForceUnregisterSKMesh : 1;                          // 0x08B0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bReadyToPoop : 1;                                        // 0x08B0(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       bHasDynamicBase : 1;                                     // 0x08B0(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       UnknownData_PN91 : 3;                                    // 0x08B0(0x0001) BIT_FIELD (PADDING)
		bool                                                       UnknownData_CDE7 : 1;                                    // 0x08B1(0x0001) BIT_FIELD (PADDING)
		bool                                                       bDieIfLeftWater : 1;                                     // 0x08B1(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bIsAmphibious : 1;                                       // 0x08B1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseAmphibiousTargeting : 1;                             // 0x08B1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsWaterDino : 1;                                        // 0x08B1(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor
		bool                                                       bIsFlyerDino : 1;                                        // 0x08B1(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreTargetingCarnivores : 1;                          // 0x08B1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_JFRK : 1;                                    // 0x08B1(0x0001) BIT_FIELD (PADDING)
		bool                                                       UnknownData_NDWN : 1;                                    // 0x08B2(0x0001) BIT_FIELD (PADDING)
		bool                                                       bIsPlayingLowHealthAnim : 1;                             // 0x08B2(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       bAllowCharacterPainting : 1;                             // 0x08B2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTickStatusComponent : 1;                                // 0x08B2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_FCS1 : 1;                                    // 0x08B2(0x0001) BIT_FIELD (PADDING)
		bool                                                       bDontActuallyEmitPoop : 1;                               // 0x08B2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPHUDOverideBuffProgressBar : 1;                        // 0x08B2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowRunningWhileSwimming : 1;                          // 0x08B2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPNotifyBumpedByPawn : 1;                            // 0x08B3(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPNotifyBumpedPawn : 1;                              // 0x08B3(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAdjustDamage : 1;                                  // 0x08B3(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_1ENF : 5;                                    // 0x08B3(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUseBPTimerServer : 1;                                   // 0x08B4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPTimerNonDedicated : 1;                             // 0x08B4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTriggerBPStasis : 1;                                    // 0x08B4(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPSetCharacterMeshseMaterialScalarParamValue : 1;    // 0x08B4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_9ZJL[0x3];                                   // 0x08B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BPTimerServerMin;                                        // 0x08B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BPTimerServerMax;                                        // 0x08BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BPTimerNonDedicatedMin;                                  // 0x08C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BPTimerNonDedicatedMax;                                  // 0x08C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     NextBPTimerServer;                                       // 0x08C8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		double                                                     NextBPTimerNonDedicated;                                 // 0x08D0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsMounted : 1;                                          // 0x08D8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bPreventTargetingByTurrets : 1;                          // 0x08D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDelayFootstepsUnderMinInterval : 1;                     // 0x08D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSleepingDisableIK : 1;                                  // 0x08D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRagdollRetainAnimations : 1;                            // 0x08D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAddedAttachments : 1;                              // 0x08D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanPlayLandingAnim : 1;                                 // 0x08D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyHasRunningAnimationWhenWalking : 1;                 // 0x08D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_EPQF : 1;                                    // 0x08D9(0x0001) BIT_FIELD (PADDING)
		bool                                                       bPreventTargetingAndMovement : 1;                        // 0x08D9(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventMovement : 1;                                    // 0x08D9(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_9COV : 1;                                    // 0x08D9(0x0001) BIT_FIELD (PADDING)
		bool                                                       bBPPreventInputType : 1;                                 // 0x08D9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForcePreventAllInput : 1;                               // 0x08D9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventAllBuffs : 1;                                    // 0x08D9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       LastIsInsideVaccumSealedCube : 1;                        // 0x08D9(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       bPreventJump : 1;                                        // 0x08DA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPreventStasis : 1;                                 // 0x08DA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDestroyOnStasis : 1;                                    // 0x08DA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPreSerializeSaveGame : 1;                          // 0x08DA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPostLoadedFromSaveGame : 1;                        // 0x08DA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseHeavyCombatMusic : 1;                                // 0x08DA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_SMVO : 1;                                    // 0x08DA(0x0001) BIT_FIELD (PADDING)
		bool                                                       bBPModifyAllowedViewHitDir : 1;                          // 0x08DA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPLimitPlayerRotation : 1;                              // 0x08DB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPManagedFPVViewLocation : 1;                           // 0x08DB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPCameraRotationFinal : 1;                              // 0x08DB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bServerBPNotifyInventoryItemChangesUseQuantity : 1;      // 0x08DB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bServerBPNotifyInventoryItemChanges : 1;                 // 0x08DB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_E4L6[0x4];                                   // 0x08DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastCausedDamageTime;                                    // 0x08E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsAtMaxInventoryItems : 1;                              // 0x08E8(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       bUseBPOnStaminaDrained : 1;                              // 0x08E8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_WLGH : 1;                                    // 0x08E8(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUseBPGrabDebugSnapshot : 1;                             // 0x08E8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsAttachedOtherCharacter : 1;                           // 0x08E8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bUseBPOnLethalDamage : 1;                                // 0x08E8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPAdjustTorpidityDamage : 1;                         // 0x08E8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPForceCameraStyle : 1;                              // 0x08E8(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPRemovedAsPassenger : 1;                            // 0x08E9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisableFPV : 1;                                         // 0x08E9(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bConsumeZoomInput : 1;                                   // 0x08E9(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_V0X3[0x6];                                   // 0x08EA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      ImmobilizationTrapsToIgnore;                             // 0x08F0(0x0010) Edit, ZeroConstructor
		unsigned char                                              UnknownData_AIMT[0x8];                                   // 0x0900(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class APrimalDinoCharacter>                 CarryingDino;                                            // 0x0908(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                DediOverrideCapsuleCollisionProfileName;                 // 0x0910(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DediOverrideMeshCollisionProfileName;                    // 0x0918(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SnaredFromSocket;                                        // 0x0920(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              DeathDestructionDepositInventoryClass;                   // 0x0928(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DamageNotifyTeamAggroMultiplier;                         // 0x0930(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DamageNotifyTeamAggroRange;                              // 0x0934(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DamageNotifyTeamAggroRangeFalloff;                       // 0x0938(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ReplicatedCurrentHealth;                                 // 0x093C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ReplicatedMaxHealth;                                     // 0x0940(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ReplicatedCurrentTorpor;                                 // 0x0944(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ReplicatedMaxTorpor;                                     // 0x0948(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MLW1[0x4];                                   // 0x094C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APrimalProjectileGrapplingHook*                      LastGrapHookPullingMe;                                   // 0x0950(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       UnknownData_2QML : 2;                                    // 0x0958(0x0001) BIT_FIELD (PADDING)
		bool                                                       bInRagdoll : 1;                                          // 0x0958(0x0001) BIT_FIELD Edit, EditConst, NoDestructor
		bool                                                       bIsNPC : 1;                                              // 0x0958(0x0001) BIT_FIELD Edit, EditConst, NoDestructor
		bool                                                       UnknownData_FN4K : 4;                                    // 0x0958(0x0001) BIT_FIELD (PADDING)
		bool                                                       bIsDraggingWithOffset : 1;                               // 0x0959(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bIsDraggedWithOffset : 1;                                // 0x0959(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bPreventRunningWhileWalking : 1;                         // 0x0959(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanLandOnWater : 1;                                     // 0x0959(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAdjustMoveForward : 1;                             // 0x0959(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAdjustMoveRight : 1;                               // 0x0959(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetGravity : 1;                                    // 0x0959(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowDamageWhenMounted : 1;                             // 0x0959(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnAttachmentReplication : 1;                       // 0x095A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnMovementModeChangedNotify : 1;                   // 0x095A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnAnimPlayedNotify : 1;                            // 0x095A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOverrideCharacterNewFallVelocity : 1;              // 0x095A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBP_OnSetRunningEvent : 1;                            // 0x095A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceTurretFastTargeting : 1;                           // 0x095A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bFlyingOrWaterDinoPreventBackwardsRun : 1;               // 0x095A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOverrideFlyingVelocity : 1;                        // 0x095A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSleepingDisableRagdoll : 1;                             // 0x095B(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
		bool                                                       bDestroyOnStasisWhenDead : 1;                            // 0x095B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventLiveBlinking : 1;                                // 0x095B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_3MFL : 1;                                    // 0x095B(0x0001) BIT_FIELD (PADDING)
		bool                                                       bForceAlwaysUpdateMeshAndCollision : 1;                  // 0x095B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_795S : 3;                                    // 0x095B(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUseBPGetHUDElements : 1;                                // 0x095C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventHurtAnim : 1;                                    // 0x095C(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_IORM[0x3];                                   // 0x095D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AShooterCharacter*                                   LastGrapHookPullingOwner;                                // 0x0960(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bUseBPCanBeBaseForCharacter : 1;                         // 0x0968(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanBaseOnCharacter : 1;                            // 0x0968(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnLanded : 1;                                      // 0x0968(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEnableMoveCollapsing : 1;                               // 0x0968(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBP_ForceAllowBuffClasses : 1;                        // 0x0968(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_0YWV[0x3];                                   // 0x0969(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             DragOffset;                                              // 0x096C(0x000C) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bUseBPCheckJumpInput : 1;                                // 0x0978(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOverrideHurtAnim : 1;                              // 0x0978(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOverrideDamageCauserHitMarker : 1;                 // 0x0978(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsSkinned : 1;                                          // 0x0978(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor
		bool                                                       bUseBPAdjustImpulseFromDamage : 1;                       // 0x0978(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAdjustCharacterMovementImpulse : 1;                // 0x0978(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPModifyFOVInterpSpeed : 1;                          // 0x0978(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bVerifyBasingForSaddleStructures : 1;                    // 0x0978(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBP_OverrideTerminalVelocity : 1;                     // 0x0979(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseBP_ShouldForceDisableTPVCameraInterpolation : 1;     // 0x0979(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAllowPlayMontage : 1;                              // 0x0979(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventPerPixelPainting : 1;                            // 0x0979(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPItemSlotOverrides : 1;                             // 0x0979(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_JV0L[0xE];                                   // 0x097A(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastIkUpdateTime;                                        // 0x0988(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XJUZ[0x24];                                  // 0x0990(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DraggedBoneIndex;                                        // 0x09B4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    customBitFlags;                                          // 0x09B8(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      RunningSpeedModifier;                                    // 0x09BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_R5L2[0x10];                                  // 0x09C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        DeathAnim;                                               // 0x09D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           DeathSound;                                              // 0x09D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           RunLoopSound;                                            // 0x09E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           RunStopSound;                                            // 0x09E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class USoundCue*>                                   FootStepSoundsPhysMat;                                   // 0x09F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class USoundCue*>                                   LandedSoundsPhysMat;                                     // 0x0A00(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                MeshRootSocketName;                                      // 0x0A10(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UF90[0x8];                                   // 0x0A18(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxFallSpeed;                                            // 0x0A20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FallDamageMultiplier;                                    // 0x0A24(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAudioComponent*                                     RunLoopAC;                                               // 0x0A28(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		struct FConstraintInstance                                 DraggingConstraint;                                      // 0x0A30(0x0160) ContainsInstancedReference
		unsigned char                                              UnknownData_2GQT[0x8];                                   // 0x0B90(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APrimalStructureExplosiveTransGPS*                   CurrentTransponder;                                      // 0x0B98(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Z8LL[0x4];                                   // 0x0BA0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ServerTargetCarriedYaw;                                  // 0x0BA4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundBase*                                          NetDynamicMusicSound;                                    // 0x0BA8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class APrimalDinoCharacter>                 MountedDino;                                             // 0x0BB0(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		float                                                      MountedDinoTime;                                         // 0x0BB8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OC8A[0x2C];                                  // 0x0BBC(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               LastBasedMovementActorRef;                               // 0x0BE8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      GrabWeightThreshold;                                     // 0x0BF0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DragWeight;                                              // 0x0BF4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              DescriptiveName;                                         // 0x0BF8(0x0010) Edit, ZeroConstructor
		TArray<struct FVector_NetQuantize>                         ReplicatedRagdollPositions;                              // 0x0C08(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected
		TArray<struct FRotator_NetQuantize>                        ReplicatedRagdollRotations;                              // 0x0C18(0x0010) Net, ZeroConstructor, Transient, Protected
		unsigned char                                              UnknownData_3Z4Z[0x50];                                  // 0x0C28(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      KillXPBase;                                              // 0x0C78(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_C7H9[0x14];                                  // 0x0C7C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RagdollReplicationInterval;                              // 0x0C90(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9S16[0x4];                                   // 0x0C94(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FBoneDamageAdjuster>                         BoneDamageAdjusters;                                     // 0x0C98(0x0010) Edit, ZeroConstructor
		float                                                      ClientRotationInterpSpeed;                               // 0x0CA8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ClientLocationInterpSpeed;                               // 0x0CAC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxDragMovementSpeed;                                    // 0x0CB0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            CurrentAimRot;                                           // 0x0CB4(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             CurrentRootLoc;                                          // 0x0CC0(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HC29[0x14];                                  // 0x0CCC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPrimalCharacterStatusComponent*                     MyCharacterStatusComponent;                              // 0x0CE0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X4FO[0x8];                                   // 0x0CE8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPrimalInventoryComponent*                           MyInventoryComponent;                                    // 0x0CF0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		class UAnimMontage*                                        SyncedMontage;                                           // 0x0CF8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WZN0[0xC];                                   // 0x0D00(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MontageSyncInterval;                                     // 0x0D0C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     LastRunningTime;                                         // 0x0D10(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             TPVCameraOffset;                                         // 0x0D18(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             TPVCameraOffsetMultiplier;                               // 0x0D24(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             TPVCameraOrgOffset;                                      // 0x0D30(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LandedSoundMaxRange;                                     // 0x0D3C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FallingDamageHealthScaleBase;                            // 0x0D40(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FootstepsMaxRange;                                       // 0x0D44(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinTimeBetweenFootsteps;                                 // 0x0D48(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3DV6[0xC];                                   // 0x0D4C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinTimeBetweenFootstepsRunning;                          // 0x0D58(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SEH9[0x4];                                   // 0x0D5C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAnimMontage*>                                AnimationsPreventInput;                                  // 0x0D60(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              DeathHarvestingComponent;                                // 0x0D70(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UPrimalHarvestingComponent*                          MyDeathHarvestingComponent;                              // 0x0D78(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WQMQ[0x18];                                  // 0x0D80(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AController>                          LastDamageEventInstigator;                               // 0x0D98(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FTW2[0x20];                                  // 0x0DA0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EMeshComponentUpdateFlag                                   PreDragComponentUpdateFlag;                              // 0x0DC0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		EShooterPhysMaterialType                                   TargetableDamageFXDefaultPhysMaterial;                   // 0x0DC1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DZRI[0x6];                                   // 0x0DC2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        PoopAnimation;                                           // 0x0DC8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     CorpseDestructionTime;                                   // 0x0DD0(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		bool                                                       bIsHost;                                                 // 0x0DD8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8ZQ2[0x3];                                   // 0x0DD9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CorpseLifespan;                                          // 0x0DDC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TPVStructurePlacingHeightMultiplier;                     // 0x0DE0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CorpseFadeAwayTime;                                      // 0x0DE4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RagdollDeathImpulseScaler;                               // 0x0DE8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_C8RS[0x4];                                   // 0x0DEC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           PoopSound;                                               // 0x0DF0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BaseTargetingDesirability;                               // 0x0DF8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DeadBaseTargetingDesirability;                           // 0x0DFC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_S1CZ[0xC];                                   // 0x0E00(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OrbitCamZoom;                                            // 0x0E0C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      OrbitCamZoomStepSize;                                    // 0x0E10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      OrbitCamMinZoomLevel;                                    // 0x0E14(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      OrbitCamMaxZoomLevel;                                    // 0x0E18(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q9ZK[0x2C];                                  // 0x0E1C(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxCursorHUDDistance;                                    // 0x0E48(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AddForwardVelocityOnJump;                                // 0x0E4C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             DeathActorTargetingOffset;                               // 0x0E50(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SocketOverrideTargetingLocation;                         // 0x0E5C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_E7F5[0x24];                                  // 0x0E64(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastTimeSubmerged;                                       // 0x0E88(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_T9EA[0x10];                                  // 0x0E90(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FootPhysicalSurfaceCheckInterval;                        // 0x0EA0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6Q0B[0xC];                                   // 0x0EA4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class APrimalCharacter>                     LastAttackedNearbyPlayer;                                // 0x0EB0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LastAttackedNearbyPlayerTime;                            // 0x0EB8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_589R[0x18];                                  // 0x0EBC(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RagdollImpactDamageVelocityScale;                        // 0x0ED4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RagdollImpactDamageMinDecelerationSpeed;                 // 0x0ED8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StartFallingImpactRagdollTimeInterval;                   // 0x0EDC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6CSH[0x30];                                  // 0x0EE0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           EnteredSwimmingSound;                                    // 0x0F10(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           EnteredSleepingSound;                                    // 0x0F18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           LeftSleepingSound;                                       // 0x0F20(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HV6L[0x30];                                  // 0x0F28(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CorpseDraggedDecayRate;                                  // 0x0F58(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PoopAltItemChance;                                       // 0x0F5C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              PoopAltItemClass;                                        // 0x0F60(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      DefaultBuffs;                                            // 0x0F68(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UTexture2D*                                          PoopIcon;                                                // 0x0F78(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RunningMaxDesiredRotDelta;                               // 0x0F80(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VR3M[0x4];                                   // 0x0F84(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     CorpseDestructionTimer;                                  // 0x0F88(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		double                                                     LastSkinnedTime;                                         // 0x0F90(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_D4OJ[0x8];                                   // 0x0F98(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnDied;                                                  // 0x0FA0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnNotifyDamage;                                          // 0x0FB0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnSleepStateChanged;                                     // 0x0FC0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             NotifyLevelUp;                                           // 0x0FD0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             NotifyUnstasis;                                          // 0x0FE0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             NotifyStasis;                                            // 0x0FF0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_DQPR[0x10];                                  // 0x1000(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastTimeInSwimming;                                      // 0x1010(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EIZN[0x8];                                   // 0x1018(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDefaultTextureParamOverride>                DefaultNoItemTextureParamOverrides;                      // 0x1020(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_KYN2[0x10];                                  // 0x1030(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStructurePaintingComponent*                         PaintingComponent;                                       // 0x1040(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, RepNotify, NoDestructor
		float                                                      ExtraMaxSpeedModifier;                                   // 0x1048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ExtraRotationRateModifier;                               // 0x104C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TamedDinoCallOutRange;                                   // 0x1050(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_R9ZM[0xC];                                   // 0x1054(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             TargetPathfindingLocationOffset;                         // 0x1060(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_J3HH[0x4];                                   // 0x106C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastTookDamageTime;                                      // 0x1070(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ExtraReceiveDamageMultiplier;                            // 0x1078(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ExtraMeleeDamageMultiplier;                              // 0x107C(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RAQ2[0x18];                                  // 0x1080(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DamageTheMeleeDamageCauserPercent;                       // 0x1098(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DurabilityDegrateTheMeleeDamageCauserPercent;            // 0x109C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              DamageTheMeleeDamageCauserDamageType;                    // 0x10A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              TribeGroupInventoryRank;                                 // 0x10A8(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RDFJ[0x3];                                   // 0x10A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CharacterDamageImpulseMultiplier;                        // 0x10AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GL3D[0x18];                                  // 0x10B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxRagdollDeathVelocityImpulse;                          // 0x10C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ClientRotationInterpSpeedMultiplierGround;               // 0x10CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GlideGravityScaleMultiplier;                             // 0x10D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GlideMaxCarriedWeight;                                   // 0x10D4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6LM8[0x8];                                   // 0x10D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ScaleDeathHarvestHealthyByMaxHealthBase;                 // 0x10E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_E3IK[0x4];                                   // 0x10E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             NotifyInputEvent;                                        // 0x10E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_XS5M[0x10];                                  // 0x10F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RunMinVelocityRotDot;                                    // 0x1108(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7T9E[0x4];                                   // 0x110C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastHitDamageTime;                                       // 0x1110(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bShouldBeInGodMode;                                      // 0x1118(0x0001) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CQ52[0x7];                                   // 0x1119(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MeshingTickCounterMultiplier;                            // 0x1120(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GBTM[0x4];                                   // 0x1124(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      PreventBuffClasses;                                      // 0x1128(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FName>                                        PreventBuffClassesWithTag;                               // 0x1138(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bIgnoreLowGravityDisorientation : 1;                     // 0x1148(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPOnMassTeleportEvent : 1;                           // 0x1148(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBlueprintAnimNotifyCustomState : 1;                  // 0x1148(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventIKWhenNotWalking : 1;                            // 0x1148(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bIgnoreCorpseDecompositionMultipliers : 1;               // 0x1148(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bInterpHealthDamageMaterialOverlayAlpha : 1;             // 0x1148(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bSuppressPlayerKillNotification : 1;                     // 0x1148(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowCorpseDestructionWithPreventSaving : 1;            // 0x1148(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bPreventInventoryAccess : 1;                             // 0x1149(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseGetOverrideSocket : 1;                               // 0x1149(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bAllowBPNewDoorInteractionDrawHUD : 1;                   // 0x1149(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bJumpOnRelease : 1;                                      // 0x1149(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bAllowMultiUseByRemoteDino : 1;                          // 0x1149(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPOverrideJumpZModifier : 1;                         // 0x1149(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseZeroGravityWander : 1;                               // 0x1149(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPPreventNotifySound : 1;                            // 0x1149(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBP_ModifyInputAcceleration : 1;                      // 0x114A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBP_ModifySavedMoveAcceleration_PreRep : 1;           // 0x114A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBP_ModifySavedMoveAcceleration_PostRep : 1;          // 0x114A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceSimpleTeleportFade : 1;                            // 0x114A(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
		bool                                                       bUseBPGetArmorDurabilityDecreaseMultiplier : 1;          // 0x114A(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPShieldBlock : 1;                                   // 0x114A(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bHideFromScans : 1;                                      // 0x114A(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_YUMB[0x1];                                   // 0x114B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ControlledInventoryAccessDistanceOffset;                 // 0x114C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FScriptMulticastDelegate                             OnOrbitCameraViewChange;                                 // 0x1150(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		float                                                      AdditionalMaxUseDistance;                                // 0x1160(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VW7U[0xC];                                   // 0x1164(0x000C) MISSED OFFSET (PADDING)

	public:
		void ZoomOut();
		void ZoomIn();
		bool UseCenteredTPVCamera();
		void UpdateTickSetting();
		void UpdateSwimmingState();
		bool UpdateHasBuffPreSerialize();
		void TurnAtRate(float val);
		void TryPoop();
		void TryGiveDefaultWeapon();
		void TickMovementComponent(float DeltaTime);
		void TempDampenInputAcceleration();
		float TakeDamage(float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		void StopAnimEx(class UAnimMontage* AnimMontage, bool bReplicate, bool bReplicateToOwner, float BlendOutTime);
		void STATIC_StaticRemoveCharacterSnapshot(class UPrimalItem* Item, class AActor* From);
		int32_t STATIC_StaticGetSnapshotPoseCount(class UPrimalItem* Item);
		struct FPrimalSnapshotPose STATIC_StaticGetSnapshotPose(class UPrimalItem* Item, int32_t PoseIndex);
		void STATIC_StaticApplyCharacterSnapshotEquipment(class UPrimalInventoryComponent* inventory, class AActor* To);
		void STATIC_StaticApplyCharacterSnapshot(class UPrimalItem* Item, class AActor* To, const struct FVector& Offset, float MaxExtent, int32_t Pose, bool bCollisionOn);
		void StartForceSkelUpdate(float ForTime, bool bForceUpdateMesh, bool bServerOnly);
		void SleepBodies();
		bool ShouldDisableCameraInterpolation();
		bool ShouldDealDamageTo(class APrimalCharacter* OtherCharacter, bool bAllowDamageToSelf, bool bAllowDamageToTribe, bool bAllowDamageToAlliedTribes);
		void SetSleeping(bool bSleeping, bool bUseRagdollLocationOffset);
		void SetMyInventoryComponent(class UPrimalInventoryComponent* TheInventoryComponent);
		void SetLastCausedDamageTime(double lastCausedDamageTimeValue);
		void SetEnableIK(bool bEnable);
		void SetCharacterMeshesMaterialScalarParamValue(const class FName& ParamName, float Value);
		void SetBoundsScale(float NewScale);
		void ServerTryPoop();
		void ServerSetRunning(bool bNewRunning);
		void ServerRequestDrag();
		void ServerGiveDefaultWeapon();
		void ServerDinoOrder(class APrimalDinoCharacter* aDino, EDinoTamedOrder OrderType, class AActor* Target);
		void ServerCaptureDermis(class APrimalCharacter* Target);
		void ServerCallStayOne(class APrimalDinoCharacter* ForDinoChar);
		void ServerCallStay();
		void ServerCallSetAggressive();
		void ServerCallPassive();
		void ServerCallNeutral();
		void ServerCallMoveTo(const struct FVector& MoveToLoc);
		void ServerCallLandFlyerOne(class APrimalDinoCharacter* ForDinoChar);
		void ServerCallFollowOne(class APrimalDinoCharacter* ForDinoChar);
		void ServerCallFollowDistanceCycleOne(class APrimalDinoCharacter* ForDinoChar);
		void ServerCallFollow();
		void ServerCallAttackTarget(class AActor* TheTarget);
		void ServerCallAggressive();
		void RemoveAllJumpDeactivatedBuffs(class APrimalBuff* IgnoredBuff);
		void PrimalCharacterSleepStateChanged__DelegateSignature(class APrimalCharacter* forCharacter, bool bIsSleeping);
		void PrimalCharacterNotifyUnstasis__DelegateSignature(class APrimalCharacter* ForPrimalCharacter);
		void PrimalCharacterNotifyStasis__DelegateSignature(class APrimalCharacter* ForPrimalCharacter);
		void PrimalCharacterNotifyLevelUp__DelegateSignature(int32_t ExtraCharacterLevel);
		void PrimalCharacterNotifyDamage__DelegateSignature(float DamageAmount, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		void PrimalCharacterInputNotify__DelegateSignature(class APrimalCharacter* ForPrimalCharacter, EPrimalCharacterInputType inputType);
		void PrimalCharacterDied__DelegateSignature(class APrimalCharacter* DiedCharacter);
		bool PreventsTargeting(class AActor* ByActor);
		bool PreventNotifySound(class USoundBase* SoundIn);
		bool PreventInputType(EPrimalCharacterInputType inputType);
		bool PreventInputDoesOffset();
		bool Poop(bool bForcePoop);
		void PlayHurtAnim(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath);
		void PlayHitEffectRadial(float DamageTaken, const struct FRadialDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
		void PlayHitEffectPoint(float DamageTaken, const struct FPointDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
		void PlayHitEffectGeneric(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
		class FString PlayerCommand(const class FString& TheCommand);
		void PlayDyingRadial(float KillingDamage, const struct FRadialDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
		void PlayDyingPoint(float KillingDamage, const struct FPointDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
		void PlayDyingGeneric(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
		float PlayAnimEx(class UAnimMontage* AnimMontage, float InPlayRate, const class FName& StartSectionName, bool bReplicate, bool bReplicateToOwner, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer, bool bForceKeepSynced, float BlendInTime, float BlendOutTime);
		void OverrideCameraTargetOriginLocation(struct FVector* OutOverrideOrigin, const class FName& WithCameraStyle);
		void OverrideCameraInterpSpeed(float DefaultTPVCameraSpeedInterpMultiplier, float DefaultTPVOffsetInterpSpeed, float* TPVCameraSpeedInterpMultiplier, float* TPVOffsetInterpSpeed);
		void OrbitCamToggle();
		void OrbitCamOn();
		void OrbitCamOff();
		void OnStopRunning();
		void OnStopJump();
		void OnStopFire(bool bFromGamepadRight);
		void OnStopAltFire(bool bFromGamepad);
		void OnStartRunning();
		void OnStartJump();
		void OnStartFire(bool bFromGamepadRight);
		void OnStartAltFire(bool bFromGamepad);
		void OnRunToggleReleased();
		void OnRunTogglePressed();
		void OnRunToggle();
		void OnRep_RagdollPositions();
		void OnRep_PaintingComponent();
		void OnRep_MountedDino();
		void OnRep_IsSleeping();
		void OnRep_IsDead();
		void OnOrbitCameraViewChange__DelegateSignature(bool bEnabled);
		void OnMassTeleportEvent(EMassTeleportState EventState, class APrimalCharacter* TeleportInitiatedByChar);
		void OnEndDrag();
		void OnDetachedFromCharacter(class APrimalCharacter* ACharacter, int32_t OverrideDirection);
		void OnBeginDrag(class APrimalCharacter* Dragged, int32_t BoneIndex, bool bWithGrapHook);
		void OnAttachedToCharacter();
		void OnAltFireReleased();
		void OnAltFirePressed();
		void NetUpdateTribeName(const class FString& NewTribeName);
		void NetStopAllAnimMontage();
		void NetSetMovementModeSimulatedInternal(EMovementMode NewMovementMode);
		void NetSetCharacterMovementVelocity(bool bSetNewVelocity, const struct FVector& NewVelocity, bool bSetNewMovementMode, EMovementMode NewMovementMode);
		void NetPlaySoundOnCharacter(class USoundBase* SoundToPlay, bool bPlayOnOwner);
		void NetOnJumped();
		void NetForceUpdateAimedCharacters(const struct FVector& StartLoc, const struct FVector& EndLoc, class AActor* IgnoreActor, bool bForceUpdateIgnoreActor, float TraceRadius);
		void NetDidLand();
		void NetAddCharacterMovementImpulse(const struct FVector& Impulse, bool bVelChange, float ImpulseExponent, bool bSetNewMovementMode, EMovementMode NewMovementMode, bool bOverrideMaxImpulseZ);
		void NativeSimulateHair(TArray<struct FVector>* CurrentPos, TArray<struct FVector>* LastPos, TArray<struct FVector>* RestPos, TArray<struct FVector>* PivotPos, TArray<float>* RestDistance, const struct FVector& HairSocketLoc, const struct FRotator& HairSocketRot, const struct FVector& ChestSocketLoc, const struct FRotator& ChestSocketRot, float DeltaTime, float Damping, float DampingFrontModifier, float DampingBack, float InWater, float HairWetness, float DragForce, float HairScale, float SpringForce, float SpringForceFrontModifier, float SpringForceBack, float GravityForce, const struct FVector& ShoulderLCollisionOffset, float ShoulderLCollisionRadius, const struct FVector& ShoulderRCollisionOffset, float ShoulderRCollisionRadius, const struct FVector& HeadHairCollisionOffset, float HeadHairCollisionRadius, const struct FVector& NeckHairCollisionOffset, float NeckHairCollisionRadius, float MaxDistanceToRestPos, const struct FTransform& LastHeadTransform, bool bPosAsPivot, bool bCollideMiddle, bool bCollideWithNeck);
		void MoveUp(float val);
		void MoveRight(float val);
		void MoveForward(float val);
		void ModifyStasisComponentRadius(float Delta);
		void LookUpAtRate(float val);
		void LocalUnpossessed();
		int32_t LevelUpPlayerAddedStat(EPrimalCharacterStatusValue StatToLevel, int32_t NumLevels, class AShooterPlayerController* ForPlayer);
		bool IsWildSlow();
		bool IsWatered();
		bool IsValidForCombatMusic();
		bool IsSubmerged(bool bDontCheckSwimming, bool bUseFullThreshold, bool bForceCheck, bool bFromVolumeChange);
		bool IsSitting(bool bIgnoreLockedToSeat);
		bool IsRunning();
		bool IsRider();
		bool IsProneOrSitting(bool bIgnoreLockedToSeat);
		bool IsPrimalCharWalking();
		bool IsPrimalCharSwimming();
		bool IsPrimalCharFriendly(class APrimalCharacter* primalChar);
		bool IsPrimalCharFlying();
		bool IsPrimalCharFalling();
		bool IsOwningClient();
		bool IsOnSeatingStructure();
		bool IsMoving();
		bool IsMontagePlaying(class UAnimMontage* AnimMontage, float TimeFromEndToConsiderFinished);
		bool IsMeshGameplayRelevant();
		bool IsInvincible();
		bool IsInVacuumSealedSpace();
		bool IsInStatusState(EPrimalCharacterStatusState StatusStateType);
		bool IsHostileTo(class APrimalCharacter* OtherCharacter, bool ignoreDead);
		bool IsHostileOrAggressiveTo(class APrimalCharacter* OtherCharacter);
		bool IsGameInputAllowed();
		bool IsFirstPerson();
		bool IsDeadOrDying();
		bool IsDamageOccludedByStructures(class AActor* DamageCauser);
		bool IsCharacterHardAttached(bool bIgnoreRiding, bool bIgnoreCarried);
		bool IsBossDino();
		bool IsBlockedByShield(const struct FHitResult& HitInfo, const struct FVector& ShotDirection, bool bBlockAllPointDamage);
		bool IsBeingDestroyed();
		bool IsBaby();
		bool IsAttachedToSomething();
		bool IsAlliedWithOtherTeam(int32_t OtherTeamID);
		bool IsAlive();
		void Immobilize(bool bImmobilize, class AActor* UsingActor, bool bImmobilizeFalling, bool bPreventDismount);
		void HurtMe(int32_t HowMuch);
		bool HasCryoSickness();
		bool HasBuffWithCustomTags(TArray<class FName> customTags);
		bool HasBuffWithCustomTag(const class FName& BuffCustomTag);
		bool HasBuff(class UClass* BuffClass, bool useExactMatch);
		bool HasAnyBuffWithDisabledWeaponTag(const class FName& Tag, class APrimalBuff** FoundBuff);
		bool GiveKillExperience();
		struct FVector GetTPVCameraOffsetMultiplier();
		struct FVector GetTPVCameraOffset();
		struct FVector GetSocketLocation(const class FName& SocketName);
		class UActorComponent* STATIC_GetSnapshotComponent(class AActor* From, const class FName& Tag);
		class FString GetShortName();
		float GetRunningSpeedModifier(bool bIsForDefaultSpeed);
		ENetRole GetRole();
		EMovementMode GetPrimalCharMovementMode();
		EPhysicalSurface GetPhysMatTypeFromHits(TArray<struct FHitResult> FromHits);
		EPhysicalSurface GetPhysMatTypeFromHit(const struct FHitResult& FromHit);
		class UPaintingTexture* GetPaintingTexture();
		class UMeshComponent* GetPaintingMesh();
		class FName GetOverrideSocket(const class FName& From);
		class UAnimMontage* GetOverridenMontage(class UAnimMontage* AnimMontage);
		class UAnimSequence* GetOverridenAnimSequence(class UAnimSequence* AnimSeq);
		class ABiomeZoneVolume* GetMyBiomeZoneVolume();
		float GetMoveAnimRate();
		float GetMaxHealth();
		double GetLastCausedDamageTime();
		float GetKillXP();
		struct FRotator GetInterpolatedRotation_NonFlattened();
		struct FVector GetInputDirectionVector(bool bRelativeToViewDirection);
		float GetImmersionDepth();
		float GetHealthPercentage();
		float GetHealth();
		class UClass* GetGrappledBuffClassOverride();
		EPhysicalSurface GetFootPhysicalSurfaceType(bool bForce, bool bIsForFootstepParticles);
		struct FVector GetFloatingHUDLocation();
		float GetFallAcceleration();
		float GetDragWeight(class APrimalCharacter* ForDragger);
		TArray<class FString> GetDetailedDescription(const class FString& IndentPrefix);
		class FString GetDescriptiveName();
		float GetDefaultMovementSpeed();
		class FString GetDebugInfoString();
		void GetCharacterViewLocationAndDirection(struct FVector* ViewLocation, struct FVector* ViewDirection, bool* bFromCrosshairOrCamera, float FallbackAngleOffsetDegrees);
		class UPrimalCharacterStatusComponent* GetCharacterStatusComponent();
		void GetCharactersGrappledToMe(TArray<class APrimalCharacter*>* GrappledCharsArray);
		struct FVector GetCapsuleTopLocation();
		struct FVector GetCapsuleBottomLocation();
		class APrimalBuff* GetBuffWithCustomTag(const class FName& BuffCustomTag);
		int32_t GetBuffStackCount(class UClass* BuffClass, bool useExactMatch);
		void GetBuffs(TArray<class APrimalBuff*>* TheBuffs);
		class APrimalBuff* GetBuff(class UClass* BuffClass);
		float GetBaseStatusValue(EPrimalCharacterStatusValue StatusValueType);
		float GetBaseDragWeight();
		class APrimalDinoCharacter* GetBasedOrSeatingOnDino();
		class APrimalDinoCharacter* GetBasedOnDino();
		class UPrimitiveComponent* GetBasedMovementComponent();
		class APrimalStructureExplosive* GetAttachedExplosive();
		void GetAllBuffs(TArray<class APrimalBuff*>* AllBuffs);
		bool GetAllAttachedChars(TArray<class APrimalCharacter*>* AttachedCharsArray, bool bIncludeSelf, bool bIncludeBased, bool bIncludePassengers, bool bIncludeCarried);
		struct FRotator GetAimOffsets(float DeltaTime, struct FRotator* RootRotOffset, float* TheRootYawSpeed, float MaxYawAimClamp, struct FVector* RootLocOffset);
		void GetAimedActor(struct FHitResult* outHitResult, ECollisionChannel CollisionChannel, float MaxDistanceOverride, float CheckRadius, bool bForceUseCameraLocation, bool bForceUpdateAimedActors);
		void STATIC_ForceUpdateCharacter(class UWorld* World, class APrimalCharacter* primalChar);
		void STATIC_ForceUpdateAimedCharacters(class UWorld* World, const struct FVector& StartLoc, const struct FVector& EndLoc, class AActor* IgnoreActor, bool bForceUpdateIgnoreActor, float TraceRadius);
		void ForceTickPoseDelta();
		void ForceRefreshBones();
		void ForceMeshRelevant(float Duration);
		bool ForceAddUnderwaterCharacterStatusValues();
		void FadeOutLoadingMusic();
		void ExecSetSleeping(bool bEnable);
		void ExecSetPawnSleeping(bool bEnable);
		void EndForceSkelUpdate();
		void EndDragCharacter();
		bool EnableTurnToFaceRotation();
		void EnableIK(bool bEnable, bool bForceOnDedicated);
		void EnableBPTimerServer(bool bEnable);
		void EnableBPTimerNonDedicated(bool bEnable);
		void EnableBodiesGravity();
		void EmitPoop();
		void DoSetRagdollPhysics();
		void DoFindGoodSpot(const struct FVector& RagdollLoc, bool bClearCollisionSweep);
		void DoCharacterDetachment(bool bIncludeRiding, bool bIncludeCarrying, class APrimalBuff* BuffToIgnore);
		bool DinoMountOnMe(class APrimalDinoCharacter* DinoCharacter);
		void DidTeleport(const struct FVector& NewLoc, const struct FRotator& newRot, bool bDoCameraFade, const struct FLinearColor& CameraFadeColor);
		void DetachFromOtherCharacter(bool enableMovementAndCollision);
		void DeathHarvestingFadeOut();
		void DeactivateBuffs(class UClass* ForBuffClass, class UPrimalItem* ForInstigatorItem, bool perfectClassMatch);
		class UActorComponent* STATIC_CreateSnapshotComponent(class AActor* For, class UObject* Template, const class FName& Tag, const class FName& Name);
		bool ConsumeProjectileImpact(class AShooterProjectile* theProjectile, const struct FHitResult& HitResult);
		void ClientSyncAnimation(class UAnimMontage* AnimMontage, float PlayRate, float ServerCurrentMontageTime, bool bForceTickPoseAndServerUpdateMesh, float BlendInTime, float BlendOutTime);
		void ClientStopAnimation(class UAnimMontage* AnimMontage, bool bStopOnOwner, float BlendOutTime);
		void ClientRagdollUpdate(TArray<struct FVector_NetQuantize> BoneLocations, const struct FRotator_NetQuantize& TargetRootRotation);
		void ClientPlayAnimation(class UAnimMontage* AnimMontage, float PlayRate, const class FName& StartSectionName, bool bPlayOnOwner, bool bForceTickPoseAndServerUpdateMesh);
		void ClientOrderedMoveTo(const struct FVector& MoveToLoc);
		void ClientOrderedAttackTarget(class AActor* attackTarget);
		void ClientNotifyLevelUp();
		void ClientFailedPoop();
		void ClientEndRagdollUpdate();
		void ClientDidPoop();
		void ClearRidingDinoAsPassenger(bool bFromDino);
		void ClearMountedDino(bool fromMountedDino);
		void ClearControlInputVector();
		void ClearCarryingDino(bool bFromDino, bool bCancelAnyCarryBuffs);
		bool CharacterIsCarriedAsPassenger();
		bool CharacterBuffsPreventFirstPerson();
		void CaptureCharacterSnapshot(class UPrimalItem* Item);
		bool CanMountOnMe(class APrimalDinoCharacter* DinoCharacter);
		bool CanDragCharacter(class APrimalCharacter* Character);
		void CallDrawHUD(class AShooterHUD* HUD);
		void CallDrawFloatingHUD(class AShooterHUD* HUD);
		bool BuffsPreventInventoryAccess();
		void BPTriggerStasisEvent();
		void BPTimerServer();
		void BPTimerNonDedicated();
		bool BPShouldLimitRightDirection();
		bool BPShouldLimitForwardDirection();
		void BPSetCharacterMeshesMaterialScalarParamValue(const class FName& ParamName, float Value);
		void BPRemovedAttachmentsForItem(class UPrimalItem* anItem);
		void BPRemovedAsPassenger(class APrimalCharacter* Character);
		void BPRemoveCharacterSnapshot(class UPrimalItem* Item, class AActor* From);
		bool BPPreventStasis();
		bool BPPreventNotifySound(class USoundBase* SoundIn);
		bool BPPreventInputType(EPrimalCharacterInputType inputType);
		bool BPPreventFirstPerson();
		bool BPPreventFallDamage(const struct FHitResult& HitResult, float FallDamageAmount);
		void BPPreSerializeSaveGame();
		void BPPostLoadedFromSaveGame();
		void BPPlayDying(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
		void BPOverrideUseItemSlot(int32_t ItemSlot);
		void BPOverrideReleaseItemSlot(int32_t ItemSlot);
		float BPOverrideJumpZModifier(float InJumpZModifier);
		bool BPOverrideInventoryAccessInput();
		class UAnimMontage* BPOverrideHurtAnim(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath, bool bIsPointDamage, const struct FVector& PointDamageLocation, const struct FVector& PointDamageHitNormal);
		void BPOverrideHeldItemSlot(int32_t ItemSlot);
		bool BPOverrideFPVViewLocation(class APrimalCharacter* viewingCharacter);
		struct FVector BPOverrideFlyingVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime);
		struct FHitMarkerSettings BPOverrideDamageCauserHitMarker(class AShooterPlayerController* DamageCauserController, bool bHitFriendlyTarget, float PreDamageHealth, float DamageAmount, const struct FDamageEvent& DamageEvent, bool bIsPointDamage, const struct FHitResult& PointDamageHitResult);
		struct FVector BPOverrideCharacterNewFallVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime);
		void BPOnStaminaDrained();
		void BPOnMovementModeChangedNotify(EMovementMode PrevMovementMode, unsigned char PreviousCustomMode);
		void BPOnMassTeleportEvent(EMassTeleportState EventState, class APrimalCharacter* TeleportInitiatedByChar);
		void BPOnLethalDamage(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser, bool* bPreventDeath);
		bool BPOnAttachmentReplication();
		void BPOnAnimPlayedNotify(class UAnimMontage* AnimMontage, float InPlayRate, const class FName& StartSectionName, bool bReplicate, bool bReplicateToOwner, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer);
		void BPNotifyToggleHUD(bool bHudHidden);
		void BPNotifyLevelUp(int32_t ExtraCharacterLevel);
		void BPNotifyInventoryItemChange(bool bIsItemAdd, class UPrimalItem* theItem, bool bEquipItem);
		void BPNotifyDroppedItemPickedUp(class ADroppedItem* itemPickedUp, class APrimalCharacter* PickedUpBy);
		void BPNotifyBumpedPawn(class APrimalCharacter* BumpedPawn);
		void BPNotifyBumpedByPawn(class APrimalCharacter* ByPawn);
		void BPNotifyBPNotifyIsDamageCauserOfAddedBuff(class APrimalBuff* Buff);
		void BPNewDoorInteractionDrawHUD(class AShooterHUD* HUD, const struct FVector2D& DoorDescriptionLoc);
		void BPNetSetMovementMode(EMovementMode NewMovementMode);
		void BPNetSetCharacterMovementVelocity(bool bSetNewVelocity, const struct FVector& NewVelocity, bool bSetNewMovementMode, EMovementMode NewMovementMode);
		void BPNetAddCharacterMovementImpulse(const struct FVector& Impulse, bool bVelChange, float ImpulseExponent, bool bSetNewMovementMode, EMovementMode NewMovementMode, bool bOverrideMaxImpulseZ, bool bApplyToBigPawns);
		float BPModifyViewHitDir(class APrimalCharacter* viewingCharacter, float InViewHitDir);
		struct FVector BPModifyRightDirectionInput(const struct FVector& directionInput);
		float BPModifyFOVInterpSpeed(float FOVInterpSpeedIn);
		float BPModifyFOV(float FOVIn);
		struct FVector BPModifyForwardDirectionInput(const struct FVector& directionInput);
		void BPLocalUnpossessed();
		void BPLocalPossessedBy(class APlayerController* ByController);
		struct FRotator BPLimitPlayerRotation(class APrimalCharacter* viewingCharacter, const struct FRotator& InViewRotation);
		bool BPIsConscious();
		bool BPIsBlockedByShield(const struct FHitResult& HitInfo, const struct FVector& ShotDirection, bool bBlockAllPointDamage);
		bool BPIsBasedOnDynamicActor();
		bool BPHasPlayerController();
		bool BPHandleRightShoulderButton();
		bool BPHandlePoop();
		bool BPHandleLeftShoulderButton();
		TArray<struct FBlueprintVisualLogEntry> BPGrabDebugSnapshot();
		class FString BPGetStatusNameString(EPrimalCharacterStatusValue ValueType);
		void BPGetOverrideCameraInterpSpeed(float DefaultTPVCameraSpeedInterpolationMultiplier, float DefaultTPVOffsetInterpSpeed, float* TPVCameraSpeedInterpolationMultiplier, float* TPVOffsetInterpSpeed);
		bool BPGetIsBuried();
		float BPGetHUDOverrideBuffProgressBarPercent();
		void BPGetHUDElements(class APlayerController* ForPC, TArray<struct FHUDElement>* OutElements);
		float BPGetGravityZScale();
		struct FVector BPGetFPVViewLocation(class APrimalCharacter* viewingCharacter);
		float BPGetExtraMeleeDamageModifier();
		class FString BPGetDebugInfoString();
		float BPGetArmorDurabilityDecreaseMultiplier();
		float BPGetApproachRadius();
		float BPGetAddForwardVelocityOnJump();
		ECameraStyle BPForceCameraStyle(class APrimalCharacter* ForViewTarget);
		void BPCheckJumpInput(bool* bUseCustomErrorMessage, class FString* ErrorMessageToDisplay);
		void BPCharacterUnsleeped();
		void BPCharacterSleeped();
		void BPCharacterDetach();
		bool BPCanNotifyTeamAggroAI(class APrimalDinoCharacter* Dino);
		bool BPCanBeBaseForCharacter(class APawn* Pawn);
		bool BPCanBaseOnCharacter(class APrimalCharacter* BaseCharacter);
		struct FRotator BPCameraRotationFinal(class APrimalCharacter* viewingCharacter, const struct FRotator& InCurrentFinalRot);
		struct FRotator BPCameraBaseOrientation(class APrimalCharacter* viewingCharacter);
		void BPApplyCharacterSnapshot(class UPrimalItem* Item, class AActor* To, const struct FVector& Offset, float MaxExtent, int32_t Pose, bool bCollisionOn);
		void BPAnimNotifyCustomState_End(const class FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotifyState* AnimNotifyObject);
		void BPAnimNotifyCustomState_Begin(const class FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, class UAnimNotifyState* AnimNotifyObject);
		float BPAdjustTorpidityDamage(float DesiredTorpidityDamage, float HealthDamageAmount, class UClass* DamageType);
		struct FVector BPAdjustImpulseFromDamage(const struct FVector& DesiredImpulse, float DamageTaken, const struct FDamageEvent& TheDamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo);
		float BPAdjustDamage(float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo);
		struct FVector BPAdjustCharacterMovementImpulse(const struct FVector& Impulse, bool bVelocityChange, float MassScaleImpulseExponent, bool bOverrideMaxImpulseZ);
		void BPAddedAttachmentsForItem(class UPrimalItem* anItem);
		bool BP_ShouldDisableCameraInterpolation();
		float BP_OverrideTerminalVelocity();
		void BP_OverrideCameraTargetOriginLocation(struct FVector* OutOverrideOrigin, const class FName& WithCameraStyle);
		void BP_OnZoomOut();
		void BP_OnZoomInOrbitCam();
		void BP_OnZoomIn();
		void BP_OnStartCarried(class APrimalDinoCharacter* aDino);
		void BP_OnSetRunning(bool bNewIsRunning);
		void BP_OnSetDeath();
		void BP_OnPaintingComponentInitialized(class UStructurePaintingComponent* PaintingComp);
		void BP_OnJumpReleased();
		void BP_OnJumpPressed();
		void BP_OnEndCarried(bool bFromDino, bool bCancelAnyCarryBuffs);
		void BP_OnCameraStyleChangedNotify(const class FName& NewCameraStyle, const class FName& OldCameraStyle);
		bool BP_ModifySavedMoveAcceleration_PreRep(struct FVector* ModifyClientAccel);
		bool BP_ModifySavedMoveAcceleration_PostRep(struct FVector* ModifyServerAccel);
		void BP_ModifyInputAcceleration(struct FVector* ModifyInputAccel);
		bool BP_IsCharacterHardAttached(bool bIgnoreRiding, bool bIgnoreCarried);
		float BP_GetMaxSpeedModifier();
		bool BP_ForceAllowAddBuff(class UClass* BuffClass);
		bool BP_AnimationPreventsInput();
		void BlueprintAnimNotifyCustomEvent(const class FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject);
		void AttachToOtherCharacter(class APrimalCharacter* characterToAttachTo, const class FName& InSocketName, bool enableMovementAndCollision, EAttachLocation AttachLocation);
		void AttachedToOtherCharacterUpdateWorldLocation(const struct FVector& WorldLocation);
		void ApplyCustomFallDamage(const struct FVector& Location, const struct FVector& Velocity, float FallDamageThreshold);
		bool AllowPlayMontage(class UAnimMontage* AnimMontage);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalDinoCharacter
	 * Size -> 0x1120 (FullSize[0x2290] - InheritedSize[0x1170])
	 */
	class APrimalDinoCharacter : public APrimalCharacter
	{
	public:
		unsigned char                                              UnknownData_OMRG[0x2C];                                  // 0x1170(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               ForcedMasterTarget;                                      // 0x119C(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                MountCharacterSocketName;                                // 0x11A4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class APrimalCharacter>                     MountCharacter;                                          // 0x11AC(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_PJ74[0x4];                                   // 0x11B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             RidingAttackExtraVelocity;                               // 0x11B8(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TUQC[0x4];                                   // 0x11C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        StartChargeAnimation;                                    // 0x11C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UAnimMontage*>                                AttackAnimations;                                        // 0x11D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<float>                                              AttackAnimationWeights;                                  // 0x11E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<float>                                              AttackAnimationsTimeFromEndToConsiderFinished;           // 0x11F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bAttackStopsMovement : 1;                                // 0x1200(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bLocationBasedAttack : 1;                                // 0x1200(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTamedWanderHarvestAllowUsableHarvestingAsWell : 1;      // 0x1200(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPKilledSomethingEvent : 1;                          // 0x1200(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventDinoResetAffinityOnUnsleep : 1;                  // 0x1200(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bKeepInventoryForWakingTame : 1;                         // 0x1200(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_6W8H : 1;                                    // 0x1200(0x0001) BIT_FIELD (PADDING)
		bool                                                       bHadLinkedSupplyCrate : 1;                               // 0x1200(0x0001) BIT_FIELD SaveGame, NoDestructor
		bool                                                       UnknownData_R5F4 : 2;                                    // 0x1201(0x0001) BIT_FIELD (PADDING)
		bool                                                       bHiddenForLocalPassenger : 1;                            // 0x1201(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bRunCheckCarriedTrace : 1;                               // 0x1201(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       CanElevate : 1;                                          // 0x1201(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_S2M2 : 3;                                    // 0x1201(0x0001) BIT_FIELD (PADDING)
		bool                                                       bTamedWanderCorpseHarvesting : 1;                        // 0x1202(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPNotifyStructurePlacedNearby : 1;                   // 0x1202(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanTargetCorpse : 1;                               // 0x1202(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPShouldForceFlee : 1;                               // 0x1202(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_WO4Z : 1;                                    // 0x1202(0x0001) BIT_FIELD (PADDING)
		bool                                                       bForceWanderOverrideNPCZoneManager : 1;                  // 0x1202(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDeprecateDino : 1;                                      // 0x1202(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceFoodItemAutoConsume : 1;                           // 0x1202(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bFlyerAllowFlyingWithExplosive : 1;                      // 0x1203(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceUseDediAttackTiming : 1;                           // 0x1203(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForcePreventExitingWater : 1;                           // 0x1203(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor
		bool                                                       bWakingTameConsumeEntireStack : 1;                       // 0x1203(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		float                                                      ColorizationIntensity;                                   // 0x1204(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowCarryCharacterWithoutRider : 1;                    // 0x1208(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bWildDinoPreventWeight : 1;                              // 0x1208(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDebugMeleeAttacks : 1;                                  // 0x1208(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       bRetainCarriedCharacterOnDismount : 1;                   // 0x1208(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnTamedProcessOrder : 1;                           // 0x1208(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBP_OnTamedOrderReceived : 1;                         // 0x1208(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowAttackWithCryoSickness : 1;                        // 0x1208(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanCryo : 1;                                       // 0x1208(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bWildPreventTeleporting : 1;                             // 0x1209(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPClampMaxHarvestHealth : 1;                         // 0x1209(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceUseAltAimSocketsForTurrets : 1;                    // 0x1209(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPBecameNewBaby : 1;                                 // 0x1209(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTryAlwaysApplyCryoSickness : 1;                         // 0x1209(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPSetSimulatedInterpRollOverride : 1;                // 0x1209(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPSetInitialAimOffsetTargets : 1;                    // 0x1209(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bConsoleIgnoreSafeZonesForCrosshair : 1;                 // 0x1209(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceDrawCrosshairWhenHUDIsHidden : 1;                  // 0x120A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanLand : 1;                                       // 0x120A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_A2CA[0x5];                                   // 0x120B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInterface*>                          FemaleMaterialOverrides;                                 // 0x1210(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bUseBPCheckCanSpawnFromLocation : 1;                     // 0x1220(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_8B96[0x3];                                   // 0x1221(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PaintConsumptionMultiplier;                              // 0x1224(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ChargingBlockedStopTimeThreshold;                        // 0x1228(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BG98[0x4];                                   // 0x122C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        MeleeSwingSockets;                                       // 0x1230(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		int32_t                                                    MeleeDamageAmount;                                       // 0x1240(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MeleeDamageImpulse;                                      // 0x1244(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MeleeSwingRadius;                                        // 0x1248(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_02ZU[0x4];                                   // 0x124C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDinoAttackInfo>                             AttackInfos;                                             // 0x1250(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              CurrentAttackIndex;                                      // 0x1260(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              LastAttackIndex;                                         // 0x1261(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SLQF[0x6];                                   // 0x1262(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              MeleeDamageType;                                         // 0x1268(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              StepActorDamageTypeOverride;                             // 0x1270(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AttackOffset;                                            // 0x1278(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FleeHealthPercentage;                                    // 0x127C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BreakFleeHealthPercentage;                               // 0x1280(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2C2V[0x4];                                   // 0x1284(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              TamerString;                                             // 0x1288(0x0010) BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic
		class FString                                              TamedName;                                               // 0x1298(0x0010) BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic
		TArray<struct FHibernationZoneInfo>                        HibernatedZoneVolumes;                                   // 0x12A8(0x0010) ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic
		struct FVector2D                                           OverlayTooltipPadding;                                   // 0x12B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           OverlayTooltipScale;                                     // 0x12C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              HUDOverlayToolTipWidget;                                 // 0x12C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MyDinoEntry;                                             // 0x12D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             RiderFPVCameraOffset;                                    // 0x12D8(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OTZU[0x24];                                  // 0x12E4(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FinalNPCLevelMultiplier;                                 // 0x1308(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LandingTraceMaxDistance;                                 // 0x130C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FlyingWanderFixedDistanceAmount;                         // 0x1310(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FlyingWanderRandomDistanceAmount;                        // 0x1314(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AcceptableLandingRadius;                                 // 0x1318(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxLandingTime;                                          // 0x131C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GenderSpeedMultipliers[0x2];                             // 0x1320(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ChargeSpeedMultiplier;                                   // 0x1328(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1RU2[0x4];                                   // 0x132C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        ChargingAnim;                                            // 0x1330(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ChargingStaminaPerSecondDrain;                           // 0x1338(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ChargingStopDotTreshold;                                 // 0x133C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GEZV[0x18];                                  // 0x1340(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AShooterCharacter>                    Rider;                                                   // 0x1358(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		TWeakObjectPtr<class AShooterCharacter>                    PreviousRider;                                           // 0x1360(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UClass*                                              SaddleItemClass;                                         // 0x1368(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class FString                                              SaddleSlotNameOverride;                                  // 0x1370(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FSaddlePassengerSeatDefinition>              NoSaddlePassengerSeats;                                  // 0x1380(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TWeakObjectPtr<class APrimalCharacter>                     CarriedCharacter;                                        // 0x1390(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		unsigned char                                              UnknownData_7BYE[0x8];                                   // 0x1398(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        DinoWithPassengerAnim;                                   // 0x13A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        DinoWithDinoPassengerAnim;                               // 0x13A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<TWeakObjectPtr<class APrimalCharacter>>             PassengerPerSeat;                                        // 0x13B0(0x0010) Net, ZeroConstructor, Transient, RepNotify
		TArray<class APrimalCharacter*>                            SavedPassengerPerSeat;                                   // 0x13C0(0x0010) ZeroConstructor, Transient, SaveGame
		unsigned char                                              UnknownData_LDQU[0x10];                                  // 0x13D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastClientCameraRotationServerUpdate;                    // 0x13E0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<class USceneComponent*>                             OverrideTargetComponents;                                // 0x13E8(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference
		float                                                      WhistleTraceOffset;                                      // 0x13F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AOVA[0x10];                                  // 0x13FC(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    LastPlayedAttackAnimation;                               // 0x140C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              AttackIndexOfPlayedAnimation;                            // 0x1410(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_C7B5[0x7];                                   // 0x1411(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDinoBaseLevelWeightEntry>                   DinoBaseLevelWeightEntries;                              // 0x1418(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		unsigned char                                              UnknownData_9XAH[0x70];                                  // 0x1428(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             RidingFirstPersonViewLocationOffset;                     // 0x1498(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsLanding : 1;                                          // 0x14A4(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       bCanCharge : 1;                                          // 0x14A4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCancelInterpolation : 1;                                // 0x14A4(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
		bool                                                       bIsCharging : 1;                                         // 0x14A4(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor
		bool                                                       bChargeDamageStructures : 1;                             // 0x14A4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bReplicatePitchWhileSwimming : 1;                        // 0x14A4(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bIsFlying : 1;                                           // 0x14A4(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, SaveGame, RepNotify, NoDestructor
		bool                                                       bIsWakingTame : 1;                                       // 0x14A4(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
		bool                                                       bAllowRiding : 1;                                        // 0x14A5(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bForceAutoTame : 1;                                      // 0x14A5(0x0001) BIT_FIELD Edit, DisableEditOnTemplate, NoDestructor
		bool                                                       bRiderJumpTogglesFlight : 1;                             // 0x14A5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHasRider : 1;                                           // 0x14A5(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bAllowCarryFlyerDinos : 1;                               // 0x14A5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_ZG23 : 1;                                    // 0x14A5(0x0001) BIT_FIELD (PADDING)
		bool                                                       bFlyerForceNoPitch : 1;                                  // 0x14A5(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bFlyerForceLimitPitch : 1;                               // 0x14A5(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventStasis : 1;                                      // 0x14A6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAutoTameable : 1;                                       // 0x14A6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAlwaysSetTamingTeamOnItemAdd : 1;                       // 0x14A6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_Y55E : 1;                                    // 0x14A6(0x0001) BIT_FIELD (PADDING)
		bool                                                       bCheatForceTameRide : 1;                                 // 0x14A6(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bIsFemale : 1;                                           // 0x14A6(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bRiderUseDirectionalAttackIndex : 1;                     // 0x14A6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanBeTamed : 1;                                         // 0x14A6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTargetingIgnoredByWildDinos : 1;                        // 0x14A7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bTargetingIgnoreWildDinos : 1;                           // 0x14A7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bCanMountOnHumans : 1;                                   // 0x14A7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIKIgnoreSaddleStructures : 1;                           // 0x14A7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAttackTargetWhenLaunched : 1;                           // 0x14A7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanOpenLockedDoors : 1;                                 // 0x14A7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseColorization : 1;                                    // 0x14A7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bMeleeSwingDamageBlockedByStrutures : 1;                 // 0x14A7(0x0001) BIT_FIELD Edit, NoDestructor
		float                                                      BabyChanceOfTwins;                                       // 0x14A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowTargetingCorpses : 1;                              // 0x14AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRiderDontRequireSaddle : 1;                             // 0x14AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowsFishingOnSaddle : 1;                              // 0x14AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanBeOrdered : 1;                                       // 0x14AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverridePlatformStructureLimit : 1;                     // 0x14AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bMeleeAttackHarvetUsableComponents : 1;                  // 0x14AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPlatformSaddleIgnoreRotDotCheck : 1;                    // 0x14AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseInteprolatedVelocity : 1;                            // 0x14AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsCarnivore : 1;                                        // 0x14AD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowRidingInWater : 1;                                 // 0x14AD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsesGender : 1;                                         // 0x14AD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTargetEverything : 1;                                   // 0x14AD(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bTamedWanderHarvestNonUsableHarvesting : 1;              // 0x14AD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEnableTamedWandering : 1;                               // 0x14AD(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, SaveGame, NoDestructor
		bool                                                       bEnableTamedMating : 1;                                  // 0x14AD(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, SaveGame, NoDestructor
		bool                                                       bCollectVictimItems : 1;                                 // 0x14AD(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
		bool                                                       bServerInitializedDino : 1;                              // 0x14AE(0x0001) BIT_FIELD SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       UnknownData_SDBA : 1;                                    // 0x14AE(0x0001) BIT_FIELD (PADDING)
		bool                                                       bHasMateBoost : 1;                                       // 0x14AE(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       UnknownData_G7X7 : 1;                                    // 0x14AE(0x0001) BIT_FIELD (PADDING)
		bool                                                       bTamingHasFood : 1;                                      // 0x14AE(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       bDontWander : 1;                                         // 0x14AE(0x0001) BIT_FIELD Edit, Transient, DisableEditOnInstance, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bAnimIsMoving : 1;                                       // 0x14AE(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       bDoStepDamage : 1;                                       // 0x14AE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventBasingWhenUntamed : 1;                           // 0x14AF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAlwaysAllowBasing : 1;                             // 0x14AF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bChargingRequiresWalking : 1;                            // 0x14AF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseRootLocSwimOffset : 1;                               // 0x14AF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_S176 : 1;                                    // 0x14AF(0x0001) BIT_FIELD (PADDING)
		bool                                                       bDisplaySummonedNotification : 1;                        // 0x14AF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisplayKilledNotification : 1;                          // 0x14AF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetAttackWeight : 1;                               // 0x14AF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		float                                                      BabyGestationSpeed;                                      // 0x14B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bServerForceUpdateDinoGameplayMeshNearPlayer : 1;        // 0x14B4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventAllRiderWeapons : 1;                             // 0x14B4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventAllRiderWeaponsOnReequip : 1;                    // 0x14B4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowDeathAutoGrab : 1;                                 // 0x14B4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSupportWakingTame : 1;                                  // 0x14B4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowAutoUnstasisDestroy : 1;                           // 0x14B4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDebugBaby : 1;                                          // 0x14B4(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bAlwaysUpdateAimOffsetInterpolation : 1;                 // 0x14B4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       WildAmbientHarvestingAnimationServerTickPose : 1;        // 0x14B5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventSleepingTame : 1;                                // 0x14B5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTamedWanderHarvest : 1;                                 // 0x14B5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSimulatedNetLandCheckFloor : 1;                         // 0x14B5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRefreshedColorization : 1;                              // 0x14B5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_SP1B : 3;                                    // 0x14B5(0x0001) BIT_FIELD (PADDING)
		bool                                                       UnknownData_G83K : 3;                                    // 0x14B6(0x0001) BIT_FIELD (PADDING)
		bool                                                       bFlyerPreventRiderAutoFly : 1;                           // 0x14B6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowFlyerLandedRider : 1;                              // 0x14B6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventFlyerFlyingRider : 1;                            // 0x14B6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventFlyerCapsuleExpansion : 1;                       // 0x14B6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIncludeCarryWeightOfBasedPawns : 1;                     // 0x14B6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceRiderNetworkParent : 1;                            // 0x14B7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForcePerfectTame : 1;                                   // 0x14B7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanHaveBaby : 1;                                        // 0x14B7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBabyGestation : 1;                                   // 0x14B7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventUnalignedDinoBasing : 1;                         // 0x14B7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideLevelMusicIfTamed : 1;                          // 0x14B7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bReachedMaxStructures : 1;                               // 0x14B7(0x0001) BIT_FIELD Net, NoDestructor
		float                                                      ExtraBabyGestationSpeedMultiplier;                       // 0x14B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bSupportsSaddleStructures : 1;                           // 0x14BC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBonesHidden : 1;                                        // 0x14BC(0x0001) BIT_FIELD Net, Transient, SaveGame, RepNotify, NoDestructor
		bool                                                       UnknownData_FI5X : 1;                                    // 0x14BC(0x0001) BIT_FIELD (PADDING)
		bool                                                       bCanBeRepaired : 1;                                      // 0x14BC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bFlyerDontAutoLandOnDismount : 1;                        // 0x14BC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsRepairing : 1;                                        // 0x14BC(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       bIsBaby : 1;                                             // 0x14BC(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       UnknownData_QDI9 : 1;                                    // 0x14BC(0x0001) BIT_FIELD (PADDING)
		bool                                                       bCanUnclaimTame : 1;                                     // 0x14BD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowWildDinoEquipment : 1;                             // 0x14BD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseTamedVisibleComponents : 1;                          // 0x14BD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowDemolish : 1;                                      // 0x14BD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseGang : 1;                                            // 0x14BD(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bBlueprintDrawFloatingHUD : 1;                           // 0x14BD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEggBoosted : 1;                                         // 0x14BD(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       bUseBPTamedTick : 1;                                     // 0x14BD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOverrideWantsToRun : 1;                            // 0x14BE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPlayDying : 1;                                     // 0x14BE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSupportsPassengerSeats : 1;                             // 0x14BE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAddPassengerSeatMultiUseEntries : 1;                    // 0x14BE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseSaddlePassengerSeatsWhenAvailable : 1;               // 0x14BE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bScaleInsulationByMeleeDamage : 1;                       // 0x14BE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bInventoryOnlyAllowCraftingWhenWandering : 1;            // 0x14BE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseWildRandomScale : 1;                                 // 0x14BE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHeldJumpSlowFalling : 1;                                // 0x14BF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsHeldJumpSlowFalling : 1;                              // 0x14BF(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       UnknownData_6VOS : 1;                                    // 0x14BF(0x0001) BIT_FIELD (PADDING)
		bool                                                       bTriggerBPUnstasis : 1;                                  // 0x14BF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bWildProduceEggDynamically : 1;                          // 0x14BF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventWakingTameFeeding : 1;                           // 0x14BF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceDisablingTaming : 1;                               // 0x14BF(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor
		float                                                      AutoFadeOutAfterTameTime;                                // 0x14C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bFlyerAllowRidingInCaves : 1;                            // 0x14C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bScaleExtraRunningSpeedModifier : 1;                     // 0x14C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideCrosshairAlpha : 1;                             // 0x14C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideCrosshairColor : 1;                             // 0x14C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetCrosshairLocation : 1;                          // 0x14C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideCrosshairSpread : 1;                            // 0x14C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCenterOffscreenFloatingHUDWidgets : 1;                  // 0x14C4(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bClampOffscreenFloatingHUDWidgets : 1;                   // 0x14C4(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseFixedSpawnLevel : 1;                                 // 0x14C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTreatCrouchInputAsAttack : 1;                           // 0x14C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetRiderUnboardLocation : 1;                       // 0x14C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetRiderUnboardDirection : 1;                      // 0x14C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUniqueDino : 1;                                         // 0x14C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bModifyBasedCamera : 1;                                  // 0x14C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnRefreshColorization : 1;                         // 0x14C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideAncestorsButton : 1;                                // 0x14C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBP_OverrideDinoName : 1;                             // 0x14C6(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseBPDinoTooltipCustomProgressBar : 1;                  // 0x14C6(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseBPDisplayTamedMessage : 1;                           // 0x14C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOverrideTamingDescriptionLabel : 1;                // 0x14C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanMountOnCharacter : 1;                           // 0x14C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsNursingDino : 1;                                      // 0x14C6(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bIsNursing : 1;                                          // 0x14C6(0x0001) BIT_FIELD Edit, Net, SaveGame, NoDestructor
		bool                                                       bUseBPGetRiderSocket : 1;                                // 0x14C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPShowTamingPanel : 1;                               // 0x14C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bFlyerPrioritizeAllyMountToCarry : 1;                    // 0x14C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOverrideMutationLabels : 1;                        // 0x14C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventMovementModeChangeForDinoPassengers : 1;         // 0x14C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventRiderImmobilization : 1;                         // 0x14C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		float                                                      BasedCameraSpeedMultiplier;                              // 0x14C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_J1QR[0x4];                                   // 0x14CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastEggBoostedTime;                                      // 0x14D0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      WildPercentageChanceOfBaby;                              // 0x14D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WildBabyAgeWeight;                                       // 0x14DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyGestationProgress;                                   // 0x14E0(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      FlyerForceLimitPitchMin;                                 // 0x14E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FlyerForceLimitPitchMax;                                 // 0x14E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_B5JF[0x8];                                   // 0x14EC(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BabyChanceOfTriplets;                                    // 0x14F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyAge;                                                 // 0x14F8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      MaxPercentOfCapsulHeightAllowedForIK;                    // 0x14FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SlopeBiasForMaxCapsulePercent;                           // 0x1500(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FlyingForceRotationRateModifier;                         // 0x1504(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class FName>                                        HideBoneNames;                                           // 0x1508(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              HideBonesString;                                         // 0x1518(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		struct FVector                                             WaterSurfaceExtraJumpVector;                             // 0x1528(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             FlyerTakeOffAdditionalVelocity;                          // 0x1534(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      OpenDoorDelay;                                           // 0x1540(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedWanderHarvestInterval;                              // 0x1544(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedWanderHarvestSearchRange;                           // 0x1548(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedWanderHarvestCollectRadius;                         // 0x154C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             TamedWanderHarvestCollectOffset;                         // 0x1550(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RootLocSwimOffset;                                       // 0x155C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PlayAnimBelowHealthPercent;                              // 0x1560(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LeavePlayAnimBelowHealthPercent;                         // 0x1564(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PlatformSaddleMaxStructureBuildDistance2D;               // 0x1568(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JOLD[0x4];                                   // 0x156C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        PlayAnimBelowHealth;                                     // 0x1570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          LowHealthExitSound;                                      // 0x1578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          LowHealthEnterSound;                                     // 0x1580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              LowHealthDinoSettings;                                   // 0x1588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwimOffsetInterpSpeed;                                   // 0x1590(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VCZ6[0x4];                                   // 0x1594(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AIRangeMultiplier;                                       // 0x1598(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              PreventColorizationRegions[0x6];                         // 0x159C(0x0006) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              AllowPaintingColorRegions[0x6];                          // 0x15A2(0x0006) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              ColorSetIndices[0x6];                                    // 0x15A8(0x0006) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RCR2[0x2];                                   // 0x15AE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ColorSetNames[0x6];                                      // 0x15B0(0x0030) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      ColorSetIntensityMultipliers[0x6];                       // 0x15E0(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class APrimalBuff>                          ColorOverrideBuff;                                       // 0x15F8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KQDF[0xC];                                   // 0x1600(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MeleeAttackStaminaCost;                                  // 0x160C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        WakingTameAnimation;                                     // 0x1610(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class AActor>                               Target;                                                  // 0x1618(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class AActor>                               TamedFollowTarget;                                       // 0x1620(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class AActor>                               TamedLandTarget;                                         // 0x1628(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      PercentChanceFemale;                                     // 0x1630(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NVNF[0x4];                                   // 0x1634(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      DeathGiveItemClasses;                                    // 0x1638(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<float>                                              DeathGiveItemChanceToBeBlueprint;                        // 0x1648(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      DeathGiveItemQualityMin;                                 // 0x1658(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DeathGiveItemQualityMax;                                 // 0x165C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DeathGiveItemRange;                                      // 0x1660(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_T67M[0x4];                                   // 0x1664(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              DeathGiveAchievement;                                    // 0x1668(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class USoundBase*                                          OverrideAreaMusic;                                       // 0x1678(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             UnboardLocationOffset;                                   // 0x1680(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NHXP[0x14];                                  // 0x168C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RidingNetUpdateFequency;                                 // 0x16A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RiderMaxSpeedModifier;                                   // 0x16A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RiderExtraMaxSpeedModifier;                              // 0x16A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RiderMaxRunSpeedModifier;                                // 0x16AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RiderRotationRateModifier;                               // 0x16B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwimmingRotationRateModifier;                            // 0x16B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      chargingRotationRateModifier;                            // 0x16B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_B82T[0x4];                                   // 0x16BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        EnterFlightAnim;                                         // 0x16C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        ExitFlightAnim;                                          // 0x16C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        SleepConsumeFoodAnim;                                    // 0x16D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        WakingConsumeFoodAnim;                                   // 0x16D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        FallAsleepAnim;                                          // 0x16E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        TamedUnsleepAnim;                                        // 0x16E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        WildUnsleepAnim;                                         // 0x16F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        OpenDoorAnim;                                            // 0x16F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ControlFacePitchInterpSpeed;                             // 0x1700(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedWalkableFloorZ;                                     // 0x1704(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CurrentMovementAnimRate;                                 // 0x1708(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    MinPlayerLevelForWakingTame;                             // 0x170C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8QA8[0x8];                                   // 0x1710(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              TamedInventoryComponentTemplate;                         // 0x1718(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeightedObjectList                                 DeathInventoryTemplates;                                 // 0x1720(0x0020) Edit, DisableEditOnInstance
		float                                                      DeathInventoryChanceToUse;                               // 0x1740(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WakingTameFeedInterval;                                  // 0x1744(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9CPL[0x8];                                   // 0x1748(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DeathInventoryQualityPerLevelMultiplier;                 // 0x1750(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RequiredTameAffinity;                                    // 0x1754(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      RequiredTameAffinityPerBaseLevel;                        // 0x1758(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              TamedAITargetingRange;                                   // 0x175C(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		bool                                                       bMeleeSwingDamageBlockedByAllStationaryObjects : 1;      // 0x175D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPChargingModifyInputAcceleration : 1;               // 0x175D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnRepIsCharging : 1;                               // 0x175D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPreventOrderAllowed : 1;                           // 0x175D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPassengerDinosUsePassengerAnim : 1;                     // 0x175D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsesPassengerAnimOnDinos : 1;                           // 0x175D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverrideRotationOnCarriedCharacter : 1;                 // 0x175D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAdvancedCarryRelease : 1;                               // 0x175D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceCarriedPlayerToCheckForWalls : 1;                  // 0x175E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bClearRiderOnDinoImmobilized : 1;                        // 0x175E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPIsBasedOnActor : 1;                                // 0x175E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPModifyControlRotation : 1;                         // 0x175E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnDinoFiredProjectile : 1;                         // 0x175E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetRidingMultiUseEntries : 1;                      // 0x175E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_CQ9M[0x1];                                   // 0x175F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                PassengerBoneNameOverride;                               // 0x1760(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CurrentTameAffinity;                                     // 0x1768(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      TameIneffectivenessModifier;                             // 0x176C(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      TameIneffectivenessByAffinity;                           // 0x1770(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QWUW[0x4];                                   // 0x1774(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseBPIsValidUnStasisCaster;                             // 0x1778(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AVRW[0x7];                                   // 0x1779(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPrimalSaddleStructure>                      SaddleStructures;                                        // 0x1780(0x0010) ZeroConstructor, SaveGame
		int32_t                                                    MaxSaddleStructuresHeight;                               // 0x1790(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       CalculateStructureHeightFromSaddle;                      // 0x1794(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       CalculateStructureDistanceFromSaddle;                    // 0x1795(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_D278[0x2];                                   // 0x1796(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SaddlePivotOffset;                                       // 0x1798(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxSaddleStructuresNum;                                  // 0x179C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              DinoSettingsClass;                                       // 0x17A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamingFoodConsumeInterval;                               // 0x17A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DediForceAttackAnimTime;                                 // 0x17AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DediForceStartAttackAfterAnimTime;                       // 0x17B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WakingTameFoodIncreaseMultiplier;                        // 0x17B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    TamingTeamID;                                            // 0x17B8(0x0004) BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    OwningPlayerID;                                          // 0x17BC(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		class FString                                              OwningPlayerName;                                        // 0x17C0(0x0010) Net, ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic
		double                                                     TamingLastFoodConsumptionTime;                           // 0x17D0(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		uint32_t                                                   DinoID1;                                                 // 0x17D8(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		uint32_t                                                   DinoID2;                                                 // 0x17DC(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GKLI[0xC];                                   // 0x17E0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TamedAggressionLevel;                                    // 0x17EC(0x0004) BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      TamingIneffectivenessModifierIncreaseByDamagePercent;    // 0x17F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RSLV[0x8];                                   // 0x17F4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class APrimalStructureItemContainer_SupplyCrate> LinkedSupplyCrate;                                       // 0x17FC(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      UntamedPoopTimeMinInterval;                              // 0x1804(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UntamedPoopTimeMaxInterval;                              // 0x1808(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MeleeHarvestDamageMultiplier;                            // 0x180C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AllowRidingMaxDistance;                                  // 0x1810(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UntamedPoopTimeCache;                                    // 0x1814(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		class UClass*                                              BaseEggClass;                                            // 0x1818(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      EggItemsToSpawn;                                         // 0x1820(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<float>                                              EggWeightsToSpawn;                                       // 0x1830(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      FertilizedEggItemsToSpawn;                               // 0x1840(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<float>                                              FertilizedEggWeightsToSpawn;                             // 0x1850(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      EggChanceToSpawnUnstasis;                                // 0x1860(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      EggIntervalBetweenUnstasisChances;                       // 0x1864(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      EggRangeMaximumNumberFromSameDinoType;                   // 0x1868(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    EggMaximumNumberFromSameDinoType;                        // 0x186C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      EggRangeMaximumNumber;                                   // 0x1870(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    EggMaximumNumber;                                        // 0x1874(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EggSpawnSocketName;                                      // 0x1878(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        EggLayingAnimation;                                      // 0x1880(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UntamedWalkingSpeedModifier;                             // 0x1888(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedWalkingSpeedModifier;                               // 0x188C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UntamedRunningSpeedModifier;                             // 0x1890(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedRunningSpeedModifier;                               // 0x1894(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              RandomColorSetsMale;                                     // 0x1898(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              RandomColorSetsFemale;                                   // 0x18A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SpawnerColorSets;                                        // 0x18A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       RiderAnimOverride;                                       // 0x18B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       TurningRightRiderAnimOverride;                           // 0x18B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       TurningLeftRiderAnimOverride;                            // 0x18C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       LatchedRiderAnimOverride;                                // 0x18C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       RiderMoveAnimOverride;                                   // 0x18D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RidingAnimSpeedFactor;                                   // 0x18D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1436[0x4];                                   // 0x18DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        StartRidingAnimOverride;                                 // 0x18E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        StopRidingAnimOverride;                                  // 0x18E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TargetingTeamNameOverride;                               // 0x18F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExtraTamedSpeedMultiplier;                               // 0x18F8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExtraUnTamedSpeedMultiplier;                             // 0x18FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     LastEggSpawnChanceTime;                                  // 0x1900(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		class FName                                                OriginalNPCVolumeName;                                   // 0x1908(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      OutsideOriginalNPCVolumeStasisDestroyInterval;           // 0x1910(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StasisedDestroyInterval;                                 // 0x1914(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedAllowNamingTime;                                    // 0x1918(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MovementSpeedScalingRotationRatePower;                   // 0x191C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AttackNoStaminaTorpidityMultiplier;                      // 0x1920(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DecayDestructionPeriod;                                  // 0x1924(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     TamedAtTime;                                             // 0x1928(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		double                                                     LastInAllyRangeTime;                                     // 0x1930(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QBC8[0x10];                                  // 0x1938(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class APrimalStructure*>                            LatchedOnStructures;                                     // 0x1948(0x0010) ZeroConstructor, Transient
		class UPrimalDinoSettings*                                 MyDinoSettingsCDO;                                       // 0x1958(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_85GJ[0x4];                                   // 0x1960(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LocInterpolationSnapDistance;                            // 0x1964(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZAYH[0x10];                                  // 0x1968(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HUDScaleMultiplier;                                      // 0x1978(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      HUDTextScaleMultiplier;                                  // 0x197C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TamedCorpseLifespan;                                     // 0x1980(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MateBoostDamageReceiveMultiplier;                        // 0x1984(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MateBoostDamageGiveMultiplier;                           // 0x1988(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MateBoostRange;                                          // 0x198C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DinoNameTag;                                             // 0x1990(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class AShooterPlayerController*                            AttackMyTargetForPlayerController;                       // 0x1998(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RidingAttackExtraVelocityDelay;                          // 0x19A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StepDamageRadialDamageInterval;                          // 0x19A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StepDamageRadialDamageExtraRadius;                       // 0x19A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StepDamageRadialDamageAmountGeneral;                     // 0x19AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StepDamageRadialDamageAmountHarvestable;                 // 0x19B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FRYU[0xC];                                   // 0x19B4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              StepHarvestableDamageType;                               // 0x19C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StepDamageFootDamageInterval;                            // 0x19C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StepDamageFootDamageRadius;                              // 0x19CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StepDamageFootDamageAmount;                              // 0x19D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MA0V[0x4];                                   // 0x19D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        StepDamageFootDamageSockets;                             // 0x19D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      DurationBeforeMovingStuckPawn;                           // 0x19E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ES6K[0x14];                                  // 0x19EC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        StartledAnimationRightDefault;                           // 0x1A00(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        StartledAnimationLeft;                                   // 0x1A08(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UAnimMontage*>                                StartledAnimations;                                      // 0x1A10(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UAnimMontage*                                        FlyingStartledAnimation;                                 // 0x1A20(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RandomPlayStartledAnimIntervalMin;                       // 0x1A28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RandomPlayStartledAnimIntervalMax;                       // 0x1A2C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StartledAnimationCooldown;                               // 0x1A30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DefaultActivateAttackRangeOffset;                        // 0x1A34(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CorpseTargetingMultiplier;                               // 0x1A38(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q1PI[0x14];                                  // 0x1A3C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CorpseLifespanNonRelevant;                               // 0x1A50(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPUnstasisConsumeFood : 1;                           // 0x1A54(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnDinoStartled : 1;                                // 0x1A54(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRemoteDinoConsumesStaminaWhileRunning : 1;              // 0x1A54(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_LUCK[0x3];                                   // 0x1A55(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinStaminaForRider;                                      // 0x1A58(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LoseStaminaWithRiderRate;                                // 0x1A5C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FollowingRunDistance;                                    // 0x1A60(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxDinoKillerTransferWeightPercent;                      // 0x1A64(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NPCZoneVolumeCountWeight;                                // 0x1A68(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZEU2[0x4];                                   // 0x1A6C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             FloatingHUDTextWorldOffset;                              // 0x1A70(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9R48[0x6C];                                  // 0x1A7C(0x006C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              RepairRequirementsItem;                                  // 0x1AE8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WHHQ[0x4];                                   // 0x1AF0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RepairCheckInterval;                                     // 0x1AF4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RepairPercentPerInterval;                                // 0x1AF8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             RiderCheckTraceOffset;                                   // 0x1AFC(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             RiderEjectionImpulse;                                    // 0x1B08(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WakingTameAffinityDecreaseFoodPercentage;                // 0x1B14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WakingTameAllowFeedingFoodPercentage;                    // 0x1B18(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WakingTameFoodAffinityMultiplier;                        // 0x1B1C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CheckForWildAmbientHarvestingIntervalMin;                // 0x1B20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CheckForWildAmbientHarvestingIntervalMax;                // 0x1B24(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ROMK[0x8];                                   // 0x1B28(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        WildAmbientHarvestingAnimation;                          // 0x1B30(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UAnimMontage*>                                WildAmbientHarvestingAnimations;                         // 0x1B38(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      WildAmbientHarvestingComponentClasses;                   // 0x1B48(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      WildAmbientHarvestingRadius;                             // 0x1B58(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H4HW[0x4];                                   // 0x1B5C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    AbsoluteBaseLevel;                                       // 0x1B60(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KEU5[0x4];                                   // 0x1B64(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FStatValuePair>                              OverrideBaseStatLevelsOnSpawn;                           // 0x1B68(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<EPrimalCharacterStatusValue>                        OverrideStatPriorityOnSpawn;                             // 0x1B78(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              TamedHarvestDamageType;                                  // 0x1B88(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FDinoSaddleStruct                                   SaddleStruct;                                            // 0x1B90(0x0020) Net, RepNotify, ContainsInstancedReference
		unsigned char                                              UnknownData_AX1N[0x20];                                  // 0x1BB0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              StartChargingShake;                                      // 0x1BD0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              LightEndChargingShake;                                   // 0x1BD8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              HardEndChargingShake;                                    // 0x1BE0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ChargeBumpDamage;                                        // 0x1BE8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GDFP[0x4];                                   // 0x1BEC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ChargeBumpDamageType;                                    // 0x1BF0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ChargeBumpImpulse;                                       // 0x1BF8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinChargeInterval;                                       // 0x1BFC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PlayerMountedLaunchFowardSpeed;                          // 0x1C00(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PlayerMountedLaunchUpSpeed;                              // 0x1C04(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AttackOnLaunchMaximumTargetDistance;                     // 0x1C08(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      KeepFlightRemainingTime;                                 // 0x1C0C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        MountCharacterAnimation;                                 // 0x1C10(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        UnmountCharacterAnimation;                               // 0x1C18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        EndChargingAnimation;                                    // 0x1C20(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FlyingRunSpeedModifier;                                  // 0x1C28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ChargingAnimDelay;                                       // 0x1C2C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RiderSocketName;                                         // 0x1C30(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ChargingActivationRequiresStamina;                       // 0x1C38(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ChargingActivationConsumesStamina;                       // 0x1C3C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FlyerHardBreakingOverride;                               // 0x1C40(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyScale;                                               // 0x1C44(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabySpeedMultiplier;                                     // 0x1C48(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyPitchMultiplier;                                     // 0x1C4C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyVolumeMultiplier;                                    // 0x1C50(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class AActor>                               WanderAroundActor;                                       // 0x1C54(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WanderAroundActorMaxDistance;                            // 0x1C5C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_PXD8[0x20];                                  // 0x1C60(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              BuffGivenToBasedCharacters;                              // 0x1C80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LL9C[0x8];                                   // 0x1C88(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastUpdatedBabyAgeAtTime;                                // 0x1C90(0x0008) BlueprintVisible, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		double                                                     LastUpdatedGestationAtTime;                              // 0x1C98(0x0008) BlueprintVisible, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		double                                                     LastUpdatedMatingAtTime;                                 // 0x1CA0(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      BabyAgeSpeed;                                            // 0x1CA8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExtraBabyAgeSpeedMultiplier;                             // 0x1CAC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FemaleMatingRangeAddition;                               // 0x1CB0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FemaleMatingTime;                                        // 0x1CB4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     NextAllowedMatingTime;                                   // 0x1CB8(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      MatingProgress;                                          // 0x1CC0(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0YOK[0x4];                                   // 0x1CC4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastMatingNotificationTime;                              // 0x1CC8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class APrimalDinoCharacter*                                MatingWithDino;                                          // 0x1CD0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        MatingAnimationMale;                                     // 0x1CD8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              GestationEggNumberOfLevelUpPointsApplied[0xC];           // 0x1CE0(0x000C) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      GestationEggTamedIneffectivenessModifier;                // 0x1CEC(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              GestationEggColorSetIndices[0x6];                        // 0x1CF0(0x0006) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4NAE[0x2];                                   // 0x1CF6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NewFemaleMinTimeBetweenMating;                           // 0x1CF8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NewFemaleMaxTimeBetweenMating;                           // 0x1CFC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      DefaultTamedBuffs;                                       // 0x1D00(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_NWJJ[0x18];                                  // 0x1D10(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HyperThermiaInsulation;                                  // 0x1D28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HypoThermiaInsulation;                                   // 0x1D2C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InsulationRange;                                         // 0x1D30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GangOverlapRange;                                        // 0x1D34(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GangDamageResistance;                                    // 0x1D38(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GangDamage;                                              // 0x1D3C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxGangCount;                                            // 0x1D40(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    GangCount;                                               // 0x1D44(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UITK[0x1C];                                  // 0x1D48(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WildRandomScale;                                         // 0x1D64(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      HeldJumpSlowFallingGravityZScale;                        // 0x1D68(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XUMK[0x4];                                   // 0x1D6C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        SlowFallingAnim;                                         // 0x1D70(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SlowFallingStaminaCostPerSecond;                         // 0x1D78(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NoRiderRotationModifier;                                 // 0x1D7C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RiderFPVCameraUseSocketName;                             // 0x1D80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RiderLatchedFPVCameraUseSocketName;                      // 0x1D88(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PassengerFPVCameraRootSocket;                            // 0x1D90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class FName>                                        FPVRiderBoneNamesToHide;                                 // 0x1D98(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      ExtraRunningSpeedModifier;                               // 0x1DA8(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ScaleExtraRunningSpeedModifierMin;                       // 0x1DAC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ScaleExtraRunningSpeedModifierMax;                       // 0x1DB0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ScaleExtraRunningSpeedModifierSpeed;                     // 0x1DB4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LastHigherScaleExtraRunningSpeedValue;                   // 0x1DB8(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EMKR[0x4];                                   // 0x1DBC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastHigherScaleExtraRunningSpeedTime;                    // 0x1DC0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bSimulateRootMotion : 1;                                 // 0x1DC8(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
		bool                                                       bUseBPOverrideStencilAllianceForTarget : 1;              // 0x1DC8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bDisableHighQualityAIVolumeLedgeChecking : 1;            // 0x1DC8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDoHighQualityLedgeChecking : 1;                         // 0x1DC8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_E17V[0x3];                                   // 0x1DC9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RiderMovementSpeedScalingRotationRatePowerMultiplier;    // 0x1DCC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HighQualityLedgeDetectionExtraTraceDistance;             // 0x1DD0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bOnlyDoStepDamageWhenRunning : 1;                        // 0x1DD4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_IGDM : 1;                                    // 0x1DD4(0x0001) BIT_FIELD (PADDING)
		bool                                                       bPreventPlatformSaddleMultiFloors : 1;                   // 0x1DD4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventMountedDinoMeshHiding : 1;                       // 0x1DD4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsePlayerMountedCarryingDinoAnimation : 1;              // 0x1DD4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventRotationRateModifier : 1;                        // 0x1DD4(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bStepDamageFoliageOnly : 1;                              // 0x1DD4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventUntamedRun : 1;                                  // 0x1DD4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowTogglingPublicSeating : 1;                         // 0x1DD5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowPublicSeating : 1;                                 // 0x1DD5(0x0001) BIT_FIELD Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bAllowWaterSurfaceExtraJump : 1;                         // 0x1DD5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseVelocityForRequestedMoveIfStuck : 1;                 // 0x1DD5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPDoAttack : 1;                                      // 0x1DD5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bStepDamageNonFoliageWithoutRunning : 1;                 // 0x1DD5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bStepDamageAllTargetables : 1;                           // 0x1DD5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDamageNonFoliageFeetSocketsOnly : 1;                    // 0x1DD5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRiderDontBeBlockedByPawnMesh : 1;                       // 0x1DD6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseExtendedUnstasisCheck : 1;                           // 0x1DD6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_XKA3 : 1;                                    // 0x1DD6(0x0001) BIT_FIELD (PADDING)
		bool                                                       bAllowDinoAutoConsumeInventoryFood : 1;                  // 0x1DD6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceNoCharacterStatusComponentTick : 1;                // 0x1DD6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsRaidDino : 1;                                         // 0x1DD6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bWildIgnoredByAutoTurrets : 1;                           // 0x1DD6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bWildAllowTargetingNeutralStructures : 1;                // 0x1DD6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDoStepDamageTamedOnly : 1;                              // 0x1DD7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bStepDamageNonFoliageTamedOnly : 1;                      // 0x1DD7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_UFLC : 1;                                    // 0x1DD7(0x0001) BIT_FIELD (PADDING)
		bool                                                       bForceWildDeathInventoryDeposit : 1;                     // 0x1DD7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsCarryingCharacter : 1;                                // 0x1DD7(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       bIsCarryingPassenger : 1;                                // 0x1DD7(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       bUseBPCanTakePassenger : 1;                              // 0x1DD7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForwardPlatformSaddleStructureDamageToDino : 1;         // 0x1DD7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		int32_t                                                    LoadDestroyWildDinosUnderVersion;                        // 0x1DD8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    SaveDestroyWildDinosUnderVersion;                        // 0x1DDC(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      AllowWaterSurfaceExtraJumpStaminaCost;                   // 0x1DE0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_P73C[0x4];                                   // 0x1DE4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          PlayKillLocalSound;                                      // 0x1DE8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_R4WG[0x14];                                  // 0x1DF0(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              TribeGroupPetOrderingRank;                               // 0x1E04(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              TribeGroupPetRidingRank;                                 // 0x1E05(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              FollowStoppingDistance;                                  // 0x1E06(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XSRJ[0x1];                                   // 0x1E07(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ImprinterName;                                           // 0x1E08(0x0010) Net, ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic
		uint64_t                                                   ImprinterPlayerDataID;                                   // 0x1E18(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      BabyMinCuddleInterval;                                   // 0x1E20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyMaxCuddleInterval;                                   // 0x1E24(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyCuddleGracePeriod;                                   // 0x1E28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyCuddleLoseImpringQualityPerSecond;                   // 0x1E2C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyCuddleWalkDistance;                                  // 0x1E30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             BabyCuddleWalkStartingLocation;                          // 0x1E34(0x000C) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		double                                                     BabyNextCuddleTime;                                      // 0x1E40(0x0008) BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		EBabyCuddleType                                            BabyCuddleType;                                          // 0x1E48(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6AK2[0x7];                                   // 0x1E49(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              BabyCuddleFood;                                          // 0x1E50(0x0008) BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        BabyCuddledAnimation;                                    // 0x1E58(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      MyBabyCuddleFoodTypes;                                   // 0x1E60(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      RiderMaxImprintingQualityDamageReduction;                // 0x1E70(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RiderMaxImprintingQualityDamageMultiplier;               // 0x1E74(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyImprintingQualityTotalMaturationTime;                // 0x1E78(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WakingTameMaxDistance;                                   // 0x1E7C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TimeBetweenTamedWakingEatAnimations;                     // 0x1E80(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IPIW[0xC];                                   // 0x1E84(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       UnknownData_KCVL : 1;                                    // 0x1E90(0x0001) BIT_FIELD (PADDING)
		bool                                                       bDontPlayAttackingMusic : 1;                             // 0x1E90(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceIgnoreRagdollHarvesting : 1;                       // 0x1E90(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPModifyAimOffsetTargetLocation : 1;                    // 0x1E90(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPModifyAimOffsetNoTarget : 1;                          // 0x1E90(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsVehicle : 1;                                          // 0x1E90(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisallowPostNetReplication : 1;                         // 0x1E90(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       bTakingOff : 1;                                          // 0x1E90(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       bPreventMating : 1;                                      // 0x1E91(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAttackStopsRotation : 1;                                // 0x1E91(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bFlyerDinoAllowBackwardsFlight : 1;                      // 0x1E91(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bFlyerDinoAllowStrafing : 1;                             // 0x1E91(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreTargetingLiveUnriddenDinos : 1;                   // 0x1E91(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSleepedForceCreateInventory : 1;                        // 0x1E91(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bLocalForceNearbySkelMeshUpdate : 1;                     // 0x1E91(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bFlyerDisableEnemyTargetingMaxDeltaZ : 1;                // 0x1E91(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsBossDino : 1;                                         // 0x1E92(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTamedAIAllowSpecialAttacks : 1;                         // 0x1E92(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
		bool                                                       bTamedAIToggleSpecialAttacks : 1;                        // 0x1E92(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_R7AQ : 1;                                    // 0x1E92(0x0001) BIT_FIELD (PADDING)
		bool                                                       bRepeatPrimaryAttack : 1;                                // 0x1E92(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventUploading : 1;                                   // 0x1E92(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventHibernation : 1;                                 // 0x1E92(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRiderMovementLocked : 1;                                // 0x1E92(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       UnknownData_L4D5 : 1;                                    // 0x1E93(0x0001) BIT_FIELD (PADDING)
		bool                                                       bNeutered : 1;                                           // 0x1E93(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bIgnoreAllWhistles : 1;                                  // 0x1E93(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
		bool                                                       bUseBPDoHarvestAttack : 1;                               // 0x1E93(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPModifyHarvestingQuantity : 1;                      // 0x1E93(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPModifyHarvestingWeightsArray : 1;                  // 0x1E93(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		float                                                      StepDamageFootDamageRunningMultiplier;                   // 0x1E94(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPModifyHarvestDamage : 1;                           // 0x1E98(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideFloatingHUD : 1;                                    // 0x1E98(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_9M8I[0x3];                                   // 0x1E99(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      maxRangeForWeaponTriggeredTooltip;                       // 0x1E9C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableHarvesting : 1;                                  // 0x1EA0(0x0001) BIT_FIELD Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bUseBPDinoPostBeginPlay : 1;                             // 0x1EA0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_X57I : 1;                                    // 0x1EA0(0x0001) BIT_FIELD (PADDING)
		bool                                                       bFlyerDontGainImpulseOnSubmerged : 1;                    // 0x1EA0(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanAutodrag : 1;                                   // 0x1EA0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanDragCharacter : 1;                              // 0x1EA0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowDraggingWhileFalling : 1;                          // 0x1EA0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSingleplayerFreezePhysicsWhenNoTarget : 1;              // 0x1EA0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_XQE9 : 1;                                    // 0x1EA1(0x0001) BIT_FIELD (PADDING)
		bool                                                       bIsCloneDino : 1;                                        // 0x1EA1(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bUseAdvancedAnimLerp : 1;                                // 0x1EA1(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventWanderingUnderWater : 1;                         // 0x1EA1(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bWildAllowFollowTamedTarget : 1;                         // 0x1EA1(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bAllowDamageSameTeamAndClass : 1;                        // 0x1EA1(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bAllowsTurretMode : 1;                                   // 0x1EA1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowRidingInTurretMode : 1;                            // 0x1EA1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsInTurretMode : 1;                                     // 0x1EA2(0x0001) BIT_FIELD BlueprintVisible, Net, SaveGame, NoDestructor
		bool                                                       bUseBPShouldCancelDoAttack : 1;                          // 0x1EA2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPModifyDesiredRotation : 1;                         // 0x1EA2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseLocalSpaceDesiredRotationWithRider : 1;              // 0x1EA2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPDesiredRotationIsLocalSpace : 1;                   // 0x1EA2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_CE5T : 1;                                    // 0x1EA2(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUseBPOverrideCameraViewTarget : 1;                      // 0x1EA2(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bIsRobot : 1;                                            // 0x1EA2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_N37B[0x1];                                   // 0x1EA3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StepRadialDamageOffset;                                  // 0x1EA4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBP_CustomModifier_RotationRate : 1;                  // 0x1EA8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBP_CustomModifier_MaxSpeed : 1;                      // 0x1EA8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBP_OnStartLandingNotify : 1;                         // 0x1EA8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_B41F : 1;                                    // 0x1EA8(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUseAttackForceWalkDistanceMultiplier : 1;               // 0x1EA8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForcePerFrameTicking : 1;                               // 0x1EA8(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       bHadStaticBase : 1;                                      // 0x1EA8(0x0001) BIT_FIELD SaveGame, NoDestructor
		bool                                                       bNoKillXP : 1;                                           // 0x1EA8(0x0001) BIT_FIELD SaveGame, NoDestructor
		bool                                                       bIgnoreAllyLook : 1;                                     // 0x1EA9(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bBabyInitiallyUnclaimed : 1;                             // 0x1EA9(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor
		bool                                                       bUseBPForceTurretFastTargeting : 1;                      // 0x1EA9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_K22Y : 1;                                    // 0x1EA9(0x0001) BIT_FIELD (PADDING)
		bool                                                       bSuppressWakingTameMessage : 1;                          // 0x1EA9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventFlyerLanding : 1;                                // 0x1EA9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_SED1 : 2;                                    // 0x1EA9(0x0001) BIT_FIELD (PADDING)
		bool                                                       bDisableCollisionWithDinosWhenFlying : 1;                // 0x1EAA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowTrapping : 1;                                      // 0x1EAA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventWildTrapping : 1;                                // 0x1EAA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsTrapTamed : 1;                                        // 0x1EAA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreDestroyOnRapidDeath : 1;                          // 0x1EAA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventFallingBumpCheck : 1;                            // 0x1EAA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsDestroyingDino : 1;                                   // 0x1EAA(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bCheckBPAllowClaiming : 1;                               // 0x1EAA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBlueprintExtraBabyScale : 1;                         // 0x1EAB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventNeuter : 1;                                      // 0x1EAB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetDragSocketName : 1;                             // 0x1EAB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetDragSocketDinoName : 1;                         // 0x1EAB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetLookOffsetSocketName : 1;                       // 0x1EAB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTargetEverythingIncludingSameTeamInPVE : 1;             // 0x1EAB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		float                                                      ForcePawnBigPushingForTime;                              // 0x1EAC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceUsePhysicalFootSurfaceTrace : 1;                   // 0x1EB0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBP_OnPostNetReplication : 1;                         // 0x1EB0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPassiveFlee : 1;                                        // 0x1EB0(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       UnknownData_9O99 : 1;                                    // 0x1EB0(0x0001) BIT_FIELD (PADDING)
		bool                                                       bOnlyTargetConscious : 1;                                // 0x1EB0(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bBPManagedFPVViewLocationNoRider : 1;                    // 0x1EB0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bHideSaddleInFPV : 1;                                    // 0x1EB0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventCloning : 1;                                     // 0x1EB0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventStasisOnDedi : 1;                                // 0x1EB1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAlwaysCheckForFloor : 1;                                // 0x1EB1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAlwaysCheckForFalling : 1;                              // 0x1EB1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAllowCarryWaterDinos : 1;                          // 0x1EB1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBP_AllowWalkableSlopeOverride : 1;                   // 0x1EB1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBP_CanFly : 1;                                       // 0x1EB1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBP_OverrideBasedCharactersCameraInterpSpeed : 1;     // 0x1EB1(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseBPOverrideFloatingHUDLocation : 1;                   // 0x1EB1(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bInterceptPlayerEmotes : 1;                              // 0x1EB2(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseBP_ShouldPreventBasedCharactersCameraInterpolation : 1; // 0x1EB2(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bRidingIsSeperateUnstasisCaster : 1;                     // 0x1EB2(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bIsOceanManagerDino : 1;                                 // 0x1EB2(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_M5IQ[0x1];                                   // 0x1EB3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WanderRadiusMultiplier;                                  // 0x1EB4(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       DisableCameraShakes : 1;                                 // 0x1EB8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseBP_OverrideCarriedCharacterTransform : 1;            // 0x1EB8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseBP_OnBasedPawnNotifies : 1;                          // 0x1EB8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUsesWaterWalking : 1;                                   // 0x1EB8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bHasInvisiableSaddle : 1;                                // 0x1EB8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseWildDinoMapMultipliers : 1;                          // 0x1EB8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreFlierRidingRestrictions : 1;                      // 0x1EB8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bRotatingUpdatesDinoIK : 1;                              // 0x1EB8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseBP_OverrideRiderCameraCollisionSweep : 1;            // 0x1EB9(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bDrawHealthBar : 1;                                      // 0x1EB9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseShoulderMountedLaunch : 1;                           // 0x1EB9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsePreciseLaunching : 1;                                // 0x1EB9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_F65A : 2;                                    // 0x1EB9(0x0001) BIT_FIELD (PADDING)
		bool                                                       bAllowInvalidTameVersion : 1;                            // 0x1EB9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAllowPvECarry : 1;                                 // 0x1EB9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUnderwaterMating : 1;                                   // 0x1EBA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBabyPreventExitingWater : 1;                            // 0x1EBA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCheckSeven : 1;                                    // 0x1EBA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventExportDino : 1;                                  // 0x1EBA(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bPreventPassengerFPV : 1;                                // 0x1EBA(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_7DY7[0x1];                                   // 0x1EBB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AIDinoForceActiveUntasisingRange;                        // 0x1EBC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WildRunningRotationRateModifier;                         // 0x1EC0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedRunningRotationRateModifier;                        // 0x1EC4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedSwimmingRotationRateModifier;                       // 0x1EC8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WildSwimmingRotationRateModifier;                        // 0x1ECC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class ANPCZoneVolume>                       HardLimitWildDinoToVolume;                               // 0x1ED0(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class AVolume>                              WildLimitTargetVolume;                                   // 0x1ED8(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      RiderFlyingRotationRateModifier;                         // 0x1EE0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NoRiderFlyingRotationRateModifier;                       // 0x1EE4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AICombatRotationRateModifier;                            // 0x1EE8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WalkingRotationRateModifier;                             // 0x1EEC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SetAttackTargetTraceDistance;                            // 0x1EF0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SetAttackTargetTraceWidth;                               // 0x1EF4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KKVI[0x18];                                  // 0x1EF8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        PlayerMountedCarryAnimation;                             // 0x1F10(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPOnMountStateChanged : 1;                           // 0x1F18(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHandleUseButtonPressBP : 1;                             // 0x1F18(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bGlideWhenFalling : 1;                                   // 0x1F18(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bGlideWhenMounted : 1;                                   // 0x1F18(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAllowBackwardsMovement : 1;                        // 0x1F18(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventBackwardsWalking : 1;                            // 0x1F18(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSupplyPlayerMountedCarryAnimation : 1;                  // 0x1F18(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAllowMountedCarryRunning : 1;                      // 0x1F18(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanLatch : 1;                                           // 0x1F19(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsLatched : 1;                                          // 0x1F19(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, SaveGame, NoDestructor
		bool                                                       bIsLatchedDownward : 1;                                  // 0x1F19(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, SaveGame, NoDestructor
		bool                                                       bIsLatching : 1;                                         // 0x1F19(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, NoDestructor
		bool                                                       bRotateToFaceLatchingObject : 1;                         // 0x1F19(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, NoDestructor
		bool                                                       bLimitRiderYawOnLatched : 1;                             // 0x1F19(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bCanRideLatched : 1;                                     // 0x1F19(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowMountedWeaponry : 1;                               // 0x1F19(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bKeepAffinityOnDamageRecievedWakingTame : 1;             // 0x1F1A(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPFedWakingTameEvent : 1;                            // 0x1F1A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceRiderDrawCrosshair : 1;                            // 0x1F1A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceDrawHUD : 1;                                       // 0x1F1A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceDrawHUDWithoutRecentlyRendered : 1;                // 0x1F1A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideFloatingName : 1;                                   // 0x1F1A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanTargetVehicles : 1;                                  // 0x1F1A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRidingRequiresTamed : 1;                                // 0x1F1A(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bSuppressDeathNotification : 1;                          // 0x1F1B(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseCustomHealthBarColor : 1;                            // 0x1F1B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseOnUpdateMountedDinoMeshHiding : 1;                   // 0x1F1B(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPInterceptTurnInputEvents : 1;                      // 0x1F1B(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPInterceptMoveInputEvents : 1;                      // 0x1F1B(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPInterceptMoveInputEventsEvenIfZero : 1;            // 0x1F1B(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPAdjustAttackIndex : 1;                             // 0x1F1B(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bCheckBPAllowCarryCharacter : 1;                         // 0x1F1B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnEndCharging : 1;                                 // 0x1F1C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPNotifyMateBoostChanged : 1;                        // 0x1F1C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCarriedDinoBabyRescaled : 1;                       // 0x1F1C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_8WGB[0x3];                                   // 0x1F1D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HealthBarOffsetY;                                        // 0x1F20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_163U[0x4];                                   // 0x1F24(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AMissionType*                                        OwnerMission;                                            // 0x1F28(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bForceAllowBackwardsMovementWithNoRider : 1;             // 0x1F30(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsCorrupted : 1;                                        // 0x1F30(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsHordeDino : 1;                                        // 0x1F30(0x0001) BIT_FIELD Edit, BlueprintVisible, Net, NoDestructor
		bool                                                       bBPOverrideHealthBarOffset : 1;                          // 0x1F30(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDropWildEggsWithoutMateBoost : 1;                       // 0x1F30(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bIsTemporaryMissionDino : 1;                             // 0x1F30(0x0001) BIT_FIELD Edit, BlueprintVisible, Net, NoDestructor
		bool                                                       bForcePreventInventoryAccess : 1;                        // 0x1F30(0x0001) BIT_FIELD Edit, BlueprintVisible, Net, NoDestructor
		bool                                                       bAllowWildRunningWithoutTarget : 1;                      // 0x1F30(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bIsBed : 1;                                              // 0x1F31(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBPGetTargetingDesirability : 1;                      // 0x1F31(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bAlwaysAllowStrafing : 1;                                // 0x1F31(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bForceAllowTamedTickEggLay : 1;                          // 0x1F31(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bHasBuffPreventingUploading : 1;                         // 0x1F31(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bDisableHarvestHealthGain : 1;                           // 0x1F31(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bRemainLatchedOnClearRider : 1;                          // 0x1F31(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_HHOC[0x2];                                   // 0x1F32(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LimitRiderYawOnLatchedRange;                             // 0x1F34(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LatchingDistanceLimit;                                   // 0x1F38(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LatchingInitialYaw;                                      // 0x1F3C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LatchingInitialPitch;                                    // 0x1F40(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LatchingInterpolatedPitch;                               // 0x1F44(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LatchedFirstPersonViewAngle;                             // 0x1F48(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LatchingCameraInterpolationSpeed;                        // 0x1F4C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TargetLatchingInitialYaw;                                // 0x1F50(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CurrentStrafeMagnitude;                                  // 0x1F54(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GainStaminaWhenLatchedRate;                              // 0x1F58(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AIAggroNotifyNeighborsClassesRangeScale;                 // 0x1F5C(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    LastFrameMoveRight;                                      // 0x1F60(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    LastFrameMoveLeft;                                       // 0x1F64(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            LastRiderMountedWeaponRotation;                          // 0x1F68(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DM3E[0xC];                                   // 0x1F74(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DeathGivesDossierIndex;                                  // 0x1F80(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DeathGivesDossierDelay;                                  // 0x1F84(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       TameGivesDossier;                                        // 0x1F88(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DULP[0x3];                                   // 0x1F89(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator_NetQuantizeSmartPitch                      LastMovementDesiredRotation_MountedWeaponry;             // 0x1F8C(0x000C) Net, Transient
		class FName                                                SaddleRiderMovementTraceThruSocketName;                  // 0x1F98(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwimmingRunSpeedModifier;                                // 0x1FA0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RidingSwimmingRunSpeedModifier;                          // 0x1FA4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     DinoDownloadedAtTime;                                    // 0x1FA8(0x0008) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		class FString                                              UploadedFromServerName;                                  // 0x1FB0(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic
		class FString                                              LatestUploadedFromServerName;                            // 0x1FC0(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPublic
		class FString                                              PreviousUploadedFromServerName;                          // 0x1FD0(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPublic
		class FString                                              TamedOnServerName;                                       // 0x1FE0(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPublic
		TArray<struct FDinoAncestorsEntry>                         DinoAncestors;                                           // 0x1FF0(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPublic
		TArray<struct FDinoAncestorsEntry>                         DinoAncestorsMale;                                       // 0x2000(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPublic
		TArray<struct FDinoAncestorsEntry>                         NextBabyDinoAncestors;                                   // 0x2010(0x0010) ZeroConstructor, Transient, SaveGame
		TArray<struct FDinoAncestorsEntry>                         NextBabyDinoAncestorsMale;                               // 0x2020(0x0010) ZeroConstructor, Transient, SaveGame
		int32_t                                                    MaxAllowedRandomMutations;                               // 0x2030(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    RandomMutationRolls;                                     // 0x2034(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RandomMutationChance;                                    // 0x2038(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RandomMutationGivePoints;                                // 0x203C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    RandomMutationsMale;                                     // 0x2040(0x0004) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    RandomMutationsFemale;                                   // 0x2044(0x0004) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    GestationEggRandomMutationsFemale;                       // 0x2048(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    GestationEggRandomMutationsMale;                         // 0x204C(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		class FName                                                WakingTameDistanceSocketName;                            // 0x2050(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    WakingTameConsumeEntireStackMaxQuantity;                 // 0x2058(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AttackPlayerDesirabilityMultiplier;                      // 0x205C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MW90[0x10];                                  // 0x2060(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FlyerAttachedExplosiveSpeedMultiplier;                   // 0x2070(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0NKX[0x4];                                   // 0x2074(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDinoExtraDefaultItemList>                   DinoExtraDefaultInventoryItems;                          // 0x2078(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      DeathGiveEngramClasses;                                  // 0x2088(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      SinglePlayerOutgoingDamageModifier;                      // 0x2098(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SinglePlayerIncomingDamageModifier;                      // 0x209C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1JFP[0x28];                                  // 0x20A0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        DinoLevelUpAnimationOverride;                            // 0x20C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      DamageVictimClassesIgnoreBlockingGeomtryTrace;           // 0x20D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_K25R[0x10];                                  // 0x20E0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CloneBaseElementCost;                                    // 0x20F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CloneElementCostPerLevel;                                // 0x20F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    LastValidTameVersion;                                    // 0x20F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    SavedLastValidTameVersion;                               // 0x20FC(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		class FName                                                NonDedicatedFreezeDinoPhysicsIfLevelUnloaded;            // 0x2100(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		TArray<class FName>                                        NonDedicatedFreezeWildDinoPhysicsIfLevelsUnloaded;       // 0x2108(0x0010) ZeroConstructor, Transient, SaveGame
		struct FVector                                             UnboardLocationTraceOffset;                              // 0x2118(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AttackLineOfSightMeshSocketName;                         // 0x2124(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AttackForceWalkDistanceMultiplier;                       // 0x212C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AttackForceWalkRotationRateMultiplier;                   // 0x2130(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    OverrideDinoTameSoundIndex;                              // 0x2134(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          SwimSound;                                               // 0x2138(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwimSoundIntervalPerHundredSpeed;                        // 0x2140(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WRUX[0x4];                                   // 0x2144(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              TamedAIControllerOverride;                               // 0x2148(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    PersonalTamedDinoCost;                                   // 0x2150(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2F77[0x4];                                   // 0x2154(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     UploadEarliestValidTime;                                 // 0x2158(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      StasisAutoDestroyInterval;                               // 0x2160(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CarryCameraYawOffset;                                    // 0x2164(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExtraDamageMultiplier;                                   // 0x2168(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExtraTamedBaseHealthMultiplier;                          // 0x216C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      attackRangeOffset;                                       // 0x2170(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DinoExtraIncreasePlayerCollisionActivationDistanceSquared; // 0x2174(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Y5S2[0x4];                                   // 0x2178(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OverrideApproachRadius;                                  // 0x217C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedOverrideStasisComponentRadius;                      // 0x2180(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_N0YS[0x4];                                   // 0x2184(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         UniqueDino_MapMarkerMesh;                                // 0x2188(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              UniqueDino_MapMarkerColor;                               // 0x2190(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      OverrideDinoMaxExperiencePoints;                         // 0x2194(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxDinoTameLevels;                                       // 0x2198(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    DestroyTamesOverLevelClampOffset;                        // 0x219C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NursingTroughFoodEffectivenessMultiplier;                // 0x21A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QS1P[0x4];                                   // 0x21A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      ForceAllowFoodAsConsumableList;                          // 0x21A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		int32_t                                                    CustomReplicatedData;                                    // 0x21B8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QK78[0x4];                                   // 0x21BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnNotifySetRider;                                        // 0x21C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnNotifyClearRider;                                      // 0x21D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnSetMountedDino;                                        // 0x21E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnClearMountedDino;                                      // 0x21F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnNotifyAddPassenger;                                    // 0x2200(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnNotifyClearPassenger;                                  // 0x2210(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		double                                                     NextAllowedBedUseTime;                                   // 0x2220(0x0008) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		float                                                      UseBedCooldownTime;                                      // 0x2228(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPGetOtherActorToIgnore : 1;                         // 0x222C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       UnknownData_PRDI : 1;                                    // 0x222C(0x0001) BIT_FIELD (PADDING)
		bool                                                       MutagenApplied : 1;                                      // 0x222C(0x0001) BIT_FIELD Net, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bAllowWhistleThroughRemoteDino : 1;                      // 0x222C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bForceValidUnstasisCaster : 1;                           // 0x222C(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bControlledDinoPreventsPlayerInventory : 1;              // 0x222C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bDinoFPVDisableMotionBlur : 1;                           // 0x222C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPaintingUseSaddle : 1;                                  // 0x222C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPaintingSupportSkins : 1;                               // 0x222D(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bDinoDontOverrideControllerPitch : 1;                    // 0x222D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOverridePassengerAdditiveAnim : 1;                 // 0x222D(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bReplicatePassengerTPVAim : 1;                           // 0x222D(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bForceDisableClientGravitySim : 1;                       // 0x222D(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor
		bool                                                       bUseBPGetTargetingDesirabilityForTurrets : 1;            // 0x222D(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_YY9V[0x2];                                   // 0x222E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CarriedAsBabyPassengerSizeLimitOverride;                 // 0x2230(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MutagenBaseCost;                                         // 0x2234(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    PaintTextureResolution;                                  // 0x2238(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BTKN[0x4];                                   // 0x223C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnFlyerStartLanding;                                     // 0x2240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnFlyerLanded;                                           // 0x2250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnFlyerLandingInterrupted;                               // 0x2260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		bool                                                       bOnlyDrawFloatingHUDAsLocalPlayerController;             // 0x2270(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bHasPlayerController;                                    // 0x2271(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XN16[0x6];                                   // 0x2272(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                CopyDinoSettingsRangeMesh;                               // 0x2278(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		unsigned char                                              GestationGenderOverride;                                 // 0x2280(0x0001) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		bool                                                       bUseBPOverrideIsSubmergedForWaterTargeting : 1;          // 0x2281(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_BNPJ[0x6];                                   // 0x2282(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPrimalInventoryComponent*                           SecondaryInventoryComponent;                             // 0x2288(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic

	public:
		void UpdateTribeGroupRanks(unsigned char NewTribeGroupPetOrderingRank, unsigned char NewTribeGroupPetRidingRank);
		void UpdateNextAllowedMatingTime(double fromTime);
		void UpdateMateBoost();
		void UpdateImprintingQuality(float NewImprintingQuality);
		void UpdateImprintingDetailsForController(class AShooterPlayerController* ForPC);
		void UpdateImprintingDetails(const class FString& NewImprinterName, uint64_t NewImprinterPlayerDataID);
		bool UpdateHasBuffPreventingUploading();
		void UpdateBabyCuddling(double NewBabyNextCuddleTime, unsigned char NewBabyCuddleType, class UClass* NewBabyCuddleFood);
		void UpdateAttackTargets();
		void UntameDino(float TamingAffinityLimit);
		void UnclaimDino(bool bDestroyAI);
		bool TamedProcessOrder(class APrimalCharacter* FromCharacter, EDinoTamedOrder OrderType, bool bForce, class AActor* enemyTarget);
		void TameDino(class AShooterPlayerController* ForPC, bool bIgnoreMaxTameLimit, int32_t OverrideTamingTeamID, bool bPreventNameDialog, bool bSkipAddingTamedLevels, bool bSuppressNotifications);
		void StopActiveState(bool bShouldResetAttackIndex);
		void StartSurfaceCameraForPassengers(float Yaw, float Pitch, float Roll);
		void StartSurfaceCameraForPassenger(class AShooterCharacter* Passenger, float Yaw, float Pitch, float Roll, bool bInvertTurnInput);
		void StartLanding(const struct FVector& OverrideLandingLocation);
		void SpawnNewAIController(class UClass* NewAIController, class UBehaviorTree* MissionBehaviorTreeOverride);
		class APrimalDinoCharacter* STATIC_SpawnFromDinoDataEx(const struct FARKDinoData& InDinoData, class UWorld* inWorld, const struct FVector& AtLocation, const struct FRotator& AtRotation, bool* dupedDino, int32_t ForTeam, bool bGenerateNewDinoID, class AShooterPlayerController* TamerController);
		class APrimalDinoCharacter* STATIC_SpawnFromDinoData(const struct FARKDinoData& InDinoData, class UWorld* inWorld, const struct FVector& AtLocation, const struct FRotator& AtRotation, int32_t ForTeam, bool bGenerateNewDinoID, class AShooterPlayerController* TamerController);
		void SpawnedPlayerFor(class AShooterPlayerController* PC, class APawn* ForPawn);
		class APrimalDinoCharacter* STATIC_SpawnDino(class UWorld* World, class UClass* DinoClass, const struct FVector& SpawnLoc, const struct FRotator& SpawnRot, float LevelMultiplier, int32_t ExtraLevelOffset, bool AddLevelOffsetBeforeMultiplier, bool bOverrideBaseNPCLevel, int32_t BaseLevelOverrideValue, bool bNPCDontWander, float NPCAIRangeMultiplier, int32_t NPCAbsoluteBaseLevel, bool bSpawnWithoutCapsuleOffset);
		bool ShouldForceFlee();
		bool ShouldDisableBasedCharactersCameraInterpolation(class APrimalCharacter* ForBasedChar);
		bool ShouldDealDamage(class AActor* TestActor);
		bool ShouldAttackOfPlayedAnimationStopMovement();
		void SetTurretModeMovementRestrictions(bool Enabled, bool bAlsoSetTurretMode);
		bool SetTurretMode(bool Enabled);
		void SetState(class UPrimalAIState* State);
		void SetStasisComponentRadius(float StasisOverrideRadius);
		void SetRider(class AShooterCharacter* aRider);
		void SetPreventSaving(bool fPreventSaving);
		void SetNextAllowedMatingTime(double NextAllowedMatingTime);
		void SetMovementAccelerationVector(const struct FVector& fVector);
		void SetLeftDynamicActorBaseTime(double NewLeftDynamicActorBaseTime);
		void SetLastMovementDesiredRotation(const struct FRotator& InRotation);
		void SetLastAttackTimeForAttack(int32_t AttackIndex, double NewTime);
		void SetImprintPlayer(class AShooterCharacter* forChar);
		void SetGestationData(const struct FUnreplicatedEggData& GestationData);
		void SetForceDisableClientGravitySim(bool bForceDisable);
		void SetFlight(bool bFly, bool bCancelForceLand, bool SkipAnimsPreventInputCheck);
		void SetCurrentAttackIndex(unsigned char index);
		void SetColorizationData(TArray<unsigned char> ColorData);
		void SetCharacterStatusTameable(bool bSetTameable, bool bCreateInventory, bool bInventoryForWakingTame);
		void SetBabyAge(float TheAge);
		void SetAnimWeightsForAttackAtIndex(int32_t AttackIndex, TArray<float> newWeights);
		void SetAllowedPaintingColorRegion(int32_t RegionIndex, bool bIsAllowed);
		void ServerUpdateAttackTargets(class AActor* attackTarget, const struct FVector& AttackLocation);
		void ServerToggleCharging();
		void ServerToClientsPlayAttackAnimation(int8_t AttackinfoIndex, int8_t animationIndex, float InPlayRate, const class FName& StartSectionName, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer, class AActor* MyTarget);
		void ServerTamedTick();
		void ServerSleepingTick();
		void ServerSetRiderMountedWeaponRotation(const struct FRotator& InVal);
		void ServerRequestWaterSurfaceJump();
		void ServerRequestToggleFlight();
		void ServerRequestBraking(bool bWantsToBrake);
		void ServerRequestAttack(int32_t AttackIndex);
		void ServerInterruptLanding();
		void ServerFinishedLanding();
		void ServerClearRider(int32_t OverrideUnboardDirection);
		void RidingTick(float DeltaSeconds);
		void ResetBrainComponent();
		void RequestTerminateEmbryo(class APlayerController* ForPC);
		void RequestDisplayEmbryoData(class APlayerController* ForPC, bool bEnable);
		void RemovePassenger(class APrimalCharacter* ACharacter, bool bFromCharacter, bool bFromPlayerController);
		void RemoveFromMeleeSwingHurtList(class AActor* anActor);
		void RemoveDinoReferenceFromLatchingStructure();
		void RefreshColorization(bool bForceRefresh);
		void RefreshBabyScaling();
		void ReassertColorization();
		void ProcessOrderMoveTo(const struct FVector& MoveToLoc, bool bClearFollowTargets);
		void ProcessOrderFollowTarget(class AActor* TheTarget, bool bClearFollowTargets);
		void ProcessOrderAttackTarget(class AActor* TheTarget, bool bClearFollowTargets);
		bool PreventShowingDinoTooltip();
		void PlayWeightedAttackAnimation();
		void PlayHardEndChargingShake();
		bool PlayedAnimationHasAttack();
		void OverrideRandomWanderLocation(const struct FVector& originalDestination, struct FVector* inVec);
		bool OverrideFinalWanderLocation(struct FVector* outVec);
		void OverrideBasedCharactersCameraInterpSpeed(class APrimalCharacter* ForBasedChar, float DefaultTPVCameraSpeedInterpMultiplier, float DefaultTPVOffsetInterpSpeed, float* TPVCameraSpeedInterpMultiplier, float* TPVOffsetInterpSpeed);
		void OnVoiceTalkingStateChanged(bool isTalking, bool bIsMuted);
		void OnUpdateMountedDinoMeshHiding(bool bshouldBeVisible);
		void OnUncryo(class AShooterPlayerController* ForPC);
		void OnSpawnedForItem(class UPrimalItem* ForItem);
		void OnSetMountedDino__DelegateSignature(class APrimalDinoCharacter* MountDino, class APrimalCharacter* forCharacter);
		void OnRep_Saddle();
		void OnRep_Rider();
		void OnRep_PassengerPerSeat();
		void OnRep_CarriedCharacter();
		void OnRep_bIsFlying();
		void OnRep_bIsCharging();
		void OnRep_bBonesHidden();
		void OnCryo(class AShooterPlayerController* ForPC);
		void OnClearMountedDino__DelegateSignature(class APrimalDinoCharacter* UnmountedDino, class APrimalCharacter* forCharacter);
		void NotifySetRider__DelegateSignature(class AShooterCharacter* RiderSetting, class APrimalDinoCharacter* ForDino);
		void NotifyFlyerLanded__DelegateSignature(class APrimalDinoCharacter* ForDino);
		void NotifyClientsEmbryoTerminated();
		void NotifyClearRider__DelegateSignature(class AShooterCharacter* RiderClearing, class APrimalDinoCharacter* ForDino);
		void NotifyClearPassenger__DelegateSignature(class APrimalCharacter* Passenger, class APrimalDinoCharacter* ForDino, int32_t SeatIndex);
		void NotifyAddPassenger__DelegateSignature(class APrimalCharacter* Passenger, class APrimalDinoCharacter* ForDino, int32_t SeatIndex);
		void NetUpdateDinoOwnerData(const class FString& NewOwningPlayerName, int32_t NewOwningPlayerID);
		void NetUpdateDinoNameStrings(const class FString& NewTamerString, const class FString& NewTamedName);
		void MulticastUpdateAllColorSets(int32_t Color0, int32_t Color1, int32_t Color2, int32_t Color3, int32_t Color4, int32_t Color5);
		void Multi_OnCryo(class AShooterPlayerController* ForPC);
		void LowerDinoBP(float val);
		void KeepFlightTimer();
		bool IsWakingTame();
		bool IsVoiceTalking();
		bool IsPassengerSeatAvailable(int32_t PassengerSeatIndex);
		bool IsMissionDino();
		bool IsInTekShield();
		bool IsInFlyerPreventionVolume();
		bool IsImprintPlayer(class AShooterCharacter* forChar);
		bool IsFleeing();
		bool IsCurrentlyPlayingAttackAnimation();
		bool IsCurrentAttackStopsMovement();
		bool IsAttacking();
		bool IsAllowedToTransfer(class UObject* WorldContextObject);
		bool IsAllowedToMate();
		bool IsActiveEventDino();
		void InterruptLatching();
		void InterruptLanding();
		bool InterceptRiderEmoteAnim(class UAnimMontage* EmoteAnim);
		bool InterceptMountedOnPlayerEmoteAnim(class UAnimMontage* EmoteAnim);
		void ImprintOnPlayerTarget(class AShooterPlayerController* ForPC, bool bIgnoreMaxTameLimit);
		bool HasTarget();
		bool HasSelfBuried();
		bool HasOfflineRider();
		bool HasBuffPreventingFlight();
		bool HasBuffPreventingClearRiderOnDinoImmobilized();
		void HandleMountedDinoAction(class AShooterPlayerController* PC);
		class UPrimalItem* GiveSaddleFromString(const class FString& blueprintPath, float Quality, float MinRandomQuality, bool bAutoEquip);
		class UPrimalItem* GiveSaddle(class UClass* SaddleType, float Quality, float MinRandomQuality, bool bAutoEquip);
		void GiveDeathDossier();
		unsigned char GetWiegthedAttack(float Distance, float attackRangeOffset, class AActor* OtherTarget);
		int32_t GetUntamedTargetingTeam();
		class AActor* GetTamedLandTarget();
		class AActor* GetTamedFollowTarget();
		class UPrimalAIState* GetStateOfPlayedAnimationAttack();
		struct FVector GetSocketLocationTemp(const class FName& SocketName);
		class FName GetSocketForMeleeTraceForHitBlockers(int32_t AttackIndex);
		int32_t GetSeatIndexForPassenger(class APrimalCharacter* PassengerChar);
		void GetSaddleMeshComponents(TArray<class UMeshComponent*>* OutMeshes);
		class USkeletalMeshComponent* GetSaddleMeshComponent();
		void GetSaddleActorComponents(TArray<class UActorComponent*>* OutMeshes);
		float GetRootYawSpeed(float DeltaTime);
		struct FRotator GetPlayerSpawnRotation();
		struct FVector GetPlayerSpawnLocation();
		int32_t GetPassengersSeatIndex(class APrimalCharacter* Passenger);
		void GetPassengersAndSeatIndexes(TArray<class APrimalCharacter*>* Passengers, TArray<int32_t>* Indexes);
		TArray<class APrimalCharacter*> GetPassengers();
		class APrimalCharacter* GetPassengerPerSeat(int32_t SeatIndex);
		int32_t GetNumPassengerSeats(bool bOnlyManualPassengerSeats);
		int32_t GetNumAvailablePassengerSeats(bool bOnlyManualPassengerSeats);
		double GetLastStartedTalkingTime();
		struct FVector GetLandingLocation();
		float GetGestationTimeRemaining();
		void GetGestationData(struct FUnreplicatedEggData* GestationData);
		bool GetForceTickPose();
		int32_t GetFoodItemEffectivenessMultipliersIndex(class UPrimalItem* foodItem);
		class UClass* GetFirstAffinityFoodItemClass();
		struct FVector GetDinoVelocity();
		class USoundBase* GetDinoTameSound();
		TArray<class AActor*> GetDinoPlatformCollisionIgnoreActors();
		class UAnimMontage* GetDinoLevelUpAnimation();
		void GetDinoIDsAsStrings(class FString* OutDinoID1, class FString* OutDinoID2);
		void GetDinoIDs(int32_t* OutDinoID1, int32_t* OutDinoID2);
		class UTexture* GetDinoEntryIcon();
		class FString GetDinoDescriptiveName(bool IgnoreArticle, bool IncludeDetails);
		double GetDinoDeathTime();
		void GetDinoData(struct FARKDinoData* OutDinoData);
		struct FLinearColor GetDinoColor(int32_t ColorRegionIndex);
		class FString GetCurrentDinoName(class APlayerController* ForPC);
		bool GetCurrentAttackInfo(int32_t* AttackIndex, struct FDinoAttackInfo* AttackInfo);
		struct FRotator GetCurrentAimOffsetsRotation();
		TArray<class FName> GetColorSetNamesAsArray();
		class FString GetColorSetInidcesAsString();
		TArray<unsigned char> GetColorizationData();
		struct FLinearColor GetColorForColorizationRegion(int32_t Region, int32_t ColorIndexOverride);
		class UClass* GetBedFilterClass();
		float GetBabyCuddleInterval();
		bool GetAllowedPaintingColorRegion(int32_t RegionIndex);
		TArray<class APrimalStructureExplosive*> GetAllAttachedExplosives(bool bInlcudeAttachedChars);
		struct FRotator GetAimOffsetsTransform(float DeltaTime, struct FTransform* RootRotOffsetTransform, float* TheRootYawSpeed, float MaxYawAimClamp, struct FVector* RootLocOffset);
		float GetAIFollowStoppingDistanceOffset();
		float GetAIFollowStoppingDistanceMultiplier();
		float GetAffinityIncreaseForFoodItem(class UPrimalItem* foodItem);
		struct FVector GetActorCenterTraceLocation();
		class UPrimalAIState* GetActiveState();
		void ForceUpdateColorSets(int32_t ColorRegion, int32_t ColorSet);
		void ForceSetTamedAggressionLevel(int32_t AggressionLevel);
		void ForceClearRider();
		void FireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, bool bScaleProjDamageByDinoDamage);
		void FireMultipleProjectilesEx(class UClass* ProjectileClass, TArray<struct FVector> Locations, TArray<struct FVector> Directions, bool bAddPawnVelocityToProjectile, bool bScaleProjDamageByDinoDamage, class USceneComponent* HomingTarget, const struct FVector& HomingTargetOffset, float OverrideInitialSpeed);
		void FireMultipleProjectiles(TArray<struct FVector> Locations, TArray<struct FVector> Directions, bool bScaleProjectileDamageByDinoDamage);
		void FedWakingTameDino();
		void EndCharging(bool bForce);
		void ElevateDinoBP(float val);
		float DoOverrideMountedAirControl(float AirControlIn);
		void DoNeuter();
		void DoDeathHarvestingFadeOut();
		bool DoAttack(int32_t AttackIndex, bool bSetCurrentAttack, bool bInterruptCurrentAttack);
		void DinoShoulderMountedLaunch(const struct FVector& launchDir, class AShooterCharacter* throwingCharacter);
		void DinoFireProjectileEx(class UClass* ProjectileClass, const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, bool bScaleProjDamageByDinoDamage, bool bAddDinoVelocityToProjectile, float OverrideInitialSpeed, float OverrideMaxSpeed, float ExtraDirectDamageMultiplier, float ExtraExplosionDamageMultiplier, bool spawnOnOwningClient);
		bool Die(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
		void DestroyController();
		void CycleAttackWeightsForAttackAtIndex(int32_t AttackIndex);
		class ADroppedItem* CreateCloneFertilizedEgg(const struct FVector& AtLoc, const struct FRotator& AtRot, class UClass* DroppedItemTemplateOverride, int32_t NumMutationsToAdd);
		class APrimalDinoCharacter* CreateBabyDino();
		void CopySettingsToOtherDino(class APlayerController* ForPC, class APrimalDinoCharacter* FromDino, class APrimalDinoCharacter* OtherDino, int32_t SettingTypeUseIndex);
		void CopyPaintingComponentFrom(class APrimalDinoCharacter* Other);
		void ClientStartLanding(const struct FVector& landingLoc);
		void ClientShouldNotifyLanded();
		void ClientInterruptLanding();
		void ClearTamedLandTarget();
		void ClearRider(bool bFromRider, bool bCancelForceLand, bool SpawnDinoDefaultController, int32_t OverrideUnboardDirection, bool bForceEvenIfBuffPreventsClear);
		void ClearPassengers();
		void ClearMountCharacter(bool bFromMountCharacter);
		void ClearCharacterAIMovement();
		void ClearCarriedCharacter(bool fromCarriedCharacter, bool bCancelAnyCarryBuffs);
		void CheckForTamedFoodConsumption(int32_t Steps);
		bool CarryCharacter(class APrimalCharacter* aRider, bool byPassCanCarryCheck);
		bool CanTakePassenger(class APrimalCharacter* ACharacter, int32_t PassengerSeatIndex, bool bForcePassenger, bool bAllowFlyersAndWaterDinos, bool bSkipLineTrace);
		bool CanOrder(class APrimalCharacter* FromCharacter, bool bBuildingStructures);
		bool CanNurseDino(class APrimalDinoCharacter* OtherDino);
		bool CanMount(class APrimalCharacter* ACharacter);
		bool CanFly();
		bool CanDinoAttackTargetsWithoutRider();
		bool CanCryo(class AShooterPlayerController* ForPC);
		bool CanClearRider();
		bool CancelCurrentAttack(bool bStopCurrentAttackAnim, float AttackAnimBlendOutTime);
		bool CanCarryCharacter(class APrimalCharacter* CanCarryPawn);
		bool CanAttack(int32_t AttackIndex);
		void BSetupDinoTameable();
		void BrakeDinoBP(float val);
		void BPUntamedConsumeFoodItem(class UPrimalItem* foodItem);
		float BPUnstasisConsumeFood(float FoodNeeded);
		void BPUnstasis();
		void BPUnsetupDinoTameable();
		void BPTamedConsumeFoodItem(class UPrimalItem* foodItem);
		class APrimalDinoCharacter* STATIC_BPStaticCreateBabyDinoNoAncestors(class UWorld* TheWorld, class UClass* EggDinoClassToSpawn, const struct FVector& theGroundLoc, float actorRotationYaw, TArray<unsigned char> EggColorSetIndices, TArray<unsigned char> EggNumberOfLevelUpPointsApplied, float EggTamedIneffectivenessModifier, int32_t NotifyTeamOverride, int32_t EggRandomMutationsFemale, int32_t EggRandomMutationsMale);
		class APrimalDinoCharacter* STATIC_BPStaticCreateBabyDino(class UWorld* TheWorld, class UClass* EggDinoClassToSpawn, const struct FVector& theGroundLoc, float actorRotationYaw, TArray<unsigned char> EggColorSetIndices, TArray<unsigned char> EggNumberOfLevelUpPointsApplied, float EggTamedIneffectivenessModifier, TArray<struct FDinoAncestorsEntry> EggDinoAncestors, TArray<struct FDinoAncestorsEntry> EggDinoAncestorsMale, int32_t NotifyTeamOverride, int32_t EggRandomMutationsFemale, int32_t EggRandomMutationsMale, int32_t EggGenderOverride);
		bool BPShowTamingPanel(bool currentVisibility);
		bool BPShouldForceFlee();
		bool BPShouldCancelDoAttack(int32_t AttackIndex);
		void BPSetupTamed(bool bWasJustTamed);
		float BPSetSimulatedInterpRollOverride();
		void BPSetInitialAimOffsetTargets(const struct FVector& TargetRootLoc, const struct FRotator& TargetAimRot, struct FVector* OutTargetRootLoc, struct FRotator* OutTargetAimRot);
		void BPSetForcedAggro(class AActor* TargetableActor, float AggroAmount, float ForcedAggroTime);
		void BPSentKilledNotification(class AShooterPlayerController* ToPC);
		void BPResetClone();
		bool BPPreventSpawnForPlayer(class AShooterPlayerController* PC, bool bCheckCooldownTime);
		bool BPPreventRiding(class AShooterCharacter* ByPawn, bool bDontCheckDistance);
		bool BPPreventOrderAllowed(class APrimalCharacter* FromCharacter, EDinoTamedOrder OrderType, bool bForce, class AActor* enemyTarget, bool orderNotExecuted);
		void BPPrepareForLaunchFromShoulder(const struct FVector& viewLoc, const struct FVector& viewDir);
		class FString BPOverrideTamingDescriptionLabel(struct FSlateColor* TextColor);
		EStencilAlliance BPOverrideStencilAllianceForTarget(class APrimalCharacter* TargetDino, class UPrimitiveComponent* Component);
		class UAnimSequence* BPOverridePassengerAdditiveAnim(class APrimalCharacter* ForPassenger);
		class FString BPOverrideMutationLabels(bool male);
		bool BPOverrideMoveToOrder(const struct FVector& MoveToLocation, class AShooterCharacter* OrderingPlayer);
		bool BPOverrideIsSubmergedForWaterTargeting();
		float BPOverrideHealthBarOffset(class APlayerController* ForPC);
		int32_t BPOverrideGetAttackAnimationIndex(int32_t AttackIndex, TArray<class UAnimMontage*> AnimationArray);
		struct FVector BPOverrideFloatingHUDLocation();
		void BPOverrideCameraViewTarget(const class FName& CurrentCameraMode, const struct FVector& DesiredCameraLocation, const struct FRotator& DesiredCameraRotation, float DesiredFOV, bool* bOverrideCameraLocation, struct FVector* CameraLocation, bool* bOverrideCameraRotation, struct FRotator* CameraRotation, bool* bOverrideCameraFOV, float* CameraFOV);
		void BPOrderedMoveToLoc(const struct FVector& DestLoc);
		void BPOnTamedProcessOrder(class APrimalCharacter* FromCharacter, EDinoTamedOrder OrderType, bool bForce, class AActor* enemyTarget, bool orderNotExecuted);
		bool BPOnStopJump();
		bool BPOnStartJump();
		void BPOnSetMountedDino();
		void BPOnSetFlight(bool bFly);
		void BPOnRepIsCharging();
		void BPOnRefreshColorization(TArray<struct FLinearColor> Colors);
		void BPOnEndCharging();
		void BPOnDinoStartled(class UAnimMontage* StartledAnimPlayed, bool bFromAIController);
		void BPOnDinoFiredProjectile(class AShooterProjectile* Projectile);
		void BPOnDinoCheat(const class FName& CheatName, bool bSetValue, float Value);
		void BPOnClearMountedDino();
		void BPNotifyWildHarvestAttack(int32_t harvestIndex);
		void BPNotifyStructurePlacedNearby(class APrimalStructure* NewStructure);
		void BPNotifySetRider(class AShooterCharacter* RiderSetting);
		void BPNotifyNameEditText(class AShooterPlayerController* ForPC);
		void BPNotifyMateBoostChanged();
		void BPNotifyIfPassengerLaunchShoulderMount(class APrimalCharacter* launchedCharacter);
		void BPNotifyClearRider(class AShooterCharacter* RiderClearing);
		void BPNotifyClearPassenger(class APrimalCharacter* PassengerChar, int32_t SeatIndex);
		void BPNotifyClaimed();
		void BPNotifyCarriedDinoBabyAgeIncrement(class APrimalDinoCharacter* AgingCarriedDino, float PreviousAge, float NewAge);
		void BPNotifyBabyAgeIncrement(float PreviousAge, float NewAge);
		void BPNotifyAddPassenger(class APrimalCharacter* PassengerChar, int32_t SeatIndex);
		void BPModifyHarvestingWeightsArray(TArray<float> resourceWeightsIn, TArray<class UPrimalItem*> resourceItems, TArray<float>* resourceWeightsOut);
		float BPModifyHarvestingQuantity(float originalQuantity, class UClass* resourceSelected);
		float BPModifyHarvestDamage(class UPrimalHarvestingComponent* harvestComponent, float inDamage);
		bool BPModifyDesiredRotation(float DeltaTime, const struct FRotator& InDesiredRotation, struct FRotator* OutDesiredRotation);
		bool BPModifyControlRotation(const struct FRotator& ControlRotation, struct FRotator* outControlRotation);
		struct FVector BPModifyAimOffsetTargetLocation(const struct FVector& AimTargetLocation);
		struct FRotator BPModifyAimOffsetNoTarget(const struct FRotator& Aim);
		void BPKilledSomethingEvent(class APrimalCharacter* killedTarget);
		bool BPIsValidUnStasisCaster();
		bool BPIsTamed();
		bool BPIsHidden();
		bool BPIsBasedOnActor(class AActor* Other);
		bool BPHasCurrentAttack();
		bool BPHandleUseButtonPress(class AShooterPlayerController* RiderController);
		bool BPHandleOnStopTargeting();
		bool BPHandleOnStopFire();
		bool BPHandleControllerInitiatedAttack(int32_t AttackIndex);
		float BPGetTargetingDesirability(class AActor* Attacker);
		TArray<struct FMultiUseEntry> BPGetRidingMultiUseEntries(class APlayerController* ForPC, TArray<struct FMultiUseEntry> MultiUseEntries);
		struct FVector BPGetRiderUnboardLocation(class APrimalCharacter* RidingCharacter);
		struct FVector BPGetRiderUnboardDirection(class APrimalCharacter* RidingCharacter);
		class FName BPGetRiderSocket();
		struct FVector BPGetPassengerDinoAdditionalOffset(class APrimalDinoCharacter* Passenger);
		class AActor* BPGetOtherActorToIgnore();
		class FName BPGetLookOffsetSocketName(class APrimalCharacter* ForPrimalChar);
		struct FVector BPGetHealthBarColor();
		class FName BPGetDragSocketName(class APrimalCharacter* DraggingChar);
		class FName BPGetDragSocketDinoName(class APrimalDinoCharacter* aGrabbedDino);
		struct FDinoSetup BPGetCustomDinoSetup();
		int32_t BPGetCurrentAttackIndex();
		float BPGetCrosshairSpread();
		void BPGetCrosshairLocation(float CanvasClipX, float CanvasClipY, float* OutX, float* OutY);
		struct FLinearColor BPGetCrosshairColor();
		float BPGetCrosshairAlpha();
		bool BPGetAttackOfPlayedAnimation(struct FDinoAttackInfo* AttackInfo);
		bool BPForceTurretFastTargeting();
		void BPForceReachedDestination();
		void BPFedWakingTameEvent(class APlayerController* ForPC);
		void BPDrawToRiderHUD(class AShooterHUD* HUD);
		void BPDoHarvestAttack(int32_t harvestIndex);
		void BPDoAttack(int32_t AttackIndex);
		bool BPDisplayTamedMessage();
		bool BPDinoTooltipCustomTorpidityProgressBar(bool* overrideTorpidityProgressBarIfActive, float* progressPercent, class FString* Label);
		bool BPDinoTooltipCustomTamingProgressBar(bool* overrideTamingProgressBarIfActive, float* progressPercent, class FString* Label);
		void BPDinoPrepareForARKUploading();
		void BPDinoPostBeginPlay();
		void BPDinoARKDownloadedEnd();
		void BPDinoARKDownloadedBegin();
		void BPDidSetCarriedCharacter(class APrimalCharacter* PreviousCarriedCharacter);
		void BPDidClearCarriedCharacter(class APrimalCharacter* PreviousCarriedCharacter);
		bool BPDesiredRotationIsLocalSpace();
		class AShooterCharacter* BPConsumeInventoryFoodItem(class UPrimalItem* foodItem, bool bConsumeEntireStack);
		float BPClampMaxHarvestHealth();
		bool BPCheckSeven();
		struct FVector BPCheckCanSpawnFromLocation(const struct FVector& CheckLocation);
		struct FVector BPChargingModifyInputAcceleration(const struct FVector& inputAcceleration);
		void BPCarriedDinoBabyRescaled(class APrimalDinoCharacter* AgingCarriedDino, float NewAge);
		bool BPCanTargetCorpse();
		bool BPCanTakePassenger(class APrimalCharacter* Character, int32_t PassengerSeatIndex, bool bForcePassenger, bool bAllowFlyersAndWaterDinos);
		bool BPCanMountOnCharacter(class APrimalCharacter* Character);
		bool BPCanLand(bool CanLand);
		bool BPCanIgnoreImmobilizationTrap(class UClass* TrapClass, bool bForceTrigger);
		bool BPCanDragCharacter(class APrimalCharacter* Character);
		bool BPCanCryo(class AShooterPlayerController* ForPC);
		bool BPCanAutodrag(class APrimalCharacter* characterToDrag);
		void BPBecomeBaby();
		void BPBecomeAdult();
		void BPBecameNewBaby(class APrimalDinoCharacter* Parent);
		bool BPAllowEquippingItemType(EPrimalEquipmentType equipmentType);
		bool BPAllowClaiming(class AShooterPlayerController* ForPlayer);
		bool BPAllowCarryCharacter(class APrimalCharacter* checkCharacter);
		int32_t BPAdjustAttackIndex(int32_t AttackIndex);
		bool BP_ShouldDisableBasedCharactersCameraInterpolation(class APrimalCharacter* ForBasedChar);
		bool BP_PreventUnmounting();
		bool BP_PreventCarryingByCharacter(class APrimalCharacter* ByCarrier);
		bool BP_PreventCarrying();
		struct FHitResult BP_OverrideRiderCameraCollisionSweep(const struct FVector& SweepStart, const struct FVector& SweepEnd);
		class FString BP_OverrideDinoName(const class FString& CurrentDinoName, class APlayerController* ForPC);
		bool BP_OverrideCarriedCharacterTransform(class APrimalCharacter* ForCarriedChar);
		void BP_OverrideBasedCharactersCameraInterpSpeed(class APrimalCharacter* ForBasedChar, float DefaultTPVCameraSpeedInterpMultiplier, float DefaultTPVOffsetInterpSpeed, float* TPVCameraSpeedInterpMultiplier, float* TPVOffsetInterpSpeed);
		void BP_OnUncryo(class AShooterPlayerController* ForPC);
		void BP_OnTargetedByTamedOrder(class APrimalCharacter* OrderingCharacter, class APrimalDinoCharacter* AttackingDino, bool bForced);
		void BP_OnTamedOrderReceived(class APrimalCharacter* FromCharacter, EDinoTamedOrder OrderType, bool bForce, class AActor* enemyTarget, bool orderNotExecuted);
		void BP_OnStartLandingNotify();
		void BP_OnStartLandFailed(int32_t ReasonIndex);
		void BP_OnRiderChangeWeapons(class AShooterCharacter* theRider, class UPrimalItem* newWeapon);
		void BP_OnPostNetReplication(const struct FVector& ReplicatedLoc, const struct FRotator& ReplicatedRot);
		void BP_OnLandingInterruptedNotify();
		void BP_OnCryo(class AShooterPlayerController* ForPC);
		void BP_OnBasedPawnRemovedNotify(class AActor* RemovedActor);
		void BP_OnBasedPawnAddedNotify(class AActor* AddedActor);
		bool BP_InterceptTurnInput(float AxisValue);
		bool BP_InterceptMoveRight(float AxisValue);
		bool BP_InterceptMoveForward(float AxisValue);
		float BP_GetCustomModifier_RotationRate();
		float BP_GetCustomModifier_MaxSpeed();
		bool BP_ForceAllowMountedWeapon(class UClass* WeaponTemplate);
		bool BP_CanFly();
		bool BP_AllowWalkableSlopeOverride(class UPrimitiveComponent* ForComponent);
		void BlueprintTamedTick();
		void BlueprintPlayDying(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
		bool BlueprintOverrideWantsToRun(bool bInputWantsToRun);
		class UClass* BlueprintOverrideHarvestDamageType(float* OutHarvestDamageMultiplier);
		float BlueprintGetAttackWeight(int32_t AttackIndex, float inputWeight, float Distance, float attackRangeOffset, class AActor* OtherTarget);
		float BlueprintExtraBabyScaling();
		void BlueprintDrawFloatingHUD(class AShooterHUD* HUD, float CenterX, float CenterY, float DrawScale);
		void BlueprintDestroyActor();
		bool BlueprintCanRiderAttack(int32_t AttackIndex);
		bool BlueprintCanAttack(int32_t AttackIndex, float Distance, float attackRangeOffset, class AActor* OtherTarget);
		float BlueprintAdjustOutputDamage(int32_t AttackIndex, float OriginalDamageAmount, class AActor* HitActor, class UClass** OutDamageType, float* OutDamageImpulse);
		void AssertColorNames();
		bool AreSpawnerSublevelsLoaded();
		void ApplyRidingAttackExtraVelocity();
		void ApplyMutagen();
		void AnimNotifyMountedDino();
		bool AllowWakingTame(class APlayerController* ForPC);
		bool AllowMountedWeaponry(bool bIgnoreCurrentWeapon, bool bWeaponForcesMountedWeaponry);
		bool AllowCarryCharacter(class APrimalCharacter* CanCarryPawn);
		bool AddToMeleeSwingHurtList(class AActor* anActor);
		bool AddPassenger(class APrimalCharacter* ACharacter, int32_t PassengerSeatIndex, bool bForcePassenger, bool bAllowFlyersAndWaterDinos, bool bSkipLineTrace);
		void AddedImprintingQuality(float amount);
		void AddDinoReferenceInLatchingStructure(class APrimalStructure* Structure);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalBotCharacter
	 * Size -> 0x00B0 (FullSize[0x2340] - InheritedSize[0x2290])
	 */
	class APrimalBotCharacter : public APrimalDinoCharacter
	{
	public:
		class USkeletalMesh*                                       AlternateSkeletalMesh;                                   // 0x2290(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              AlternateAnimBP;                                         // 0x2298(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       AlternateDinoRidingAnimation;                            // 0x22A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       AlternateDinoRidingMoveAnimation;                        // 0x22A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       HasMeleeWeapon;                                          // 0x22B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_F2PY[0x7];                                   // 0x22B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      RideableDinoClasses;                                     // 0x22B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bIsRiding;                                               // 0x22C8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DS4H[0x7];                                   // 0x22C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimSequence*                                       DefaultDinoRidingAnimation;                              // 0x22D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       DefaultDinoRidingMoveAnimation;                          // 0x22D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       UseAltAimOffsetAnimation;                                // 0x22E0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsStationary;                                           // 0x22E1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GI1N[0x2];                                   // 0x22E2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class APrimalDinoCharacter>                 DinoBeingRidden;                                         // 0x22E4(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		bool                                                       bIsUsingAlternateMesh;                                   // 0x22EC(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3VZX[0x53];                                  // 0x22ED(0x0053) MISSED OFFSET (PADDING)

	public:
		void OnRep_RidingDino();
		bool IsUsingAlternateSkelMesh();
		float GetMinAttackRange();
		float GetMaxAttackRange();
		class UAnimSequence* GetDinoRidingMoveAnimation();
		class UAnimSequence* GetDinoRidingAnimation();
		class UAnimSequence* GetBotAnimSequenceOverride(class UAnimSequence* AnimSeq);
		class APrimalDinoCharacter* CurrentlyRiddenDino();
		void ClearRidingDino();
		bool CanRideDino(class APrimalDinoCharacter* Dino);
		void AttachToDino(class APrimalDinoCharacter* Dino);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalRaft
	 * Size -> 0x0050 (FullSize[0x22E0] - InheritedSize[0x2290])
	 */
	class APrimalRaft : public APrimalDinoCharacter
	{
	public:
		class UTexture2D*                                          Icon;                                                    // 0x2290(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAudioComponent*                                     MovingSoundComponent;                                    // 0x2298(0x0008) ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class USoundBase*                                          MovingSoundCue;                                          // 0x22A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              RaftSpawnEffect;                                         // 0x22A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     NetworkCreationTime;                                     // 0x22B0(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		bool                                                       bRaftAllowCrafting : 1;                                  // 0x22B8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bBPOverrideSwimmingVelocity : 1;                         // 0x22B8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bBPOverrideSwimmingAcceleration : 1;                     // 0x22B8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bAllowOverrideUpdatesWhenNoRaftRider : 1;                // 0x22B8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bDisableGravityAdjustement : 1;                          // 0x22B8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseTracedSurfaceAdjustment : 1;                         // 0x22B8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bRaftAllowWalkingState : 1;                              // 0x22B8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bAllowTargetingBasedCharacters : 1;                      // 0x22B8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_MQ3H[0x3];                                   // 0x22B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SurfaceAdjustmentZInterpSpeed;                           // 0x22BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_717O[0x20];                                  // 0x22C0(0x0020) MISSED OFFSET (PADDING)

	public:
		void TempDisableForcedVelcoityDirection();
		struct FVector BPOverrideSwimmingVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float FluidFriction, float NetBuoyancy, float DeltaTime);
		bool BPAllowMovementSound();
		void BP_OverrideSwimmingAcceleration(struct FVector* ModifyAcceleration, float DeltaTime);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalWheeledVehicleCharacter
	 * Size -> 0x00E0 (FullSize[0x2370] - InheritedSize[0x2290])
	 */
	class APrimalWheeledVehicleCharacter : public APrimalDinoCharacter
	{
	public:
		class UWheeledVehicleMovementComponent*                    VehicleMovement;                                         // 0x2290(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		float                                                      RetainPlayerCameraRotationWhileMovingFor;                // 0x2298(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CameraRotationInterpolationSpeed;                        // 0x229C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class UPrimalWheeledVehicleDustType*                       DustType;                                                // 0x22A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystemComponent*                            DustPSC[0x4];                                            // 0x22A8(0x0020) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class UAudioComponent*                                     EngineAC;                                                // 0x22C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UAudioComponent*                                     HonkAC;                                                  // 0x22D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UAudioComponent*                                     SkidAC;                                                  // 0x22D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class USoundCue*                                           SkidSound;                                               // 0x22E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           HonkSound;                                               // 0x22E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           SkidSoundStop;                                           // 0x22F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           LandingSound;                                            // 0x22F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           ImpactSound;                                             // 0x2300(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SkidFadeoutTime;                                         // 0x2308(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SkidThresholdVelocity;                                   // 0x230C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LongSlipSkidThreshold;                                   // 0x2310(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LateralSlipSkidThreshold;                                // 0x2314(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SkidDurationRequiredForStopSound;                        // 0x2318(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0MFJ[0xC];                                   // 0x231C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SpringCompressionLandingThreshold;                       // 0x2328(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_N4ND[0x4];                                   // 0x232C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     DeathFX;                                                 // 0x2330(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UpForce;                                                 // 0x2338(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BackForce;                                               // 0x233C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bFollowCamera;                                           // 0x2340(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HZZB[0x3];                                   // 0x2341(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinimumDamageSpeed;                                      // 0x2344(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZF51[0x10];                                  // 0x2348(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             CenterTraceLocationOffset;                               // 0x2358(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_O2BN[0xC];                                   // 0x2364(0x000C) MISSED OFFSET (PADDING)

	public:
		void StopHonk();
		void StartHonk();
		void ServerHonk(bool bEnable);
		void NetHonk(bool bEnable);
		class UWheeledVehicleMovementComponent* GetVehicleMovementComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.VRMainBoss_Character
	 * Size -> 0x0010 (FullSize[0x22A0] - InheritedSize[0x2290])
	 */
	class AVRMainBoss_Character : public APrimalDinoCharacter
	{
	public:
		class AMissionType*                                        CurrentMission;                                          // 0x2290(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UNOR[0x8];                                   // 0x2298(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterCharacter
	 * Size -> 0x0B90 (FullSize[0x1D00] - InheritedSize[0x1170])
	 */
	class AShooterCharacter : public APrimalCharacter
	{
	public:
		unsigned char                                              UnknownData_LPSE[0x8];                                   // 0x1170(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent*                            ListenServerBoundsPSC;                                   // 0x1178(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        SpawnIntroAnim1P;                                        // 0x1180(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        RespawnIntroAnim1P;                                      // 0x1188(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        ProneInAnim;                                             // 0x1190(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        ProneOutAnim;                                            // 0x1198(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        StartRidingAnim;                                         // 0x11A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        StopRidingAnim;                                          // 0x11A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        TalkingAnim;                                             // 0x11B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        VoiceTalkingAnim;                                        // 0x11B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class UAnimMontage*>                                EmoteAnims;                                              // 0x11C0(0x0010) Edit, ZeroConstructor
		class UAnimMontage*                                        FireBallistaAnimation;                                   // 0x11D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        ReloadBallistaAnimation;                                 // 0x11D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        DraggingCharacterAnim;                                   // 0x11E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_G75T[0x8];                                   // 0x11E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bWasProne;                                               // 0x11F0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsPreviewCharacter;                                     // 0x11F1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9XYS[0x12];                                  // 0x11F2(0x0012) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WalkBobMagnitude;                                        // 0x1204(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WalkBobInterpSpeed;                                      // 0x1208(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TargetingTime;                                           // 0x120C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      BobMaxMovementSpeed;                                     // 0x1210(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WeaponBobMaxMovementSpeed;                               // 0x1214(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsTargeting : 1;                                        // 0x1218(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       bIsCrafting : 1;                                         // 0x1218(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       bIsRiding : 1;                                           // 0x1218(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bIsIndoors : 1;                                          // 0x1218(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bIsClimbing : 1;                                         // 0x1218(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor
		bool                                                       bIsViewingInventory : 1;                                 // 0x1218(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor
		bool                                                       bUseAlternateFallBlendspace : 1;                         // 0x1218(0x0001) BIT_FIELD Edit, Net, Transient, NoDestructor
		bool                                                       bIsFemale : 1;                                           // 0x1218(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPlaySpawnAnim : 1;                                      // 0x1219(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       bPlayFirstSpawnAnim : 1;                                 // 0x1219(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       bNoPhysics : 1;                                          // 0x1219(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, NoDestructor
		bool                                                       UnknownData_1OUI : 5;                                    // 0x1219(0x0001) BIT_FIELD (PADDING)
		bool                                                       bGaveInitialItems : 1;                                   // 0x121A(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, SaveGame, NoDestructor
		bool                                                       bReceivedGenesisSeasonPassItems : 1;                     // 0x121A(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor
		unsigned char                                              UnknownData_SD1D[0x265];                                 // 0x121B(0x0265) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DefaultWeapon;                                           // 0x1480(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              OverrideDefaultWeapon;                                   // 0x1488(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		class UClass*                                              MapWeapon;                                               // 0x1490(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              GPSWeapon;                                               // 0x1498(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              CompassWeapon;                                           // 0x14A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TMEX[0x8];                                   // 0x14A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PlayerName;                                              // 0x14B0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame
		TWeakObjectPtr<class APrimalDinoCharacter>                 RidingDino;                                              // 0x14C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class USkeletalMeshComponent*                              Mesh1P;                                                  // 0x14C8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		TArray<class FName>                                        LowerBodyPartRootBones;                                  // 0x14D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UPhysicsAsset*                                       FPVCameraAnimationPhysicsAsset;                          // 0x14E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        DropItemAnimation;                                       // 0x14E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        ThrowItemAnimation;                                      // 0x14F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        PickupItemAnimation;                                     // 0x14F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        ActivateInventoryAnimation;                              // 0x1500(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USkeletalMeshComponent*                              SurvivorProfilePreviewMesh;                              // 0x1508(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		struct FRotator                                            LastDinoAimRotationOffset;                               // 0x1510(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_D86Z[0xC];                                   // 0x151C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APrimalProjectileBoomerang*                          LastFiredBoomerang;                                      // 0x1528(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class APrimalProjectileGrapplingHook*                      LastFiredGrapHook;                                       // 0x1530(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UPrimalCableComponent*                               GrapplingHookCable;                                      // 0x1538(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class UAudioComponent*                                     LastGrapHookAC;                                          // 0x1540(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		int32_t                                                    _GrapHookCableObjectCount;                               // 0x1548(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             GrapHookDefaultOffset;                                   // 0x154C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GrapHookCableWidth;                                      // 0x1558(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_60C3[0x4];                                   // 0x155C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  GrapHookMaterial;                                        // 0x1560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LadderLateralJumpVelocity;                               // 0x1568(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GrapHookPulledRopeDistance;                              // 0x156C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      GrapHookSyncTime;                                        // 0x1570(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bReleasingGrapHook;                                      // 0x1574(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_J8G9[0x3];                                   // 0x1575(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PlatformProfileName;                                     // 0x1578(0x0010) Net, ZeroConstructor, Transient, SaveGame
		struct FUniqueNetIdRepl                                    PlatformProfileID;                                       // 0x1588(0x0010) Net, Transient, SaveGame
		TArray<struct FPlayerStatusStateCharacterSound>            CharacterStatusStateSounds;                              // 0x1598(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		class UAudioComponent*                                     CharacterStatusStateSoundComponent;                      // 0x15A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_VENU[0x38];                                  // 0x15B0(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DefaultTPVAnimBlueprint;                                 // 0x15E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class FName                                                WeaponAttachPoint;                                       // 0x15F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      TargetingSpeedModifier;                                  // 0x15F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_5U6F[0x4];                                   // 0x15FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           LowHealthSound;                                          // 0x1600(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UAnimMontage*                                        CallFollowAnim;                                          // 0x1608(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UAnimMontage*                                        CallStayAnim;                                            // 0x1610(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UAnimMontage*                                        CallFollowAnimSingle;                                    // 0x1618(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UAnimMontage*                                        CallStayAnimSingle;                                      // 0x1620(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UAnimMontage*                                        CallMoveToAnim;                                          // 0x1628(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UAnimMontage*                                        CallAttackAnim;                                          // 0x1630(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UAudioComponent*                                     LowHealthWarningPlayer;                                  // 0x1638(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_9SIU[0x20];                                  // 0x1640(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CraftingMovementSpeedModifier;                           // 0x1660(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             WeaponBobMagnitudes;                                     // 0x1664(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             WeaponBobPeriods;                                        // 0x1670(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             WeaponBobOffsets;                                        // 0x167C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             WeaponBobMagnitudes_Targeting;                           // 0x1688(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             WeaponBobPeriods_Targeting;                              // 0x1694(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             WeaponBobOffsets_Targeting;                              // 0x16A0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WeaponBobMinimumSpeed;                                   // 0x16AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WeaponBobSpeedBase;                                      // 0x16B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WeaponBobSpeedBaseFalling;                               // 0x16B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YCKC[0x8];                                   // 0x16B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FItemAttachmentInfo>                         DefaultAttachmentInfos;                                  // 0x16C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference
		class USoundCue*                                           StartCrouchSound;                                        // 0x16D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           EndCrouchSound;                                          // 0x16D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           StartProneSound;                                         // 0x16E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           EndProneSound;                                           // 0x16E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              NextInventoryWeapon;                                     // 0x16F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		struct FItemNetID                                          PreMapWeaponItemNetID;                                   // 0x16F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		float                                                      ServerSeatedViewRotationYaw;                             // 0x1700(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ServerSeatedViewRotationPitch;                           // 0x1704(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class AShooterWeapon*                                      CurrentWeapon;                                           // 0x1708(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, RepNotify, NoDestructor
		bool                                                       bDrawHealthBar : 1;                                      // 0x1710(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_546P[0x3];                                   // 0x1711(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HealthBarOffsetY;                                        // 0x1714(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bBPOverrideHealthBarOffset : 1;                          // 0x1718(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseCustomHealthBarColor : 1;                            // 0x1718(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_T761[0x7];                                   // 0x1719(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint64_t                                                   LinkedPlayerDataID;                                      // 0x1720(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_S37C[0x20];                                  // 0x1728(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AShooterPlayerController>             LastValidPlayerController;                               // 0x1748(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        DrinkingAnimation;                                       // 0x1750(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_36YY[0x28];                                  // 0x1758(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      IndoorsHyperthermiaInsulation;                           // 0x1780(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      IndoorsHypothermiaInsulation;                            // 0x1784(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      IndoorCheckInterval;                                     // 0x1788(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LYOP[0xC];                                   // 0x178C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FItemNetID                                          PreRidingWeaponItemNetID;                                // 0x1798(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FItemNetID                                          PreInventoryWeaponItemNetID;                             // 0x17A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<struct FOverrideAnimBlueprintEntry>                 OverrideAnimBlueprints;                                  // 0x17A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UAnimSequence*                                       ViewingInventoryAnimation;                               // 0x17B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       DefaultDinoRidingAnimation;                              // 0x17C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       DefaultDinoRidingMoveAnimation;                          // 0x17C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       DefaultSeatingAnimation;                                 // 0x17D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       DefaultShieldAnimation;                                  // 0x17D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        ShieldCoverAnimation;                                    // 0x17E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        ShieldCoverAnimationForCrouch;                           // 0x17E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableLookYaw : 1;                                     // 0x17F0(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bPlayingShieldCoverAnimation : 1;                        // 0x17F0(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bPlayingShieldCoverAnimationForCrouch : 1;               // 0x17F0(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bTriggerBPUnstasis : 1;                                  // 0x17F0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_39EF : 4;                                    // 0x17F0(0x0001) BIT_FIELD (PADDING)
		bool                                                       bHatHidden : 1;                                          // 0x17F1(0x0001) BIT_FIELD Net, Transient, SaveGame, RepNotify, NoDestructor
		bool                                                       UnknownData_MHU2 : 1;                                    // 0x17F1(0x0001) BIT_FIELD (PADDING)
		bool                                                       bAllowDPC : 1;                                           // 0x17F1(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       UnknownData_WSP2 : 1;                                    // 0x17F1(0x0001) BIT_FIELD (PADDING)
		bool                                                       bIsConnected : 1;                                        // 0x17F1(0x0001) BIT_FIELD Net, Transient, NoDestructor
		bool                                                       UnknownData_EU28 : 2;                                    // 0x17F1(0x0001) BIT_FIELD (PADDING)
		bool                                                       bLockedToSeatingStructure : 1;                           // 0x17F1(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
		bool                                                       bPreventAllWeapons : 1;                                  // 0x17F2(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor
		bool                                                       bForceBuffAimOverride : 1;                               // 0x17F2(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, NoDestructor
		unsigned char                                              UnknownData_8TW2[0x1];                                   // 0x17F3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EnemyPlayerMaxCursorHUDDistanceProne;                    // 0x17F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      EnemyPlayerMaxCursorHUDDistanceCrouched;                 // 0x17F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      EnemyPlayerMaxCursorHUDDistanceStanding;                 // 0x17FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7H9U[0x8];                                   // 0x1800(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSaddlePassengerSeatDefinition                      CurrentPassengerSeatDefinition;                          // 0x1808(0x00A8) BlueprintVisible, BlueprintReadOnly, Transient
		TArray<class UAnimMontage*>                                AnimsOverrideFrom;                                       // 0x18B0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		TArray<class UAnimMontage*>                                AnimOverrideTo;                                          // 0x18C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		TArray<class UAnimSequence*>                               AnimSequencesOverrideFrom;                               // 0x18D0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		TArray<class UAnimSequence*>                               AnimSequenceOverrideTo;                                  // 0x18E0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_T2KK[0x4];                                   // 0x18F0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        BodyColors[0x4];                                         // 0x18F4(0x0040) Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              FacialHairIndex;                                         // 0x1934(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              HeadHairIndex;                                           // 0x1935(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MXQN[0x2];                                   // 0x1936(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RawBoneModifiers[0x16];                                  // 0x1938(0x0058) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor
		unsigned char                                              UnknownData_5UIA[0x10];                                  // 0x1990(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LoggedOutTargetingDesirability;                          // 0x19A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsRainWatered;                                          // 0x19A4(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_I4TT[0xF];                                   // 0x19A5(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   UniqueNetIdTypeHash;                                     // 0x19B4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor
		uint32_t                                                   SplitscreenMainPlayerUniqueNetIdTypeHash;                // 0x19B8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DDYP[0x14];                                  // 0x19BC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        SpawnAnim;                                               // 0x19D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        FirstSpawnAnim;                                          // 0x19D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_16SX[0x18];                                  // 0x19E0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     SavedLastTimeHadController;                              // 0x19F8(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		double                                                     LastTimeHadController;                                   // 0x1A00(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		double                                                     LastTaggedTime;                                          // 0x1A08(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		double                                                     LastTaggedTimeExtra;                                     // 0x1A10(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		double                                                     LastTaggedTimeThird;                                     // 0x1A18(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ExtraFloatVar;                                           // 0x1A20(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             ExtraVectorVar;                                          // 0x1A24(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             ExtraExtraVectorVar;                                     // 0x1A30(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                ExtraNameVar;                                            // 0x1A3C(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsOnSeatingStructure;                                   // 0x1A44(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsControllingBallista;                                  // 0x1A45(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseBallistaAimOffset;                                   // 0x1A46(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_U5WC[0x1];                                   // 0x1A47(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CurrentControlledBallistaYaw;                            // 0x1A48(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsServerAdmin;                                          // 0x1A4C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AL2M[0x3];                                   // 0x1A4D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class APrimalStructureSeating>              SeatingStructure;                                        // 0x1A50(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    SeatingStructureSeatNumber;                              // 0x1A58(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6PI7[0x1C];                                  // 0x1A5C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          ThrowCharacterSound;                                     // 0x1A78(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_T0SI[0x10];                                  // 0x1A80(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              PlayerBadgeGroup;                                        // 0x1A90(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bShouldInvertTurnInput;                                  // 0x1A91(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0N6W[0x36];                                  // 0x1A92(0x0036) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InventoryDragWeightScale;                                // 0x1AC8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CKDX[0x4];                                   // 0x1ACC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        MountedCarryingDinoAnimation;                            // 0x1AD0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        CuddleAnimation;                                         // 0x1AD8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AK6B[0x40];                                  // 0x1AE0(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimSequence*                                       CharacterAdditiveStandingAnim;                           // 0x1B20(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EBJ7[0x10];                                  // 0x1B28(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent*                              HeadHairComponent;                                       // 0x1B38(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class USkeletalMeshComponent*                              FacialHairComponent;                                     // 0x1B40(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class USkeletalMesh*                                       DefaultHeadHairMesh;                                     // 0x1B48(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USkeletalMesh*                                       DefaultFacialHairMesh;                                   // 0x1B50(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      IntervalForFullHeadHairGrowth;                           // 0x1B58(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      IntervalForFullFacialHairGrowth;                         // 0x1B5C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PercentOfFullFacialHairGrowth;                           // 0x1B60(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      PercentOfFullHeadHairGrowth;                             // 0x1B64(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		struct FLinearColor                                        OriginalHairColor;                                       // 0x1B68(0x0010) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		struct FShooterCharacterPostUpdateTickFunction             PostUpdateTick;                                          // 0x1B78(0x0050)
		unsigned char                                              UnknownData_91H6[0xC];                                   // 0x1BC8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ReplicatedWeight;                                        // 0x1BD4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UParticleSystemComponent*                            LocalCorpseEmitter;                                      // 0x1BD8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		double                                                     LocalDiedAtTime;                                         // 0x1BE0(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RXJD[0x8];                                   // 0x1BE8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          ProneMoveSound;                                          // 0x1BF0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     UploadEarliestValidTime;                                 // 0x1BF8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SPX2[0x10];                                  // 0x1C00(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent*                            JunctionLinkCableParticle;                               // 0x1C10(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KQG5[0x18];                                  // 0x1C18(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPreventWeaponMovementAnims;                             // 0x1C30(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XCCC[0x3];                                   // 0x1C31(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class APrimalStructure>                     CurrentItemBalloon;                                      // 0x1C34(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Z0MX[0x4];                                   // 0x1C3C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             NotifyWeaponUnequipped;                                  // 0x1C40(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             NotifyWeaponEquipped;                                    // 0x1C50(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             NotifyWeaponFired;                                       // 0x1C60(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             NotifyOnWeaponEquip;                                     // 0x1C70(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		int32_t                                                    PlayerHexagonCount;                                      // 0x1C80(0x0004) BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    DefaultHexagonAmountEarnedOnMissionCompletion;           // 0x1C84(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2X52[0x14];                                  // 0x1C88(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MeshHeightAdjustment;                                    // 0x1C9C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BuffExtraDamageMultiplier;                               // 0x1CA0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bNormalizeHeadPosition;                                  // 0x1CA4(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_72ST[0x3];                                   // 0x1CA5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnFirstPersonCameraView;                                 // 0x1CA8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnThirdPersonCameraView;                                 // 0x1CB8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		uint32_t                                                   ExpectedBaseID;                                          // 0x1CC8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0HNP[0x4];                                   // 0x1CCC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastExpectedBaseTime;                                    // 0x1CD0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bPreventShowHUDOnSpawnIntroCompletion;                   // 0x1CD8(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9KJ8[0x3];                                   // 0x1CD9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHideFloatingHUD : 1;                                    // 0x1CDC(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       bForceDrawHUD : 1;                                       // 0x1CDC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceSeatingAnim : 1;                                   // 0x1CDC(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_0T15[0x3];                                   // 0x1CDD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAudioComponent*                                     DialogueSoundComponent;                                  // 0x1CE0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HF14[0x18];                                  // 0x1CE8(0x0018) MISSED OFFSET (PADDING)

	public:
		void WeaponEvent__DelegateSignature(class AShooterWeapon* weapon);
		bool UseAlternateStandingAnim();
		bool UseAltAimOffsetAnim();
		bool UseAdditiveStandingAnim();
		void UpdateExpectedBase();
		void UpdateAutoTurn();
		void UpdateAutoPlayer();
		void UpdateAutoMove();
		void UpdateAutoJump();
		void UpdateAutoFire();
		void TryCutEnemyGrapplingCable();
		void SyncGrapHookDistance(float Distance);
		class AActor* StructurePlacementUseAlternateOriginActor();
		void StartWeaponSwitch(class UPrimalItem* aPrimalItem, bool bDontClearLastWeapon);
		void StartCameraTransition(float Duration);
		void ShowWeapon();
		void SetPreventEquipAllWeapons(bool bPrevent);
		bool SetPlayerHexagonCount(int32_t NewHexagonCount);
		void SetExpectedBase(class APrimalStructure* BaseStructure);
		void SetCarriedPitchYaw(float NewCarriedPitch, float NewCarriedYaw);
		void SetCameraMode(bool bFirstperson, bool bIgnoreSettingFirstPersonRiding, bool bForce);
		void SetAutoPlayer(bool bEnable);
		void ServerToClientsPlayFireBallistaAnimation();
		void ServerSwitchMap();
		void ServerSwitchBallistaAmmo();
		void ServerStopFireBallista();
		void ServerStartSurfaceCameraForPassenger(float Yaw, float Pitch, float Roll, bool bShouldInvertInput);
		void ServerSetViewingInventory(bool bIsViewing);
		void ServerSetTargeting(bool bNewTargeting);
		void ServerSetBallistaTargeting(bool StartTargeting);
		void ServerSetBallistaNewRotation(float Pitch, float Yaw);
		void ServerSeatingStructureAction(unsigned char ActionNumber);
		void ServerRequestHexagonTrade(int32_t RequestedTradableItemIndex, int32_t Quantity);
		void ServerReleaseGrapHookCable(bool bReleasing);
		void ServerPrepareMountedDinoForLaunch(const struct FVector& viewLoc, const struct FVector& viewDir);
		void ServerPlayFireBallistaAnimation();
		void ServerNotifyBallistaShot(const struct FHitResult& Impact, const struct FVector_NetQuantizeNormal& ShootDir);
		void ServerNetEndClimbingLadder(bool bIsClimbOver, const struct FVector& ClimbOverLoc, float RightDir);
		void ServerLaunchMountedDino();
		void ServerForceUpdatedAimedActors(float OverrideMaxDistance, bool bReplicateToSimulatedClients);
		void ServerFireBallistaProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir);
		void ServerDetachGrapHookCable(bool bDoUpwardsJump, float UpwardsJumpYaw);
		void ServerClearSwitchingWeapon(bool bOnlyIfDefaultWeapon, bool bClientRequestNextWeaponID);
		void ServerCheckDrinkingWater();
		void RenamePlayer(const class FString& NewName);
		void RefreshRiderSocket();
		void PlayEmoteAnimation(unsigned char EmoteIndex);
		void PlayDrinkingAnimation();
		void OnWeaponUnequipped(class AShooterWeapon* OldWeapon);
		void OnWeaponEquipped(class AShooterWeapon* newWeapon);
		void OnThirdPersonCameraView__DelegateSignature();
		void OnRep_RawBoneModifiers();
		void OnRep_HatHidden();
		void OnRep_CurrentWeapon(class AShooterWeapon* LastWeapon);
		void OnFirstPersonCameraView__DelegateSignature();
		void NetSimulatedForceUpdateAimedActors(float OverrideMaxDistance);
		void NetSetOverrideHeadHairColor(const struct FLinearColor& HairColor);
		void NetSetOverrideFacialHairColor(const struct FLinearColor& HairColor);
		void NetSetHeadHairPercent(float thePercent, int32_t newHeadHairIndex);
		void NetSetFacialHairPercent(float thePercent, int32_t newFacialHairIndex);
		class FString LinkedPlayerIDString();
		void LaunchMountedDino();
		bool IsWatchingExplorerNote();
		bool IsUsingShield();
		bool IsUsingClimbingPick();
		bool IsTargeting();
		bool IsPlayingUpperBodyCallAnimation();
		bool IsPlayingRepawnAnim();
		bool IsPlayingInitialSpawnAnim();
		bool IsOutside();
		bool IsNearTopOfLadder();
		bool STATIC_IsIndoorsAtLoc(class UWorld* TheWorld, const struct FVector& actorLoc);
		bool IsGrapplingHardAttached();
		bool IsGrapplingAttachedToMe();
		bool IsFiring();
		bool IsCurrentPassengerLimitCameraYaw();
		bool IsCarriedAsPassenger();
		bool IsBlockingWithShield();
		void HideWeapon();
		bool HasAnyOtherBuffsUsingConsolidatedMultiUse(class APrimalBuff* BuffToSkip);
		void GivePrimalItemWeapon(class UPrimalItem* aPrimalItem);
		int32_t GiveHexagonsOnMissionReward(const class FName& MissionTag, int32_t BonusEarnedHexagons, int32_t HexagonAmountOverride);
		int32_t GiveHexagons(int32_t NumHexagons, int32_t TriggerIndex, float OverrideHexGainFalloffRate, int32_t OverrideHexGainFalloffMin, float OverrideCollectSFXVolume, const struct FVector& OverrideVfxSpawnLoc, int32_t OverrideHexagonVFXActorCount, bool VFXImmediatelyAttracts);
		void GiveDefaultWeaponTimer();
		void GiveDefaultWeapon(bool bForceGiveDefaultWeapon);
		class AShooterWeapon* GetWeapon();
		float GetTargetingSpeedModifier();
		class AShooterPlayerController* GetSpawnedForController();
		class UAnimSequence* GetSeatingAnimation();
		float GetRidingDinoAnimSpeedRatio();
		class APrimalDinoCharacter* GetRidingDino();
		int32_t GetPlayerHexagonCount();
		class UPrimalPlayerData* GetPlayerData();
		float GetPercentageOfHeadHairGrowth();
		float GetPercentageOfFacialHairGrowth();
		double GetLastAttackTime();
		int32_t GetHeadHairIndex();
		struct FLinearColor GetHeadHairColor();
		int32_t GetFacialHairIndex();
		struct FLinearColor GetFacialHairColor();
		class UAnimSequence* GetDinoRidingMoveAnimation();
		class UAnimSequence* GetDinoRidingAnimation();
		bool GetBlockingShieldOffsets(struct FVector* OutBlockingShieldFPVTranslation, struct FRotator* OutBlockingShieldFPVRotation);
		class UAnimSequence* GetAlternateStandingAnim(float* OutBlendInTime, float* OutBlendOutTime);
		bool GetAdditiveStandingAnimNonAdditive();
		class UAnimSequence* GetAdditiveStandingAnim(float* OutBlendInTime, float* OutBlendOutTime);
		float GetActualTargetingFOV(float DefaultTargetingFOV);
		class AMissionType* GetActiveMission();
		void GameStateHandleEvent(const class FName& NameParam, const struct FVector& VecParam);
		void FinishWeaponSwitch();
		class AShooterCharacter* STATIC_FindForPlayerController(class AShooterPlayerController* aPC);
		void DetachGrapHookCable();
		void DetachFromLadder();
		void ClientUpdateTranspondersInfo(TArray<struct FTransponderInfo> TranspondersInfo, bool bNewData);
		void ClientsSpawnHexagonVFX(int32_t NumHexagons, float OverrideCollectSFXVolume, const struct FVector& OverrideVfxSpawnLoc, int32_t OverrideHexagonVFXActorCount, bool VFXImmediatelyAttracts);
		void ClientSetExpectedBase(uint32_t BaseID);
		void ClientReceiveNextWeaponID(const struct FItemNetID& theItemID);
		void ClientPlayHarvestAnim();
		void ClientNotifyTribeRequest(const class FString& RequestTribeName, class AShooterCharacter* PlayerCharacter);
		void ClientNetEndClimbingLadder();
		void ClientInviteToAlliance(int32_t RequestingTeam, uint32_t AllianceID, const class FString& AllianceName, const class FString& InviteeName);
		void ClientClearTribeRequest();
		void ClearSpawnAnim();
		void ClearRidingDino(bool bFromDino, int32_t OverrideUnboardDirection, bool bForceEvenIfBuffPreventsClear);
		bool CanEquipWeapons();
		void CallGameStateHandleEvent(const class FName& NameParam, const struct FVector& VecParam);
		bool BuffsPreventFirstPerson();
		void BreakGrapple();
		void BPUnstasis();
		void BPUnlockedAllExplorerNotes();
		void BPSetupFirstPersonHandsMesh();
		bool BPSetPlayerHexagonCount(int32_t NewHexagonCount);
		void BPSetFirstPersonMasterPoseComponent(class USkeletalMeshComponent* firstPersonMasterPosecomponent);
		float BPOverrideHealthBarOffset(class APlayerController* ForPC);
		void BPNonDedicatedPostAnimUpdate();
		int32_t BPGetPlayerHexagonCount();
		struct FVector BPGetHealthBarColor();
		void AuthPostSpawnInit();
		void AttachToLadder(class USceneComponent* Parent);
		void ApplyBoneModifiers();
		void ApplyBodyColors(class USkeletalMeshComponent* toMesh);
		bool AnimUseAimOffset();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalUI
	 * Size -> 0x02D8 (FullSize[0x0518] - InheritedSize[0x0240])
	 */
	class UPrimalUI : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_H1SP[0x18];                                  // 0x0240(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bCaptureMouseInput;                                      // 0x0258(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsClosing;                                              // 0x0259(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bWantsPrimalItemNotifications;                           // 0x025A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Z2L7[0x5];                                   // 0x025B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DefaultToolTipWidget;                                    // 0x0260(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bEscapeClosesMenu;                                       // 0x0268(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bEscapeOpensPauseMenu;                                   // 0x0269(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bClickClosesMenu;                                        // 0x026A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsGameplayUI;                                           // 0x026B(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsTopUI;                                                // 0x026C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		EHighlightStartingPoint                                    HighlightStartPointType;                                 // 0x026D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8G5E[0x2];                                   // 0x026E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ConfirmationDialogUITemplate;                            // 0x0270(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              XBoxFooterUITemplate;                                    // 0x0278(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowCancelIcon;                                         // 0x0280(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowAcceptIcon;                                         // 0x0281(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowLStickIcon;                                         // 0x0282(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowRStickIcon;                                         // 0x0283(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowBumpersIcon;                                        // 0x0284(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowStartBtnIcon;                                       // 0x0285(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowLTBtnIcon;                                          // 0x0286(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowRTBtnIcon;                                          // 0x0287(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowFaceBtnLeftIcon;                                    // 0x0288(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowFaceBtnTopIcon;                                     // 0x0289(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowFaceBtnRightIcon;                                   // 0x028A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowFaceBtnBottomIcon;                                  // 0x028B(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowLeftShoulderBtnIcon;                                // 0x028C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowXBoxFooter;                                         // 0x028D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIgnoreUIScaling;                                        // 0x028E(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_URG5[0x1];                                   // 0x028F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SplitscreenDPIScaler;                                    // 0x0290(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDoExtraDataListButtonPanelFilteringChecks;              // 0x0294(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JT4R[0x3];                                   // 0x0295(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                DefaultHighlightWidgetOverrideName;                      // 0x0298(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShouldValidateInputOnRemove;                            // 0x02A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CSLB[0x1BF];                                 // 0x02A1(0x01BF) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             HTTPGetResponseEvent;                                    // 0x0460(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		TWeakObjectPtr<class APrimalStructureItemContainer>        ItemContainer;                                           // 0x0470(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TSXR[0xA0];                                  // 0x0478(0x00A0) MISSED OFFSET (PADDING)

	public:
		void SetInputMode();
		void RemovedFromViewport();
		struct FEventReply OnMouseButtonDownEvent(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
		struct FEventReply OnKeyUpEvent(const struct FGeometry& MyGeometry, const struct FKeyboardEvent& InKeyboardEvent);
		struct FEventReply OnKeyDownEvent(const struct FGeometry& MyGeometry, const struct FKeyboardEvent& InKeyboardEvent);
		void OnHTTPGetResponse__DelegateSignature(bool bSuccess, const class FString& StringResult);
		void OnConfirmationDialogClosed(bool bAccept);
		void HTTPGetString(const class FString& InURL);
		class AShooterHUD* GetShooterHUD();
		class AShooterPlayerState* GetPlayerState();
		class AShooterPlayerController* GetPC();
		class APrimalCharacter* GetPawn();
		void CloseWithAnimation();
		void ClickedSecondaryButton(class UWidget* clickedWidget);
		void ClickedButton(class UWidget* clickedWidget);
		void BPProcessSplitscreenAndAddToViewport(bool ScaleX);
		void AddedToViewport();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_Spawn
	 * Size -> 0x05F0 (FullSize[0x0B08] - InheritedSize[0x0518])
	 */
	class UUI_Spawn : public UPrimalUI
	{
	public:
		class FName                                                SkinColorPreviewName;                                    // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HairColorPreviewName;                                    // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EyeColorPreviewName;                                     // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SavedPresetListPanelName;                                // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                IslandRgionButtonListPanelName;                          // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LoadConfirmationButtonName;                              // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CancelLoadButtonName;                                    // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LoadFromFileScrollBoxName;                               // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RandomizeButtonName;                                     // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TabBgSwitcherName;                                       // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MaleEnabledEffectName;                                   // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                FemaleEnabledEffectName;                                 // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SaveToFileButtonName;                                    // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LoadFromFileButtonName;                                  // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              PreviewWidgetName;                                       // 0x0588(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                RespawnButtonName;                                       // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CreateNewPlayerButtonName;                               // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RespawnLabelName;                                        // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MyScrollBoxName;                                         // 0x05B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CharConfigMaleButtonName;                                // 0x05B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CharConfigFemaleButtonName;                              // 0x05C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DoCreateNewPlayerButtonName;                             // 0x05C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                NewCharacterPanelName;                                   // 0x05D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RespawnPanelName;                                        // 0x05D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RespawnPanelButtonName;                                  // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RespawnPanelMapName;                                     // 0x05E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                GenderLabelName;                                         // 0x05F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                BodyColorSliderName;                                     // 0x05F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HairColorSliderName;                                     // 0x0600(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EyeColorSliderName;                                      // 0x0608(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FBoneModifierSlider>                         BoneModifiersSliders;                                    // 0x0610(0x0010) Edit, ZeroConstructor
		class FName                                                CharacterNameBoxName;                                    // 0x0620(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RespawnButtonLabelName;                                  // 0x0628(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SlotButtonTemplate;                                      // 0x0630(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RequestSpawnPointsInterval;                              // 0x0638(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DownloadCharacterDataButtonName;                         // 0x063C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NDEE[0x4];                                   // 0x0644(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ListCharacterDataSceneTemplate;                          // 0x0648(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextActiveColor;                                 // 0x0650(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextInactiveColor;                               // 0x0660(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_M3JY[0x38];                                  // 0x0670(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AShooterCharacter*                                   PreviewCharacter;                                        // 0x06A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UUI_PreviewWidget*                                   PreviewWidget;                                           // 0x06B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UXT0[0x80];                                  // 0x06B8(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDinoListButtonWidget*>                       EntryWidgets;                                            // 0x0738(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_QZMW[0x20];                                  // 0x0748(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDinoListButtonWidget*>                       RespawnEntryWidgets;                                     // 0x0768(0x0010) ZeroConstructor
		TArray<class UDinoListButtonWidget*>                       SavedPresetWidgets;                                      // 0x0778(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_V3AU[0x50];                                  // 0x0788(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxDistanceForMultiSpawnPointSelect;                     // 0x07D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UDQQ[0x3C];                                  // 0x07DC(0x003C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDinoListButtonWidget*>                       MultiSpawnPointWidgets;                                  // 0x0818(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_CPDM[0x2E0];                                 // 0x0828(0x02E0) MISSED OFFSET (PADDING)

	public:
		void SlotButtonSelected(class UWidget* theWidget);
		void SavedPresetListButtonSelected(class UWidget* theWidget);
		void RespawnSlotButtonSelected(class UWidget* theWidget);
		void OnSaveToFileEditableCommitted(const class FText& Text, ETextCommit CommitMethod);
		void OnMoviePlaybackFinished_SPDownload(const class FString& MoviePath, bool bPlaybackWasCancelled);
		void OnMoviePlaybackFinished_SpawnAtPoint(const class FString& MoviePath, bool bPlaybackWasCancelled);
		void OnMoviePlaybackFinished_Download(const class FString& MoviePath, bool bPlaybackWasCancelled);
		void OnMoviePlaybackFinished(const class FString& MoviePath, bool bPlaybackWasCancelled);
		void OnBedFilterChanged(const class FText& Text);
		void MultiSelectSpawnPointButtonSelected(class UWidget* theWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalCharacterSetting
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UPrimalCharacterSetting : public UObject
	{
	public:
		struct FCharacterPreset                                    CharacterSetting;                                        // 0x0028(0x0020) NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalCharacterStatusComponent
	 * Size -> 0x0FB8 (FullSize[0x1090] - InheritedSize[0x00D8])
	 */
	class UPrimalCharacterStatusComponent : public UActorComponent
	{
	public:
		float                                                      MaxStatusValues[0xC];                                    // 0x00D8(0x0030) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      BaseLevelMaxStatusValues[0xC];                           // 0x0108(0x0030) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              NumberOfLevelUpPointsApplied[0xC];                       // 0x0138(0x000C) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              NumberOfLevelUpPointsAppliedTamed[0xC];                  // 0x0144(0x000C) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      TamedIneffectivenessModifier;                            // 0x0150(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      MovingStaminaRecoveryRateMultiplier;                     // 0x0154(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RecoveryRateStatusValue[0xC];                            // 0x0158(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TimeToRecoverAfterDepletionStatusValue[0xC];             // 0x0188(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TimeToRecoverAfterDecreaseStatusValue[0xC];              // 0x01B8(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AmountMaxGainedPerLevelUpValue[0xC];                     // 0x01E8(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AmountMaxGainedPerLevelUpValueTamed[0xC];                // 0x0218(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              MaxGainedPerLevelUpValueIsPercent[0xC];                  // 0x0248(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              RecoveryRateIsPercent[0xC];                              // 0x0254(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamingMaxStatMultipliers[0xC];                           // 0x0260(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamingMaxStatAdditions[0xC];                             // 0x0290(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxLevelUpMultiplier[0xC];                               // 0x02C0(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedLandDinoSwimSpeedLevelUpEffectiveness;              // 0x02F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamingIneffectivenessMultiplier;                         // 0x02F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DinoRiderWeightMultiplier;                               // 0x02F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              CanLevelUpValue[0xC];                                    // 0x02FC(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              DontUseValue[0xC];                                       // 0x0308(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_A5RB[0x4];                                   // 0x0314(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPrimalCharacterStatusStateThresholds               StatusStateThresholds[0xC];                              // 0x0318(0x0360) Edit, DisableEditOnInstance
		float                                                      ExperienceAutomaticConsciousIncreaseSpeed;               // 0x0678(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CheatMaxWeight;                                          // 0x067C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    CharacterStatusComponentPriority;                        // 0x0680(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SuffocationHealthPercentDecreaseSpeed;                   // 0x0684(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UnsubmergedOxygenIncreaseSpeed;                          // 0x0688(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SubmergedOxygenDecreaseSpeed;                            // 0x068C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RunningStaminaConsumptionRate;                           // 0x0690(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WalkingStaminaConsumptionRate;                           // 0x0694(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwimmingOrFlyingStaminaConsumptionRate;                  // 0x0698(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      JumpStaminaConsumption;                                  // 0x069C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WindedSpeedModifier;                                     // 0x06A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WindedSpeedModifierSwimmingOrFlying;                     // 0x06A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InjuredSpeedModifier;                                    // 0x06A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HypothermicHealthDecreaseRateBase;                       // 0x06AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HypothermicHealthDecreaseRatePerDegree;                  // 0x06B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HyperthermicHealthDecreaseRateBase;                      // 0x06B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HyperthermicHealthDecreaseRatePerDegree;                 // 0x06B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      XPEarnedPerStaminaConsumed;                              // 0x06BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      KillXPMultiplierPerCharacterLevel;                       // 0x06C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bCanSuffocate : 1;                                       // 0x06C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanSuffocateIfTamed : 1;                                // 0x06C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanGetHungry : 1;                                       // 0x06C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseStamina : 1;                                         // 0x06C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bWalkingConsumesStamina : 1;                             // 0x06C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRunningConsumesStamina : 1;                             // 0x06C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bConsumeFoodAutomatically : 1;                           // 0x06C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bInfiniteFood : 1;                                       // 0x06C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAddExperienceAutomatically : 1;                         // 0x06C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bConsumeWaterAutomatically : 1;                          // 0x06C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAutomaticallyUpdateTemperature : 1;                     // 0x06C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bReplicateGlobalStatusValues : 1;                        // 0x06C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bAllowLevelUps : 1;                                      // 0x06C5(0x0001) BIT_FIELD Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bInfiniteStats : 1;                                      // 0x06C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowSharingXPWithTribe : 1;                            // 0x06C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseStatusSpeedModifiers : 1;                            // 0x06C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bStatusSpeedModifierOnlyFullOrNone : 1;                  // 0x06C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreStatusSpeedModifierIfSwimming : 1;                // 0x06C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventJump : 1;                                        // 0x06C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bInitializedBaseLevelMaxStatusValues : 1;                // 0x06C6(0x0001) BIT_FIELD SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       UnknownData_CC36 : 1;                                    // 0x06C6(0x0001) BIT_FIELD (PADDING)
		bool                                                       bServerFirstInitialized : 1;                             // 0x06C6(0x0001) BIT_FIELD SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bRunningUseDefaultSpeed : 1;                             // 0x06C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNeverAllowXP : 1;                                       // 0x06C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventTamedStatReplication : 1;                        // 0x06C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAdjustStatusValueModification : 1;                 // 0x06C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceDefaultSpeed : 1;                                  // 0x06C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_HOR4 : 1;                                    // 0x06C7(0x0001) BIT_FIELD (PADDING)
		bool                                                       bHideFoodStatusFromHUD : 1;                              // 0x06C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetStatusNameString : 1;                           // 0x06C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideStaminaStatusFromHUD : 1;                           // 0x06C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDontUseSpeedMultipleAsSpeed : 1;                        // 0x06C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		float                                                      ShareXPWithTribeRange;                                   // 0x06C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    BaseCharacterLevel;                                      // 0x06CC(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		uint16_t                                                   ExtraCharacterLevel;                                     // 0x06D0(0x0002) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5EKK[0x2];                                   // 0x06D2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ExperiencePoints;                                        // 0x06D4(0x0004) BlueprintVisible, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      ReplicatedExperiencePoints;                              // 0x06D8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		ELevelExperienceRampType                                   LevelExperienceRampType;                                 // 0x06DC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_89UY[0x3];                                   // 0x06DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxExperiencePoints;                                     // 0x06E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BaseFoodConsumptionRate;                                 // 0x06E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BaseWaterConsumptionRate;                                // 0x06E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FortitudeTorpidityDecreaseMultiplier;                    // 0x06EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FortitudeTorpidityIncreaseResistance;                    // 0x06F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SubmergedWaterIncreaseRate;                              // 0x06F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CrouchedWaterFoodConsumptionMultiplier;                  // 0x06F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ProneWaterFoodConsumptionMultiplier;                     // 0x06FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StaminaRecoveryDecreaseFoodMultiplier;                   // 0x0700(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StaminaRecoveryDecreaseWaterMultiplier;                  // 0x0704(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HealthRecoveryDecreaseFoodMultiplier;                    // 0x0708(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyDinoConsumingFoodRateMultiplier;                     // 0x070C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DinoTamedAdultConsumingFoodRateMultiplier;               // 0x0710(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyGestationConsumingFoodRateMultiplier;                // 0x0714(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyDinoStarvationHealthDecreaseRateMultiplier;          // 0x0718(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyMaxHealthPercent;                                    // 0x071C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CrouchedStaminaConsumptionMultiplier;                    // 0x0720(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ProneStaminaConsumptionMultiplier;                       // 0x0724(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StarvationHealthConsumptionRate;                         // 0x0728(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DehyrdationHealthConsumptionRate;                        // 0x072C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StaminaConsumptionDecreaseWaterMultiplier;               // 0x0730(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StaminaConsumptionDecreaseFoodMultiplier;                // 0x0734(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HypothermiaDecreaseFoodMultiplierBase;                   // 0x0738(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HypothermiaDecreaseFoodMultiplierPerDegree;              // 0x073C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HyperthermiaDecreaseWaterMultiplierBase;                 // 0x0740(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HyperthermiaDecreaseWaterMultiplierPerDegree;            // 0x0744(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HyperthermiaTemperatureThreshold;                        // 0x0748(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HypothermiaTemperatureThreshold;                         // 0x074C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TorporExitPercentThreshold;                              // 0x0750(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      KnockedOutTorpidityRecoveryRateMultiplier;               // 0x0754(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DehydrationTorpidityMultiplier;                          // 0x0758(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StarvationTorpidityMultuplier;                           // 0x075C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StarvationTorpidityIncreaseRate;                         // 0x0760(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DehyrdationTorpidityIncreaseRate;                        // 0x0764(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InjuredTorpidityIncreaseMultiplier;                      // 0x0768(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WeightSpeedDecreasePower;                                // 0x076C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WeightJumpDecreasePower;                                 // 0x0770(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PoopItemMinFoodConsumptionInterval;                      // 0x0774(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PoopItemMaxFoodConsumptionInterval;                      // 0x0778(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TheMaxTorporIncreasePerBaseLevel;                        // 0x077C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CurrentStatusValuesReplicationInterval;                  // 0x0780(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InsulationHyperthermiaOffsetExponent;                    // 0x0784(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InsulationHyperthermiaOffsetScaler;                      // 0x0788(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InsulationHypothermiaOffsetExponent;                     // 0x078C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InsulationHypothermiaOffsetScaler;                       // 0x0790(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HypoCharacterInsulationValue;                            // 0x0794(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      HyperCharacterInsulationValue;                           // 0x0798(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      PoopItemFoodConsumptionCache;                            // 0x079C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LastHypothermalCharacterInsulationValue;                 // 0x07A0(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      LastHyperthermalCharacterInsulationValue;                // 0x07A4(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		EPrimalCharacterStatusValue                                MaxStatusValueToAutoUpdate;                              // 0x07A8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9PGT[0x3];                                   // 0x07A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GenericXPMultiplier;                                     // 0x07AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CraftEarnXPMultiplier;                                   // 0x07B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinInventoryWeight;                                      // 0x07B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      KillEarnXPMultiplier;                                    // 0x07B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GenericEarnXPMultiplier;                                 // 0x07BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SpecialEarnXPMultiplier;                                 // 0x07C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HarvestEarnXPMultiplier;                                 // 0x07C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DefaultHyperthermicInsulation;                           // 0x07C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DefaultHypothermicInsulation;                            // 0x07CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxTamingEffectivenessBaseLevelMultiplier;               // 0x07D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BR9V[0x4];                                   // 0x07D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              FoodStatusNameOverride;                                  // 0x07D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UTexture2D*                                          FoodStatusIconBackgroundOverride;                        // 0x07E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          FoodStatusIconForegroundOverride;                        // 0x07F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SHLV[0x10];                                  // 0x07F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<unsigned char>                                      StatusValueModifierDescriptionIndices;                   // 0x0808(0x0010) Net, ZeroConstructor, Transient
		float                                                      CurrentStatusValues[0xC];                                // 0x0818(0x0030) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      AdditionalStatusValues[0xC];                             // 0x0848(0x0030) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ReplicatedCurrentStatusValues[0xC];                      // 0x0878(0x0030) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		float                                                      ReplicatedGlobalMaxStatusValues[0xC];                    // 0x08A8(0x0030) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		float                                                      ReplicatedBaseLevelMaxStatusValues[0xC];                 // 0x08D8(0x0030) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		float                                                      ReplicatedGlobalCurrentStatusValues[0xC];                // 0x0908(0x0030) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		int8_t                                                     CurrentStatusStates[0xC];                                // 0x0938(0x000C) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0QZW[0x184];                                 // 0x0944(0x0184) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StaminaRecoveryExtraResourceDecreaseMultiplier;          // 0x0AC8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DehydrationStaminaRecoveryRate;                          // 0x0ACC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WaterConsumptionMultiplier;                              // 0x0AD0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FoodConsumptionMultiplier;                               // 0x0AD4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class USoundBase*>                                  EnteredStatusStateSounds;                                // 0x0AD8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class USoundBase*>                                  ExitStatusStateSounds;                                   // 0x0AE8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      ExtraOxygenSpeedStatMultiplier;                          // 0x0AF8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExtraTamedHealthMultiplier;                              // 0x0AFC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WakingTameFoodConsumptionRateMultiplier;                 // 0x0B00(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwimmingStaminaRecoveryRateMultiplier;                   // 0x0B04(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TFWJ[0x1C];                                  // 0x0B08(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MountedDinoDinoWeightMultiplier;                         // 0x0B24(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExtraWildDinoDamageMultiplier;                           // 0x0B28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExtraTamedDinoDamageMultiplier;                          // 0x0B2C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WeightMultiplierWhenCarriedOrBased;                      // 0x0B30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WeightMultiplierForCarriedPassengers;                    // 0x0B34(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WeightMultiplierForPlatformPassengersInventory;          // 0x0B38(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DinoMaxStatAddMultiplierImprinting[0xC];                 // 0x0B3C(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DinoImprintingQuality;                                   // 0x0B6C(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bForceGainOxygen : 1;                                    // 0x0B70(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bFreezeStatusValues : 1;                                 // 0x0B70(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       UnknownData_RK3G : 1;                                    // 0x0B70(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUseBPModifyMaxLevel : 1;                                // 0x0B70(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNoStaminaRecoveryWhenStarving : 1;                      // 0x0B70(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bApplyingStatusValueModifiers : 1;                       // 0x0B70(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       bDontScaleMeleeDamage : 1;                               // 0x0B70(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_O6O7[0x3];                                   // 0x0B71(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TamedBaseHealthMultiplier;                               // 0x0B74(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExtraBabyDinoConsumingFoodRateMultiplier;                // 0x0B78(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_J0N3[0x4];                                   // 0x0B7C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      StatusValueNameOverrides;                                // 0x0B80(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              RegainOxygenDamageType;                                  // 0x0B90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceAllowStatusModifierSortingWhenTamed;               // 0x0B98(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SRP9[0x4F7];                                 // 0x0B99(0x04F7) MISSED OFFSET (PADDING)

	public:
		void UpdateWeightStat(bool bForceSetValue);
		void UpdatedCurrentStatusValue(EPrimalCharacterStatusValue ValueType, float amount, bool bManualModification, class UClass* DamageTypeClass, bool bDamageDontKill, bool bDontAdjustOtherStats);
		void TickStatus(float DeltaTime, bool bForceStatusUpdate);
		void SetTamed(float TameIneffectivenessModifier, bool bSkipAddingTamedLevels);
		void SetMaxStatusValue(EPrimalCharacterStatusValue statType, float newValue);
		void SetLevelUpPoints(EPrimalCharacterStatusValue ValueType, bool bTamedPoints, int32_t newPoints);
		void SetExtraCharacterLevel(int32_t NewExtraCharacterLevel);
		void SetBaseLevelNoStatChange(int32_t Level);
		void SetBaseLevelCustomized(int32_t Level, TArray<struct FStatValuePair> CustomBaseStats, TArray<EPrimalCharacterStatusValue> PrioritizeStats, bool bDontCurrentSetToMax);
		void SetBaseLevel(int32_t Level, bool bDontCurrentSetToMax);
		void SetAllStatsToMaximumExcluding(EPrimalCharacterStatusValue exclude);
		void SetAllStatsToMaximum();
		void ServerSyncReplicatedValues();
		void RescaleMaxStat(EPrimalCharacterStatusValue LevelUpValueType, float TargetValue, bool bIsPercentOfTrueValue);
		void RescaleAllStats();
		void RemoveStatusValueModifierByInstigator(class AActor* Instigator);
		void RemoveStatusValueModifierByIndex(int32_t index);
		void OnRep_ReplicatedExperiencePoints();
		void OnRep_GlobalMaxStatusValues();
		void OnRep_GlobalCurrentStatusValues();
		void OnRep_GlobalBaseLevelMaxStatusValues();
		void OnRep_CurrentStatusValues();
		void NetSyncMaxStatusValues(TArray<float> NetMaxStatusValues, TArray<float> NetBaseMaxStatusValues);
		float ModifyCurrentStatusValue(EPrimalCharacterStatusValue ValueType, float amount, bool bPercentOfMax, bool bPercentOfCurrent, bool bManualModification, bool bSetValue, class UClass* DamageTypeClass, bool bDamageDontKill, bool bForceSetValue);
		bool IsInStatusState(EPrimalCharacterStatusState StateType);
		bool IsAtMaxLevel();
		bool IsAtMaxExperience();
		bool HasExperienceForLevelUp();
		class FString GetStatusValueString(EPrimalCharacterStatusValue ValueType, bool bValueOnly);
		float GetStatusValueRecoveryRate(EPrimalCharacterStatusValue ValueType);
		class FString GetStatusNameString(EPrimalCharacterStatusValue ValueType);
		class FString GetStatusMaxValueString(EPrimalCharacterStatusValue ValueType, bool bValueOnly);
		float GetRawStatusValueRecoveryRate(EPrimalCharacterStatusValue ValueType);
		float GetMovementSpeedModifier();
		float GetMeleeDamageModifier();
		int32_t GetLevelUpPoints(EPrimalCharacterStatusValue ValueType, bool bTamedPoints);
		int32_t GetExtraCharacterLevel();
		float GetExperienceRequiredForPreviousLevelUp();
		float GetExperienceRequiredForNextLevelUp();
		void GetDinoFoodConsumptionRateMultiplier(float* amount);
		class FString GetDebugString();
		float GetCraftingSpeedModifier();
		int32_t GetCharacterLevel();
		int32_t GetBaseLevelFromLevelUpPoints(bool bIncludePlayerAddedLevels);
		void CopyPrimalStatusComponentValues(class UPrimalCharacterStatusComponent* src);
		EPrimalCharacterStatusValue STATIC_ConvertIntToCharacterStatusEnum(int32_t InInteger);
		void ClientSyncMaxStatusValues(TArray<float> NetMaxStatusValues, TArray<float> NetBaseMaxStatusValues);
		void ClearAllLevelUpPoints(bool bTamedPoints);
		bool CanLevelUp(EPrimalCharacterStatusValue LevelUpValueType, bool bCheckExperience);
		bool CanGainLevel();
		void BPSetRecoveryRateStatusValue(EPrimalCharacterStatusValue ValueType, float newValue);
		int32_t BPModifyMaxLevel(int32_t InMaxLevel);
		float BPModifyMaxExperiencePoints(float InMaxExperiencePoints);
		float BPGetPercentStatusValue(EPrimalCharacterStatusValue ValueType);
		float BPGetMaxStatusValue(EPrimalCharacterStatusValue ValueType);
		float BPGetCurrentStatusValue(EPrimalCharacterStatusValue ValueType);
		void BPDirectSetMaxStatusValue(EPrimalCharacterStatusValue ValueType, float newValue);
		void BPDirectSetCurrentStatusValue(EPrimalCharacterStatusValue ValueType, float newValue);
		float BPAdjustStatusValueModification(EPrimalCharacterStatusValue ValueType, float amount, class UClass* DamageTypeClass, bool bManualModification);
		void AddStatusValueModifier(EPrimalCharacterStatusValue ValueType, float amount, float Speed, bool bContinueOnUnchangedValue, bool bSetValue, int32_t StatusValueModifierDescriptionIndex, bool bResetExistingModifierDescriptionIndex, float LimitExistingModifierDescriptionToMaxAmount, bool bSetAdditionalValue, EPrimalCharacterStatusValue StopAtValueNearMax, bool bMakeUntameable, class UClass* ScaleValueByCharacterDamageType, class AActor* Instigator);
		void AddExperience(float HowMuch, bool bShareWithTribe, EXPType XPType);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalDinoStatusComponent
	 * Size -> 0x0000 (FullSize[0x1090] - InheritedSize[0x1090])
	 */
	class UPrimalDinoStatusComponent : public UPrimalCharacterStatusComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalPlayerStatusComponent
	 * Size -> 0x0000 (FullSize[0x1090] - InheritedSize[0x1090])
	 */
	class UPrimalPlayerStatusComponent : public UPrimalCharacterStatusComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalClimbingSettings
	 * Size -> 0x0C00 (FullSize[0x0C28] - InheritedSize[0x0028])
	 */
	class UPrimalClimbingSettings : public UObject
	{
	public:
		bool                                                       bDebug;                                                  // 0x0028(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowInputClimbing;                                     // 0x0029(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowSliding;                                           // 0x002A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DEUX[0x1];                                   // 0x002B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ArmSwitchAngle;                                          // 0x002C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PreFlinchUnclimbableInterval;                            // 0x0030(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PostFlinchUnclimbableInterval;                           // 0x0034(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ClimbingWaitAfterQuakeFall;                              // 0x0038(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseExtendedLandTrace;                                   // 0x003C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZM4D[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RootLocationInterpSpeed;                                 // 0x0040(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      JumpUpVelocity;                                          // 0x0044(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      JumpForwardVelocity;                                     // 0x0048(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      JumpDirectionVelocity;                                   // 0x004C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      JumpCameraTransitionDuration;                            // 0x0050(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ClimbingWaitForJump;                                     // 0x0054(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ForceReleaseOnImpulseForce;                              // 0x0058(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FClimbingTypeSettings                               TypeSettings[0x4];                                       // 0x005C(0x0070) Edit, DisableEditOnInstance
		float                                                      AttachAnchoredTraceRadius;                               // 0x00CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AttachEffectTraceDistanceForward;                        // 0x00D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AttachEffectTraceDistanceBackward;                       // 0x00D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinAimDirectionDot;                                      // 0x00D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AimDirectionBias;                                        // 0x00DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TracePlaneInterpolation;                                 // 0x00E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HangingTracePlaneInterpolation;                          // 0x00E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinFloorDirectionDot;                                    // 0x00E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FallingConsumeDurabilityMultiplier;                      // 0x00EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ImpactNormalOffsetAllowanceDot;                          // 0x00F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MoveTraceDistance;                                       // 0x00F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MoveTraceRadius;                                         // 0x00F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HangingMinDotUp;                                         // 0x00FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CeilingDistance;                                         // 0x0100(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CeilingTraceRadius;                                      // 0x0104(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CeilingTraceDistance;                                    // 0x0108(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinCeilingTraceTime;                                     // 0x010C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WallDistance;                                            // 0x0110(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WallTraceRadius;                                         // 0x0114(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WallTraceDistance;                                       // 0x0118(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinWallTraceTime;                                        // 0x011C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GroundMaxDotUp;                                          // 0x0120(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinFloorDistance;                                        // 0x0124(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FloorTraceRadius;                                        // 0x0128(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LandMinFloorSpaceDistance;                               // 0x012C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LandFloorSpaceTraceRadius;                               // 0x0130(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FlipMaxNormalDot;                                        // 0x0134(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TurnMaxNormalDot;                                        // 0x0138(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FClimbingTransitionParams                           Transitions[0x20];                                       // 0x013C(0x0A80) Edit, DisableEditOnInstance
		float                                                      ClimbAnimPlayRateDistanceScale;                          // 0x0BBC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinClimbAnimPlayRate;                                    // 0x0BC0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxClimbAnimPlayRate;                                    // 0x0BC4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CameraYawMin;                                            // 0x0BC8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CameraYawMax;                                            // 0x0BCC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CameraPitchUp;                                           // 0x0BD0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CameraPitchDown;                                         // 0x0BD4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             CameraOffsetScale;                                       // 0x0BD8(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HangingCameraPitchUp;                                    // 0x0BE4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HangingCameraPitchDown;                                  // 0x0BE8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             HangingCameraOffsetScale;                                // 0x0BEC(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwitchToFPVDistance;                                     // 0x0BF8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwitchToFPVDownDot;                                      // 0x0BFC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwitchToFPVTransitionDuration;                           // 0x0C00(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwitchFromFPVTransitionDuration;                         // 0x0C04(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UpAndOverExtendedUp;                                     // 0x0C08(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UpAndOverExtendedForward;                                // 0x0C0C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HangingFailTraceExtraLength;                             // 0x0C10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HangingFailMinDotUp;                                     // 0x0C14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HangingFailOppositeDirectTraceLength;                    // 0x0C18(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HangingFailOppositeDirectTraceRadius;                    // 0x0C1C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InvisibleWallTooCloseRadius;                             // 0x0C20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HX8J[0x4];                                   // 0x0C24(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalColorSet
	 * Size -> 0x0240 (FullSize[0x0268] - InheritedSize[0x0028])
	 */
	class UPrimalColorSet : public UObject
	{
	public:
		struct FColorSetDefinition                                 ColorSetDefinitions[0x6];                                // 0x0028(0x0240) Edit, DisableEditOnInstance

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalBotAIController
	 * Size -> 0x0028 (FullSize[0x08E0] - InheritedSize[0x08B8])
	 */
	class APrimalBotAIController : public APrimalDinoAIController
	{
	public:
		float                                                      DinoSearchRadius;                                        // 0x08B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_67EC[0x4];                                   // 0x08BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AAIAttackCoordinator*                                AttackCoordinator;                                       // 0x08C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              RiddenDinoControllerClass;                               // 0x08C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class APrimalDinoCharacter>                 ClaimedDino;                                             // 0x08D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LPSL[0x8];                                   // 0x08D8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateDinoClaim();
		float TimeSinceGivenAttackPriority();
		void SetAttackCoordinator(class AAIAttackCoordinator* Coordinator);
		void ReleaseClaimOnDino();
		bool IsTooFarToAttack();
		bool IsTooCloseToAttack();
		void InitializeBlackboardValues(class APrimalBotCharacter* Bot);
		bool ClaimDino(class APrimalDinoCharacter* Dino);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalDinoEntry
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UPrimalDinoEntry : public UObject
	{
	public:
		unsigned char                                              UnknownData_6TNW[0x28];                                  // 0x0028(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                DinoNameTag;                                             // 0x0050(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              DinoDescriptiveName;                                     // 0x0058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UTexture2D*                                          DinoIcon;                                                // 0x0068(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  DinoMaterial;                                            // 0x0070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bRequiresKill;                                           // 0x0078(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FHDL[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalDinoSettings
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class UPrimalDinoSettings : public UObject
	{
	public:
		TArray<struct FDinoFoodEffectivenessMultipliers>           FoodEffectivenessMultipliers;                            // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FDinoFoodEffectivenessMultipliers>           ExtraFoodEffectivenessMultipliers;                       // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      TamingAffinityNoFoodDecreasePercentageSpeed;             // 0x0048(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5DK4[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDamageTypeAdjuster>                         BaseDamageTypeAdjusters;                                 // 0x0050(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FDamageTypeAdjuster>                         ExtraDamageTypeAdjusters;                                // 0x0060(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UTexture2D*                                          DinoFoodTypeImage;                                       // 0x0070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              DinoFoodTypeName;                                        // 0x0078(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bWakingTameDisplayItemName;                              // 0x0088(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3OTF[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalBuff_Grappled
	 * Size -> 0x0208 (FullSize[0x0B88] - InheritedSize[0x0980])
	 */
	class APrimalBuff_Grappled : public APrimalBuff
	{
	public:
		TArray<struct FGrappleTether>                              CurrentGrappleTethers;                                   // 0x0980(0x0010) BlueprintVisible, ZeroConstructor, SaveGame, ContainsInstancedReference
		TArray<struct FGrappleTether>                              LastSyncedGrappleTethers;                                // 0x0990(0x0010) BlueprintVisible, ZeroConstructor, Transient, ContainsInstancedReference
		TArray<struct FReplicatedGrappleTetherData>                ReplicatedGrappleTethers;                                // 0x09A0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, ContainsInstancedReference
		class APrimalCharacter*                                    MyOwner;                                                 // 0x09B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class APrimalCharacter*                                    MyOwnerCDO;                                              // 0x09B8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		EGrappleState                                              GrappleState_Current;                                    // 0x09C0(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		EGrappleState                                              GrappleState_Previous;                                   // 0x09C1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		EGrappleState                                              WantsGrappleState;                                       // 0x09C2(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JISP[0x5];                                   // 0x09C3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DefaultGrappledBuffClass;                                // 0x09C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           PullingSoundCue;                                         // 0x09D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           ReleasingSoundCue;                                       // 0x09D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UStaticMesh*                                         GrappleTetherMesh;                                       // 0x09E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bDetachGrappledChars : 1;                                // 0x09E8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bDebugGrappling : 1;                                     // 0x09E8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bDebugGrappling_AgainstSurface : 1;                      // 0x09E8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bAllowGrappleLogicOnRemoteClients : 1;                   // 0x09E8(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bForceIdleGrappleState : 1;                              // 0x09E8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bHasGrappleBuffInitialized : 1;                          // 0x09E8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bIsOwnerAgainstSurface : 1;                              // 0x09E8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor
		bool                                                       bOwnerMovementAffectedByGrappleTethers : 1;              // 0x09E8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bLastIsOwnerSubmerged : 1;                               // 0x09E9(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bLastIsOwnerSwinging : 1;                                // 0x09E9(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor
		bool                                                       bHasAnyValidTethers : 1;                                 // 0x09E9(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bHasValidReservedTethers : 1;                            // 0x09E9(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bBrokeAnyTethersThisFrame : 1;                           // 0x09E9(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bHasAnyGrappledChars : 1;                                // 0x09E9(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor
		bool                                                       bHasAnyTethersAttachedToDynamicActors : 1;               // 0x09E9(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor
		bool                                                       bDidOverrideVelocityThisFrame : 1;                       // 0x09E9(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bShouldResetOwnerVars : 1;                               // 0x09EA(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		unsigned char                                              UnknownData_YGWY[0x1];                                   // 0x09EB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxAllowedGrappleTethers;                                // 0x09EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ForceFallingWhenDirToTetherAboveUpDot;                   // 0x09F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ForceFallingWhenAboveVelocityAwayFromAnchor;             // 0x09F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ForceFallingBelowTetherToOwnerDeltaZ;                    // 0x09F8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ReduceFallDamageUnderAngleToAnchor;                      // 0x09FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GrappledFallDamageMult_MIN;                              // 0x0A00(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      OwnerInput_SwingSpeed;                                   // 0x0A04(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwingingVelocityDampingRate_Idle;                        // 0x0A08(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwingingVelocityDampingRate_Pulling;                     // 0x0A0C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           SwingingVelocityDampingRateAxisMults_Pulling;            // 0x0A10(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwingingVelocityDampingRate_Releasing;                   // 0x0A18(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwingingVelocityDampingRate_OwnerInput;                  // 0x0A1C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TetherTensionVelocityDampingRate;                        // 0x0A20(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GrappleVelocityMAX;                                      // 0x0A24(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwingingClientPositionErrorOverride_Player;              // 0x0A28(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwingingClientPositionErrorOverride_Dino_MovingFlying;   // 0x0A2C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwingingClientPositionErrorOverride_Dino_Stopped;        // 0x0A30(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwingingClientLocationInterpSpeed;                       // 0x0A34(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwingingClientRotationInterpSpeed;                       // 0x0A38(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SyncGrappleTetherLengthInterval;                         // 0x0A3C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PullableWeightLimit;                                     // 0x0A40(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TetherMaxLength;                                         // 0x0A44(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TetherMinLength;                                         // 0x0A48(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TetherAutoDetachUnderLength;                             // 0x0A4C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TetherBreakLimit_OwnerPastCurrentLengthDelta;            // 0x0A50(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TetherBreakLimit_OwnerPastCurrentLengthForTime;          // 0x0A54(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TetherBreakLimit_GrappledActorAboveVelocity;             // 0x0A58(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TetherWidth;                                             // 0x0A5C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     LastGrappleTetherLengthSyncTime;                         // 0x0A60(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             OwnerInput_CurrentSwingingVelocity;                      // 0x0A68(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector2D                                           OwnerInput_CurrentSynced;                                // 0x0A74(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector2D                                           OwnerInput_LastSynced;                                   // 0x0A7C(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MKGN[0x4];                                   // 0x0A84(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     OwnerInput_LastSyncTime;                                 // 0x0A88(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      OwnerInput_SyncInverval;                                 // 0x0A90(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             DirToAgainstSurface;                                     // 0x0A94(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             LastDirToAgainstSurface;                                 // 0x0AA0(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      RequiredDirToSurfaceDotDeltaToUpdate;                    // 0x0AAC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             AgainstSurfaceNormal;                                    // 0x0AB0(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      TetherPullMaxVelocity;                                   // 0x0ABC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TetherPullAcceleration;                                  // 0x0AC0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TetherPullMaxVelocity_GrappledChar;                      // 0x0AC4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TetherPullAcceleration_GrappledChar;                     // 0x0AC8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TetherReleaseMaxVelocity;                                // 0x0ACC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TetherReleaseMaxVelocity_GrappledChar;                   // 0x0AD0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             CurrentTetherMoveVelocity;                               // 0x0AD4(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             AvgParentCharVelocity;                                   // 0x0AE0(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ClientSuggestTetherLength_AllowedDelta;                  // 0x0AEC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ClientSuggestTetherLength_AllowedInterval;               // 0x0AF0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Z43E[0x4];                                   // 0x0AF4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     ClientSuggestTetherLength_LastReceivedTime;              // 0x0AF8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ValidHitSurface_DistanceFromCapsuleEdge;                 // 0x0B00(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           ValidHitSurface_UpVectorAngleRange;                      // 0x0B04(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           LastProjectedOwnerInputs;                                // 0x0B0C(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      OwnerCapsuleRadius;                                      // 0x0B14(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      OwnerCapsuleHalfHeight;                                  // 0x0B18(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             PreviousOwnerVelocity;                                   // 0x0B1C(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      TetherTensionStrength;                                   // 0x0B28(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TetherTensionExponent;                                   // 0x0B2C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ForceFallingStateImpulse;                                // 0x0B30(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EJZ8[0x4];                                   // 0x0B34(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      ReservedTetherTags;                                      // 0x0B38(0x0010) Edit, ZeroConstructor
		class FString                                              TetherTagOwnerConnectorString;                           // 0x0B48(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		struct FVector2D                                           GrappledGravityScaleRange;                               // 0x0B58(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GrappledGravityScaleMult_Idle;                           // 0x0B60(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GrappledGravityScaleMult_Pulling;                        // 0x0B64(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GrappledGravityScaleMult_Releasing;                      // 0x0B68(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AtTetherLimitBelowDistFromEnd;                           // 0x0B6C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             LastGravity;                                             // 0x0B70(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      LookingAtAgainstSurfaceAngle;                            // 0x0B7C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      VelocityOverrideMaxDeltaTime;                            // 0x0B80(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LZSW[0x4];                                   // 0x0B84(0x0004) MISSED OFFSET (PADDING)

	public:
		void UpdateTethersByState(float DeltaTime);
		bool UpdateTetherMasterRef(struct FGrappleTether* ForTether, bool bInit);
		void UpdateOwnerSwingingVelocity();
		void UpdateOwnerMovementSpeed(struct FVector* WithCharVelocity);
		void STATIC_UpdateGrappleTetherVars(struct FGrappleTether* ForTether);
		void UpdateBrokenTethers();
		void UpdateAgainstSurfaceFromHits(TArray<struct FHitResult> Hits);
		void Tick_UpdateGrappleTethers(float DeltaTime);
		void Tick_UpdateAgainstSurface(float DeltaTime);
		bool STATIC_TetherHasValidMasterRef(struct FGrappleTether* ForTether);
		void SyncOwnerInputs(const struct FVector2D& NewInputs);
		void SyncGrappleTetherLengths();
		void SimulateTetherFriction(struct FVector* WithCharVelocity, float DeltaTime);
		void SimulateTautTetherForces(struct FVector* WithCharVelocity, float DeltaTime, float LastGravityZ);
		bool ShouldUseDynamicTetherTension(const struct FGrappleTether& ForTether);
		bool ShouldTetherBreak(struct FGrappleTether* ForTether, class APrimalCharacter* forChar, float OverrideBreakPastDist);
		bool ShouldReturnToIdleGrappleState();
		bool ShouldReplicateOwnerInputs();
		bool STATIC_ShouldOwnerBeAffectedByTether(const struct FGrappleTether& ForTether, EGrappleState ForGrappeState);
		bool ShouldForceOwnerIntoFallingState(const struct FGrappleTether& ForTether, const struct FVector& WithOwnerVelocity, EMovementMode CheckMovementModeOverride);
		void SetupDelegateBindingsForChar(class APrimalCharacter* forChar, bool bDoBind);
		bool STATIC_SetGrappleTetherLength(struct FGrappleTether* ForTether, float SetNewLength, int32_t ForTetherIndex);
		bool SetGrappleTetherAtIndexLength(int32_t AtIndex, float SetNewLength);
		bool SetGrappleState(EGrappleState NewGrappleState, bool bForceUpdate);
		void Server_SyncOwnerInputs(const struct FVector2D& NewInputs);
		void Server_SuggestTetherLengths(TArray<float> NewTetherLengths);
		void Server_SuggestTetherLength(float NewTetherLength);
		void Server_SetGrappleState(unsigned char NewGrappleState, bool bForceUpdate);
		void ResetOwnerVars();
		void ResetOwnerClientPositionErrorTolerance();
		bool RemoveGrappleTether(int32_t AtIndex, const class FString& WithTag, class APrimalBuff_Grappled* WithMasterBuff, bool bForceNetSync, bool bRemoveAllTethersWithTag);
		void RefreshAllTetherMasterRefs();
		void ReceiveTetherLengthSuggestion(int32_t ForTetherIndex, float NewTetherLength);
		void ReceiveTetherLengthsSuggestion(TArray<float> NewTetherLengths);
		void OnRep_ReplicatedGrappleTethers();
		void OnRep_GrappleState();
		void OnReleasedPrimalChar(class APrimalCharacter* ReleasedChar);
		void OnOwnerSleepStateChanged(class APrimalCharacter* forChar, bool bIsSleeping);
		void OnOwnerDeath(class APrimalCharacter* DyingChar);
		void OnOwnerCapsuleHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void OnGrappleTethersChanged();
		void OnGrappleTetherRemoved(const struct FGrappleTether& RemovedTether);
		void OnGrappleTetherBroken(int32_t BrokenIndex);
		void OnGrappleTetherAdded(const struct FGrappleTether& AddedTether);
		void OnGrappleStateChangedNotify(unsigned char NewGrappleState, bool bIsEarlyNotify);
		void OnGrappleStateChanged();
		void OnGrappledPrimalChar(class APrimalCharacter* GrappledChar, const struct FGrappleTether& WithMasterTether);
		void OnGrappledCharSleepStateChange(class APrimalCharacter* forChar, bool bIsSleeping);
		void OnGrappledCharDeath(class APrimalCharacter* DyingChar);
		void OnAgainstValidSurfaceUpdated();
		void OnAgainstValidSurfaceStateChanged();
		void NetSyncGrappleTethers();
		void Multi_SyncGrappleTetherLengths(TArray<float> SyncedTetherLengths);
		void Multi_SyncGrappleTetherLength(float SyncedTetherLength);
		float ModifyTetherTensionLerpValue(float CurrentLerpValue);
		void ModifyTetherMoveVelocity(struct FVector* CurrentMoveVelocity, const struct FGrappleTether& ForTether);
		void ModifyOverriddenCharVelocity(struct FVector* CurrentCharVelocity, float DeltaTime);
		void ModifyGrappledCharVelocity(struct FVector* CurrentCharVelocity, const struct FGrappleTether& ForTether, float DeltaTime);
		struct FGrappleTether STATIC_MakeGrappleTether(struct FCreateGrappleTetherData* FromData, class APrimalBuff_Grappled* ForMasterBuff);
		bool IsValidSurfaceHit(const struct FHitResult& ForHit);
		bool IsValidGrappleHit(const struct FHitResult& ForHit);
		bool IsTethersMasterGrappleBuff(const struct FGrappleTether& CheckTether);
		bool IsTetherAtMaxLength(const struct FGrappleTether& ForTether);
		bool IsSwingingTowardsAxisCenter(const struct FGrappleTether& ForTether);
		bool IsOwnerLookingAtAgainstSurface();
		bool IsOwnerAgainstValidSurface();
		bool IsOwnerAboveGround(struct FVector* FoundGroundLocation, float CheckDistance);
		bool IsHitWithinGrappleRange(const struct FHitResult& ForHit);
		bool STATIC_IsGrappleTetherValid(const struct FGrappleTether& CheckTether);
		bool IsGrappledCharHardAttached(class APrimalCharacter* forChar);
		bool IsCharPastMaxTetherLength(const struct FGrappleTether& ForTether, class APrimalCharacter* forChar);
		bool STATIC_InitializeGrappleTether(struct FGrappleTether* InitTether, class APrimalBuff_Grappled* ByGrappleBuff);
		void InitGrappleBuff();
		void GrappleTick(float DeltaTime);
		bool STATIC_GetTetherMasterRef(struct FGrappleTether* ForTether, struct FGrappleTether* MasterRef);
		float GetTetherBreakLimit_OwnerPastCurrentLengthForTime(const struct FGrappleTether& ForTether);
		float GetTetherBreakLimit_OwnerPastCurrentLengthDelta(const struct FGrappleTether& ForTether);
		float GetTetherBreakLimit_GrappledActorAboveVelocity(const struct FGrappleTether& ForTether);
		float STATIC_GetRequiredTetherLengthForChar(const struct FGrappleTether& ForTether, class APrimalCharacter* forChar);
		struct FVector2D GetReplicatedOwnerInputs();
		class FString STATIC_GetOwnerAppendedTetherTag(const class FString& WithRootTag, class APrimalBuff_Grappled* OwnerGrappleBuff);
		int32_t GetNumValidTethers(bool bOnlyReservedTethers);
		int32_t GetNumReservedTethers();
		float GetMinTetherLength(const struct FGrappleTether& ForTether);
		float GetMaxTetherLength(const struct FGrappleTether& ForTether);
		struct FVector STATIC_GetInitGrappleAnchorRelativeOffset(const struct FGrappleAnchor& ForAnchorData, class AActor* WithAnchorOwner);
		float GetGrappleVelocityDampingRate(class APrimalCharacter* forChar, const struct FGrappleTether& ForTether);
		class FString GetGrappleTetherRootTag(const class FString& ForTag);
		float GetGrappleTetherReleaseMaxVelocity(class APrimalCharacter* ForReleasingChar, const struct FGrappleTether& ForTether);
		float GetGrappleTetherPullMaxVelocity(class APrimalCharacter* ForPullingChar, const struct FGrappleTether& ForTether);
		float GetGrappleTetherPullAcceleration(class APrimalCharacter* ForPullingChar, const struct FGrappleTether& ForTether);
		struct FVector STATIC_GetGrappleAnchorWorldLocation(const struct FGrappleAnchor& ForAnchorData, class AActor* WithAnchorOwner);
		struct FVector GetCurrentTetherMoveDir(const struct FGrappleTether& ForTether);
		struct FVector2D GetCurrentSwingingAxisValues();
		EGrappleState GetCurrentGrappleState(const struct FGrappleTether& ForTether);
		float GetCharDistanceFromTetherEndRatio(const struct FGrappleTether& ForTether, class APrimalCharacter* forChar);
		float STATIC_GetCharAngleToGrappleTetherEnd(const struct FGrappleTether& ForTether, class APrimalCharacter* forChar);
		struct FVector GetAverageTetherEndLocation(bool bReservedTethersOnly);
		TArray<class APrimalCharacter*> GetAllCurrentGrapplers();
		class APrimalCharacter* STATIC_GetActorAttachParentChar(class AActor* forActor);
		void EndGrapple();
		bool DisplayGrappleSystemHudNotification(class AShooterPlayerController* ForPC, class AActor* FromActor, unsigned char NotificationType, int32_t NotificationID, const class FString& ReasonString);
		void CustomGrappleTick(float DeltaTime);
		void ClampOwnerReleasingVelocity(struct FVector* WithReleasingVelocity);
		void ClampGrappleVelocity(struct FVector* ClampVelocity);
		void CheckForTetherBreak(struct FGrappleTether* CheckTether, int32_t WithIndex, float OverrideBreakPastDist);
		bool CheckForAutoBreakTether(const struct FGrappleTether& CheckTether);
		bool CanUpdateTetherLength(const struct FGrappleTether& ForTether, float WithLength);
		bool STATIC_CanTetherOwnerPullGrappledChar(const struct FGrappleTether& ForTether);
		bool CanSyncGrappleTetherLengths();
		bool CanReceiveNewGrappleTether(const class FString& WithTag);
		bool CanPullChar(class APrimalCharacter* PullChar, bool bForStart);
		bool CanOwnerGrappleSwing();
		bool CanManipulateOwnerVelocity();
		bool STATIC_CanGrappleTetherAffectOwnerMovement(const struct FGrappleTether& ForTether);
		bool STATIC_CanCharControlGrappleTether(class APrimalCharacter* forChar, const struct FGrappleTether& ForTether, bool bAllowSlaveGrappleToControl);
		bool CanChangeGrappleState(unsigned char DesiredGrappleState);
		bool CanBeGrappledAgainstSurface();
		bool BreakGrappleTether(int32_t AtIndex, const class FString& WithTag, class APrimalBuff_Grappled* WithMasterBuff, bool bBreakAllTethersWithTag);
		bool BreakChildTetherOnGrappledChar(const struct FGrappleTether& WithTether);
		void BreakAllTethers();
		bool BP_InterceptGrappleLogic(struct FVector* CharVelocity);
		bool AreGrappleTetherTagsEqual(const class FString& TagA, const class FString& TagB, bool bOnlyCompareRootTag);
		void ApplyTetherMoveVelocity(struct FVector* CurrentVelocity, float DeltaTime);
		void ApplyOwnerSwingingVelocity(struct FVector* CurrentVelocity, float DeltaTime);
		bool AllowGrappleLogic();
		void AdjustMovementVectorIfAgainstSurface(struct FVector* AdjustVector);
		int32_t AddGrappleTether(const struct FCreateGrappleTetherData& FromData, bool bPreventNetSync, int32_t AddAtIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalBuff_MissionData
	 * Size -> 0x0138 (FullSize[0x0AB8] - InheritedSize[0x0980])
	 */
	class APrimalBuff_MissionData : public APrimalBuff
	{
	public:
		class AMissionType*                                        ActiveMission;                                           // 0x0980(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    ActiveMissionIndex;                                      // 0x0988(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		unsigned char                                              UnknownData_GB9D[0x4];                                   // 0x098C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FClientMissionData>                          CurrentMissions;                                         // 0x0990(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, RepNotify, NativeAccessSpecifierPublic
		class UParticleSystem*                                     MissionIndicatorParticles;                               // 0x09A0(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		class FString                                              NonHostPrepAreaNotification;                             // 0x09A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              PendingMission;                                          // 0x09B8(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class FScriptMulticastDelegate                             OnPlayerAddedToMission;                                  // 0x09C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnPlayerRemovedFromMission;                              // 0x09D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             MissionClientDataUpdated;                                // 0x09E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_QWJL[0x50];                                  // 0x09F0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FClientMissionSubscriptionData>              ReplicatedMissionDataSubscriptions;                      // 0x0A40(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_WZ6F[0x68];                                  // 0x0A50(0x0068) MISSED OFFSET (PADDING)

	public:
		void UnloadLevelsForMissionTag(const class FName& MissionTag);
		void SetMissionData_Vector(const class FName& MissionTag, const class FName& Key, const struct FVector& Value);
		void SetMissionData_Struct(const class FName& MissionTag, const class FName& Key, class UProperty* Value);
		void SetMissionData_String(const class FName& MissionTag, const class FName& Key, const class FString& Value);
		void SetMissionData_Rotator(const class FName& MissionTag, const class FName& Key, const struct FRotator& Value);
		void SetMissionData_Int(const class FName& MissionTag, const class FName& Key, int32_t Value);
		void SetMissionData_Float(const class FName& MissionTag, const class FName& Key, float Value);
		void SetMissionData_Double(const class FName& MissionTag, const class FName& Key, double Value);
		void SetMissionData_Bool(const class FName& MissionTag, const class FName& Key, bool Value);
		void ServerRequestToggleWeapon(class AMissionType* Mission);
		void ServerRequestStartMissionWithMissionTag(const class FName& MissionTag, class AMissionDispatcher* FromDispatcher);
		void ServerRequestStartMission(class UClass* MissionType, class AMissionDispatcher* FromDispatcher);
		void ServerRequestMissionEligibilityCheck(class AMissionDispatcher* dispatcherFilter);
		void ServerRequestEquipMissionItem(class AMissionType* Mission, const struct FItemNetID& ItemId);
		void ServerRequestCancelMission();
		void ServerMulticastRequiredProps();
		void ReplicatedMissionDataUpdated();
		void OnRep_MissionIndicatorParticles();
		void OnRep_CurrentMissions();
		void OnRep_ActiveMissionIndex();
		void OnMissionClientEvent__DelegateSignature(class APrimalBuff_MissionData* MissionDataBuff, class AMissionType* Mission);
		void OnMissionClientDataUpdated__DelegateSignature(class APrimalBuff_MissionData* MissionDataBuff);
		void OnMissionClientBoolEvent__DelegateSignature(class APrimalBuff_MissionData* MissionDataBuff, class AMissionType* Mission, bool bSuccess);
		void OnActiveMissionPhaseStarted(class AMissionType* Mission, const class FName& OldPhase, const class FName& NewPhase);
		void OnActiveMissionPhaseEnded(class AMissionType* Mission, const class FName& OldPhase, const class FName& NewPhase);
		void MultiUpdateMissionData_Int(const class FName& MissionTag, const class FName& Key, int32_t Value);
		void MultiUpdateMissionData_Bool(const class FName& MissionTag, const class FName& Key, bool Value);
		void MultiClearParticleIndicator(float RemoveAfterDuration);
		void LoadLevelsForMissionTag(const class FName& MissionTag);
		bool IsPlayerEligibleForMission_CheckFromClient(class UClass* MissionType, bool* bOutIsRecentData, struct FClientMissionEligibility* OutEligibilityData, float MaxTimeConsideredRecent, class AMissionDispatcher* dispatcherFilter);
		bool IsMissionTypeActiveWithMissionTag(const class FName& MissionTag);
		bool IsMissionTypeActive(class UClass* MissionType, bool bExactClassMatch);
		void GetWorldIndicatorsForMission(class AMissionType* Mission, TArray<struct FMissionWorldIndicator>* WorldIndicators, bool bCompanionOnly, bool bSortByPriority);
		void GetMissionDebugData(TArray<struct FSerializedMissionData>* OutMissionData);
		bool GetMissionData_Vector(const class FName& MissionTag, const class FName& Key, struct FVector* OutValue);
		bool GetMissionData_Struct(const class FName& MissionTag, const class FName& Key, class UProperty** DestStruct);
		bool GetMissionData_String(const class FName& MissionTag, const class FName& Key, class FString* OutValue);
		bool GetMissionData_Rotator(const class FName& MissionTag, const class FName& Key, struct FRotator* OutValue);
		bool GetMissionData_Int(const class FName& MissionTag, const class FName& Key, int32_t* OutValue);
		bool GetMissionData_Float(const class FName& MissionTag, const class FName& Key, float* OutValue);
		bool GetMissionData_Double(const class FName& MissionTag, const class FName& Key, double* OutValue);
		bool GetMissionData_Bool(const class FName& MissionTag, const class FName& Key, bool* OutValue);
		class FName GetBiomeMissionTag(const struct FVector& Location);
		void GetAllCurrentMissions(TArray<class AMissionType*>* OutMissions);
		class AMissionType* GetActiveMission();
		void ClientUnloadMissionLevels(const class FName& MissionTag);
		void ClientSpawnEmitter(class UClass* EmitterType, const struct FTransform& EmitterTransform, float EmitterLifespan);
		void ClientSendMissionNotification(class AMissionType* FromMission, const class FName& NotificationTag, const struct FLinearColor& MessageColor, class UTexture2D* MessageIcon, float DisplayTime, float DisplayScale, bool bIsSingleton, class USoundBase* MessageSound);
		void ClientSendMissionAlert(EMissionAlertType AlertType, const class FString& AlertTitle, TArray<struct FMissionAlertEntry> AlertEntries, float DisplayTime, class USoundBase* Sound, bool FlyoutFromTop);
		void ClientMissionEvent(class AMissionType* Mission, bool bMissionStarted, bool bMissionCompletedSuccessfully);
		void ClientMissionEligibilityResponse(TArray<struct FMissionEligibilityData> EligibilityData);
		void ClientLoadMissionLevels(const class FName& MissionTag);
		void AutoHideIndicatorParticles();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalEngramEntry
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class UPrimalEngramEntry : public UObject
	{
	public:
		unsigned char                                              UnknownData_MKPI[0x28];                                  // 0x0028(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    RequiredCharacterLevel;                                  // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    RequiredEngramPoints;                                    // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bGiveBlueprintToPlayerInventory : 1;                     // 0x0058(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bCanBeManuallyUnlocked : 1;                              // 0x0058(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bIsSPlusEngram : 1;                                      // 0x0058(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceIsTekEngram : 1;                                   // 0x0058(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_XASS[0x7];                                   // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              BluePrintEntry;                                          // 0x0060(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class FString                                              ExtraEngramDescription;                                  // 0x0068(0x0010) Edit, ZeroConstructor
		TArray<struct FEngramEntries>                              EngramRequirementSets;                                   // 0x0078(0x0010) Edit, ZeroConstructor
		int32_t                                                    MyEngramIndex;                                           // 0x0088(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		EEngramGroup                                               EngramGroup;                                             // 0x008C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YJW1[0x3];                                   // 0x008D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalGlobalUIData
	 * Size -> 0x00F0 (FullSize[0x0118] - InheritedSize[0x0028])
	 */
	class UPrimalGlobalUIData : public UObject
	{
	public:
		struct FLinearColor                                        StatusColorGood;                                         // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        StatusColorWarning;                                      // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        StatusColorBad;                                          // 0x0048(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          RightMouseButtonIcon;                                    // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          LeftMouseButtonIcon;                                     // 0x0060(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          GamepadLeftBumper;                                       // 0x0068(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          GamepadRightBumper;                                      // 0x0070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          LeftTriggerIcon;                                         // 0x0078(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          RightTriggerIcon;                                        // 0x0080(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          GamepadFaceButtonBottom;                                 // 0x0088(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          GamepadFaceButtonTop;                                    // 0x0090(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          GamepadFaceButtonLeft;                                   // 0x0098(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          GamepadFaceButtonRight;                                  // 0x00A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          DPadUpIcon;                                              // 0x00A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          DPadDownIcon;                                            // 0x00B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          DPadLeftIcon;                                            // 0x00B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          DPadRightIcon;                                           // 0x00C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          RightThumbstickIcon;                                     // 0x00C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          LeftThumbstickIcon;                                      // 0x00D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          SpecialLeftIcon;                                         // 0x00D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          SpecialRightIcon;                                        // 0x00E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          MutagenIcon;                                             // 0x00E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MutagenGoodToGreatThreshold;                             // 0x00F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        MutagenGoodColor;                                        // 0x00F4(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        MutagenGreatColor;                                       // 0x0104(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JJ36[0x4];                                   // 0x0114(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalHarvestingComponent
	 * Size -> 0x0178 (FullSize[0x0250] - InheritedSize[0x00D8])
	 */
	class UPrimalHarvestingComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_RDNC[0x10];                                  // 0x00D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FHarvestResourceEntry>                       HarvestResourceEntries;                                  // 0x00E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FHarvestResourceEntry>                       BaseHarvestResourceEntries;                              // 0x00F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FDamageHarvestingEntry>                      HarvestDamageTypeEntries;                                // 0x0108(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      MaxHarvestHealth;                                        // 0x0118(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LFOA[0x4];                                   // 0x011C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HarvestHealthGiveResourceInterval;                       // 0x0120(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CurrentHarvestHealth;                                    // 0x0124(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		bool                                                       bIsUnharvestable;                                        // 0x0128(0x0001) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YT1S[0x3];                                   // 0x0129(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bSetOwnerHealthToHarvestHealth : 1;                      // 0x012C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsableHarvesting : 1;                                   // 0x012C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowForcedRepopulation : 1;                            // 0x012C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowHarvestHealthScaling : 1;                          // 0x012C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsableAllowHarvestHealthScaling : 1;                    // 0x012C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNonBlockingUsableHarvesting : 1;                        // 0x012C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bClampResourceHarvestDamage : 1;                         // 0x012C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsDefaultHarvestingComponent : 1;                       // 0x012C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsSingleUnitHarvest : 1;                                // 0x012D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAssignedToTribeHarvestOnly : 1;                         // 0x012D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPRecieveComponentDamage : 1;                        // 0x012D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_HO7V[0x2];                                   // 0x012E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    AssignedToTribeID;                                       // 0x0130(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UseHarvestDamageAmount;                                  // 0x0134(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              UseHarvestDamageType;                                    // 0x0138(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              DescriptiveName;                                         // 0x0140(0x0010) Edit, ZeroConstructor
		class FString                                              UseHarvestString;                                        // 0x0150(0x0010) Edit, ZeroConstructor
		class FString                                              UnequipWeaponToUseHarvestString;                         // 0x0160(0x0010) Edit, ZeroConstructor
		float                                                      UsableHarvestSphereRadius;                               // 0x0170(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       ShouldReplenish;                                         // 0x0174(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H76U[0x3];                                   // 0x0175(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinPlayerDistanceReplenishing;                           // 0x0178(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinStructureDistanceReplenishing;                        // 0x017C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinNonCoreStructureDistanceReplenishing;                 // 0x0180(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BaseMinTimeAfterDepletionReplenishing;                   // 0x0184(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BaseMaxTimeAfterDepletionReplenishing;                   // 0x0188(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ExhaustedDepletionTimeInterval;                          // 0x018C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ExhaustedDepletionPower;                                 // 0x0190(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ExhaustedDepletionEffectScale;                           // 0x0194(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ReduceExhaustedDepletionSpeed;                           // 0x0198(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AutoReplenishInterval;                                   // 0x019C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AutoReplenishPercent;                                    // 0x01A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DamageInstigatorAmount;                                  // 0x01A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    GiveItemEntriesMin;                                      // 0x01A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    GiveItemEntriesMax;                                      // 0x01AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TamedDinoHarvestGiveHealthMultiplier;                    // 0x01B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JXW6[0xC];                                   // 0x01B4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnItemHarvested;                                         // 0x01C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FString                                              UIStringIMeleeHitToHarvest;                              // 0x01D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              UIStringHarvestRequiresTool;                             // 0x01E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              UIStringCantHarvestUnderwater;                           // 0x01F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      DinoHarvestGiveHealthAmount;                             // 0x0200(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DinoHarvestGiveHealthSpeed;                              // 0x0204(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    DinoHarvestGiveHealthDescriptionIndex;                   // 0x0208(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZJQI[0xC];                                   // 0x020C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      ForceAllowMeleeHarvestingOverrides;                      // 0x0218(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      HarvestingPriority;                                      // 0x0228(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_D9MI[0x4];                                   // 0x022C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FComponentAttachmentEntry>                   AdditionalComponentAttachments;                          // 0x0230(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FComponentAttachmentEntry>                   AdditionalComponentAttachmentsDedicated;                 // 0x0240(0x0010) Edit, ZeroConstructor, DisableEditOnInstance

	public:
		void OnItemHarvested__DelegateSignature(class AActor* Harvester, class UPrimalItem* HarvestedItem, int32_t ItemQuantity);
		void BPRecieveComponentDamage(float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		int32_t BPCustomHarvestResource(class UPrimalInventoryComponent* invComp, int32_t NumToGive, class UClass* DamageTypeClass, class AActor* ToActor);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalInventoryComponent_Static
	 * Size -> 0x0000 (FullSize[0x0598] - InheritedSize[0x0598])
	 */
	class UPrimalInventoryComponent_Static : public UPrimalInventoryComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalItem_CruiseMissile
	 * Size -> 0x0000 (FullSize[0x0AE8] - InheritedSize[0x0AE8])
	 */
	class UPrimalItem_CruiseMissile : public UPrimalItem
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalItem_Dye
	 * Size -> 0x0020 (FullSize[0x0B08] - InheritedSize[0x0AE8])
	 */
	class UPrimalItem_Dye : public UPrimalItem
	{
	public:
		struct FLinearColor                                        DyeColor;                                                // 0x0AE8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              DyeUISceneTemplate;                                      // 0x0AF8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DZI4[0x8];                                   // 0x0B00(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalItem_Radio
	 * Size -> 0x0010 (FullSize[0x0AF8] - InheritedSize[0x0AE8])
	 */
	class UPrimalItem_Radio : public UPrimalItem
	{
	public:
		bool                                                       bAllowVoice : 1;                                         // 0x0AE8(0x0001) BIT_FIELD SaveGame, NoDestructor
		unsigned char                                              UnknownData_LH4C[0x7];                                   // 0x0AE9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          SetFrequencySound;                                       // 0x0AF0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalNoClimbingVolume
	 * Size -> 0x0000 (FullSize[0x04A8] - InheritedSize[0x04A8])
	 */
	class APrimalNoClimbingVolume : public AVolume
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalRichTextBlock
	 * Size -> 0x01A8 (FullSize[0x0330] - InheritedSize[0x0188])
	 */
	class UPrimalRichTextBlock : public UWidget
	{
	public:
		class FText                                                Text;                                                    // 0x0188(0x0018) ELEMENT_SIZE_MISMATCH Edit, BlueprintReadOnly, DisableEditOnInstance
		unsigned char                                              UnknownData_V839[0x10];                                  // 0x01A0(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class FScriptDelegate                                      TextDelegate;                                            // 0x01B0(0x0010) ZeroConstructor, InstancedReference, NoDestructor
		ETextJustify                                               Justification;                                           // 0x01C0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       AutoWrapText;                                            // 0x01C1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HMNU[0x2];                                   // 0x01C2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WrapTextAt;                                              // 0x01C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay
		bool                                                       CenterVertically;                                        // 0x01C8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MMOA[0x3];                                   // 0x01C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMargin                                             Margin;                                                  // 0x01CC(0x0010) Edit, DisableEditOnInstance, AdvancedDisplay
		float                                                      LineHeightPercentage;                                    // 0x01DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay
		struct FTextBlockStyle                                     WidgetStyle;                                             // 0x01E0(0x0118) Edit, BlueprintVisible
		TArray<struct FPrimalTextStyle>                            TextStyles;                                              // 0x02F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FPrimalImageStyle>                           ImageStyles;                                             // 0x0308(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_JN9K[0x18];                                  // 0x0318(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetText(const class FText& InText, bool bDoParse);
		void SetString(const class FString& InString);
		class FText GetText();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStaticData_MissionCompanionData
	 * Size -> 0x03F8 (FullSize[0x0420] - InheritedSize[0x0028])
	 */
	class UPrimalStaticData_MissionCompanionData : public UPrimalStaticData
	{
	public:
		unsigned char                                              UnknownData_EBU8[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPointOfInterestData_ForCompanion                   MissionPointOfInterestData;                              // 0x0030(0x03F0) Edit, BlueprintReadOnly, DisableEditOnInstance

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStaticData_MissionCompanionReactionData
	 * Size -> 0x01E0 (FullSize[0x0208] - InheritedSize[0x0028])
	 */
	class UPrimalStaticData_MissionCompanionReactionData : public UPrimalStaticData
	{
	public:
		struct FCompanionReactionData                              ReactionData_MissionStart;                               // 0x0028(0x00A0) Edit, BlueprintReadOnly, DisableEditOnInstance
		struct FCompanionReactionData                              ReactionData_MissionEnd_Success;                         // 0x00C8(0x00A0) Edit, BlueprintReadOnly, DisableEditOnInstance
		struct FCompanionReactionData                              ReactionData_MissionEnd_Failure;                         // 0x0168(0x00A0) Edit, BlueprintReadOnly, DisableEditOnInstance

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructurePlacer
	 * Size -> 0x00A0 (FullSize[0x0510] - InheritedSize[0x0470])
	 */
	class APrimalStructurePlacer : public AInfo
	{
	public:
		TArray<class UClass*>                                      PlaceableStructures;                                     // 0x0470(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		EPrimalStructurePlacerState                                CurrentState;                                            // 0x0480(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_IJCF[0x3];                                   // 0x0481(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CurrentPlacingStructureIndex;                            // 0x0484(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected
		class APrimalStructure*                                    CurrentPlacingStructure;                                 // 0x0488(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected
		bool                                                       bDebugStructures : 1;                                    // 0x0490(0x0001) BIT_FIELD Edit, DisableEditOnTemplate, Transient, NoDestructor, Protected
		bool                                                       bForceDisplayMissionAreaStructureNoBuildZones : 1;       // 0x0490(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_4NON[0x3];                                   // 0x0491(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                RotationAxisName;                                        // 0x0494(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RotationSpeed;                                           // 0x049C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AltRotationAxisName;                                     // 0x04A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AltRotationSpeed;                                        // 0x04A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CUF2[0x4];                                   // 0x04AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCanvasIcon                                         RotationIcon;                                            // 0x04B0(0x0018) Edit, DisableEditOnInstance
		float                                                      RotationIconSize;                                        // 0x04C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RotationIconScale;                                       // 0x04CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9Q70[0x40];                                  // 0x04D0(0x0040) MISSED OFFSET (PADDING)

	public:
		void SetForceDisplayMissionAreaStructureNoBuildZones(bool bForceDisplay);
		void SetChoosingRotation(bool bNewChoosingRotation);
		bool IsPlacingActive();
		void GetLastPlacementProperties(struct FVector* OutLastHitLoc, struct FRotator* OutLastHitRot, struct FRotator* OutLastViewRot);
		void DrawStructurePreviewHUD(class AShooterHUD* HUD, class APrimalStructure* PlacingStructure);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureSettings
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UPrimalStructureSettings : public UObject
	{
	public:
		TArray<struct FDamageTypeAdjuster>                         BaseDamageTypeAdjusters;                                 // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FDamageTypeAdjuster>                         ExtraDamageTypeAdjusters;                                // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      DecayDestructionPeriodMultiplier;                        // 0x0048(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GWTP[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalSupplyCrateItemSet
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UPrimalSupplyCrateItemSet : public UObject
	{
	public:
		struct FSupplyCrateItemSet                                 ItemSet;                                                 // 0x0028(0x0040) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalSupplyCrateItemSets
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UPrimalSupplyCrateItemSets : public UObject
	{
	public:
		TArray<struct FSupplyCrateItemSet>                         ItemSets;                                                // 0x0028(0x0010) Edit, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureBearTrap
	 * Size -> 0x00A8 (FullSize[0x0B90] - InheritedSize[0x0AE8])
	 */
	class APrimalStructureBearTrap : public APrimalStructure
	{
	public:
		class USkeletalMeshComponent*                              TrapSK;                                                  // 0x0AE8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class USphereComponent*                                    TriggerComponent;                                        // 0x0AF0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class USoundCue*                                           TrapTriggerSound;                                        // 0x0AF8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              TrapDamageType;                                          // 0x0B00(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TrapMinPawnMass;                                         // 0x0B08(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TrapMaxPawnMass;                                         // 0x0B0C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TrapDamageAmount;                                        // 0x0B10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PeriodicalTrapDamageTime;                                // 0x0B14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PeriodicalTrapDamageAmount;                              // 0x0B18(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      IgnoreTriggerAfterSpawnTime;                             // 0x0B1C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class FName>                                        IgnoreDinosWithCustomTag;                                // 0x0B20(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FName>                                        ForceImmobilizeDinosWithCustomTag;                       // 0x0B30(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      HealthDecreasePerSecPlayers;                             // 0x0B40(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HealthDecreasePerSecWild;                                // 0x0B44(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bImmuneToNormalDamage;                                   // 0x0B48(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CMZM[0x7];                                   // 0x0B49(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APrimalCharacter*                                    ImmobilizedCharacter;                                    // 0x0B50(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance
		int8_t                                                     CurrentTrapState;                                        // 0x0B58(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, PersistentInstance
		int8_t                                                     ClientPrevTrapState;                                     // 0x0B59(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bClosedTrap;                                             // 0x0B5A(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ECG4[0x1];                                   // 0x0B5B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HealthDecreasePerSec;                                    // 0x0B5C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     DestroyTime;                                             // 0x0B60(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		float                                                      DestroyAfterTime;                                        // 0x0B68(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseOnlyOnNonAllied;                                     // 0x0B6C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WK78[0x3];                                   // 0x0B6D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      DamagedOnlyBy;                                           // 0x0B70(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UParticleSystem*                                     OnDestroyFX;                                             // 0x0B80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bBPUseNotifyImmobilizedCharacterIsDeadOrInConscious : 1; // 0x0B88(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_L97U[0x7];                                   // 0x0B89(0x0007) MISSED OFFSET (PADDING)

	public:
		void TriggerTouched(class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void PeriodicalTrapDamageTimer();
		void OnRep_CurrentTrapState();
		void NetGotoTrapState(int8_t TrapState);
		bool IsTrapPrepared(float AnimSetupTime);
		void HideAnimatedSK();
		void DecreaseDamageTimer();
		void BPNotifyImmobilizedCharacterIsDeadOrInConscious(bool IsDead, bool IsConscious);
		void BPDie();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureDoor
	 * Size -> 0x0088 (FullSize[0x0B70] - InheritedSize[0x0AE8])
	 */
	class APrimalStructureDoor : public APrimalStructure
	{
	public:
		class USceneComponent*                                     MyDoorTransform;                                         // 0x0AE8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		float                                                      RotationSpeed;                                           // 0x0AF0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RYU7[0x4];                                   // 0x0AF4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           DoorOpenSound;                                           // 0x0AF8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundCue*                                           DoorCloseSound;                                          // 0x0B00(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		uint32_t                                                   CurrentPinCode;                                          // 0x0B08(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		bool                                                       bInvertOpenCloseDirection : 1;                           // 0x0B0C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSupportsLocking : 1;                                    // 0x0B0C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseSecondDoor : 1;                                      // 0x0B0C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSupportsPinLocking : 1;                                 // 0x0B0C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsLocked : 1;                                           // 0x0B0C(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, PersistentInstance
		bool                                                       bIsPinLocked : 1;                                        // 0x0B0C(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, PersistentInstance
		bool                                                       bAdminOnlyAccess : 1;                                    // 0x0B0C(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, PersistentInstance
		bool                                                       bCanBeForcedOpenByDino : 1;                              // 0x0B0C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventBasingWhileMoving : 1;                           // 0x0B0D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceDoorOpenIn : 1;                                    // 0x0B0D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceDoorOpenOut : 1;                                   // 0x0B0D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsDoorMoving : 1;                                       // 0x0B0D(0x0001) BIT_FIELD Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor
		bool                                                       bForceStaticMobility : 1;                                // 0x0B0D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRotatePitch : 1;                                        // 0x0B0D(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bRotateRoll : 1;                                         // 0x0B0D(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bRotateYaw : 1;                                          // 0x0B0D(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bInitializedRotation : 1;                                // 0x0B0E(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor
		bool                                                       bPreventDoorInterpolation : 1;                           // 0x0B0E(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseBPGotoDoorState : 1;                                 // 0x0B0E(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_N2PC[0x1];                                   // 0x0B0F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bForceNoPinLocking : 1;                                  // 0x0B10(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_ACR1[0x3];                                   // 0x0B11(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DoorStateChangeIgnoreEncroachmentInterval;               // 0x0B14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int8_t                                                     DoorOpenState;                                           // 0x0B18(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, PersistentInstance
		unsigned char                                              UnknownData_3BA7[0x17];                                  // 0x0B19(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            SecondDoorDefaultRot;                                    // 0x0B30(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      CurrentDoorAngle;                                        // 0x0B3C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class USoundBase*                                          UnlockDoorSound;                                         // 0x0B40(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          LockDoorSound;                                           // 0x0B48(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          LockedSound;                                             // 0x0B50(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     LastPinOpenSuccessTime;                                  // 0x0B58(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RZPW[0x10];                                  // 0x0B60(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnRep_DoorOpenState(int8_t PrevDoorOpenState);
		void NetGotoDoorState(int8_t DoorState);
		bool HasSamePinCode(class APrimalStructureItemContainer* otherContainer);
		int32_t GetDoorState();
		void DelayedGotoDoorStateTimer();
		bool CanOpen(class APlayerController* ForPC);
		void BPSetDoorState(int32_t DoorState);
		void BPGotoDoorState(int32_t NewDoorState);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureSkeletalDoor
	 * Size -> 0x0020 (FullSize[0x0B90] - InheritedSize[0x0B70])
	 */
	class APrimalStructureSkeletalDoor : public APrimalStructureDoor
	{
	public:
		class USkeletalMeshComponent*                              SkeletalDoorComponent;                                   // 0x0B70(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor
		class UShapeComponent*                                     DoorCollisionComponent;                                  // 0x0B78(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor
		class UShapeComponent*                                     TriggerComponent;                                        // 0x0B80(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor
		class UClass*                                              BuffToApplyWhenInsideStructure;                          // 0x0B88(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		void OnEndOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		int32_t GetDoorOpenState();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureElevatorPlatform
	 * Size -> 0x00B0 (FullSize[0x0B98] - InheritedSize[0x0AE8])
	 */
	class APrimalStructureElevatorPlatform : public APrimalStructure
	{
	public:
		float                                                      MaxCarryWeight;                                          // 0x0AE8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      Speed;                                                   // 0x0AEC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DownSpeed;                                               // 0x0AF0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ClientLocationInterpSpeed;                               // 0x0AF4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ClientLocationInterpSpeedDown;                           // 0x0AF8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UpObstructionTraceLength;                                // 0x0AFC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DownObstructionTraceLength;                              // 0x0B00(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TrackTraceLength;                                        // 0x0B04(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             TraceExtent;                                             // 0x0B08(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SBY4[0x4];                                   // 0x0B14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          StartMovingSound;                                        // 0x0B18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          StopMovingSound;                                         // 0x0B20(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DistanceToTravel;                                        // 0x0B28(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      MaxDistanceToTravel;                                     // 0x0B2C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             StartLocation;                                           // 0x0B30(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bIsActivated : 1;                                        // 0x0B3C(0x0001) BIT_FIELD Net, Transient, RepNotify, NoDestructor
		bool                                                       UnknownData_IFDS : 1;                                    // 0x0B3C(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUpdateLocation : 1;                                     // 0x0B3C(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_FUVV[0x3];                                   // 0x0B3D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class APrimalCharacter>>             CarriedActors;                                           // 0x0B40(0x0010) Net, ZeroConstructor, Transient
		EPrimalStructureElevatorState                              CurrentState;                                            // 0x0B50(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Y28C[0x3];                                   // 0x0B51(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TraveledDistance;                                        // 0x0B54(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      CurrentLiftedWeight;                                     // 0x0B58(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bUseBPElevatorStopped;                                   // 0x0B5C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LEKU[0x1B];                                  // 0x0B5D(0x001B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinHeight;                                               // 0x0B78(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      MaxHeight;                                               // 0x0B7C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      Height;                                                  // 0x0B80(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ReplicatedZ;                                             // 0x0B84(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bAddElevatorMultiUseEntries : 1;                         // 0x0B88(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsLocked : 1;                                           // 0x0B88(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, PersistentInstance
		bool                                                       bIsPinLocked : 1;                                        // 0x0B88(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, PersistentInstance
		bool                                                       bAdminOnlyAccess : 1;                                    // 0x0B88(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, PersistentInstance
		unsigned char                                              UnknownData_HWOE[0x3];                                   // 0x0B89(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   CurrentPinCode;                                          // 0x0B8C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LE47[0x8];                                   // 0x0B90(0x0008) MISSED OFFSET (PADDING)

	public:
		void ServerActivate(class APlayerController* ForPC, bool bForceDirection, EPrimalStructureElevatorState Dir);
		bool PlatformIsActive(EPrimalStructureElevatorState* Direction);
		void OnRep_bIsActivated();
		bool HasSamePinCode(class APrimalStructureItemContainer* otherContainer);
		bool HasReachedMaxWeight();
		float GetTrackHeight();
		float GetCurrentLiftedWeight();
		void GetAllTrackStructures(TArray<class AActor*>* Tracks);
		void Deactivate(bool bSwitchDirection);
		void BPElevatorStopped(bool bSwitchedDirection, EPrimalStructureElevatorState NewDirection);
		void Activate(class APlayerController* ForPC, bool bForceDirection, EPrimalStructureElevatorState Dir, float DistanceToTravelOverride);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureExplosive
	 * Size -> 0x00A0 (FullSize[0x0B88] - InheritedSize[0x0AE8])
	 */
	class APrimalStructureExplosive : public APrimalStructure
	{
	public:
		uint32_t                                                   ConstructorPlayerDataID;                                 // 0x0AE8(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_K34Q[0x4];                                   // 0x0AEC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AShooterCharacter*                                   ConstructorPawn;                                         // 0x0AF0(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    ConstructorTargetingTeam;                                // 0x0AF8(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected
		bool                                                       UnknownData_KRLD : 1;                                    // 0x0AFC(0x0001) BIT_FIELD (PADDING)
		bool                                                       bAnimatePlacement : 1;                                   // 0x0AFC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		unsigned char                                              UnknownData_KUK8[0x3];                                   // 0x0AFD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ExplosiveLocOffset;                                      // 0x0B00(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		struct FRotator                                            ExplosiveRotOffset;                                      // 0x0B0C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      PlacementInitialSpeed;                                   // 0x0B18(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      PlacementMaxSpeed;                                       // 0x0B1C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      PlacementAccel;                                          // 0x0B20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      ExplosionDamage;                                         // 0x0B24(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      ExplosionRadius;                                         // 0x0B28(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      ExplosionImpulse;                                        // 0x0B2C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		class UClass*                                              ExplosionDamageType;                                     // 0x0B30(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UClass*                                              ExplosiveAmmoItemTemplate;                               // 0x0B38(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		bool                                                       bAlertDinos : 1;                                         // 0x0B40(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		unsigned char                                              UnknownData_E0P0[0x3];                                   // 0x0B41(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AlertDinosRange;                                         // 0x0B44(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UClass*                                              PickupItemClass;                                         // 0x0B48(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    PickUpQuantity;                                          // 0x0B50(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_6VB4[0x4];                                   // 0x0B54(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                AnimatedComponent;                                       // 0x0B58(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_9Z7A[0x28];                                  // 0x0B60(0x0028) MISSED OFFSET (PADDING)

	public:
		void NetIgnoreDestructionEvents();
		void ApplyPlacementPreview();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureExplosiveTransGPS
	 * Size -> 0x0020 (FullSize[0x0BA8] - InheritedSize[0x0B88])
	 */
	class APrimalStructureExplosiveTransGPS : public APrimalStructureExplosive
	{
	public:
		float                                                      CurrentFrequency;                                        // 0x0B88(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		class FName                                                InSocketName;                                            // 0x0B8C(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DMEH[0x4];                                   // 0x0B94(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint64_t                                                   PlayerDataID;                                            // 0x0B98(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		class APrimalStructureItemContainer*                       AttachedToStructure;                                     // 0x0BA0(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor

	public:
		void NetSetLocation(const struct FVector& NewLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureTripwire
	 * Size -> 0x0060 (FullSize[0x0BE8] - InheritedSize[0x0B88])
	 */
	class APrimalStructureTripwire : public APrimalStructureExplosive
	{
	public:
		class UParticleSystemComponent*                            WireComponent;                                           // 0x0B88(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected
		class UBoxComponent*                                       TriggerComponent;                                        // 0x0B90(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected
		struct FRotator                                            CableRotOffset;                                          // 0x0B98(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      MaximumCableLength;                                      // 0x0BA4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		bool                                                       bOnlyPrimalCharacters : 1;                               // 0x0BA8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bIgnoreAllies : 1;                                       // 0x0BA8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bNotifyTripChat : 1;                                     // 0x0BA8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bShowingWireComponent : 1;                               // 0x0BA8(0x0001) BIT_FIELD NoDestructor, Protected
		bool                                                       bForceIgnoreAllies : 1;                                  // 0x0BA8(0x0001) BIT_FIELD Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor, Protected, PersistentInstance
		bool                                                       bForceIgnoreWildDinos : 1;                               // 0x0BA8(0x0001) BIT_FIELD Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor, Protected, PersistentInstance
		bool                                                       bDoingWireCheck : 1;                                     // 0x0BA8(0x0001) BIT_FIELD SaveGame, NoDestructor, Protected
		bool                                                       bUnwiredTrap : 1;                                        // 0x0BA8(0x0001) BIT_FIELD Net, SaveGame, RepNotify, NoDestructor, Protected, PersistentInstance
		bool                                                       bAllowToggleForceIgnoreAllies : 1;                       // 0x0BA9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bAllowToggleForceIgnoreWildDinos : 1;                    // 0x0BA9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		unsigned char                                              UnknownData_0PZZ[0x6];                                   // 0x0BAA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          NotifyTripChatSound;                                     // 0x0BB0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FString                                              BoxName;                                                 // 0x0BB8(0x0010) Net, ZeroConstructor, SaveGame, Protected, PersistentInstance
		class APrimalStructureTripwire*                            ConnectedTo;                                             // 0x0BC8(0x0008) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, PersistentInstance
		int32_t                                                    OwnerTargetingTeam;                                      // 0x0BD0(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_2NFQ[0x14];                                  // 0x0BD4(0x0014) MISSED OFFSET (PADDING)

	public:
		void WireCheck();
		void TriggerTouched(class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnRep_UnwiredTrap();
		void OnRep_ConnectedTo();
		void NetUpdateBoxName(const class FString& NewName);
		void DisconnectMe();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureElevatorTrack
	 * Size -> 0x0010 (FullSize[0x0E20] - InheritedSize[0x0E10])
	 */
	class APrimalStructureElevatorTrack : public APrimalStructureItemContainer
	{
	public:
		bool                                                       bHasBase;                                                // 0x0E10(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4PLE[0x3];                                   // 0x0E11(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class APrimalStructureElevatorPlatform>     ElevatorBase;                                            // 0x0E14(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		bool                                                       bRequiresPower : 1;                                      // 0x0E1C(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		bool                                                       bAddElevatorMultiUseEntries : 1;                         // 0x0E1C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_LGQC[0x3];                                   // 0x0E1D(0x0003) MISSED OFFSET (PADDING)

	public:
		bool HasPlatformAttachedToTheTrack();
		void ClientHasPlatform();
		class APrimalStructureElevatorPlatform* BPGetElevatorPlatform();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureItemContainer_CropPlot
	 * Size -> 0x00F0 (FullSize[0x0F00] - InheritedSize[0x0E10])
	 */
	class APrimalStructureItemContainer_CropPlot : public APrimalStructureItemContainer
	{
	public:
		class UClass*                                              SeedBaseItemTemplate;                                    // 0x0E10(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              FertilizerBaseItemTemplate;                              // 0x0E18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              WaterNearbyStructureTemplate;                            // 0x0E20(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CropRefreshIntervalMin;                                  // 0x0E28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CropRefreshIntervalMax;                                  // 0x0E2C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WaterNearbyStructureRange;                               // 0x0E30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxWaterAmount;                                          // 0x0E34(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ActiveRainWaterIncreaseSpeed;                            // 0x0E38(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AverageRainWaterIncreaseMultiplier;                      // 0x0E3C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WaterItemAmountMultiplier;                               // 0x0E40(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             ExtraCropMeshScale;                                      // 0x0E44(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CropRefreshInterval;                                     // 0x0E50(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		float                                                      CropPhaseFertilizerCache;                                // 0x0E54(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		float                                                      CropFruitFertilizerCache;                                // 0x0E58(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		bool                                                       bUsesCrop : 1;                                           // 0x0E5C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowAnyWaterSource : 1;                                // 0x0E5C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bGainWaterOverTime : 1;                                  // 0x0E5C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAutoFill : 1;                                           // 0x0E5C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDontAddWaterOnInventoryItemUsed : 1;                    // 0x0E5C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowOpenToSky : 1;                                     // 0x0E5C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetAdditionalGrowthMultiplier : 1;                 // 0x0E5C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsFertilized : 1;                                       // 0x0E5C(0x0001) BIT_FIELD Net, SaveGame, NoDestructor, PersistentInstance
		bool                                                       bIsWatered : 1;                                          // 0x0E5D(0x0001) BIT_FIELD Net, SaveGame, NoDestructor, PersistentInstance
		bool                                                       bIsSeeded : 1;                                           // 0x0E5D(0x0001) BIT_FIELD Net, SaveGame, NoDestructor, PersistentInstance
		bool                                                       bHasFruitItems : 1;                                      // 0x0E5D(0x0001) BIT_FIELD Net, SaveGame, RepNotify, NoDestructor, PersistentInstance
		bool                                                       bCropUsesGreenhouse : 1;                                 // 0x0E5D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bShowWaterAmount : 1;                                    // 0x0E5D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		ESeedCropPhase                                             CurrentCropPhase;                                        // 0x0E5E(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, PersistentInstance
		unsigned char                                              UnknownData_DK8W[0x1];                                   // 0x0E5F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              PlantedCrop;                                             // 0x0E60(0x0008) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, PersistentInstance
		TWeakObjectPtr<class APrimalStructureItemContainer>        IrrigationWaterTap;                                      // 0x0E68(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		double                                                     LastCropRefreshTime;                                     // 0x0E70(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_E7JK[0x10];                                  // 0x0E78(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UStaticMeshComponent*>                        MyCropMeshes;                                            // 0x0E88(0x0010) ExportObject, ZeroConstructor, SaveGame, ContainsInstancedReference
		class APrimalStructure*                                    MyCropStructure;                                         // 0x0E98(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		double                                                     CropRefreshTimeCache;                                    // 0x0EA0(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    FertilizerAmount;                                        // 0x0EA8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, PersistentInstance
		float                                                      WaterAmount;                                             // 0x0EAC(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance
		unsigned char                                              NumGreenHouseStructures;                                 // 0x0EB0(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance
		unsigned char                                              UnknownData_WBC7[0x7];                                   // 0x0EB1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      WateringItemTemplates;                                   // 0x0EB8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      FertilizerConsumptionRateMultiplier;                     // 0x0EC8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AWVE[0xC];                                   // 0x0ECC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              WateredOverridesCraftingItemTemplate;                    // 0x0ED8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinWateredOverridesCrafting;                             // 0x0EE0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxGreenHouseStructures;                                 // 0x0EE4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxGreenHouseCropGrowthMultiplier;                       // 0x0EE8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GainWaterRate;                                           // 0x0EEC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FB19[0x8];                                   // 0x0EF0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CropMaxFruitsMultiplier;                                 // 0x0EF8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q78C[0x4];                                   // 0x0EFC(0x0004) MISSED OFFSET (PADDING)

	public:
		void RemovePlantedCrop();
		void OnRep_PlantedCrop(class UClass* PrevPlantedCrop);
		void OnRep_HasFruitItems(bool bPreviousHasFruitItems);
		void OnRep_CurrentCropPhase(ESeedCropPhase PrevCropPhase);
		float BPGetAdditionalGrowthMultiplier();
		void AutoWaterRefreshCrop();
		float AddWater(float amount, bool bAllowNetworking);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureItemContainer_CropPlot_VisualItems
	 * Size -> 0x0030 (FullSize[0x0F30] - InheritedSize[0x0F00])
	 */
	class APrimalStructureItemContainer_CropPlot_VisualItems : public APrimalStructureItemContainer_CropPlot
	{
	public:
		class UStaticMeshComponent*                                MyExtraStaticMesh;                                       // 0x0F00(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UStaticMesh*                                         ExtraStaticMesh_NoItems;                                 // 0x0F08(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UStaticMesh*                                         ExtraStaticMesh_HasItems;                                // 0x0F10(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      ItemClassesToCheck;                                      // 0x0F18(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bHasItems : 1;                                           // 0x0F28(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, SaveGame, RepNotify, NoDestructor, PersistentInstance
		bool                                                       bDoItemVisuals : 1;                                      // 0x0F28(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_OCXK[0x7];                                   // 0x0F29(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnRep_HasItems();
		void BPUpdateItemVisuals();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureItemContainer_SupplyCrate
	 * Size -> 0x00A0 (FullSize[0x0EB0] - InheritedSize[0x0E10])
	 */
	class APrimalStructureItemContainer_SupplyCrate : public APrimalStructureItemContainer
	{
	public:
		float                                                      MinItemSets;                                             // 0x0E10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxItemSets;                                             // 0x0E14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NumItemSetsPower;                                        // 0x0E18(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bSetsRandomWithoutReplacement;                           // 0x0E1C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YUPY[0x3];                                   // 0x0E1D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinQualityMultiplier;                                    // 0x0E20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxQualityMultiplier;                                    // 0x0E24(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AboveOneExtraQualityMultiplier;                          // 0x0E28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QBW5[0x4];                                   // 0x0E2C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSupplyCrateItemSet>                         ItemSets;                                                // 0x0E30(0x0010) Edit, ZeroConstructor
		class UClass*                                              ItemSetsOverride;                                        // 0x0E40(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FSupplyCrateItemSet>                         AdditionalItemSets;                                      // 0x0E48(0x0010) Edit, ZeroConstructor
		class UClass*                                              AdditionalItemSetsOverride;                              // 0x0E58(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    RequiredLevelToAccess;                                   // 0x0E60(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    MaxLevelToAccess;                                        // 0x0E64(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      InitialTimeToLoseHealth;                                 // 0x0E68(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IntervalTimeToLoseHealth;                                // 0x0E6C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IntervalPercentHealthToLose;                             // 0x0E70(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bGeneratedCrateItems : 1;                                // 0x0E74(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor
		bool                                                       bIsBonusCrate : 1;                                       // 0x0E74(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsQuestCrate : 1;                                       // 0x0E74(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSpawnCrateOnTopOfStructures : 1;                        // 0x0E74(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAppliedBuff : 1;                                        // 0x0E74(0x0001) BIT_FIELD Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor
		unsigned char                                              UnknownData_4D56[0x3];                                   // 0x0E75(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class ASupplyCrateSpawningVolume>           LinkedToCrateSpawnVolume;                                // 0x0E78(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<TWeakObjectPtr<class APrimalDinoCharacter>>         LinkedNPCs;                                              // 0x0E80(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_XEWR[0xC];                                   // 0x0E90(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             SpawnInInDamageCollisionBoxExtent;                       // 0x0E9C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsUnderWaterCrate;                                      // 0x0EA8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FHUT[0x7];                                   // 0x0EA9(0x0007) MISSED OFFSET (PADDING)

	public:
		void StartLosingHealth();
		void SetAppliedBuff(bool bSet);
		void LoseHealth();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureItemContainer_HordeCrate
	 * Size -> 0x0018 (FullSize[0x0EC8] - InheritedSize[0x0EB0])
	 */
	class APrimalStructureItemContainer_HordeCrate : public APrimalStructureItemContainer_SupplyCrate
	{
	public:
		class UMaterialInterface*                                  ElementPostProcessMaterial;                              // 0x0EB0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             CrateLoc;                                                // 0x0EB8(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZS4T[0x4];                                   // 0x0EC4(0x0004) MISSED OFFSET (PADDING)

	public:
		void SpawnElementNodePostProcess();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureItemContainer_VisualItems
	 * Size -> 0x0030 (FullSize[0x0E40] - InheritedSize[0x0E10])
	 */
	class APrimalStructureItemContainer_VisualItems : public APrimalStructureItemContainer
	{
	public:
		class UStaticMeshComponent*                                MyExtraStaticMesh;                                       // 0x0E10(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UStaticMesh*                                         ExtraStaticMesh_NoItems;                                 // 0x0E18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UStaticMesh*                                         ExtraStaticMesh_HasItems;                                // 0x0E20(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      ItemClassesToCheck;                                      // 0x0E28(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bIgnoreBlueprints;                                       // 0x0E38(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIgnoreEngrams;                                          // 0x0E39(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bHasItems : 1;                                           // 0x0E3A(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, SaveGame, RepNotify, NoDestructor, PersistentInstance
		bool                                                       bDoItemVisuals : 1;                                      // 0x0E3A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreviousHasItems : 1;                                   // 0x0E3A(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_128B[0x5];                                   // 0x0E3B(0x0005) MISSED OFFSET (PADDING)

	public:
		void UpdateVisuals();
		void OnRep_HasItems();
		void BPUpdateItemVisuals();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureKeypad
	 * Size -> 0x0010 (FullSize[0x0E20] - InheritedSize[0x0E10])
	 */
	class APrimalStructureKeypad : public APrimalStructureItemContainer
	{
	public:
		float                                                      DoorActivationRange;                                     // 0x0E10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_X9GF[0xC];                                   // 0x0E14(0x000C) MISSED OFFSET (PADDING)

	public:
		bool ActivateKeypad(class AShooterPlayerController* ForPC, int32_t pinCode, bool bEnable);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureMovingContainer
	 * Size -> 0x0028 (FullSize[0x0E38] - InheritedSize[0x0E10])
	 */
	class APrimalStructureMovingContainer : public APrimalStructureItemContainer
	{
	public:
		struct FVector                                             FinalLocation;                                           // 0x0E10(0x000C) BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector                                             ItemBalloonLocation;                                     // 0x0E1C(0x000C) BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		uint16_t                                                   ItemLatitude;                                            // 0x0E28(0x0002) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		uint16_t                                                   ItemLongitude;                                           // 0x0E2A(0x0002) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      LocationName;                                            // 0x0E2C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              bHasSetLocation;                                         // 0x0E30(0x0001) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_81SW[0x7];                                   // 0x0E31(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureSeating
	 * Size -> 0x00D8 (FullSize[0x0EE8] - InheritedSize[0x0E10])
	 */
	class APrimalStructureSeating : public APrimalStructureItemContainer
	{
	public:
		TWeakObjectPtr<class AShooterCharacter>                    SeatedCharacter;                                         // 0x0E10(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, PersistentInstance
		unsigned char                                              UnknownData_4ZKH[0x8];                                   // 0x0E18(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AShooterPlayerController>             SeatedController;                                        // 0x0E20(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<TWeakObjectPtr<class AShooterCharacter>>            CharacterPerSeat;                                        // 0x0E28(0x0010) Net, ZeroConstructor, Transient, RepNotify, PersistentInstance
		unsigned char                                              UnknownData_6SYN[0x10];                                  // 0x0E38(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NumSeats;                                                // 0x0E48(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             SeatedCharacterLocationOffset;                           // 0x0E4C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FRotator                                            SeatedCharacterRotationOffset;                           // 0x0E58(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QV19[0x4];                                   // 0x0E64(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSeatingSpot>                                OtherSeatingSpots;                                       // 0x0E68(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bAdjustForLegLength : 1;                                 // 0x0E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRestrictTPVCameraYaw : 1;                               // 0x0E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsesPrimaryFire : 1;                                    // 0x0E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsesAltFire : 1;                                        // 0x0E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsesItemSlotKeys : 1;                                   // 0x0E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventSeatingWhenHandcuffed : 1;                       // 0x0E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowSleepingPlayers : 1;                               // 0x0E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bReleaseFindsGroundPlacement : 1;                        // 0x0E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowCrouchProneToSit : 1;                              // 0x0E79(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsesTargeting : 1;                                      // 0x0E79(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideLegacyStructureAmmoHUD : 1;                         // 0x0E79(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTraceToUnboardLocation : 1;                             // 0x0E79(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_KAUH[0x2];                                   // 0x0E7A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TPVCameraYawRange;                                       // 0x0E7C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             TPVCameraOffset;                                         // 0x0E80(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             TPVCameraOffsetMultiplier;                               // 0x0E8C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UnboardDistance;                                         // 0x0E98(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MOXZ[0x4];                                   // 0x0E9C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SeatingActionText;                                       // 0x0EA0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class USoundCue*                                           RideSound;                                               // 0x0EB0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           UnrideSound;                                             // 0x0EB8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       SeatingAnimOverride;                                     // 0x0EC0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowAnyTeamToSit : 1;                                  // 0x0EC8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowOrbitCam : 1;                                      // 0x0EC8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventHandcuffLockedSeating : 1;                       // 0x0EC8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bJumpOnDetach : 1;                                       // 0x0EC8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_A2P4[0x3];                                   // 0x0EC9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SeatingActionPriority;                                   // 0x0ECC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     LastServerUpdateSent;                                    // 0x0ED0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9WME[0x10];                                  // 0x0ED8(0x0010) MISSED OFFSET (PADDING)

	public:
		void Release(class AShooterCharacter* ShooterCharacter);
		void OnRep_SeatedCharacter();
		void OnRep_CharacterPerSeat();
		int32_t GetNearestFreeSpot(class AShooterPlayerController* ForPC, const struct FVector& CharacterLocation);
		void Control(class AShooterCharacter* ShooterCharacter, int32_t SeatNumber, bool bLockedToSeat);
		void ClearSeats();
		bool CanSeat(class AShooterPlayerController* ForPC, class AShooterCharacter* forCharacter, bool bForce);
		void BPSeatedPlayer(class AShooterCharacter* SeatedChar, int32_t AtSeatNumber);
		void BPReleasedPlayer(class AShooterCharacter* ReleasedChar, int32_t AtSeatNumber);
		bool BPPreventReleaseSeatingStructure(class AShooterCharacter* ForSitter);
		void BPOnStopTargeting();
		void BPOnStartTargeting();
		bool BPHandleSitterPoop(class AShooterCharacter* ForSitter);
		int32_t BPGetBestSeatNumber(class AShooterPlayerController* ForPC, int32_t InBestSeatNumber);
		bool BPAllowSeating(class AShooterPlayerController* ForPC);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureBed
	 * Size -> 0x0060 (FullSize[0x0F48] - InheritedSize[0x0EE8])
	 */
	class APrimalStructureBed : public APrimalStructureSeating
	{
	public:
		bool                                                       bDestroyAfterRespawnUse : 1;                             // 0x0EE8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_40F6[0x3];                                   // 0x0EE9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             PlayerSpawnLocOffset;                                    // 0x0EEC(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FRotator                                            PlayerSpawnRotOffset;                                    // 0x0EF8(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		uint32_t                                                   LinkedPlayerID;                                          // 0x0F04(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance
		class FString                                              LinkedPlayerName;                                        // 0x0F08(0x0010) Net, ZeroConstructor, SaveGame, PersistentInstance
		class FString                                              BedName;                                                 // 0x0F18(0x0010) Net, ZeroConstructor, SaveGame, PersistentInstance
		float                                                      UseCooldownTime;                                         // 0x0F28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UseCooldownRadius;                                       // 0x0F2C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AttachedToPlatformStructureEnemySpawnPreventionRadius;   // 0x0F30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4JLF[0x4];                                   // 0x0F34(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     NextAllowedUseTime;                                      // 0x0F38(0x0008) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance
		unsigned char                                              UnknownData_JSRZ[0x8];                                   // 0x0F40(0x0008) MISSED OFFSET (PADDING)

	public:
		void SpawnedPlayerFor(class AShooterPlayerController* PC, class APawn* ForPawn);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureSeatingMusic
	 * Size -> 0x0058 (FullSize[0x0F40] - InheritedSize[0x0EE8])
	 */
	class APrimalStructureSeatingMusic : public APrimalStructureSeating
	{
	public:
		class UStaticMeshComponent*                                StickMesh1;                                              // 0x0EE8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UStaticMeshComponent*                                StickMesh2;                                              // 0x0EF0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class FName                                                StickMeshAttachPoint1;                                   // 0x0EF8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                StickMeshAttachPoint2;                                   // 0x0F00(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class USoundBase*>                                  InstrumentSounds;                                        // 0x0F08(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UAnimMontage*>                                InstrumentPawnAnimations;                                // 0x0F18(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      MinimumTimeBetweenPlays;                                 // 0x0F28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4UQ2[0x4];                                   // 0x0F2C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              LastPlayInstrumentTime;                                  // 0x0F30(0x0010) ZeroConstructor, Transient

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureTurretBallista
	 * Size -> 0x01E8 (FullSize[0x10D0] - InheritedSize[0x0EE8])
	 */
	class APrimalStructureTurretBallista : public APrimalStructureSeating
	{
	public:
		class FName                                                TurretTipBone;                                           // 0x0EE8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RiderOverrideSocketName;                                 // 0x0EF0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              AmmoItemTemplate;                                        // 0x0EF8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      AlternateAmmoItemTemplates;                              // 0x0F00(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              ProjectileClass;                                         // 0x0F10(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ShootingDamageType;                                      // 0x0F18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ShootingDamageAmount;                                    // 0x0F20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ShootingDamageImpulse;                                   // 0x0F24(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     ShootingTrailFX;                                         // 0x0F28(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ShootingAimSpread;                                       // 0x0F30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LMJI[0x4];                                   // 0x0F34(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              MuzzleFlashEmitter;                                      // 0x0F38(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ShootingFireInterval;                                    // 0x0F40(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EFQ6[0x4];                                   // 0x0F44(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastShootingFireTime;                                    // 0x0F48(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bIsTryingToShoot;                                        // 0x0F50(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bIsShooting;                                             // 0x0F51(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bIsTargeting;                                            // 0x0F52(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SNUS[0x1];                                   // 0x0F53(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      YawViewRotation;                                         // 0x0F54(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		float                                                      OldYawViewRotation;                                      // 0x0F58(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PitctViewRotation;                                       // 0x0F5C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FRotator                                            RotationInput;                                           // 0x0F60(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_08WN[0x4];                                   // 0x0F6C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           FireSound;                                               // 0x0F70(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           EmptyFireSound;                                          // 0x0F78(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           RotateSoundCue;                                          // 0x0F80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RotateSpeedThreshold;                                    // 0x0F88(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RotateSoundFadeInSpeed;                                  // 0x0F8C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RotateSoundFadeOutSpeed;                                 // 0x0F90(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RotateSoundMinVolume;                                    // 0x0F94(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RotateSoundMaxVolume;                                    // 0x0F98(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TPVCameraPitchMin;                                       // 0x0F9C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TPVCameraPitchMax;                                       // 0x0FA0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TPVCameraYawMin;                                         // 0x0FA4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TPVCameraYawMax;                                         // 0x0FA8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZIP3[0x4];                                   // 0x0FAC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        FireBallistaAnimation;                                   // 0x0FB0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        EmptyBallistaAnimation;                                  // 0x0FB8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        ReloadBallistaAnimation;                                 // 0x0FC0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsLoaded;                                               // 0x0FC8(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_L5T1[0x3];                                   // 0x0FC9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ControllerRiddingYaw;                                    // 0x0FCC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class FName                                                TurretSkeletalMeshComponentName;                         // 0x0FD0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USkeletalMeshComponent*                              MySkeletalMeshComp;                                      // 0x0FD8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class FName                                                AttachedModuleComponentName;                             // 0x0FE0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USkeletalMeshComponent*                              AttachedModuleSkeletalMeshComp;                          // 0x0FE8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        AttachedModuleFireAnimation;                             // 0x0FF0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        AttachedModuleReloadAnimation;                           // 0x0FF8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                ProjectileMeshAttachPoint;                               // 0x1000(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ProjectileMeshAttachPointForMeshOnly;                    // 0x1008(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ProjectileBoneName;                                      // 0x1010(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bClientFireProjectile : 1;                               // 0x1018(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseInstantDamageShooting : 1;                           // 0x1018(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisableInElectricalStorm : 1;                           // 0x1018(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBallistaAimOffsetOnCharacter : 1;                    // 0x1018(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsReloading : 1;                                        // 0x1018(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bIsFiring : 1;                                           // 0x1018(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bQueueReloadingAnimation;                                // 0x1019(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bFireProjectileInvertX : 1;                              // 0x101A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bShowProjectileOnlyBasedOnAmmo : 1;                      // 0x101A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideProjectileBone : 1;                                 // 0x101A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanFire : 1;                                       // 0x101A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPFiredWeapon : 1;                                   // 0x101A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideProjectileBoneOnAttachedModule : 1;                 // 0x101A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseAmmoFromNearbyContainer : 1;                         // 0x101A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetDamageMultiplier : 1;                           // 0x101A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_CEC4[0x5];                                   // 0x101B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                ProjectileMesh;                                          // 0x1020(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UAudioComponent*                                     RotateSoundComponent;                                    // 0x1028(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UTexture2D*                                          ProgressBarBackground;                                   // 0x1030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UTexture2D*                                          ProgressBarForeground;                                   // 0x1038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    AmmoCount;                                               // 0x1040(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FWQK[0x4];                                   // 0x1044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              CurrentAmmoItemTemplate;                                 // 0x1048(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    MagazineSize;                                            // 0x1050(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RangeToCheckForAmmo;                                     // 0x1054(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CK9I[0x18];                                  // 0x1058(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         AmmoItemTemplateMesh;                                    // 0x1070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UStaticMesh*>                                 AlternateAmmoItemTemplateMeshes;                         // 0x1078(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      AlternateAmmoProjectileClasses;                          // 0x1088(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      BuffsWhileSeated;                                        // 0x1098(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      DefaultAmmoReloadAnimSpeed;                              // 0x10A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RZPG[0x4];                                   // 0x10AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              AlternateAmmoReloadAnimSpeeds;                           // 0x10B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      HealthCostPerShot;                                       // 0x10C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinimumHealthPercentToShoot;                             // 0x10C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InstantFireTraceRange;                                   // 0x10C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       AimFromPlayerView;                                       // 0x10CC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_A6XV[0x3];                                   // 0x10CD(0x0003) MISSED OFFSET (PADDING)

	public:
		void TryFiring(bool shouldFire);
		void ServerSwitchAmmoType();
		void ServerSetTargeting(bool bTargeting);
		class UClass* GetCurrentAmmoType();
		void ClientsPlayFireAnim();
		void ClientsFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir);
		float BPGetDamageMultiplier();
		void BPFiredWeapon();
		bool BPCanFire();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureTurret
	 * Size -> 0x0138 (FullSize[0x0F48] - InheritedSize[0x0E10])
	 */
	class APrimalStructureTurret : public APrimalStructureItemContainer
	{
	public:
		TWeakObjectPtr<class AActor>                               Target;                                                  // 0x0E10(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, PersistentInstance
		class UClass*                                              AmmoItemTemplate;                                        // 0x0E18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MuzzleFlashEmitter;                                      // 0x0E20(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FireInterval;                                            // 0x0E28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WEYG[0x4];                                   // 0x0E2C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastFireTime;                                            // 0x0E30(0x0008) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		double                                                     LastLongReloadStartTime;                                 // 0x0E38(0x0008) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		float                                                      MaxFireYawDelta;                                         // 0x0E40(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxFirePitchDelta;                                       // 0x0E44(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             TargetingLocOffset;                                      // 0x0E48(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TargetingRotationInterpSpeed;                            // 0x0E54(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TargetingRanges[0x3];                                    // 0x0E58(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             TargetingTraceOffset;                                    // 0x0E64(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              FireDamageType;                                          // 0x0E70(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FireDamageAmount;                                        // 0x0E78(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FireDamageImpulse;                                       // 0x0E7C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     TrailFX;                                                 // 0x0E80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FRotator                                            TurretAimRotOffset;                                      // 0x0E88(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             AimTargetLocOffset;                                      // 0x0E94(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             PlayerProneTargetOffset;                                 // 0x0EA0(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AimSpread;                                               // 0x0EAC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseNoWarning : 1;                                       // 0x0EB0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseNoAmmo : 1;                                          // 0x0EB0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyUseAmmoOnDamage : 1;                                // 0x0EB0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHasOmniDirectionalFire : 1;                             // 0x0EB0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bFireProjectiles : 1;                                    // 0x0EB0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bClientFireProjectile : 1;                               // 0x0EB0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsTargeting : 1;                                        // 0x0EB0(0x0001) BIT_FIELD Net, Transient, RepNotify, NoDestructor, PersistentInstance
		bool                                                       bInWaterOnlyTargetWater : 1;                             // 0x0EB0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTurretIgnoreProjectiles : 1;                            // 0x0EB1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPTurretPreventsTargeting : 1;                       // 0x0EB1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAimIgnoreSockets : 1;                                   // 0x0EB1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseAmmoFromNearbyContainer : 1;                         // 0x0EB1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseMaxInventoryForAmmoContainerReload : 1;              // 0x0EB1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              RangeSetting;                                            // 0x0EB2(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance
		unsigned char                                              AISetting;                                               // 0x0EB3(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance
		unsigned char                                              WarningSetting;                                          // 0x0EB4(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance
		unsigned char                                              UnknownData_75JL[0x3];                                   // 0x0EB5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NumBullets;                                              // 0x0EB8(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, PersistentInstance
		int32_t                                                    NumBulletsPerShot;                                       // 0x0EBC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    LongAmmoReloadCD;                                        // 0x0EC0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxAmmoContainerReloadPercent;                           // 0x0EC4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AlwaysEnableFastTurretTargetingOverVelocity;             // 0x0EC8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_G9TB[0x4];                                   // 0x0ECC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ProjectileClass;                                         // 0x0ED0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WarningExpirationTime;                                   // 0x0ED8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TS8N[0x4];                                   // 0x0EDC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              WarningEmitterShort;                                     // 0x0EE0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              WarningEmitterLong;                                      // 0x0EE8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BatteryIntervalFromActivationBeforeFiring;               // 0x0EF0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5IZW[0x14];                                  // 0x0EF4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UChildActorComponent*                                MyChildEmitterTargetingEffect;                           // 0x0F08(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		struct FRotator                                            DefaultTurretAimRotOffset;                               // 0x0F10(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             MuzzleLocOffset;                                         // 0x0F1C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7Z55[0x8];                                   // 0x0F28(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MagazineSize;                                            // 0x0F30(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RangeToCheckForAmmo;                                     // 0x0F34(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AmmoBoxReloadCooldown;                                   // 0x0F38(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GE8P[0x4];                                   // 0x0F3C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                CopySettingsRangeMesh;                                   // 0x0F40(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor

	public:
		void UpdatedTargeting();
		void StartWarning();
		class FName GetTargetAltAimSocket(class APrimalCharacter* forTarget);
		void ClientsFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir);
		bool BPTurretPreventsTargeting(class APrimalCharacter* PotentialTarget);
		bool BPCopyCustomSettingsFromTurret(class APrimalStructureTurret* FromTurret);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureTurretPlant
	 * Size -> 0x0060 (FullSize[0x0FA8] - InheritedSize[0x0F48])
	 */
	class APrimalStructureTurretPlant : public APrimalStructureTurret
	{
	public:
		TArray<class FName>                                        PlantMuzzleSockets;                                      // 0x0F48(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UAnimMontage*>                                PlantAttackAnims;                                        // 0x0F58(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      PlantHealthRecoverPerSec;                                // 0x0F68(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AmountOfFertilizerToUsePerShot;                          // 0x0F6C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HealthRecoverPerSec;                                     // 0x0F70(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UN49[0x4];                                   // 0x0F74(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APrimalStructureItemContainer_CropPlot*              OwnerCropPlot;                                           // 0x0F78(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QI58[0x28];                                  // 0x0F80(0x0028) MISSED OFFSET (PADDING)

	public:
		void RecoverHealthTimer();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureUnderwaterBase
	 * Size -> 0x00C8 (FullSize[0x0ED8] - InheritedSize[0x0E10])
	 */
	class APrimalStructureUnderwaterBase : public APrimalStructureItemContainer
	{
	public:
		bool                                                       bIsFlooded : 1;                                          // 0x0E10(0x0001) BIT_FIELD Net, Transient, SaveGame, RepNotify, NoDestructor
		bool                                                       bPreventRefreshFloodState : 1;                           // 0x0E10(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_VIUX[0x7];                                   // 0x0E11(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<bool>                                               PortholeOpen;                                            // 0x0E18(0x0010) Net, ZeroConstructor, Transient, SaveGame
		TArray<bool>                                               PortholeLocked;                                          // 0x0E28(0x0010) Net, ZeroConstructor, Transient, SaveGame
		TArray<bool>                                               PortholeOpenSaveState;                                   // 0x0E38(0x0010) ZeroConstructor, Transient, SaveGame
		TArray<class APrimalStructureUnderwaterBase*>              PortholeLinks;                                           // 0x0E48(0x0010) ZeroConstructor, Transient, SaveGame
		unsigned char                                              UnknownData_MKKU[0x18];                                  // 0x0E58(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              FloodedEmitter;                                          // 0x0E70(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              UnfloodedEmitter;                                        // 0x0E78(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          OpenPortholeSound;                                       // 0x0E80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          ClosePortholeSound;                                      // 0x0E88(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          FreezePortholeSound;                                     // 0x0E90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          UnfreezePortholeSound;                                   // 0x0E98(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<uint32_t>                                           CurrentPinCodes;                                         // 0x0EA0(0x0010) Net, ZeroConstructor, SaveGame
		TArray<int32_t>                                            ForcePortholesClosedIndices;                             // 0x0EB0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FString>                                      PortholeNameOverrides;                                   // 0x0EC0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_MDID[0x8];                                   // 0x0ED0(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateCurrentPinCodes(TArray<uint32_t> NewPinCodes);
		void SetPortholeState(int32_t index, bool bOpen);
		void SetPortholeLocked(int32_t index, bool bLocked);
		void OnRep_IsFlooded();
		void MultiSetPortholeStates(TArray<bool> portholes);
		void ChangedCompartmentFloodState();
		void BPRefreshFloodState();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureLadder
	 * Size -> 0x0060 (FullSize[0x0B48] - InheritedSize[0x0AE8])
	 */
	class APrimalStructureLadder : public APrimalStructure
	{
	public:
		float                                                      LadderCenterZOffset;                                     // 0x0AE8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             LadderExitTopPointOffset;                                // 0x0AEC(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             LadderExitBottomPointOffset;                             // 0x0AF8(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             LadderEnterTopPointOffset;                               // 0x0B04(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             LadderEnterBottomPointOffset;                            // 0x0B10(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FRotator                                            LadderClimbRotationOffset;                               // 0x0B1C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bCanRetract : 1;                                         // 0x0B28(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bEnableLateralJump : 1;                                  // 0x0B28(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsRetracted : 1;                                        // 0x0B28(0x0001) BIT_FIELD Net, Transient, SaveGame, RepNotify, NoDestructor, PersistentInstance
		bool                                                       bHasLowerLaddersRetracted : 1;                           // 0x0B28(0x0001) BIT_FIELD Net, Transient, SaveGame, RepNotify, NoDestructor, PersistentInstance
		unsigned char                                              UnknownData_6P84[0x7];                                   // 0x0B29(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          LadderRetractionSound;                                   // 0x0B30(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          LadderUnretractionSound;                                 // 0x0B38(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       UnknownData_OZN7 : 3;                                    // 0x0B40(0x0001) BIT_FIELD (PADDING)
		bool                                                       bCanRetractFromBottom : 1;                               // 0x0B40(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowPublicRetraction : 1;                              // 0x0B40(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
		unsigned char                                              UnknownData_J6AX[0x7];                                   // 0x0B41(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateRetraction();
		void STATIC_EndClimbingLadder(class AShooterCharacter* TheCharacter, bool bServerClimbOver, const struct FVector& ServerClimbOverLoc);
		void BP_SetLaddersRetracted(bool bRetract);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructurePortableLadder
	 * Size -> 0x00A8 (FullSize[0x0BF0] - InheritedSize[0x0B48])
	 */
	class APrimalStructurePortableLadder : public APrimalStructureLadder
	{
	public:
		float                                                      MaximumHeightAllowedForLadder;                           // 0x0B48(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_J3QU[0x14];                                  // 0x0B4C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              BottomAnimBlueprint;                                     // 0x0B60(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MidAnimBlueprint;                                        // 0x0B68(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        MidRetractedAnimMontageBlueprint;                        // 0x0B70(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        BottomRetractedAnimMontageBlueprint;                     // 0x0B78(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        MidAnimMontageBlueprint;                                 // 0x0B80(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        BottomAnimMontageBlueprint;                              // 0x0B88(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        MidAnimMontageExtendedBlueprint;                         // 0x0B90(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        BottomAnimMontageExtendedBlueprint;                      // 0x0B98(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USkeletalMesh*                                       MidSkeletalMesh;                                         // 0x0BA0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USkeletalMesh*                                       MyBottomSkeletalMesh;                                    // 0x0BA8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class USkeletalMeshComponent*>                      MidLadderSkeletalMeshs;                                  // 0x0BB0(0x0010) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, ContainsInstancedReference
		class USkeletalMeshComponent*                              BottomLadderSkeletalMesh;                                // 0x0BC0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor
		TArray<class USkeletalMeshComponent*>                      SkeletalMeshsForAnimation;                               // 0x0BC8(0x0010) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, ContainsInstancedReference
		unsigned char                                              UnknownData_UVQP[0x10];                                  // 0x0BD8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bisDonePlacing : 1;                                      // 0x0BE8(0x0001) BIT_FIELD Net, SaveGame, NoDestructor, PersistentInstance
		unsigned char                                              UnknownData_199W[0x7];                                   // 0x0BE9(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateLadder();
		void UpdateBoxCollisionForRetraction(bool bRetracted);
		void PlaySetupAnimation();
		void BuildLadder();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureSeaMine
	 * Size -> 0x0090 (FullSize[0x0B78] - InheritedSize[0x0AE8])
	 */
	class APrimalStructureSeaMine : public APrimalStructure
	{
	public:
		class USphereComponent*                                    TriggerComponent;                                        // 0x0AE8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected
		class USphereComponent*                                    ExplodingTriggerComponent;                               // 0x0AF0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected
		class UParticleSystem*                                     ActivatedMineParticleSystem;                             // 0x0AF8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		struct FVector                                             ActivatedMineParticleSystemOffset;                       // 0x0B00(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_9W6U[0x4];                                   // 0x0B0C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInterface*>                          ActivateMaterials;                                       // 0x0B10(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		class USoundBase*                                          ActivatedSound;                                          // 0x0B20(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      SeaMineSpeed;                                            // 0x0B28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      SeaMineExplodeTime;                                      // 0x0B2C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      ExplosionDamage;                                         // 0x0B30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      ExplosionRadius;                                         // 0x0B34(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      ExplosionImpulse;                                        // 0x0B38(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_XEPF[0x4];                                   // 0x0B3C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ExplosionDamageType;                                     // 0x0B40(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    OwnerTargetingTeam;                                      // 0x0B48(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_0NWD[0x4];                                   // 0x0B4C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class APrimalCharacter*>                            TriggerOverlappingCharacters;                            // 0x0B50(0x0010) ZeroConstructor, Transient, Protected
		bool                                                       bActivatedSeaMine : 1;                                   // 0x0B60(0x0001) BIT_FIELD Transient, NoDestructor, Protected
		bool                                                       bDisableExplosion : 1;                                   // 0x0B60(0x0001) BIT_FIELD Transient, NoDestructor, Protected
		unsigned char                                              UnknownData_HBQF[0x3];                                   // 0x0B61(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             LastKnownTargetLocation;                                 // 0x0B64(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class APrimalCharacter*                                    SeaMineTarget;                                           // 0x0B70(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, PersistentInstance

	public:
		void RefreshSeaMineTarget();
		void OnTriggerEndOverlap(class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnTriggerBeginOverlap(class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnRep_SeaMineTarget();
		void OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void OnExplodingTriggerBeginOverlap(class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void Explode();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureSign
	 * Size -> 0x0030 (FullSize[0x0B18] - InheritedSize[0x0AE8])
	 */
	class APrimalStructureSign : public APrimalStructure
	{
	public:
		class FString                                              SignText;                                                // 0x0AE8(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, RepNotify, PersistentInstance
		float                                                      SignWidth;                                               // 0x0AF8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxNumberofCharacters;                                   // 0x0AFC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinFontSize;                                             // 0x0B00(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DefaultScale;                                            // 0x0B04(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UTextRenderComponent*                                TextRender;                                              // 0x0B08(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_L2EJ[0x8];                                   // 0x0B10(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_SignText(const class FString& PreviousSignText);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureWaterPipe
	 * Size -> 0x0020 (FullSize[0x0B08] - InheritedSize[0x0AE8])
	 */
	class APrimalStructureWaterPipe : public APrimalStructure
	{
	public:
		bool                                                       bAlwaysHasWater : 1;                                     // 0x0AE8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHasWater : 1;                                           // 0x0AE8(0x0001) BIT_FIELD Net, SaveGame, RepNotify, NoDestructor, PersistentInstance
		bool                                                       bIsWaterPipe : 1;                                        // 0x0AE8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bConnectedToNonPipe : 1;                                 // 0x0AE8(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor
		bool                                                       bUseBPOnRefreshPipeMaterials : 1;                        // 0x0AE8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnWaterStateChange : 1;                            // 0x0AE8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_LJ9U[0x3];                                   // 0x0AE9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AutoDestroyPeriodWhenUnconnectedToNonPipe;               // 0x0AEC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  HasWaterMaterial;                                        // 0x0AF0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  NoWaterMaterial;                                         // 0x0AF8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    WaterMaterialIndex;                                      // 0x0B00(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OWZD[0x4];                                   // 0x0B04(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetHasWater(bool bNewHasWater);
		void RefreshWaterState();
		void RefreshHasSourceMaterials();
		void OnRep_HasWater(bool bPreviousHasWater);
		void BPOnWaterStateChange(bool bPipeHasWaterOrPower);
		void BPOnRefreshPipeMaterials(bool bPipeHasWaterOrPower, class UMaterialInterface* NewMaterial);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalTribeData
	 * Size -> 0x0138 (FullSize[0x0160] - InheritedSize[0x0028])
	 */
	class UPrimalTribeData : public UObject
	{
	public:
		struct FTribeData                                          TribeData;                                               // 0x0028(0x0138) NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.BaseSelectableButtonWidget
	 * Size -> 0x0000 (FullSize[0x0518] - InheritedSize[0x0518])
	 */
	class UBaseSelectableButtonWidget : public UPrimalUI
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DataListEntryButton_HostSession
	 * Size -> 0x00B8 (FullSize[0x05D0] - InheritedSize[0x0518])
	 */
	class UDataListEntryButton_HostSession : public UBaseSelectableButtonWidget
	{
	public:
		bool                                                       bIsCustom : 1;                                           // 0x0518(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsProcedural : 1;                                       // 0x0518(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_JJUZ[0x7];                                   // 0x0519(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              DisplayName;                                             // 0x0520(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bCenterDisplayName;                                      // 0x0530(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9X32[0x7];                                   // 0x0531(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ShortMapName;                                            // 0x0538(0x0010) ZeroConstructor, Transient
		class FString                                              LongMapName;                                             // 0x0548(0x0010) ZeroConstructor, Transient
		class FString                                              ModName;                                                 // 0x0558(0x0010) ZeroConstructor, Transient
		class FString                                              ModPath;                                                 // 0x0568(0x0010) ZeroConstructor, Transient
		uint64_t                                                   ModItemId;                                               // 0x0578(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bSelectOnClicked : 1;                                    // 0x0580(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_SSUS[0x4F];                                  // 0x0581(0x004F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DataListEntryButton_ListSession
	 * Size -> 0x02A8 (FullSize[0x07C0] - InheritedSize[0x0518])
	 */
	class UDataListEntryButton_ListSession : public UBaseSelectableButtonWidget
	{
	public:
		struct FCustomButtonWidgetStyle                            LastJoinedExtendedStyle;                                 // 0x0518(0x0048) Edit, BlueprintVisible
		struct FCustomButtonWidgetStyle                            StandardExtendedStyle;                                   // 0x0560(0x0048) Edit, BlueprintVisible
		class FString                                              UniqueID;                                                // 0x05A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              GameName;                                                // 0x05B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              BuildId;                                                 // 0x05C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              OwnerName;                                               // 0x05D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              MapName;                                                 // 0x05E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              DayTimeStr;                                              // 0x05F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		uint32_t                                                   NumPlayers;                                              // 0x0608(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		uint32_t                                                   MaxNumPlayers;                                           // 0x060C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		uint64_t                                                   ModId;                                                   // 0x0610(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		uint64_t                                                   TotalConversionId;                                       // 0x0618(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		uint64_t                                                   Ping;                                                    // 0x0620(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bHasPassword;                                            // 0x0628(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsFavourite;                                            // 0x0629(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsPVEServer;                                            // 0x062A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_I0MC[0x5];                                   // 0x062B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          PasswordTexture;                                         // 0x0630(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsOfficialServer;                                       // 0x0638(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUsingBattleEye;                                         // 0x0639(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowDownloadCharacters;                                // 0x063A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowDownloadItems;                                     // 0x063B(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LOPR[0x4];                                   // 0x063C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          BattleEyeTexture;                                        // 0x0640(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          OfficialServerTexture;                                   // 0x0648(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          PVPServerTexture;                                        // 0x0650(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          PVEServerTexture;                                        // 0x0658(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        DisplayStringSelectedColor;                              // 0x0660(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bSelectOnClicked : 1;                                    // 0x0670(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_F75U[0x14F];                                 // 0x0671(0x014F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DataListEntryButton_MainMenu
	 * Size -> 0x0070 (FullSize[0x0588] - InheritedSize[0x0518])
	 */
	class UDataListEntryButton_MainMenu : public UBaseSelectableButtonWidget
	{
	public:
		bool                                                       bIsCustom : 1;                                           // 0x0518(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsProcedural : 1;                                       // 0x0518(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_YSFD[0x7];                                   // 0x0519(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              DisplayName;                                             // 0x0520(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bCenterDisplayName;                                      // 0x0530(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MZ7J[0x7];                                   // 0x0531(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              MapName;                                                 // 0x0538(0x0010) ZeroConstructor, Transient
		class FString                                              ModName;                                                 // 0x0548(0x0010) ZeroConstructor, Transient
		class FString                                              ModPath;                                                 // 0x0558(0x0010) ZeroConstructor, Transient
		uint64_t                                                   ModItemId;                                               // 0x0568(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bSelectOnClicked : 1;                                    // 0x0570(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_VMCA[0x7];                                   // 0x0571(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCustomButtonWidget*                                 Button;                                                  // 0x0578(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		class UTextBlock*                                          EntryNameLabel;                                          // 0x0580(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DinoListButtonWidget
	 * Size -> 0x0180 (FullSize[0x0698] - InheritedSize[0x0518])
	 */
	class UDinoListButtonWidget : public UBaseSelectableButtonWidget
	{
	public:
		class FName                                                ContextMenuAnchorName;                                   // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DinoStatusLabelName;                                     // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ExpirationLabelName;                                     // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ExpirationLabelParentName;                               // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bSelectOnClicked : 1;                                    // 0x0538(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_MRCK[0x14F];                                 // 0x0539(0x014F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMenuAnchor*                                         ContextMenuAnchor;                                       // 0x0688(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_UE2L[0x8];                                   // 0x0690(0x0008) MISSED OFFSET (PADDING)

	public:
		class UWidget* OnGetContextMenuContent();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionBiomeCompletionWidget
	 * Size -> 0x00D0 (FullSize[0x05E8] - InheritedSize[0x0518])
	 */
	class UMissionBiomeCompletionWidget : public UBaseSelectableButtonWidget
	{
	public:
		class UTexture2D*                                          ButtonIcon;                                              // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FText                                                SectionName;                                             // 0x0520(0x0018) ELEMENT_SIZE_MISMATCH Edit, BlueprintReadOnly, DisableEditOnInstance
		unsigned char                                              UnknownData_J8NN[0x10];                                  // 0x0538(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		struct FLinearColor                                        AllMissionsCompletedColor;                               // 0x0548(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SectionNameTextColor;                                    // 0x0558(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        CompletionPercentLabelTextColor;                         // 0x0568(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        NumCompletedValueTextColor;                              // 0x0578(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        NumCompletedLabelTextColor;                              // 0x0588(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        CompletionProgressBarForegroundColor;                    // 0x0598(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RPS5[0x40];                                  // 0x05A8(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionListEntryWidget
	 * Size -> 0x0020 (FullSize[0x0538] - InheritedSize[0x0518])
	 */
	class UMissionListEntryWidget : public UBaseSelectableButtonWidget
	{
	public:
		class FString                                              ItemLabelName;                                           // 0x0518(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_MEEZ[0x10];                                  // 0x0528(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.TamingListEntryWidget
	 * Size -> 0x0168 (FullSize[0x0680] - InheritedSize[0x0518])
	 */
	class UTamingListEntryWidget : public UBaseSelectableButtonWidget
	{
	public:
		class FString                                              ItemLabelName;                                           // 0x0518(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		struct FLinearColor                                        NameLabelColor_Default;                                  // 0x0528(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        NameLabelColor_Female;                                   // 0x0538(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        NameLabelColor_Male;                                     // 0x0548(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        BackgroundColor_Default;                                 // 0x0558(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        BackgroundColor_Tracked;                                 // 0x0568(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        BackgroundColor_Completed;                               // 0x0578(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SeparatorColor;                                          // 0x0588(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          DistanceIconTexture;                                     // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          CompletedIconTexture;                                    // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          TooltipBackgroundTexture;                                // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          GenderIcon_Male;                                         // 0x05B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          GenderIcon_Female;                                       // 0x05B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SF95[0xC0];                                  // 0x05C0(0x00C0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.TradeItemButtonWidget
	 * Size -> 0x0080 (FullSize[0x0598] - InheritedSize[0x0518])
	 */
	class UTradeItemButtonWidget : public UBaseSelectableButtonWidget
	{
	public:
		class FName                                                ItemCostTextBlockName;                                   // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemQuantityTextBlockName;                               // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemImageName;                                           // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemWeightTextBlockName;                                 // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        CanAffordPriceText;                                      // 0x0538(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        TooExpensivePriceText;                                   // 0x0548(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bSelectOnClicked : 1;                                    // 0x0558(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_WMDO[0x3F];                                  // 0x0559(0x003F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.TribeManagerListButton
	 * Size -> 0x0018 (FullSize[0x0530] - InheritedSize[0x0518])
	 */
	class UTribeManagerListButton : public UBaseSelectableButtonWidget
	{
	public:
		bool                                                       bSelectOnClicked : 1;                                    // 0x0518(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_B58R[0x17];                                  // 0x0519(0x0017) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.TribeMemberButtonWidget
	 * Size -> 0x0040 (FullSize[0x0558] - InheritedSize[0x0518])
	 */
	class UTribeMemberButtonWidget : public UBaseSelectableButtonWidget
	{
	public:
		bool                                                       bSelectOnClicked : 1;                                    // 0x0518(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_JE8Q[0x3F];                                  // 0x0519(0x003F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.TribeWarButtonWidget
	 * Size -> 0x0030 (FullSize[0x0548] - InheritedSize[0x0518])
	 */
	class UTribeWarButtonWidget : public UBaseSelectableButtonWidget
	{
	public:
		bool                                                       bSelectOnClicked : 1;                                    // 0x0518(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_7CBP[0x2F];                                  // 0x0519(0x002F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DataListEntryButton_DyeResources
	 * Size -> 0x0010 (FullSize[0x0528] - InheritedSize[0x0518])
	 */
	class UDataListEntryButton_DyeResources : public UPrimalUI
	{
	public:
		unsigned char                                              UnknownData_61N0[0x10];                                  // 0x0518(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DataListEntryEngramList
	 * Size -> 0x00B8 (FullSize[0x05D0] - InheritedSize[0x0518])
	 */
	class UDataListEntryEngramList : public UPrimalUI
	{
	public:
		class UClass*                                              EntryWidgetTemplate;                                     // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DataPanelName;                                           // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LevelLabelName;                                          // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LevelEnabledEffectName;                                  // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ElementIconName;                                         // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EngramRowStartName;                                      // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EngramRowMiddleName;                                     // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EngramRowEndName;                                        // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextActiveColor;                                 // 0x0558(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextInactiveColor;                               // 0x0568(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    WidgetLimit;                                             // 0x0578(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H973[0x54];                                  // 0x057C(0x0054) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DinoAncestryEntryWidget
	 * Size -> 0x0020 (FullSize[0x0538] - InheritedSize[0x0518])
	 */
	class UDinoAncestryEntryWidget : public UPrimalUI
	{
	public:
		unsigned char                                              UnknownData_HE14[0x20];                                  // 0x0518(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DyeRegionButtonWidget
	 * Size -> 0x0048 (FullSize[0x0560] - InheritedSize[0x0518])
	 */
	class UDyeRegionButtonWidget : public UPrimalUI
	{
	public:
		bool                                                       bSelectOnClicked : 1;                                    // 0x0518(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_XP5I[0x3];                                   // 0x0519(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        DefaultBackgroundColor;                                  // 0x051C(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        DefaultPreviewColor;                                     // 0x052C(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EBLY[0x24];                                  // 0x053C(0x0024) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HUDActiveMissionWidget
	 * Size -> 0x0400 (FullSize[0x0918] - InheritedSize[0x0518])
	 */
	class UHUDActiveMissionWidget : public UPrimalUI
	{
	public:
		unsigned char                                              UnknownData_YX2O[0x8];                                   // 0x0518(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        ActiveMissionVisibilityWidgetNames;                      // 0x0520(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                MissionNameTextBlockName;                                // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionDifficultyTextBlockName;                          // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionDescriptionTextBlockName;                         // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ObjectiveTimeValueTextBlockName;                         // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ObjectiveTimeLabelTextBlockName;                         // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ObjectiveTimePanelName;                                  // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ObjectiveTimeProgressBarName;                            // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionDifficultyPanelName;                              // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PhaseRequirementContainerName;                           // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        MissionTimeRemainingDefaultTextColor;                    // 0x0578(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class FName>                                        MissionStatTrackerVisibilityWidgetNames;                 // 0x0588(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                MissionStatTrackerContainerName;                         // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              PhaseRequirementWidgetClass;                             // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PhaseBackgroundBorderWidgetName;                         // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PhaseRichTextBlockName;                                  // 0x05B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PhaseDescriptionBlockName;                               // 0x05B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PhaseDescriptionPrefixBlockName;                         // 0x05C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PhaseDescriptionSuffixBlockName;                         // 0x05C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PhaseValueContainerName;                                 // 0x05D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PhaseValueTextBlockName;                                 // 0x05D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PhaseValueSlashTextBlockName;                            // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PhaseMaxValueTextBlockName;                              // 0x05E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PhaseProgressContainerName;                              // 0x05F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PhaseProgressBarName;                                    // 0x05F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        PhaseNormalBackgroundColor;                              // 0x0600(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        PhaseCompleteBackgroundColor;                            // 0x0610(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionAlertFlyoutContainerName;                         // 0x0620(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionAlertEntryContainerName;                          // 0x0628(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionAlertTitleTextBlockName;                          // 0x0630(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionAlertBorderName;                                  // 0x0638(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TopMissionAlertFlyoutContainerName;                      // 0x0640(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TopMissionAlertEntryContainerName;                       // 0x0648(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TopMissionAlertTitleTextBlockName;                       // 0x0650(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TopMissionAlertBorderName;                               // 0x0658(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        MissionAlertColor_Negative;                              // 0x0660(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        MissionAlertColor_Neutral;                               // 0x0670(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        MissionAlertColor_Positive;                              // 0x0680(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              AlertEntryWidgetClass;                                   // 0x0690(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AlertFlyoutAnimationDuration;                            // 0x0698(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		ESimpleCurve                                               AlertFlyoutCurve;                                        // 0x069C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_PJ08[0x3];                                   // 0x069D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           AlertOffscreenTransform;                                 // 0x06A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           TopAlertOffscreenTransform;                              // 0x06A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          DefaultPositiveMissionAlertSound;                        // 0x06B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          DefaultNeutralMissionAlertSound;                         // 0x06B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          DefaultNegativeMissionAlertSound;                        // 0x06C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AlertEntryIconContainerName;                             // 0x06C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AlertEntryIconName;                                      // 0x06D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AlertCountTextBlockName;                                 // 0x06D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AlertContentTextBlockName;                               // 0x06E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RacePanelName;                                           // 0x06E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RacePositionTextBlockName;                               // 0x06F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RaceMaxPositionTextBlockName;                            // 0x06F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionTimeValueTextBlockName;                           // 0x0700(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                BestRaceTimeName;                                        // 0x0708(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        ObjectiveTimeRemainingProgressBarColor;                  // 0x0710(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        LowObjectiveTimeRemainingProgressBarColor;               // 0x0720(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        PhaseReqTextColor_Negative;                              // 0x0730(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        PhaseReqTextColor_Neutral;                               // 0x0740(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        PhaseReqTextColor_Positive;                              // 0x0750(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        PhaseReqProgressColor_Negative;                          // 0x0760(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        PhaseReqProgressColor_Neutral;                           // 0x0770(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        PhaseReqProgressColor_Positive;                          // 0x0780(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      OpacityForSlashAndMaxValueText;                          // 0x0790(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KINS[0x4];                                   // 0x0794(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              WorldBuffEffectListEntry_WidgetType;                     // 0x0798(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZPYX[0x8];                                   // 0x07A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextBlock*                                          BestRaceTimeTextBlock;                                   // 0x07A8(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ELO5[0xC];                                   // 0x07B0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxWorldBuffsDisplayedAtOnce;                            // 0x07BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VXYE[0x120];                                 // 0x07C0(0x0120) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AMissionType*                                        ActiveMission;                                           // 0x08E0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class APrimalBuff_MissionData*                             missionData;                                             // 0x08E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UUserWidget*                                         ActiveMissionWidget;                                     // 0x08F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UCanvasPanel*                                        CustomStatusCanvas;                                      // 0x08F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_LXKR[0x18];                                  // 0x0900(0x0018) MISSED OFFSET (PADDING)

	public:
		void ShowMissionAlert(EMissionAlertType AlertType, const class FString& AlertTitle, TArray<struct FMissionAlertEntry> NewEntries, bool bInstant, bool bFlyoutFromTop);
		void SetRacePositionText(const class FText& PositionText);
		void SetRacePanelVisibility(ESlateVisibility NewVisibility);
		bool IsMissionAlertVisible(bool bIsTop);
		void HideMissionAlert(bool bInstant, bool bHideTop);
		bool HaveActiveMission();
		class UHUDActiveMissionWidget* STATIC_GetActiveMissionWidget(class APlayerController* PlayerController);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HUDCustomStatusWidget
	 * Size -> 0x00C8 (FullSize[0x05E0] - InheritedSize[0x0518])
	 */
	class UHUDCustomStatusWidget : public UPrimalUI
	{
	public:
		unsigned char                                              UnknownData_K7VU[0x8];                                   // 0x0518(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                CanvasPanelName;                                         // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              TextWidgetClass;                                         // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TitleWidgetTextBlockName;                                // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TextWidgetTextBlockName;                                 // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CustomTextContainerName;                                 // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ProgressWidgetClass;                                     // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ProgressWidgetProgressName;                              // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ImageWidgetClass;                                        // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ImageBackgroundWidgetName;                               // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                IconWidgetName;                                          // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UCanvasPanel*                                        CustomStatusCanvas;                                      // 0x0570(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_MF19[0x50];                                  // 0x0578(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UUserWidget*>                                 WidgetRefs;                                              // 0x05C8(0x0010) ZeroConstructor, Transient, Protected
		unsigned char                                              UnknownData_G8H2[0x8];                                   // 0x05D8(0x0008) MISSED OFFSET (PADDING)

	public:
		void STATIC_SetHUDElementVisibility(struct FHUDElement* ElementInfo, bool bIsVisible);
		void STATIC_SetHUDElementTitle(struct FHUDElement* ElementInfo, const class FString& NewTitle);
		void STATIC_SetHUDElementTextScale(struct FHUDElement* ElementInfo, float NewScale);
		void STATIC_SetHUDElementTextPadding(struct FHUDElement* ElementInfo, const struct FMargin& NewPadding);
		void STATIC_SetHUDElementTextColor(struct FHUDElement* ElementInfo, const struct FLinearColor& NewColor);
		void STATIC_SetHUDElementTextAlignment_Title(struct FHUDElement* ElementInfo, ETextJustify NewAlignment);
		void STATIC_SetHUDElementTextAlignment_Label(struct FHUDElement* ElementInfo, ETextJustify NewAlignment);
		void STATIC_SetHUDElementSize(struct FHUDElement* ElementInfo, const struct FVector2D& NewSize);
		void STATIC_SetHUDElementScale(struct FHUDElement* ElementInfo, const struct FVector2D& NewScale);
		void STATIC_SetHUDElementProgressColor(struct FHUDElement* ElementInfo, const struct FLinearColor& NewColor);
		void STATIC_SetHUDElementProgressBarScale(struct FHUDElement* ElementInfo, const struct FVector2D& NewScale);
		void STATIC_SetHUDElementProgressBarPadding(struct FHUDElement* ElementInfo, const struct FMargin& NewPadding);
		void STATIC_SetHUDElementProgress(struct FHUDElement* ElementInfo, float NewProgress);
		void STATIC_SetHUDElementLocation(struct FHUDElement* ElementInfo, const struct FVector2D& NewLocation);
		void STATIC_SetHUDElementLabelNumeric(struct FHUDElement* ElementInfo, float LabelValue, ERoundingMode RoundingMode, bool bUseGrouping, int32_t MinIntDigits, int32_t MaxIntDigits, int32_t MinFractionalDigits, int32_t MaxFractionalDigits, bool bAddPercentSymbol);
		void STATIC_SetHUDElementLabel(struct FHUDElement* ElementInfo, const class FString& NewLabel);
		void STATIC_SetHUDElementImage(struct FHUDElement* ElementInfo, class UTexture2D* NewIcon, bool bSetIcon, bool bSetProgressBarFillImage, bool bSetBackgroundImage);
		void STATIC_SetHUDElementIconScale(struct FHUDElement* ElementInfo, const struct FVector2D& NewScale);
		void STATIC_SetHUDElementIconRotation(struct FHUDElement* ElementInfo, float NewAngle);
		void STATIC_SetHUDElementIconPadding(struct FHUDElement* ElementInfo, const struct FMargin& NewPadding);
		void STATIC_SetHUDElementIconColor(struct FHUDElement* ElementInfo, const struct FLinearColor& NewColor);
		void STATIC_SetHUDElementBackgroundImageColor(struct FHUDElement* ElementInfo, const struct FLinearColor& NewColor);
		void STATIC_SetHUDElementAnchor(struct FHUDElement* ElementInfo, const struct FAnchors& NewAnchor);
		bool IsHUDElementVisible(class AActor* WidgetOwner, const struct FHUDElement& WidgetInfo);
		class UHUDCustomStatusWidget* STATIC_GetHUDElementRootWidget(class APlayerController* PlayerController);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HUDPingsContainer
	 * Size -> 0x0028 (FullSize[0x0540] - InheritedSize[0x0518])
	 */
	class UHUDPingsContainer : public UPrimalUI
	{
	public:
		class FName                                                PingContainerCanvasName;                                 // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              PingWidgetClass;                                         // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UCanvasPanel*                                        PingContainerCanvas;                                     // 0x0528(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<class UUserWidget*>                                 SpawnedPingWidgets;                                      // 0x0530(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HUDPingWidget
	 * Size -> 0x00D0 (FullSize[0x05E8] - InheritedSize[0x0518])
	 */
	class UHUDPingWidget : public UPrimalUI
	{
	public:
		class FName                                                PingPlayerNameTextBlockName;                             // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PingRespondingPlayerNameTextBlockName;                   // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PingIconName;                                            // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PingSwitcherName;                                        // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PingOffScreenArrowName;                                  // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PingOffScreenIconName;                                   // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PingOffScreenArrowBackgroundName;                        // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WidgetRemoveDuration;                                    // 0x0550(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4VT4[0x4];                                   // 0x0554(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPingData                                           WidgetPingData;                                          // 0x0558(0x0050) BlueprintVisible, BlueprintReadOnly, Transient, ContainsInstancedReference
		unsigned char                                              UnknownData_CVS2[0x38];                                  // 0x05A8(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsHovered : 1;                                          // 0x05E0(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
		unsigned char                                              UnknownData_KOR5[0x7];                                   // 0x05E1(0x0007) MISSED OFFSET (PADDING)

	public:
		bool UpdateWidgetPingData(const struct FPingData& WithPingData);
		void RemovePingWidget();
		void OnPingWidgetRemoved();
		void OnPingWidgetCreated();
		void OnPingUnhovered(class AShooterCharacter* UnhoveringPlayer);
		void OnPingResponseReceived(class AShooterCharacter* RespondingPlayer);
		void OnPingHovered(class AShooterCharacter* HoveringPlayer);
		bool STATIC_IsPingValid(const struct FPingData& ForPingData);
		void InitializePingWidget(const struct FPingData& FromPingData);
		bool HasValidPingData();
		struct FVector STATIC_GetPingWorldLocation(const struct FPingData& FromPingData);
		struct FPingData GetPingData();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HUDPointOfInterestWidget
	 * Size -> 0x0268 (FullSize[0x0780] - InheritedSize[0x0518])
	 */
	class UHUDPointOfInterestWidget : public UPrimalUI
	{
	public:
		class FName                                                OuterContainerName;                                      // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PointTitleTextBlockName;                                 // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PointDescTextBlockName;                                  // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PointIconPanelName;                                      // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PointIconName;                                           // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PointSwitcherName;                                       // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PointOffScreenArrowName;                                 // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PointOffScreenIconName;                                  // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                OnScreenPrimaryPanelName;                                // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                OffScreenPrimaryPanelName;                               // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                OnScreenIndicatorImageName;                              // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                OffScreenIndicatorImageName;                             // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                OnScreenProgressPanelName;                               // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                OnScreenProgressLabelName;                               // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                OffScreenProgressPanelName;                              // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                OffScreenProgressLabelName;                              // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WidgetTitleHiddenIconRenderOffset_Y;                     // 0x0598(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_APXS[0x4];                                   // 0x059C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPointOfInterestData                                WidgetPointOfInterestData;                               // 0x05A0(0x0140) BlueprintVisible, BlueprintReadOnly, Transient
		class UTexture2D*                                          FallbackIcon;                                            // 0x06E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          DefaultLocationAddedSound;                               // 0x06E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          DefaultLocationReachedSound;                             // 0x06F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsPulsing : 1;                                          // 0x06F8(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnTemplate, NoDestructor
		unsigned char                                              UnknownData_SSDP[0x3];                                   // 0x06F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OffScreenWidgetScale;                                    // 0x06FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_X55N[0x80];                                  // 0x0700(0x0080) MISSED OFFSET (PADDING)

	public:
		bool UpdateWidgetPointOfInterestData(const struct FPointOfInterestData& WithPointData);
		bool STATIC_IsPointOfInterestValid(const struct FPointOfInterestData& ForPointData);
		bool STATIC_IsPointOfInterestInitialized(const struct FPointOfInterestData& ForPointData);
		void InitializePointOfInterestWidget(const struct FPointOfInterestData& FromPointData);
		bool HasValidPointOfInterestData();
		struct FRotator STATIC_GetPointOfInterestWorldRotation(const struct FPointOfInterestData& FromPointData);
		struct FVector STATIC_GetPointOfInterestWorldLocation(const struct FPointOfInterestData& FromPointData);
		struct FTransform STATIC_GetPointOfInterestTransform(const struct FPointOfInterestData& FromPointData);
		class USoundBase* GetPointOfInterestReachedSound();
		struct FPointOfInterestData GetPointOfInterestData();
		struct FTransform STATIC_GetPointOfInterestCosmeticActorTransform(const struct FPointOfInterestData& FromPointData);
		class USoundBase* GetPointOfInterestAddedSound();
		void DestroyPointOfInterestWidget();
		bool STATIC_CanActorViewPointOfInterest(class AActor* forActor, const struct FPointOfInterestData& CanViewPointData);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.HUDPointsOfInterestContainer
	 * Size -> 0x0038 (FullSize[0x0550] - InheritedSize[0x0518])
	 */
	class UHUDPointsOfInterestContainer : public UPrimalUI
	{
	public:
		class FName                                                PointContainerCanvasName;                                // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              PointOfInterestWidgetClass;                              // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              TamingListEntryTemplate;                                 // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UCanvasPanel*                                        PointContainerCanvas;                                    // 0x0530(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		TArray<class UUserWidget*>                                 SpawnedPointWidgets;                                     // 0x0538(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected
		class UTamingListEntryWidget*                              TamingPOITooltip;                                        // 0x0548(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.InventoryArkCreaturesPanel
	 * Size -> 0x0300 (FullSize[0x0818] - InheritedSize[0x0518])
	 */
	class UInventoryArkCreaturesPanel : public UPrimalUI
	{
	public:
		class FName                                                UploadedCreatureListName;                                // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LocalCreatureListName;                                   // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                UploadCreatureButtonName;                                // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DownloadCreatureButtonName;                              // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              DinoSlotButtonTemplate;                                  // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VTBL[0x2D8];                                 // 0x0540(0x02D8) MISSED OFFSET (PADDING)

	public:
		void UploadedDinoSlotButtonSelected(class UWidget* theWidget);
		void LocalDinoSlotButtonSelected(class UWidget* theWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.InventoryDinoAncestryPanel
	 * Size -> 0x0078 (FullSize[0x0590] - InheritedSize[0x0518])
	 */
	class UInventoryDinoAncestryPanel : public UPrimalUI
	{
	public:
		class UClass*                                              AncestryEntryWidgetTemplate;                             // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EHR9[0x70];                                  // 0x0520(0x0070) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalSubMenuUI
	 * Size -> 0x0010 (FullSize[0x0528] - InheritedSize[0x0518])
	 */
	class UPrimalSubMenuUI : public UPrimalUI
	{
	public:
		unsigned char                                              UnknownData_DPL0[0x10];                                  // 0x0518(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_Inventory
	 * Size -> 0x0388 (FullSize[0x08B0] - InheritedSize[0x0528])
	 */
	class UUI_Inventory : public UPrimalSubMenuUI
	{
	public:
		class FName                                                PanelContainerLeftName;                                  // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PanelContainerCenterName;                                // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PanelContainerRightName;                                 // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                WidgetSwitcherRightName;                                 // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                QuickActionSlotPanelName;                                // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                QuickActionSlotDataListName;                             // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PlayerCharacterPanelName;                                // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PlayerInventoryPanelName;                                // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RemoteInventoryPanelName;                                // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                StatsPanelName;                                          // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DinoAncestryOverlayName;                                 // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ListSessionsUITemplate;                                  // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SteamInventoryStatusUITemplate;                          // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           ErrorSound;                                              // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JLNX[0x1];                                   // 0x0598(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHasRemoteInventory;                                     // 0x0599(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HM4S[0x316];                                 // 0x059A(0x0316) MISSED OFFSET (PADDING)

	public:
		void SetInventoryVisibility(bool bVisible);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.InventoryQuickSlotsPanel
	 * Size -> 0x0010 (FullSize[0x0528] - InheritedSize[0x0518])
	 */
	class UInventoryQuickSlotsPanel : public UPrimalUI
	{
	public:
		unsigned char                                              UnknownData_E1T8[0x10];                                  // 0x0518(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.InventoryPanelWidget
	 * Size -> 0x0228 (FullSize[0x0740] - InheritedSize[0x0518])
	 */
	class UInventoryPanelWidget : public UPrimalUI
	{
	public:
		class FName                                                TabBgSwitcherName;                                       // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                InventoryButtonName;                                     // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CraftingButtonName;                                      // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CreaturesButtonName;                                     // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                InventoryEnabledEffectName;                              // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CraftingEnabledEffectName;                               // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SearchTextBoxName;                                       // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TooltipToggleButtonName;                                 // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SortMenuButtonName;                                      // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SortMenuAnchorName;                                      // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ShowAllButtonName;                                       // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ShowEngramsButtonName;                                   // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ShowEngramsBoxName;                                      // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TransferAllButtonName;                                   // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DropAllButtonName;                                       // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                NewFolderButtonName;                                     // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DataListSwitcherName;                                    // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                InventoryDataListName;                                   // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CraftingDataListName;                                    // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CraftingQueueHeaderBoxName;                              // 0x05B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CraftingQueueItemsBoxName;                               // 0x05B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class FName>                                        CraftQueueItemButtonNames;                               // 0x05C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                HeaderBoxName;                                           // 0x05D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                InventoryTabLabelName;                                   // 0x05D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CraftingTabLabelName;                                    // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ArkCreaturesPanelName;                                   // 0x05E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ClearCraftingQueueButtonName;                            // 0x05F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ReceivingItemsLabelName;                                 // 0x05F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextActiveColor;                                 // 0x0600(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextInactiveColor;                               // 0x0610(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsRemoteInventory;                                      // 0x0620(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LVP7[0x11F];                                 // 0x0621(0x011F) MISSED OFFSET (PADDING)

	public:
		void SearchTextChanged(const class FText& Text);
		class UWidget* OnGetSortContextMenuContent();
		void OnGamepadPressSortIcon();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.InventoryStatsPanel
	 * Size -> 0x00E8 (FullSize[0x0600] - InheritedSize[0x0518])
	 */
	class UInventoryStatsPanel : public UPrimalUI
	{
	public:
		class FName                                                TabBgSwitcherName;                                       // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PlayerStatsTabButtonName;                                // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RemoteStatsTabButtonName;                                // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RemoteStatsTabTextBlockName;                             // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PlayerEnabledEffectName;                                 // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RemoteEnabledEffectName;                                 // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                StatsWidgetSwitcherName;                                 // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PlayerStatsPanelName;                                    // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HeaderPanelName;                                         // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RootSizeBoxName;                                         // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              CharacterStatsPanelUITemplate;                           // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              StructureStatsPanelUITemplate;                           // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ObeliskStatsPanelUITemplate;                             // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextActiveColor;                                 // 0x0580(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextInactiveColor;                               // 0x0590(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9IGC[0x58];                                  // 0x05A0(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStatsPanelWidget*                                   RemoteStatsPanel;                                        // 0x05F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.LeaderboardRowWidget
	 * Size -> 0x00C8 (FullSize[0x05E0] - InheritedSize[0x0518])
	 */
	class ULeaderboardRowWidget : public UPrimalUI
	{
	public:
		bool                                                       bIsHeaderRow;                                            // 0x0518(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6UES[0x3];                                   // 0x0519(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ColumnContainerWidgetName;                               // 0x051C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NQNP[0x4];                                   // 0x0524(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FLeaderboardColumnDefinition>                Columns;                                                 // 0x0528(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		struct FLinearColor                                        DefaultLeaderboardRowTextColor;                          // 0x0538(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        DefaultLeaderboardRowBackgroundColor;                    // 0x0548(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          DefaultLeaderboardRowBackgroundTexture;                  // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        PersonalLeaderboardRowTextColor;                         // 0x0560(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        PersonalLeaderboardRowBackgroundColor;                   // 0x0570(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          PersonalLeaderboardRowBackgroundTexture;                 // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        HeaderLeaderboardRowTextColor;                           // 0x0588(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        HeaderLeaderboardRowBackgroundColor;                     // 0x0598(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          HeaderLeaderboardRowBackgroundTexture;                   // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0FDO[0x18];                                  // 0x05B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UHorizontalBox*                                      ColumnContainer;                                         // 0x05C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<class UTextBlock*>                                  ColumnWidgets;                                           // 0x05D0(0x0010) ZeroConstructor, Transient

	public:
		void SetRowContents(const struct FLeaderboardDisplayRow& RowData, float ContainerWidth, float RowHeight, bool IsHeaderRow, bool ManuallySetPlayersOwnRowStyling, bool UsePlayersOwnRowStyling);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PlayerHUDUI
	 * Size -> 0x0170 (FullSize[0x0688] - InheritedSize[0x0518])
	 */
	class UPlayerHUDUI : public UPrimalUI
	{
	public:
		class FString                                              SlotItemsDataListName;                                   // 0x0518(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                PrimaryStatusBarsWidgetName;                             // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SecondaryStatusBarsWidgetName;                           // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CraftQueueItemButtonName;                                // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ExtraProgressBarName;                                    // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              SlotItemsDataListParentPanelName;                        // 0x0548(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                CompassBarWidgetName;                                    // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ElementBarWidgetName;                                    // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FHUDRichTextOverlayData>                     RichTextOverlayData;                                     // 0x0568(0x0010) BlueprintVisible, ZeroConstructor
		TArray<class UPrimalRichTextBlock*>                        RichTextBlocks;                                          // 0x0578(0x0010) BlueprintVisible, ZeroConstructor
		unsigned char                                              UnknownData_ZXBS[0xB0];                                  // 0x0588(0x00B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UProgressBarWidget*                                  ExtraProgressBar;                                        // 0x0638(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_UGW2[0x48];                                  // 0x0640(0x0048) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_DinoOrderGroups
	 * Size -> 0x00E8 (FullSize[0x0610] - InheritedSize[0x0528])
	 */
	class UUI_DinoOrderGroups : public UPrimalSubMenuUI
	{
	public:
		class UClass*                                              DinoOrderGroupEntryTemplate;                             // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ContextMenuClass;                                        // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KMJ2[0xD8];                                  // 0x0538(0x00D8) MISSED OFFSET (PADDING)

	public:
		void DinoOrderGroupSelected(class UWidget* theWidget);
		void DinoClassSelected(class UWidget* theWidget);
		void DinoCharSelected(class UWidget* theWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_EngramsMenu
	 * Size -> 0x0120 (FullSize[0x0648] - InheritedSize[0x0528])
	 */
	class UUI_EngramsMenu : public UPrimalSubMenuUI
	{
	public:
		class FName                                                ARKPrimeEngramsButtonName;                               // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ScorchedEarthEngramsButtonName;                          // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TekgramsButtonName;                                      // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LearnEngramButtonTextName;                               // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AvailablePointsTextName;                                 // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                UnlearnedEngramsButtonName;                              // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AberrationEngramsButtonName;                             // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ExtinctionEngramsButtonName;                             // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                GenesisEngramsButtonName;                                // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EngramTitleLabelName;                                    // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EngramsDataListName;                                     // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EngramFilterTextBoxName;                                 // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LearnEngramButtonName;                                   // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UZHE[0xB8];                                  // 0x0590(0x00B8) MISSED OFFSET (PADDING)

	public:
		void OnEngramsFilterChanged(bool bIsChecked);
		void OnEngramFilterChanged(const class FText& Text);
		void EngramSelected(class UDataListEntryButton* theButton);
		void EngramDoubleClicked(class UDataListEntryButton* theButton);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_MissionList
	 * Size -> 0x0580 (FullSize[0x0AA8] - InheritedSize[0x0528])
	 */
	class UUI_MissionList : public UPrimalSubMenuUI
	{
	public:
		class FName                                                CloseButtonName;                                         // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TitleLabelName;                                          // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionListContainerName;                                // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionDetailsContainerName;                             // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionDetails_MissionNameTextBlockName;                 // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionDetails_MissionDescriptionTextBlockName;          // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionDetails_StartMissionButtonName;                   // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionDetails_StartMissionButtonTextName;               // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionDetails_LeaderboardsButtonName;                   // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionDetails_LeaderboardsButtonTextName;               // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionDetails_DifficultyTextBlockName;                  // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionStatusPanelName;                                  // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MetaTagInfoClass;                                        // 0x0588(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              MissionList_WidgetType;                                  // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MissionRequirement_WidgetType;                           // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MissionObjective_WidgetType;                             // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MissionTimer_WidgetType;                                 // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              WorldBuffEffectListEntry_WidgetType;                     // 0x05B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MissionRequirementEntry_WidgetType;                      // 0x05B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              StartButtonDisplayText_StartMission;                     // 0x05C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              StartButtonDisplayText_LeaveMission;                     // 0x05D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              StartButtonDisplayText_EnableStatTracker;                // 0x05E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              StartButtonDisplayText_DisableStatTracker;               // 0x05F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                MissionList_EntryButtonWidgetName;                       // 0x0600(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionList_NameWidgetName;                              // 0x0608(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionList_DescWidgetName;                              // 0x0610(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionList_ErrorTextWidgetName;                         // 0x0618(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionList_EligibilityWidgetName;                       // 0x0620(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionList_StartButtonTextWidgetName;                   // 0x0628(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionList_StartButtonWidgetName;                       // 0x0630(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          ArcticIcon;                                              // 0x0638(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          BogIcon;                                                 // 0x0640(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          LunarIcon;                                               // 0x0648(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          OceanIcon;                                               // 0x0650(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          VolcanicIcon;                                            // 0x0658(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          SoloIcon;                                                // 0x0660(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          MultiplayerIcon;                                         // 0x0668(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TableWidth;                                              // 0x0670(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LatestScoreTableWidth;                                   // 0x0674(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxLeaderboardRowsToDisplay;                             // 0x0678(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextActiveColor;                                 // 0x067C(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextInactiveColor;                               // 0x068C(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SPK8[0x4];                                   // 0x069C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          TabBackgroundTexture;                                    // 0x06A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          TabMirroredBackgroundTexture;                            // 0x06A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        AlphaMissionColor;                                       // 0x06B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        BetaMissionColor;                                        // 0x06C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        GammaMissionColor;                                       // 0x06D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        ActiveMissionColor;                                      // 0x06E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        InactiveMissionColor;                                    // 0x06F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        AvailableMissionColor;                                   // 0x0700(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        UnavailableMissionColor;                                 // 0x0710(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        DefaultTextColor;                                        // 0x0720(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        GlitchTintColor;                                         // 0x0730(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        GlitchTextColor;                                         // 0x0740(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0MAA[0x2C8];                                 // 0x0750(0x02C8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ULeaderboardRowWidget*                               HeaderRowWidget;                                         // 0x0A18(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UVerticalBox*                                        RowContainer;                                            // 0x0A20(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		TArray<class ULeaderboardRowWidget*>                       RowWidgets;                                              // 0x0A28(0x0010) ZeroConstructor, Transient, Protected
		class ULeaderboardRowWidget*                               LatestScoreRowWidget;                                    // 0x0A38(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UVerticalBox*                                        LatestPlayerScoreRowContainer;                           // 0x0A40(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_GW74[0x60];                                  // 0x0A48(0x0060) MISSED OFFSET (PADDING)

	public:
		void OnMissionFilterChanged(const class FText& Text);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_OptionsMenu
	 * Size -> 0x0410 (FullSize[0x0938] - InheritedSize[0x0528])
	 */
	class UUI_OptionsMenu : public UPrimalSubMenuUI
	{
	public:
		class FName                                                SaveButtonName;                                          // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ApplyButtonName;                                         // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ResetButtonName;                                         // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CancelButtonName;                                        // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ResolutionWidthTextBoxName;                              // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ResolutionHeightTextBoxName;                             // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ResolutionsComboBoxName;                                 // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                WindowModeComboBoxName;                                  // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                GraphicsQualityComboBoxName;                             // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ResolutionScaleSliderName;                               // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ViewDistanceComboBoxName;                                // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AntiAliasingComboBoxName;                                // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PostProcessingComboBoxName;                              // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ShadowsComboBoxName;                                     // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TexturesComboBoxName;                                    // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EffectsComboBoxName;                                     // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AudioVolumeSliderName;                                   // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                UIScalingSliderName;                                     // 0x05B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FKeyBindingItem>                             KeyBindings;                                             // 0x05B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                InvertMouseYCheckBoxName;                                // 0x05C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CameraShakeScaleSliderName;                              // 0x05D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                FirstPersonRidingCheckboxName;                           // 0x05D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ToggleToTalkCheckBoxName;                                // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                KeyBindingsPanelName;                                    // 0x05E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                XBoxControlsPanelName;                                   // 0x05F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ToggleExtendedHUDInfoCheckboxName;                       // 0x05F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WOU8[0x338];                                 // 0x0600(0x0338) MISSED OFFSET (PADDING)

	public:
		void OptionsGraphTick(const struct FGeometry& MyGeometry, float InDeltaTime);
		void OnWidthChanged(const class FText& Text);
		void OnResolutionsComboBoxSelectionChanged(const class FString& SelectedItem, ESelectInfo SelectionType);
		void OnHeightChanged(const class FText& Text);
		void OnGraphicsQualityComboBoxChanged(const class FString& SelectedItem);
		void OnGraphicsPresetValueChanged();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_OptionsMenu_UWP
	 * Size -> 0x0428 (FullSize[0x0950] - InheritedSize[0x0528])
	 */
	class UUI_OptionsMenu_UWP : public UPrimalSubMenuUI
	{
	public:
		class FName                                                SaveButtonName;                                          // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ApplyButtonName;                                         // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ResetButtonName;                                         // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CancelButtonName;                                        // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ResolutionWidthTextBoxName;                              // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ResolutionHeightTextBoxName;                             // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ResolutionsComboBoxName;                                 // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                WindowModeComboBoxName;                                  // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                GraphicsQualityComboBoxName;                             // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ResolutionScaleSliderName;                               // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ViewDistanceComboBoxName;                                // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AntiAliasingComboBoxName;                                // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PostProcessingComboBoxName;                              // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ShadowsComboBoxName;                                     // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TexturesComboBoxName;                                    // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EffectsComboBoxName;                                     // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AudioVolumeSliderName;                                   // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FKeyBindingItem>                             KeyBindings;                                             // 0x05B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                InvertMouseYCheckBoxName;                                // 0x05C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CameraShakeScaleSliderName;                              // 0x05C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                FirstPersonRidingCheckboxName;                           // 0x05D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ToggleToTalkCheckBoxName;                                // 0x05D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ToggleExtendedHUDInfoCheckboxName;                       // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_J7WD[0x368];                                 // 0x05E8(0x0368) MISSED OFFSET (PADDING)

	public:
		void OptionsGraphTick(const struct FGeometry& MyGeometry, float InDeltaTime);
		void OnWidthChanged(const class FText& Text);
		void OnViewDistanceComboBoxSelectionChanged(const class FString& SelectedItem, ESelectInfo SelectionType);
		void OnResolutionsComboBoxSelectionChanged(const class FString& SelectedItem, ESelectInfo SelectionType);
		void OnResolutionScaleChanged(float SliderValue);
		void OnHeightChanged(const class FText& Text);
		void OnGraphicsQualityComboBoxChanged(const class FString& SelectedItem);
		void OnGraphicsPresetValueChanged();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_SurvivorProfile
	 * Size -> 0x03F0 (FullSize[0x0918] - InheritedSize[0x0528])
	 */
	class UUI_SurvivorProfile : public UPrimalSubMenuUI
	{
	public:
		unsigned char                                              UnknownData_TIFF[0x268];                                 // 0x0528(0x0268) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundWave*                                          AsyncLoadedSoundWave;                                    // 0x0790(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_VK1J[0x58];                                  // 0x0798(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInstanceDynamic*>                    ExplorerNoteDynamicMaterials;                            // 0x07F0(0x0010) ZeroConstructor, Transient, Protected
		unsigned char                                              UnknownData_VF52[0x40];                                  // 0x0800(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           AsyncLoadedSoundCue;                                     // 0x0840(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_9CZQ[0x50];                                  // 0x0848(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGenericDataListEntry*                               AsyncLoadingDinoEntry;                                   // 0x0898(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UTexture2D*                                          AsyncLoadedDinoTexture;                                  // 0x08A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UTexture2D*                                          AsyncLoadedDialogueAnimTexture;                          // 0x08A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UAudioComponent*                                     DialogueSoundComponent;                                  // 0x08B0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected
		bool                                                       bShowingDossiers;                                        // 0x08B8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		bool                                                       bShowingScorchedEarth;                                   // 0x08B9(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_ULJQ[0x2];                                   // 0x08BA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ExplorerNoteMaterialParameterName;                       // 0x08BC(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                ExplorerNoteAnimTextureParamName;                        // 0x08C4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                ExplorerNoteAnimTextureStartTimeParamName;               // 0x08CC(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                ExplorerNoteAnimTextureDurationParamName;                // 0x08D4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      ExplorerNoteAnimTextureDurationOffset;                   // 0x08DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      ExplorerNoteFadeInSpeed;                                 // 0x08E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      ExplorerNoteFadeOutSpeed;                                // 0x08E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      ShowDossierTitleDelayTime;                               // 0x08E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      ExplorerNoteExtraCloseTime;                              // 0x08EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		TArray<class FString>                                      NoteCategoryNames;                                       // 0x08F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		TArray<struct FSlateBrush>                                 CategoryIcons;                                           // 0x0900(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		unsigned char                                              UnknownData_6XRL[0x8];                                   // 0x0910(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnSubtitlesCheckboxChanged(bool InNewState);
		void OnNoteNameFilterChanged(const class FText& Text);
		void HideDossier();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_TamingList
	 * Size -> 0x0108 (FullSize[0x0630] - InheritedSize[0x0528])
	 */
	class UUI_TamingList : public UPrimalSubMenuUI
	{
	public:
		class UClass*                                              TamingListEntryTemplate;                                 // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          POI_Icon;                                                // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FARM[0xF8];                                  // 0x0538(0x00F8) MISSED OFFSET (PADDING)

	public:
		void SearchTextChanged(const class FText& Text);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_TribeManager
	 * Size -> 0x04B0 (FullSize[0x09D8] - InheritedSize[0x0528])
	 */
	class UUI_TribeManager : public UPrimalSubMenuUI
	{
	public:
		class FName                                                CreateNewTribeButtonName;                                // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LeaveTribeButtonName;                                    // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TribeNameLabelName;                                      // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TribeNameEditBoxName;                                    // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RemovePlayerFromTribeButtonName;                         // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ManageTribePanelName;                                    // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                NewTribePanelName;                                       // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MyScrollBoxName;                                         // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ReverseLogOrderButtonName;                               // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              TribePlayerEntryButtonTemplate;                          // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              TribeWarEntryButtonTemplate;                             // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              TribeAllianceEntryButtonTemplate;                        // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              TribeAllianceMemberEntryButtonTemplate;                  // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              RankEntryButtonTemplate;                                 // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextActiveColor;                                 // 0x0598(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextInactiveColor;                               // 0x05A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     LastPlayerRefreshTime;                                   // 0x05B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_PSSR[0x418];                                 // 0x05C0(0x0418) MISSED OFFSET (PADDING)

	public:
		void TribeWarEntryButtonSelected(class UWidget* theWidget);
		void TribeAllianceMemberButtonSelected(class UWidget* theWidget);
		void TribeAllianceEntryButtonSelected(class UWidget* theWidget);
		void RankGroupButtonSelected(class UWidget* theWidget);
		void PlayerEntryButtonSelected(class UWidget* theWidget);
		void OnGroupRankSelected(const class FString& SelectedItem, ESelectInfo SelectionType);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.StatsPanelWidget
	 * Size -> 0x0310 (FullSize[0x0828] - InheritedSize[0x0518])
	 */
	class UStatsPanelWidget : public UPrimalUI
	{
	public:
		class FName                                                MultiUseButton1Name;                                     // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MultiUseButton2Name;                                     // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MultiUseButton3Name;                                     // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MultiUseButton4Name;                                     // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MultiUseButton5Name;                                     // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MultiUseButton6Name;                                     // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FCustomButtonWidgetStyle                            DefaultMultiuseButtonExtendedStyle;                      // 0x0548(0x0048) Edit, DisableEditOnInstance
		struct FButtonStyle                                        DefaultMultiuseButtonStyle;                              // 0x0590(0x0248) Edit, DisableEditOnInstance
		unsigned char                                              UnknownData_HS0A[0x50];                                  // 0x07D8(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.StatsPanelWidget_Character
	 * Size -> 0x0318 (FullSize[0x0B40] - InheritedSize[0x0828])
	 */
	class UStatsPanelWidget_Character : public UStatsPanelWidget
	{
	public:
		class FName                                                PlayerStatusBoxName;                                     // 0x0828(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ExperienceBoxName;                                       // 0x0830(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                UpgradesBoxName;                                         // 0x0838(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EquipmentDataListPanelName;                              // 0x0840(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DisabledEquipmentPanelName;                              // 0x0848(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                GenderSwitcherName;                                      // 0x0850(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                NameLabelName;                                           // 0x0858(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LevelLabelName;                                          // 0x0860(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TribeLabelName;                                          // 0x0868(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                BiomeRegionLabelName;                                    // 0x0870(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SpawnRegionLabelName;                                    // 0x0878(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TameLimitLabelName;                                      // 0x0880(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ArmorLabelName;                                          // 0x0888(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HypothermalInsulationLabelName;                          // 0x0890(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HyperthermalInsulationLabelName;                         // 0x0898(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HypothermalInsulationNameLabelName;                      // 0x08A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HyperthermalInsulationNameLabelName;                     // 0x08A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ExperienceBarName;                                       // 0x08B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ExperienceLabelName;                                     // 0x08B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                StatWidgetNames[0xC];                                    // 0x08C0(0x0060) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ImprintingStatWidgetName;                                // 0x0920(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ShowAncestorsButtonName;                                 // 0x0928(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                NumUpgradePointsAvailableLabelName;                      // 0x0930(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HyperthermalInsulationBoxName;                           // 0x0938(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HypothermalInsulationBoxName;                            // 0x0940(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TameLimitBoxName;                                        // 0x0948(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                StatDayValueTextBlockName;                               // 0x0950(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                StatTimeValueTextBlockName;                              // 0x0958(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                StatTmpValueTextBlockName;                               // 0x0960(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                StatWindValueTextBlockName;                              // 0x0968(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MQ8L[0x1D0];                                 // 0x0970(0x01D0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.StatsPanelWidget_Obelisk
	 * Size -> 0x0080 (FullSize[0x08A8] - InheritedSize[0x0828])
	 */
	class UStatsPanelWidget_Obelisk : public UStatsPanelWidget
	{
	public:
		class FName                                                NameLabelName;                                           // 0x0828(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DescriptionLabelName;                                    // 0x0830(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                UploadCharacterDataButtonName;                           // 0x0838(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TravelToAnotherServerButtonName;                         // 0x0840(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RefreshArkButtonName;                                    // 0x0848(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ArkStorageStatName;                                      // 0x0850(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ArkDinoStatName;                                         // 0x0858(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                StorageStatName;                                         // 0x0860(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HOOW[0x40];                                  // 0x0868(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.StatsPanelWidget_Structure
	 * Size -> 0x0080 (FullSize[0x08A8] - InheritedSize[0x0828])
	 */
	class UStatsPanelWidget_Structure : public UStatsPanelWidget
	{
	public:
		class FName                                                EquipmentDataListPanelName;                              // 0x0828(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DisabledEquipmentPanelName;                              // 0x0830(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                StructureNameLabelName;                                  // 0x0838(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                OwnerLabelName;                                          // 0x0840(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DescriptionLabelName;                                    // 0x0848(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HealthStatName;                                          // 0x0850(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                StorageStatName;                                         // 0x0858(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                WeightStatName;                                          // 0x0860(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_APTO[0x40];                                  // 0x0868(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.StructureStatWidget
	 * Size -> 0x0070 (FullSize[0x0588] - InheritedSize[0x0518])
	 */
	class UStructureStatWidget : public UPrimalUI
	{
	public:
		class FText                                                StatName;                                                // 0x0518(0x0018) ELEMENT_SIZE_MISMATCH Edit, BlueprintReadOnly, DisableEditOnInstance
		unsigned char                                              UnknownData_P29H[0x10];                                  // 0x0530(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class UTexture2D*                                          StatIcon;                                                // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                StatTextBlockName;                                       // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                StatValueBlockName;                                      // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                StatImageName;                                           // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                StatBarName;                                             // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_PUQL[0x20];                                  // 0x0568(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_AdminMangment
	 * Size -> 0x0488 (FullSize[0x09A0] - InheritedSize[0x0518])
	 */
	class UUI_AdminMangment : public UPrimalUI
	{
	public:
		unsigned char                                              UnknownData_EOWR[0x58];                                  // 0x0518(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                FPSValueName;                                            // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                NumConnectedName;                                        // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                NumBannedName;                                           // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                NumWhiteListedName;                                      // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MaxStructuresInRangeName;                                // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RemoveFromWhiteListButtonName;                           // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CancelCheatCommandButtonName;                            // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ExcuteCheatCommandButtonName;                            // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CopyPlayerIDCheatCommandButtonName;                      // 0x05B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CopySteamIDCheatCommandButtonName;                       // 0x05B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CheatsScrollBoxName;                                     // 0x05C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              CheatSlotButtonTemplate;                                 // 0x05C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5ILM[0x10];                                  // 0x05D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                CancelManualBanButtonName;                               // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ExcuteManualBanButtonName;                               // 0x05E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CancelManualwhiteListedButtonName;                       // 0x05F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ExcuteManualwhiteListedButtonName;                       // 0x05F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                KickButtonName;                                          // 0x0600(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RefreshButtonName;                                       // 0x0608(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                paramtersPanelName;                                      // 0x0610(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ManualBanPanelName;                                      // 0x0618(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ManualWhiteListedPaneName;                               // 0x0620(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ConnectedPlayerPanelName;                                // 0x0628(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RefreshingConnectedPlayerPanelName;                      // 0x0630(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                BannedPlayerPanelName;                                   // 0x0638(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RefreshingBannedPlayerPanelName;                         // 0x0640(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                WhiteListedPlayerPanelName;                              // 0x0648(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RefreshingWhiteListedPlayerPanelName;                    // 0x0650(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ParmterTextFieldName;                                    // 0x0658(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ChetFunctionSelectedImageName;                           // 0x0660(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DifficultyOffsetName;                                    // 0x0668(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                GlobalVoiceChatName;                                     // 0x0670(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ProximityChatName;                                       // 0x0678(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                NoTributeDownloadsName;                                  // 0x0680(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AllowThirdPersonPlayerName;                              // 0x0688(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AlwaysNotifyPlayerLeftName;                              // 0x0690(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DontAlwaysNotifyPlayerJoinedName;                        // 0x0698(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AddToWhiteListButtonName;                                // 0x06A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ManualAddToWhiteListButtonName;                          // 0x06A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ServerHardcoreName;                                      // 0x06B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ServerPVEName;                                           // 0x06B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ServerCrosshairName;                                     // 0x06C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ServerForceNoHUDName;                                    // 0x06C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                FunctionDiscriptionName;                                 // 0x06D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ShowMapPlayerLocationName;                               // 0x06D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ServerPasswordName;                                      // 0x06E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ServerAdminPasswordName;                                 // 0x06E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PositionName;                                            // 0x06F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MessgaeOfTheDayName;                                     // 0x06F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SetMessgaeOfTheDayName;                                  // 0x0700(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AllConnectedPlayerScrollBoxName;                         // 0x0708(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AllBannedPlayerScrollBoxName;                            // 0x0710(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AllWhiteListedPlayerScrollBoxName;                       // 0x0718(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ServerScrollBoxName;                                     // 0x0720(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SlotButtonTemplate;                                      // 0x0728(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ServerInfoButtonTemplate;                                // 0x0730(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                BanButtonName;                                           // 0x0738(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ManualBanButtonName;                                     // 0x0740(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EnterPramterName;                                        // 0x0748(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                UnBanButtonName;                                         // 0x0750(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CloseButtonName;                                         // 0x0758(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DirectMessageTextFieldName;                              // 0x0760(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DirectMessageButtonName;                                 // 0x0768(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ErrorBlockName;                                          // 0x0770(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                errorBlockManualBanName;                                 // 0x0778(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                errorBlockManualWhiteListedName;                         // 0x0780(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                errorBlockMessageOfTheDayName;                           // 0x0788(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ManualBanningSteamIDTextFieldName;                       // 0x0790(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ManualWhiteListedSteamIDTextFieldName;                   // 0x0798(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class AShooterPlayerController*                            OwnerPlayerController;                                   // 0x07A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class FName                                                CustomGameUIButtonName;                                  // 0x07A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_32DC[0x48];                                  // 0x07B0(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxDirectMessageChars;                                   // 0x07F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxSteamIDChars;                                         // 0x07FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxMessageofthedayChars;                                 // 0x0800(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XH8F[0x19C];                                 // 0x0804(0x019C) MISSED OFFSET (PADDING)

	public:
		void OnTextCommittedWhiteListed(const class FText& Text, ETextCommit CommitMethod);
		void OnTextCommittedMessageOfTheDay(const class FText& Text, ETextCommit CommitMethod);
		void OnTextCommittedManualBan(const class FText& Text, ETextCommit CommitMethod);
		void OnTextCommitted(const class FText& Text, ETextCommit CommitMethod);
		void OnTextChangedMessageOfTheDay(const class FText& Text);
		void OnTextChangedManulaBan(const class FText& Text);
		void OnTextChangedManualWhiteLised(const class FText& Text);
		void OnTextChanged(const class FText& Text);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_AllPlayersList
	 * Size -> 0x0090 (FullSize[0x05A8] - InheritedSize[0x0518])
	 */
	class UUI_AllPlayersList : public UPrimalUI
	{
	public:
		class FName                                                CloseButtonName;                                         // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AllPlayersListBoxName;                                   // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SlotButtonTemplate;                                      // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_N7T5[0x78];                                  // 0x0530(0x0078) MISSED OFFSET (PADDING)

	public:
		void OnTribeNameFilterChanged(const class FText& Text);
		void OnPlayerNameFilterChanged(const class FText& Text);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_ChangeTransponderFreqencyEntry
	 * Size -> 0x0030 (FullSize[0x0548] - InheritedSize[0x0518])
	 */
	class UUI_ChangeTransponderFreqencyEntry : public UPrimalUI
	{
	public:
		class FName                                                CloseButtonName;                                         // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                FrequencyNameTextBoxName;                                // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_A2G0[0x20];                                  // 0x0528(0x0020) MISSED OFFSET (PADDING)

	public:
		void HandleFilterStringTextChanged(const class FText& NewText);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_ChatBox
	 * Size -> 0x00B8 (FullSize[0x05D0] - InheritedSize[0x0518])
	 */
	class UUI_ChatBox : public UPrimalUI
	{
	public:
		class UClass*                                              ChatMessageUITemplate;                                   // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ServerBroadCastMessageUITemplate;                        // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              ChatBoxName;                                             // 0x0528(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              EditTextBoxName;                                         // 0x0538(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              SendingModelLabelName;                                   // 0x0548(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                DisplayModeLabelName;                                    // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CanavasPanelName;                                        // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              ServerSenderText;                                        // 0x0568(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		int32_t                                                    ChatHistoryLimit;                                        // 0x0578(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_N0SV[0x54];                                  // 0x057C(0x0054) MISSED OFFSET (PADDING)

	public:
		void HandleChatTextCommitted(const class FText& Text, ETextCommit CommitMethod);
		void HandleChatTextChanged(const class FText& Text);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_ChatMessage
	 * Size -> 0x0058 (FullSize[0x0570] - InheritedSize[0x0518])
	 */
	class UUI_ChatMessage : public UPrimalUI
	{
	public:
		class FString                                              ChatBlockName;                                           // 0x0518(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_0ZAO[0x48];                                  // 0x0528(0x0048) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_ConsoleDedicated
	 * Size -> 0x0230 (FullSize[0x0748] - InheritedSize[0x0518])
	 */
	class UUI_ConsoleDedicated : public UPrimalUI
	{
	public:
		unsigned char                                              UnknownData_X7K0[0x90];                                  // 0x0518(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              SlotButtonTemplate;                                      // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxDirectMessageChars;                                   // 0x05B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ExitToMenuButtonName;                                    // 0x05B4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AdminUIButtonName;                                       // 0x05BC(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                BannedPlayerPanelName;                                   // 0x05C4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RefreshingBannedPlayerPanelName;                         // 0x05CC(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AllBannedPlayerScrollBoxName;                            // 0x05D4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                UnBanButtonName;                                         // 0x05DC(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TextMessageEditableBoxName;                              // 0x05E4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                BroadcastingVoiceTextBlockName;                          // 0x05EC(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ServerNameTextBlockName;                                 // 0x05F4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ServerPassTextBlockName;                                 // 0x05FC(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                InviteFriendsButtonName;                                 // 0x0604(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                BanButtonName;                                           // 0x060C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                NumConnectedName;                                        // 0x0614(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AllConnectedPlayerScrollBoxName;                         // 0x061C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ConnectedPlayerPanelName;                                // 0x0624(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RefreshingConnectedPlayerPanelName;                      // 0x062C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RefreshButtonName;                                       // 0x0634(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DirectMessageTextFieldName;                              // 0x063C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DirectMessageButtonName;                                 // 0x0644(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ErrorBlockName;                                          // 0x064C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                KickButtonName;                                          // 0x0654(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                NumBannedName;                                           // 0x065C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VDZW[0xE4];                                  // 0x0664(0x00E4) MISSED OFFSET (PADDING)

	public:
		void PlayerDoubleClicked(class UDataListEntryButton* theButton);
		void OnTextChanged(const class FText& Text);
		void HandleTextMessageTextCommitted(const class FText& Text, ETextCommit CommitMethod);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_Cooking
	 * Size -> 0x0158 (FullSize[0x0670] - InheritedSize[0x0518])
	 */
	class UUI_Cooking : public UPrimalUI
	{
	public:
		TArray<class UClass*>                                      DrinkRecipeTemplates;                                    // 0x0518(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      FoodRecipeTemplates;                                     // 0x0528(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              NoteItemTemplate;                                        // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4CPN[0x70];                                  // 0x0540(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FColor>                                      PaletteColors;                                           // 0x05B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		unsigned char                                              UnknownData_DRRG[0x58];                                  // 0x05C0(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic*                            ItemIconMIC;                                             // 0x0618(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_UQ3U[0x50];                                  // 0x0620(0x0050) MISSED OFFSET (PADDING)

	public:
		void RefreshItemLists();
		void OnRedSliderValueChanged(float SliderValue);
		void OnItemNameChanged(const class FText& Text);
		void OnItemDescriptionChanged(const class FText& Text);
		void OnGreenSliderValueChanged(float SliderValue);
		void OnBlueSliderValueChanged(float SliderValue);
		void MyInventoryItemDoubleClicked(class UDataListEntryButton* theButton);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_DyeItem
	 * Size -> 0x0278 (FullSize[0x0790] - InheritedSize[0x0518])
	 */
	class UUI_DyeItem : public UPrimalUI
	{
	public:
		class FString                                              DyeItemsDataListName;                                    // 0x0518(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              BrushItemsDataListName;                                  // 0x0528(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                CloseButtonName;                                         // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LoadPaintingsButtonName;                                 // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SavePaintingsButtonName;                                 // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ResetCameraButtonName;                                   // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemLabelName;                                           // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DyeLabelName;                                            // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class FName>                                        DyeRegionButtonsNames;                                   // 0x0568(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                DyeButtonName;                                           // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DyeIconImageName;                                        // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DurabilityProgressBarName;                               // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemIconImageName;                                       // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TitleLabelName;                                          // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PreviewWidgetName;                                       // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PaintLabelName;                                          // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EraseAllButtonName;                                      // 0x05B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                BackgroundImageName;                                     // 0x05B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              PantingListUITemplate;                                   // 0x05C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SaveDialogUITemplate;                                    // 0x05C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VBL3[0x14];                                  // 0x05D0(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                CursorWidgetName;                                        // 0x05E4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_G8DS[0x1A4];                                 // 0x05EC(0x01A4) MISSED OFFSET (PADDING)

	public:
		void DyeItemDoubleClicked(class UDataListEntryButton* theButton);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_GenericConfirmationDialog
	 * Size -> 0x0058 (FullSize[0x0570] - InheritedSize[0x0518])
	 */
	class UUI_GenericConfirmationDialog : public UPrimalUI
	{
	public:
		class FName                                                AcceptButtonName;                                        // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CancelButtonName;                                        // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TitleLabelName;                                          // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MessageLabelName;                                        // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RBYA[0x38];                                  // 0x0538(0x0038) MISSED OFFSET (PADDING)

	public:
		void OnConfirmationDialogClosedEvent__DelegateSignature(bool bAccept);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_Hairstyle
	 * Size -> 0x0188 (FullSize[0x06A0] - InheritedSize[0x0518])
	 */
	class UUI_Hairstyle : public UPrimalUI
	{
	public:
		class FName                                                TabBgSwitcherName;                                       // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HeadHairEnabledEffectName;                               // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                FacialHairEnabledEffectName;                             // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextActiveColor;                                 // 0x0530(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextInactiveColor;                               // 0x0540(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              HairStyleEntryTemplate;                                  // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RT4X[0xD8];                                  // 0x0558(0x00D8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             TheHairStyleSelectedDelegate;                            // 0x0630(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             ClearHeadHairButtonClickedDelegate;                      // 0x0640(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             ClearFacialHairButtonClickedDelegate;                    // 0x0650(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_08N4[0x40];                                  // 0x0660(0x0040) MISSED OFFSET (PADDING)

	public:
		void OnHeadHairStyleButtonClicked(class UWidget* theWidget);
		void OnHairStyleAccepted__DelegateSignature(int32_t newHeadHairIndex, int32_t newFacialHairIndex, float NewHeadHairPercent, float NewFacialHairPercent, int32_t HeadHairDyeID1, int32_t HeadHairDyeID2, int32_t FacialHairDyeID1, int32_t FacialHairDyeID2);
		void OnFacialHairStyleButtonClicked(class UWidget* theWidget);
		void ClearHairButtonClicked__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_HelpPage
	 * Size -> 0x00F0 (FullSize[0x0608] - InheritedSize[0x0518])
	 */
	class UUI_HelpPage : public UPrimalUI
	{
	public:
		unsigned char                                              UnknownData_AF3U[0xF0];                                  // 0x0518(0x00F0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_HexagonConversion
	 * Size -> 0x08E0 (FullSize[0x0DF8] - InheritedSize[0x0518])
	 */
	class UUI_HexagonConversion : public UPrimalUI
	{
	public:
		unsigned char                                              UnknownData_D0CA[0x138];                                 // 0x0518(0x0138) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ItemIconName;                                            // 0x0650(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemIconPanelName;                                       // 0x0658(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemNameTextBoxName;                                     // 0x0660(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CostPanelName;                                           // 0x0668(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CostCountTextBoxName;                                    // 0x0670(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CurrentCountTextBoxName;                                 // 0x0678(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SubtotalCountTextBoxName;                                // 0x0680(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RemainingCountTextBoxName;                               // 0x0688(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AvailableItemsScrollboxName;                             // 0x0690(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ConvertButtonName;                                       // 0x0698(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CloseButtonName;                                         // 0x06A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemQuantityTextBoxName;                                 // 0x06A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemDescriptionTextBoxName;                              // 0x06B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemWeightValueTextBlockName;                            // 0x06B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemInventoryQuantityValueTextBlockName;                 // 0x06C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ConvertButtonItemIconName;                               // 0x06C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                QuantitySelectorTextBlockName;                           // 0x06D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ConvertButtonSubtotalTextBlockName;                      // 0x06D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ConvertButtonQuantityTextBlockName;                      // 0x06E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                WeightBeforePurchaseTextBlockName;                       // 0x06E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                WeightAfterPurchaseTextBlockName;                        // 0x06F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                WeightBeforePurchaseProgressBarName;                     // 0x06F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                WeightAfterPurchaseProgressBarName;                      // 0x0700(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                IncreaseQuantityButtonName;                              // 0x0708(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                IncreaseQuantity10ButtonName;                            // 0x0710(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MaxIncreaseQuantityButtonName;                           // 0x0718(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DecreaseQuantityButtonName;                              // 0x0720(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DecreaseQuantity10ButtonName;                            // 0x0728(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MaxDecreaseQuantityButtonName;                           // 0x0730(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SearchTextBoxName;                                       // 0x0738(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    AvailableItemsPerRow;                                    // 0x0740(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BFGC[0x4];                                   // 0x0744(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<bool>                                               CurrentAvailableItems;                                   // 0x0748(0x0010) ZeroConstructor, Transient
		unsigned char                                              UnknownData_UMPW[0x10];                                  // 0x0758(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              SlotButtonTemplate;                                      // 0x0768(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              EmptySlotButtonTemplate;                                 // 0x0770(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FCustomButtonWidgetStyle                            UnavailableItemButtonStyle;                              // 0x0778(0x0048) Edit, DisableEditOnInstance
		unsigned char                                              UnknownData_REV2[0x48];                                  // 0x07C0(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCustomButtonWidgetStyle                            UnavailableConvertButtonStyle;                           // 0x0808(0x0048) Edit, DisableEditOnInstance
		unsigned char                                              UnknownData_NWDX[0x48];                                  // 0x0850(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateColor                                         NotAbleToPurchaseTextColor;                              // 0x0898(0x0028) Edit, DisableEditOnInstance
		struct FSlateColor                                         AbleToPurchaseTextColor;                                 // 0x08C0(0x0028) Edit, DisableEditOnInstance
		struct FSlateColor                                         NeutralTextColor;                                        // 0x08E8(0x0028) Edit, DisableEditOnInstance
		struct FCompanionReactionData                              PurchaseItemReaction;                                    // 0x0910(0x00A0) Edit, BlueprintVisible, DisableEditOnInstance
		struct FCompanionReactionData                              CloseStoreReactionNoPurchase;                            // 0x09B0(0x00A0) Edit, BlueprintVisible, DisableEditOnInstance
		struct FCompanionReactionData                              CloseStoreReactionDidPurchase;                           // 0x0A50(0x00A0) Edit, BlueprintVisible, DisableEditOnInstance
		struct FCompanionReactionData                              OpenStoreReaction;                                       // 0x0AF0(0x00A0) Edit, BlueprintVisible, DisableEditOnInstance
		struct FCompanionReactionData                              OpenStoreReactionSale;                                   // 0x0B90(0x00A0) Edit, BlueprintVisible, DisableEditOnInstance
		struct FCompanionReactionData                              OpenStoreReactionChange;                                 // 0x0C30(0x00A0) Edit, BlueprintVisible, DisableEditOnInstance
		struct FCompanionReactionData                              OpenStoreReactionNewItemUnlocked;                        // 0x0CD0(0x00A0) Edit, BlueprintVisible, DisableEditOnInstance
		unsigned char                                              UnknownData_H1JB[0x2];                                   // 0x0D70(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       DebugTestSaleReaction;                                   // 0x0D72(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       DebugTestChangeReaction;                                 // 0x0D73(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       DebugTestNewReaction;                                    // 0x0D74(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_77RR[0x3];                                   // 0x0D75(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           StoreOpenSound;                                          // 0x0D78(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           StoreCloseSound;                                         // 0x0D80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    RequiredQuantity;                                        // 0x0D88(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1NXG[0x4];                                   // 0x0D8C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UHexagonTradableOption*                              CurrentTradableItemOption;                               // 0x0D90(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FSlateColor                                         WeightTextColor;                                         // 0x0D98(0x0028) Edit, DisableEditOnInstance
		struct FSlateColor                                         OverencumberedTextColor;                                 // 0x0DC0(0x0028) Edit, DisableEditOnInstance
		int32_t                                                    ItemRow;                                                 // 0x0DE8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    ItemColumn;                                              // 0x0DEC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XPBX[0x8];                                   // 0x0DF0(0x0008) MISSED OFFSET (PADDING)

	public:
		void TradableItemSelected(class UWidget* theWidget);
		void PopulateAvailableTradeItems(TArray<bool> AvailableItems);
		void OnSearchTextChanged(const class FText& Text);
		void HideItem(int32_t ItemIndex);
		int32_t GetWidgetIndexOfAssociatedItemIndex(int32_t ItemIndex);
		int32_t GetCurrentlySelectedTradeItemWidgetIndex();
		void FilterAvailableTradeItems(TArray<bool> AvailableTradableItems, const class FString& FilterText);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_HostSession
	 * Size -> 0x0D30 (FullSize[0x1248] - InheritedSize[0x0518])
	 */
	class UUI_HostSession : public UPrimalUI
	{
	public:
		TArray<struct FMapDescription>                             MapDescriptionsArray;                                    // 0x0518(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                ProceduralButtonName;                                    // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DeleteProceduralArkButtonName;                           // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HostButtonName;                                          // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HostDedicatedButtonName;                                 // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HostListenButtonName;                                    // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                UpdateModsButtonName;                                    // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ProgressTextName;                                        // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CancelButtonName;                                        // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MyScrollBoxName;                                         // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SessionsPanelName;                                       // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ClearLocalDataButtonName;                                // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ConnectingPanelName;                                     // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PasswordAcceptButtonName;                                // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PasswordCancelButtonName;                                // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PasswordTextFieldName;                                   // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PasswordAdminTextFieldName;                              // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SessionNameTextFieldName;                                // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PasswordPanelName;                                       // 0x05B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ErrorBlockName;                                          // 0x05B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SlotButtonTemplate;                                      // 0x05C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ProceduralSettingsTemplate;                              // 0x05C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9NMU[0x4];                                   // 0x05D0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxPasswordChars;                                        // 0x05D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxSessionNameChars;                                     // 0x05D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextActiveColor;                                 // 0x05DC(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextInactiveColor;                               // 0x05EC(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3ZMM[0xC4C];                                 // 0x05FC(0x0C4C) MISSED OFFSET (PADDING)

	public:
		void SlotButtonSelected(class UWidget* theWidget);
		void OnSliderValueChanged(float SliderValue);
		void OnSessionPasswordTextCommitted(const class FText& Text, ETextCommit CommitMethod);
		void OnSessionPasswordTextChanged(const class FText& Text);
		void OnSessionNameTextCommitted(const class FText& Text, ETextCommit CommitMethod);
		void OnSessionNameTextChanged(const class FText& Text);
		void OnNumericValueCommitted(const class FText& Text, ETextCommit CommitMethod);
		void OnDeleteMapServerDataButtonClicked(class UWidget* theWidget);
		void OnDeleteMapSaveDataButtonClicked(class UWidget* theWidget);
		void OnAdminPasswordTextCommitted(const class FText& Text, ETextCommit CommitMethod);
		void OnAdminPasswordTextChanged(const class FText& Text);
		void ModSelected(class UWidget* theWidget);
		void EngramDoubleClicked(class UDataListEntryButton* theButton);
		void ActiveModSelected(class UWidget* theWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_Hub
	 * Size -> 0x0218 (FullSize[0x0730] - InheritedSize[0x0518])
	 */
	class UUI_Hub : public UPrimalUI
	{
	public:
		class FName                                                TopRecenteringSpacerName;                                // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                InventoryMenuButtonName;                                 // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EngramsMenuButtonName;                                   // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TribeManagerMenuButtonName;                              // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TameGroupsMenuButtonName;                                // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SurvivorProfileMenuButtonName;                           // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissionListMenuButtonName;                               // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                OptionsMenuButtonName;                                   // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SubMenuWidgetSwitcherName;                               // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CloseHubButtonName;                                      // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HexagonCurrencyValuePanelName;                           // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HexagonCurrencyValueTextBlockName;                       // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              InventoryUITemplate;                                     // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              TribeManagerUITemplate;                                  // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              EngramsMenuUITemplate;                                   // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              TameGroupsUITemplate;                                    // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SurvivorProfileUITemplate;                               // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MissionListUITemplate;                                   // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              OptionsMenuUITemplate;                                   // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              TamingListUITemplate;                                    // 0x05B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           TabSwitchSound;                                          // 0x05B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OJSJ[0x68];                                  // 0x05C0(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SelectedMissionEntryIndex;                               // 0x0628(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    SelectedBiomeFilterMask;                                 // 0x062C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3VCY[0x100];                                 // 0x0630(0x0100) MISSED OFFSET (PADDING)

	public:
		void RecenterHub();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_HudOverlay
	 * Size -> 0x0020 (FullSize[0x0538] - InheritedSize[0x0518])
	 */
	class UUI_HudOverlay : public UPrimalUI
	{
	public:
		class FName                                                HudOverlayWidgetName;                                    // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_K4KW[0x18];                                  // 0x0520(0x0018) MISSED OFFSET (PADDING)

	public:
		void ShowOverlayTooltip(class AShooterPlayerController* HUDOwner, class UObject* SponsorObject, class UClass* ToolTipPrefab, const struct FVector2D& ScreenPos, EAlignHorizontalUI HorizontalAlignment, EAlignVerticalUI VerticalAlignment, const struct FVector2D& Padding, const struct FVector2D& OverlayScale, bool bRetainScreenProjectionFromWorld, const struct FVector& ScreenProjectionWorldPosition, const struct FVector2D& ScreenProjectionPositionOffset);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_LeaderboardWidget
	 * Size -> 0x0050 (FullSize[0x0568] - InheritedSize[0x0518])
	 */
	class UUI_LeaderboardWidget : public UPrimalUI
	{
	public:
		class FName                                                LeaderboardHeaderContainerName;                          // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LeaderboardRowContainerName;                             // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CloseButtonName;                                         // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TableWidth;                                              // 0x0530(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VBUS[0x4];                                   // 0x0534(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPanelWidget*                                        HeaderContainer;                                         // 0x0538(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class ULeaderboardRowWidget*                               HeaderRowWidget;                                         // 0x0540(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UButton*                                             CloseButton;                                             // 0x0548(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UVerticalBox*                                        RowContainer;                                            // 0x0550(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<class ULeaderboardRowWidget*>                       RowWidgets;                                              // 0x0558(0x0010) ZeroConstructor, Transient

	public:
		void SetRows(class UClass* LeaderboardRowWidget, const struct FLeaderboardDisplayRow& HeaderRow, TArray<struct FLeaderboardDisplayRow> Rows);
		void SetLeaderboardWidgetVisible(bool bIsVisible);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_ListCharacterData
	 * Size -> 0x02E8 (FullSize[0x0800] - InheritedSize[0x0518])
	 */
	class UUI_ListCharacterData : public UPrimalUI
	{
	public:
		class FName                                                DownloadButtonName;                                      // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CancelButtonName;                                        // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MyScrollBoxName;                                         // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CharacterStatsPanelName;                                 // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              CharacterSlotButtonTemplate;                             // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CharacterLabelName;                                      // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ExperienceLabelName;                                     // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ExperienceBarName;                                       // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CharacterHypoThermalInsulationLabelName;                 // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CharacterHyperThermalInsulationLabelName;                // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                StatsLabelNames[0xC];                                    // 0x0568(0x0060) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SteamInventoryStatusUITemplate;                          // 0x05C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AJZR[0x230];                                 // 0x05D0(0x0230) MISSED OFFSET (PADDING)

	public:
		void OnArkCharacterPlayerDataChosen__DelegateSignature(TArray<unsigned char> ChoosenPlayerDataBytes);
		void CharacterSlotButtonSelected(class UWidget* theWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_ListSessions
	 * Size -> 0x0638 (FullSize[0x0B50] - InheritedSize[0x0518])
	 */
	class UUI_ListSessions : public UPrimalUI
	{
	public:
		struct FSlateColor                                         SearchingColor;                                          // 0x0518(0x0028) Edit, DisableEditOnInstance
		struct FSlateColor                                         SearchingCompleteColor;                                  // 0x0540(0x0028) Edit, DisableEditOnInstance
		class FName                                                JoinButtonName;                                          // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RefreshButtonName;                                       // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                FavoritesButtonName;                                     // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                FavoritesButtonLabelName;                                // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CancelButtonName;                                        // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RentYourOwnServerButtonName;                             // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MyScrollBoxName;                                         // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SearchingTextBlockName;                                  // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SessionsPanelName;                                       // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                FindSessionTextFieldName;                                // 0x05B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PasswordAcceptButtonName;                                // 0x05B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DarkBGName;                                              // 0x05C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PasswordCancelButtonName;                                // 0x05C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PasswordTextFieldName;                                   // 0x05D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PasswordPanelName;                                       // 0x05D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ErrorBlockName;                                          // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ServersCountBlockName;                                   // 0x05E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ShowProtectedSessionsCheckBoxName;                       // 0x05F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ShowAvailableServersCheckBoxName;                        // 0x05F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ShowServersTypeComboBoxName;                             // 0x0600(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                OfficialStatusLabelName;                                 // 0x0608(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SlotButtonTemplate;                                      // 0x0610(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxPasswordChars;                                        // 0x0618(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DQ4O[0x4];                                   // 0x061C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateBrush                                         AscendingIcon;                                           // 0x0620(0x0078) Edit, DisableEditOnInstance
		struct FSlateBrush                                         DescendingIcon;                                          // 0x0698(0x0078) Edit, DisableEditOnInstance
		unsigned char                                              UnknownData_MCQN[0x430];                                 // 0x0710(0x0430) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ChineseLaunchURL;                                        // 0x0B40(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected

	public:
		void SlotButtonSelected(class UWidget* theWidget);
		void RefreshSlotButtons();
		void OnTextCommitted(const class FText& Text, ETextCommit CommitMethod);
		void OnTextChanged(const class FText& Text);
		void OnSortComboBoxSelectionChanged(const class FString& SelectedItem, ESelectInfo SelectionType);
		void OnServersFilterComboBoxSelectionChanged(const class FString& SelectedItem, ESelectInfo SelectionType);
		void OnMapComboBoxSelectionChanged(const class FString& SelectedItem, ESelectInfo SelectionType);
		void OnGameModeComboBoxSelectionChanged(const class FString& SelectedItem, ESelectInfo SelectionType);
		void OnCheckBoxChecked(bool InNewState);
		void OnAutoFavoriteChecked(bool InNewState);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_ClusterServersListSessions
	 * Size -> 0x0018 (FullSize[0x0B68] - InheritedSize[0x0B50])
	 */
	class UUI_ClusterServersListSessions : public UUI_ListSessions
	{
	public:
		unsigned char                                              UnknownData_RMLP[0x8];                                   // 0x0B50(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AShooterGameSession*                                 ClustersServersListGameSession;                          // 0x0B58(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_W58P[0x8];                                   // 0x0B60(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_ListTamedDinos
	 * Size -> 0x01C0 (FullSize[0x06D8] - InheritedSize[0x0518])
	 */
	class UUI_ListTamedDinos : public UPrimalUI
	{
	public:
		class FName                                                DownloadButtonName;                                      // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                UploadButtonName;                                        // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CancelButtonName;                                        // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MyScrollBoxName;                                         // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              DinoSlotButtonTemplate;                                  // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CharacterStatsPanelName;                                 // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CharacterLabelName;                                      // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ExperienceLabelName;                                     // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ExperienceBarName;                                       // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CharacterHypoThermalInsulationLabelName;                 // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CharacterHyperThermalInsulationLabelName;                // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                StatsLabelNames[0xC];                                    // 0x0570(0x0060) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SY1P[0x108];                                 // 0x05D0(0x0108) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_MainMenu
	 * Size -> 0x01D8 (FullSize[0x06F0] - InheritedSize[0x0518])
	 */
	class UUI_MainMenu : public UPrimalUI
	{
	public:
		class FString                                              OptionsButtonName;                                       // 0x0518(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              HostButtonName;                                          // 0x0528(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              JoinButtonName;                                          // 0x0538(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              ExitButtonName;                                          // 0x0548(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              ListSessionsName;                                        // 0x0558(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              HelpButtonName;                                          // 0x0568(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              NewsLabelName;                                           // 0x0578(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                ConnectingPanelName;                                     // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              EditableTextJoinName;                                    // 0x0590(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                EditableTextJoinPanelName;                               // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ConnectingDialogPanelName;                               // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ListSessionsUITemplate;                                  // 0x05B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              OptionsMenuUITemplate;                                   // 0x05B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              OptionsMenuUITemplate_UWP;                               // 0x05C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              HostSessoinUITemplate;                                   // 0x05C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              HelpPageUITemplate;                                      // 0x05D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SlotButtonTemplate;                                      // 0x05D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              NotifClass;                                              // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              WelcomeClass;                                            // 0x05E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DAKS[0x20];                                  // 0x05F0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UScrollBox*                                          TotalConversionsScrollBox;                               // 0x0610(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class UDataListEntryButton_MainMenu*>               TotalConversionsEntryWidgets;                            // 0x0618(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_3XJA[0xC8];                                  // 0x0628(0x00C8) MISSED OFFSET (PADDING)

	public:
		void TotalConversionSelected(class UWidget* theWidget);
		void HandleDLCInstalledEvent();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_MapMarkersEntry
	 * Size -> 0x01A8 (FullSize[0x06C0] - InheritedSize[0x0518])
	 */
	class UUI_MapMarkersEntry : public UPrimalUI
	{
	public:
		class UClass*                                              SlotButtonTemplate;                                      // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TabBgSwitcherName;                                       // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AddEnabledEffectName;                                    // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RemoveEnabledEffectName;                                 // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CloseButtonName;                                         // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AcceptButtonName;                                        // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TitleLabelName;                                          // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CoordOneLabelName;                                       // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CoordTwoLabelName;                                       // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MarkerNameLabelName;                                     // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MarkerNameTextBoxName;                                   // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CoordOneTextBoxName;                                     // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CoordTwoTextBoxName;                                     // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ErrorBlockName;                                          // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RemoveCloseButtonName;                                   // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RemoveAcceptButtonName;                                  // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RemoveMarkersListName;                                   // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RemoveMarkersPanelName;                                  // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AddMarkersPanelName;                                     // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                GoToAddButtonName;                                       // 0x05B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                GoToRemoveButtonName;                                    // 0x05B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxOpenTime;                                             // 0x05C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextActiveColor;                                 // 0x05C4(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SwitcherTextInactiveColor;                               // 0x05D4(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0D5E[0x4];                                   // 0x05E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FLinearColor>                                ColorSetMarkers;                                         // 0x05E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_POJR[0xC8];                                  // 0x05F8(0x00C8) MISSED OFFSET (PADDING)

	public:
		void OnTextCommitted(const class FText& Text, ETextCommit CommitMethod);
		void OnTextChanged(const class FText& Text);
		void OnColorSliderValueChanged(float SliderValue);
		void MarkerButtonSelected(class UWidget* theWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_MultiUse
	 * Size -> 0x0048 (FullSize[0x0560] - InheritedSize[0x0518])
	 */
	class UUI_MultiUse : public UPrimalUI
	{
	public:
		class FName                                                MyScrollBoxName;                                         // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ActorDescriptionLabelName;                               // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ButtonEntryWidgetTemplate;                               // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QEQ0[0x30];                                  // 0x0530(0x0030) MISSED OFFSET (PADDING)

	public:
		void ClickedEntry(class UWidget* clickedWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_Notification
	 * Size -> 0x0058 (FullSize[0x0570] - InheritedSize[0x0518])
	 */
	class UUI_Notification : public UPrimalUI
	{
	public:
		class FName                                                TitleLabelName;                                          // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MessageLabelName;                                        // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                OkButtonName;                                            // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                BoxCanvasPanelName;                                      // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bReturnToMainMenuOnClose;                                // 0x0538(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_R6TU[0x37];                                  // 0x0539(0x0037) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_PaintingsList
	 * Size -> 0x0180 (FullSize[0x0698] - InheritedSize[0x0518])
	 */
	class UUI_PaintingsList : public UPrimalUI
	{
	public:
		class FName                                                PaintingListName;                                        // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SelectButtonName;                                        // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CloseButtonName;                                         // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                FailCloseButtonName;                                     // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LoadingLabelName;                                        // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LoadingCanvasName;                                       // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MissingTextName;                                         // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                NeededTextName;                                          // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RenamePaintingName;                                      // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              SlotButtonTemplate;                                      // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ResourceEntryTemplate;                                   // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_613J[0x108];                                 // 0x0570(0x0108) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPaintingTexture*                                    Preview;                                                 // 0x0678(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZHYM[0x18];                                  // 0x0680(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_PauseMenu
	 * Size -> 0x0180 (FullSize[0x0698] - InheritedSize[0x0518])
	 */
	class UUI_PauseMenu : public UPrimalUI
	{
	public:
		class FString                                              CloseButtonName;                                         // 0x0518(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              QuitButtonName;                                          // 0x0528(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              QuitButtonTextBlockName;                                 // 0x0538(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              TestWidgetName;                                          // 0x0548(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                InventoryButtonName;                                     // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TribeManagerButtonName;                                  // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                OptionsButtonName;                                       // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              InviteFriendsButtonName;                                 // 0x0570(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                ServerPingTextBlockName;                                 // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              HelpButtonName;                                          // 0x0588(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              OptionsMenuUITemplate;                                   // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              OptionsMenuUITemplate_UWP;                               // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AEB5[0xF0];                                  // 0x05A8(0x00F0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_PinEntry
	 * Size -> 0x00C0 (FullSize[0x05D8] - InheritedSize[0x0518])
	 */
	class UUI_PinEntry : public UPrimalUI
	{
	public:
		class FName                                                CloseButtonName;                                         // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                UseLastPinButtonName;                                    // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                UseLastPinButtonLabelName;                               // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ToggleShowLastPinButtonName;                             // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ToggleShowLastPinButtonLabelName;                        // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PinLabelName;                                            // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TitleLabelName;                                          // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class FName>                                        PinButtonsNames;                                         // 0x0550(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_SEET[0x78];                                  // 0x0560(0x0078) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_PrimalTest
	 * Size -> 0x0020 (FullSize[0x0538] - InheritedSize[0x0518])
	 */
	class UUI_PrimalTest : public UPrimalUI
	{
	public:
		class FString                                              VerticalBoxName;                                         // 0x0518(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              ChildWidgetTemplate;                                     // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NDRK[0x8];                                   // 0x0530(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_ProceduralSettings
	 * Size -> 0x0B00 (FullSize[0x1018] - InheritedSize[0x0518])
	 */
	class UUI_ProceduralSettings : public UPrimalUI
	{
	public:
		class FName                                                CancelButtonName;                                        // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HostButtonName;                                          // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ResetButtonName;                                         // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RandomizeButtonName;                                     // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LoadFavoriteButtonName;                                  // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SaveFavoriteButtonName;                                  // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                PresetsComboBoxName;                                     // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                FavoriteComboBoxName;                                    // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ArkNameTextBoxName;                                      // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MapSeedTextBoxName;                                      // 0x0560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LandscapeRadiusTextBoxName;                              // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                WaterFrequencyTextBoxName;                               // 0x0570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MountainFrequencyTextBoxName;                            // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MountainSlopeTextBoxName;                                // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MountainHeightTextBoxName;                               // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TurbulencePowerTextBoxName;                              // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ShoreSlopeTextBoxName;                                   // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                WaterLevelTextBoxName;                                   // 0x05A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                GrassDensityTextBoxName;                                 // 0x05A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                JungleGrassDensityTextBoxName;                           // 0x05B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                OceanFloorLevelTextBoxName;                              // 0x05B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SnowBiomeSizeTextBoxName;                                // 0x05C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RedwoodBiomeSizeTextBoxName;                             // 0x05C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MountainBiomeStartTextBoxName;                           // 0x05D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MountainTreeDensityTextBoxName;                          // 0x05D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                JungleBiomeStartTextBoxName;                             // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                IslandBorderCurveTextBoxName;                            // 0x05E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MaxSawnHeightTextBoxName;                                // 0x05F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                MountainGrassDensityTextBoxName;                         // 0x05F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SnowGrassDensityTextBoxName;                             // 0x0600(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SnowMountainGrassDensityTextBoxName;                     // 0x0608(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SnowBiomeLocationXTextBoxName;                           // 0x0610(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SnowBiomeLocationYTextBoxName;                           // 0x0618(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RedwoodBiomeLocationXTextBoxName;                        // 0x0620(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RedwoodBiomeLocationYTextBoxName;                        // 0x0628(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TerrainScaleXTextBoxName;                                // 0x0630(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TerrainScaleYTextBoxName;                                // 0x0638(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TerrainScaleZTextBoxName;                                // 0x0640(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                North1StartXTextBoxName;                                 // 0x0648(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                North1StartYTextBoxName;                                 // 0x0650(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                North1EndXTextBoxName;                                   // 0x0658(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                North1EndYTextBoxName;                                   // 0x0660(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                North2StartXTextBoxName;                                 // 0x0668(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                North2StartYTextBoxName;                                 // 0x0670(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                North2EndXTextBoxName;                                   // 0x0678(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                North2EndYTextBoxName;                                   // 0x0680(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                North3StartXTextBoxName;                                 // 0x0688(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                North3StartYTextBoxName;                                 // 0x0690(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                North3EndXTextBoxName;                                   // 0x0698(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                North3EndYTextBoxName;                                   // 0x06A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                South1StartXTextBoxName;                                 // 0x06A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                South1StartYTextBoxName;                                 // 0x06B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                South1EndXTextBoxName;                                   // 0x06B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                South1EndYTextBoxName;                                   // 0x06C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                South2StartXTextBoxName;                                 // 0x06C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                South2StartYTextBoxName;                                 // 0x06D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                South2EndXTextBoxName;                                   // 0x06D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                South2EndYTextBoxName;                                   // 0x06E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                South3StartXTextBoxName;                                 // 0x06E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                South3StartYTextBoxName;                                 // 0x06F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                South3EndXTextBoxName;                                   // 0x06F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                South3EndYTextBoxName;                                   // 0x0700(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                East1StartXTextBoxName;                                  // 0x0708(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                East1StartYTextBoxName;                                  // 0x0710(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                East1EndXTextBoxName;                                    // 0x0718(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                East1EndYTextBoxName;                                    // 0x0720(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                East2StartXTextBoxName;                                  // 0x0728(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                East2StartYTextBoxName;                                  // 0x0730(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                East2EndXTextBoxName;                                    // 0x0738(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                East2EndYTextBoxName;                                    // 0x0740(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                East3StartXTextBoxName;                                  // 0x0748(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                East3StartYTextBoxName;                                  // 0x0750(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                East3EndXTextBoxName;                                    // 0x0758(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                East3EndYTextBoxName;                                    // 0x0760(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                West1StartXTextBoxName;                                  // 0x0768(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                West1StartYTextBoxName;                                  // 0x0770(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                West1EndXTextBoxName;                                    // 0x0778(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                West1EndYTextBoxName;                                    // 0x0780(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                West2StartXTextBoxName;                                  // 0x0788(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                West2StartYTextBoxName;                                  // 0x0790(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                West2EndXTextBoxName;                                    // 0x0798(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                West2EndYTextBoxName;                                    // 0x07A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                West3StartXTextBoxName;                                  // 0x07A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                West3StartYTextBoxName;                                  // 0x07B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                West3EndXTextBoxName;                                    // 0x07B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                West3EndYTextBoxName;                                    // 0x07C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UIMY[0x850];                                 // 0x07C8(0x0850) MISSED OFFSET (PADDING)

	public:
		void OnTextCommitted(const class FText& Text, ETextCommit CommitMethod);
		void OnPresetSelectionChanged(const class FString& SelectedItem, ESelectInfo SelectionType);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_SavePainting
	 * Size -> 0x0058 (FullSize[0x0570] - InheritedSize[0x0518])
	 */
	class UUI_SavePainting : public UPrimalUI
	{
	public:
		class FName                                                CloseButtonName;                                         // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SaveButtonName;                                          // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                FileNameTextBoxName;                                     // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ErrorTextBoxName;                                        // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_R3W7[0x38];                                  // 0x0538(0x0038) MISSED OFFSET (PADDING)

	public:
		void HandleFilterStringTextCommitted(const class FText& NewText, ETextCommit CommitMethod);
		void HandleFilterStringTextChanged(const class FText& NewText);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_SavingOverlay
	 * Size -> 0x0008 (FullSize[0x0520] - InheritedSize[0x0518])
	 */
	class UUI_SavingOverlay : public UPrimalUI
	{
	public:
		unsigned char                                              UnknownData_GW55[0x8];                                   // 0x0518(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_ServerBroadcastMessage
	 * Size -> 0x0058 (FullSize[0x0570] - InheritedSize[0x0518])
	 */
	class UUI_ServerBroadcastMessage : public UPrimalUI
	{
	public:
		class FString                                              MessageTextBlockName;                                    // 0x0518(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		struct FSlateFontInfo                                      BoldFont;                                                // 0x0528(0x0020) Edit, DisableEditOnInstance
		struct FSlateFontInfo                                      RegularFont;                                             // 0x0548(0x0020) Edit, DisableEditOnInstance
		unsigned char                                              UnknownData_K1OZ[0x8];                                   // 0x0568(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_SessionSortArrow
	 * Size -> 0x0038 (FullSize[0x0550] - InheritedSize[0x0518])
	 */
	class UUI_SessionSortArrow : public UPrimalUI
	{
	public:
		unsigned char                                              UnknownData_GMDZ[0x8];                                   // 0x0518(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ImageName;                                               // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          UpImage;                                                 // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          DownImage;                                               // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          EmptyImage;                                              // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YRQH[0x10];                                  // 0x0540(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_SpawnPoint
	 * Size -> 0x0058 (FullSize[0x0570] - InheritedSize[0x0518])
	 */
	class UUI_SpawnPoint : public UPrimalUI
	{
	public:
		unsigned char                                              UnknownData_0WKF[0x14];                                  // 0x0518(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SpawnPointImageName;                                     // 0x052C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2VYC[0x4];                                   // 0x0534(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          SpawnPointImageNormal;                                   // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          SpawnPointImageDisabled;                                 // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          SpawnPointImageSelected;                                 // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          CurrentLocation;                                         // 0x0550(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          MarkerTexture;                                           // 0x0558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WLUT[0x10];                                  // 0x0560(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_SteamInventoryStatusPopup
	 * Size -> 0x0090 (FullSize[0x05A8] - InheritedSize[0x0518])
	 */
	class UUI_SteamInventoryStatusPopup : public UPrimalUI
	{
	public:
		class FName                                                CloseButtonName;                                         // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TitleLabelName;                                          // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DownloadMessageLabelName;                                // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                UploadMessageLabelName;                                  // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              TitleText;                                               // 0x0538(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              MessageText;                                             // 0x0548(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		int32_t                                                    NumberOfDots;                                            // 0x0558(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TimeoutInterval;                                         // 0x055C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DotsUpdateInterval;                                      // 0x0560(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7Y0T[0x44];                                  // 0x0564(0x0044) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_Subtitles
	 * Size -> 0x00A0 (FullSize[0x05B8] - InheritedSize[0x0518])
	 */
	class UUI_Subtitles : public UPrimalUI
	{
	public:
		class FName                                                SubtitlesTextBoxName;                                    // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DialogueTextBoxName;                                     // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DialogueIconImageName;                                   // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FScriptMulticastDelegate                             OnProcessDynamicMaterialForDialogueIcon;                 // 0x0530(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		TArray<struct FSubtitleCue>                                SoundWaveSubtitles;                                      // 0x0540(0x0010) Edit, BlueprintVisible, ZeroConstructor
		unsigned char                                              UnknownData_8TVX[0x18];                                  // 0x0550(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           CurrentlyPlayingSound;                                   // 0x0568(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class USoundWave*                                          CurrentlyPlayingSoundWave;                               // 0x0570(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XV9Y[0x40];                                  // 0x0578(0x0040) MISSED OFFSET (PADDING)

	public:
		void SetSubtitleFromText(const class FText& SubtitleTextLine);
		void SetSubtitleFromStringWithDurationAndIcon(const class FString& SubtitleTextLine, float AutoHideAfterSeconds, class UMaterialInterface* DialogueIcon);
		void SetSubtitleFromString(const class FString& SubtitleTextLine);
		void SetSubtitleFromSoundWave(class USoundWave* SoundWave, float AutoHideAfterSeconds, class UMaterialInterface* DialogueIcon);
		void SetSubtitleFromSoundCue(class USoundCue* SoundCueWithSubtitles, float AutoHideAfterSeconds, class UMaterialInterface* DialogueIcon);
		void SetIconMaterialParams(TArray<struct FNameScalarPair> scalarParams, TArray<struct FNameColorPair> colorParams, class UTexture2D* CurrentAT);
		void ProcessDynamicMaterialForDialogueIconDelegate__DelegateSignature(const class FName& MaterialFName, class UMaterialInstanceDynamic* LoadedMaterial);
		void OnShowSubtitles();
		void OnHideSubtitles();
		bool IsIconVisible();
		bool IsCurrentIconEqualToGivenIcon(class UMaterialInterface* DialogueIcon);
		void HideSubtitles();
		void ForceSetSubtitlesManualTime(float ManualGlobalStartTime);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_TextEntry
	 * Size -> 0x0098 (FullSize[0x05B0] - InheritedSize[0x0518])
	 */
	class UUI_TextEntry : public UPrimalUI
	{
	public:
		class FName                                                CloseButtonName;                                         // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                AcceptButtonName;                                        // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TitleLabelName;                                          // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                EditTextBoxName;                                         // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CheckBoxName;                                            // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CheckBoxLabelName;                                       // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxOpenTime;                                             // 0x0548(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_W2GU[0x54];                                  // 0x054C(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bNumericValue;                                           // 0x05A0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		bool                                                       bLimitInput;                                             // 0x05A1(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_RFKV[0x2];                                   // 0x05A2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    LimitCount;                                              // 0x05A4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		bool                                                       bCanCommitEmptyString;                                   // 0x05A8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		bool                                                       bNumericAndChar;                                         // 0x05A9(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_W4PM[0x6];                                   // 0x05AA(0x0006) MISSED OFFSET (PADDING)

	public:
		void OnTextCommitted(const class FText& Text, ETextCommit CommitMethod);
		void OnTextChanged(const class FText& Text);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_TribeWarEntry
	 * Size -> 0x0050 (FullSize[0x0568] - InheritedSize[0x0518])
	 */
	class UUI_TribeWarEntry : public UPrimalUI
	{
	public:
		unsigned char                                              UnknownData_44EL[0x50];                                  // 0x0518(0x0050) MISSED OFFSET (PADDING)

	public:
		void OnTextCommitted(const class FText& Text, ETextCommit CommitMethod);
		void OnTextChanged(const class FText& Text);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_Tutorial
	 * Size -> 0x0030 (FullSize[0x0548] - InheritedSize[0x0518])
	 */
	class UUI_Tutorial : public UPrimalUI
	{
	public:
		class FName                                                TutorialTitleLabelName;                                  // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TutorialTextLabelName;                                   // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TutorialImageName;                                       // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_S1H5[0x18];                                  // 0x0530(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_Welcome
	 * Size -> 0x0058 (FullSize[0x0570] - InheritedSize[0x0518])
	 */
	class UUI_Welcome : public UPrimalUI
	{
	public:
		class FName                                                NicknameLabelName;                                       // 0x0518(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LoadingLabelName;                                        // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                OkButtonName;                                            // 0x0528(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MainMenuTemplate;                                        // 0x0530(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              NotifClass;                                              // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YVFE[0x30];                                  // 0x0540(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_XBoxFooter
	 * Size -> 0x0048 (FullSize[0x0560] - InheritedSize[0x0518])
	 */
	class UUI_XBoxFooter : public UPrimalUI
	{
	public:
		unsigned char                                              UnknownData_KGRS[0x48];                                  // 0x0518(0x0048) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalWheeledVehicleDustType
	 * Size -> 0x0090 (FullSize[0x00B8] - InheritedSize[0x0028])
	 */
	class UPrimalWheeledVehicleDustType : public UDataAsset
	{
	public:
		class UParticleSystem*                                     DefaultFX;                                               // 0x0028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     ConcreteFX;                                              // 0x0030(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     DirtFX;                                                  // 0x0038(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     WaterFX;                                                 // 0x0040(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     MetalFX;                                                 // 0x0048(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     WoodFX;                                                  // 0x0050(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     GrassFX;                                                 // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     FleshFX;                                                 // 0x0060(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     LeavesFX;                                                // 0x0068(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     RockFX;                                                  // 0x0070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     SandFX;                                                  // 0x0078(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     SnowFX;                                                  // 0x0080(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DefaultMinSpeed;                                         // 0x0088(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ConcreteMinSpeed;                                        // 0x008C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DirtMinSpeed;                                            // 0x0090(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WaterMinSpeed;                                           // 0x0094(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MetalMinSpeed;                                           // 0x0098(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WoodMinSpeed;                                            // 0x009C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GrassMinSpeed;                                           // 0x00A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FleshMinSpeed;                                           // 0x00A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LeavesMinSpeed;                                          // 0x00A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RockMinSpeed;                                            // 0x00AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SandMinSpeed;                                            // 0x00B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SnowMinSpeed;                                            // 0x00B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalWorldBuffCustomImplement
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UPrimalWorldBuffCustomImplement : public UObject
	{
	public:
		class FName                                                WorldBuffID;                                             // 0x0028(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		void UpdateBuffCustomPersistantData();
		void Tick(float DeltaSeconds);
		void PreDeconstruction();
		void PostConstruction();
		class UWorld* GetWorld();
		class UObject* GetOwner();
		void BuffTimerRefreshed();
		void BuffStackIncreased(int32_t newStackCount);
		void BuffStackDecrease(int32_t newStackCount);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalWorldBuffData
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UPrimalWorldBuffData : public UObject
	{
	public:
		TArray<struct FWorldBuffDefinition>                        WorldBuffDefinitions;                                    // 0x0028(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		TArray<class UPrimalWorldBuffCustomImplement*>             ConstructedWorldBuffImplements;                          // 0x0038(0x0010) ZeroConstructor, Transient
		unsigned char                                              UnknownData_WTDE[0x8];                                   // 0x0048(0x0008) MISSED OFFSET (PADDING)

	public:
		void STATIC_UnsuspendWorldBuffs();
		void STATIC_SuspendWorldBuffs();
		void STATIC_RemoveWorldBuff(class UObject* WorldContextObject, const class FName& WorldBuffIdentifier);
		TArray<struct FWorldBuffDefinition> STATIC_GetWorldBuffSet(const class FName& WorldBuffSetName);
		bool STATIC_GetWorldBuffDefinitionByName(const class FName& WorldBuffIdentifier, struct FWorldBuffDefinition* outWorldBuffDefinition);
		class UPrimalWorldBuffData* STATIC_GetWorldBuffData();
		bool STATIC_CanActivateWorldBuff(class UObject* WorldContextObject, const class FName& WorldBuffIdentifier, TArray<class FName>* OutWorldBuffsToBeReplaced);
		void STATIC_AddWorldBuff(class UObject* WorldContextObject, const class FName& WorldBuffIdentifier, int32_t StacksToGive);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalWorldModifier
	 * Size -> 0x0078 (FullSize[0x04E8] - InheritedSize[0x0470])
	 */
	class APrimalWorldModifier : public AActor
	{
	public:
		bool                                                       bUseMapExclusionListAsExclusiveList;                     // 0x0470(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EG0U[0x7];                                   // 0x0471(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      MapExclusionList;                                        // 0x0478(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		TArray<class FName>                                        PriorityTags;                                            // 0x0488(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		TArray<class AInstancedFoliageActor*>                      ReskinnedFoliageTrackingList;                            // 0x0498(0x0010) BlueprintVisible, ZeroConstructor
		TArray<struct FFoliageReskinDefinition>                    FoliageReskinList;                                       // 0x04A8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		TArray<class AStaticMeshActor*>                            ReskinnedLevelStaticMeshTrackingList;                    // 0x04B8(0x0010) BlueprintVisible, ZeroConstructor
		TArray<struct FSublevelOverrideGroup>                      SublevelOverrideGroups;                                  // 0x04C8(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		class FScriptMulticastDelegate                             OnFoliageSkinned;                                        // 0x04D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable

	public:
		void TrySublevelSwaps();
		void TryStaticMeshActorReskin(class AStaticMeshActor* ForStaticMeshActor, struct FSublevelOverrideGroup* CurrentSublevelOverrideGroup);
		void TryFoliageReskin(class AInstancedFoliageActor* ForFoliageActor);
		void RescanForMapStaticMeshes();
		void RescanForFoliage();
		void NotifyOnFoliageSkinned__DelegateSignature(class UHierarchicalInstancedStaticMeshComponent* FoliageInstance);
		bool IsAllowedOnCurrentMap();
		bool HasPriority();
		void GetCurrentSublevelOverrideGroup(struct FSublevelOverrideGroup* outSublevelOverrideGroup);
		void DoRescanForSublevelLoaded();
		void BPSkinFoliage(class UHierarchicalInstancedStaticMeshComponent* FoliageInstance);
		void BPPreFoliageScan();
		void BPPostInitializationHasPriority();
		void BPPostFoliageScan();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalWorldSettings
	 * Size -> 0x0548 (FullSize[0x1248] - InheritedSize[0x0D00])
	 */
	class APrimalWorldSettings : public AWorldSettings
	{
	public:
		bool                                                       bMapSupportsMissions;                                    // 0x0D00(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7YJO[0x7];                                   // 0x0D01(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              DefaultCameraPositionActor;                              // 0x0D08(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UObject*>                                     DynamicResourceRefs;                                     // 0x0D10(0x0010) ZeroConstructor, Transient
		bool                                                       bEditorEnableNPCSpawners;                                // 0x0D20(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bEditorForceDisableNPCSpawners;                          // 0x0D21(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPreventGlobalNonEventSpawnOverrides;                    // 0x0D22(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KMV5[0x1];                                   // 0x0D23(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                PlacingStructureToggleMeshTagVisibility;                 // 0x0D24(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bGenerateTerrain;                                        // 0x0D2C(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceSpawnAnimationTest;                                // 0x0D2D(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bOverrideLongitudeAndLatitude;                           // 0x0D2E(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1OCP[0x1];                                   // 0x0D2F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LongitudeScale;                                          // 0x0D30(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RegularWildDinoResistanceVersusTamesMultiplier;          // 0x0D34(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RegularWildDinoDamageVersusTamesMultiplier;              // 0x0D38(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RegularWildDinoXPMultiplier;                             // 0x0D3C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LatitudeScale;                                           // 0x0D40(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LongitudeOrigin;                                         // 0x0D44(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LatitudeOrigin;                                          // 0x0D48(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinKillX;                                                // 0x0D4C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxKillX;                                                // 0x0D50(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinKillY;                                                // 0x0D54(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxKillY;                                                // 0x0D58(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxKillZ;                                                // 0x0D5C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxUnderWorldTraceRangeZ;                                // 0x0D60(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IDA5[0x4];                                   // 0x0D64(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          OverrideWeaponMapTextureEmpty;                           // 0x0D68(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          OverrideWeaponMapTextureFilled;                          // 0x0D70(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          OverrideUIMapTextureEmpty;                               // 0x0D78(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          OverrideUIMapTextureFilled;                              // 0x0D80(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          OverrideUIMapTextureSmall;                               // 0x0D88(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class AActor*                                              LevelBlueprintContainerActor;                            // 0x0D90(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              PrimalGameDataOverride;                                  // 0x0D98(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class FString                                              ForceLoadMapName;                                        // 0x0DA0(0x0010) Edit, ZeroConstructor
		TArray<class FString>                                      OverridePlayerSpawnRegions;                              // 0x0DB0(0x0010) Edit, ZeroConstructor
		TArray<int32_t>                                            OverridePlayerSpawnRegionDifficulties;                   // 0x0DC0(0x0010) Edit, ZeroConstructor
		TArray<unsigned char>                                      OverridePlayerSpawnRegionsHideInSpawnUI;                 // 0x0DD0(0x0010) Edit, ZeroConstructor
		TArray<class UClass*>                                      LevelUseNPCClasses;                                      // 0x0DE0(0x0010) Edit, ZeroConstructor
		TArray<struct FClassRemappingWeight>                       NPCRandomSpawnClassWeights;                              // 0x0DF0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		TArray<struct FClassRemappingWeight>                       SinglePlayerNPCRandomSpawnClassWeights;                  // 0x0E00(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		struct FVector2D                                           SpawnLevelBoundsMax;                                     // 0x0E10(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           SpawnLevelBoundsMin;                                     // 0x0E18(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AutoSpectatorNamesMinZ;                                  // 0x0E20(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseSpawnLevelBounds;                                    // 0x0E24(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_W0MY[0x3];                                   // 0x0E25(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      CachedPersistentObjectClasses;                           // 0x0E28(0x0010) ZeroConstructor
		float                                                      DinosLerpToMaxRandomBaseLevel;                           // 0x0E38(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GRJS[0x4];                                   // 0x0E3C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            DefaultSpawnPointRandomIndices;                          // 0x0E40(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		class UAnimMontage*                                        OverrideFirstSpawnAnim;                                  // 0x0E50(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        OverrideSpawnAnim;                                       // 0x0E58(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GammaOffset;                                             // 0x0E60(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bWaterDinosUseFlightBlocking;                            // 0x0E64(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZTI7[0x3];                                   // 0x0E65(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GlobalHarvestHealthMultiplier;                           // 0x0E68(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GlobalHarvestAmountMultiplier;                           // 0x0E6C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bFlyersStructurePreventionDismountingAnywhere;           // 0x0E70(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bFlyersStructurePreventionDismountingUnderTerrainOnly;   // 0x0E71(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GSVB[0x2];                                   // 0x0E72(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OverrideDifficultyMax;                                   // 0x0E74(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FItemMultiplier>                             GlobalSpoilingTimeMultipliers;                           // 0x0E78(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		float                                                      GlobalStatusAdjustmentRateMultipliersPositive[0xC];      // 0x0E88(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GlobalStatusAdjustmentRateMultipliersNegative[0xC];      // 0x0EB8(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    ValidEngramGroupsBitMask;                                // 0x0EE8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_C2HV[0x4];                                   // 0x0EEC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FInventoryComponentDefaultItemsAppend>       InventoryComponentAppends;                               // 0x0EF0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		TArray<struct FInventoryComponentDefaultItemsAppend>       InventoryComponentAppendsNonDedicated;                   // 0x0F00(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		float                                                      DayCycleSpeedScale;                                      // 0x0F10(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DayTimeSpeedScale;                                       // 0x0F14(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NightTimeSpeedScale;                                     // 0x0F18(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NegativeHyperthermalInsulationMultiplier;                // 0x0F1C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PositiveHyperthermalInsulationMultiplier;                // 0x0F20(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NegativeHypothermalInsulationMultiplier;                 // 0x0F24(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PositiveHypothermalInsulationMultiplier;                 // 0x0F28(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_79ZD[0x4];                                   // 0x0F2C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      GlobalCuddleFoodList;                                    // 0x0F30(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		float                                                      CarnivoreNaturalTargetingRangeMultiplier;                // 0x0F40(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HerbivoreNaturalTargetingRangeMultiplier;                // 0x0F44(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          OverrideCombatMusicDay;                                  // 0x0F48(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          OverrideCombatMusicNight;                                // 0x0F50(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          OverrideCombatMusicDay_Heavy;                            // 0x0F58(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          OverrideCombatMusicNight_Heavy;                          // 0x0F60(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          SplitscreenUnderwaterSound;                              // 0x0F68(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UClass*>                                      HarvestComponentHealthScaleParents;                      // 0x0F70(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		TArray<float>                                              HarvestComponentHealthScaleParentsValue;                 // 0x0F80(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      HarvestComponentHealthScaleExactMatch;                   // 0x0F90(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		TArray<float>                                              HarvestComponentHealthScaleExactMatchValue;              // 0x0FA0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		class USoundBase*                                          Override_Sound_ReconnectToCharacter;                     // 0x0FB0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    RequiresID;                                              // 0x0FB8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIgnoreBiomeWind;                                        // 0x0FBC(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CEIQ[0x3];                                   // 0x0FBD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  Override_PostProcess_ColorLUT;                           // 0x0FC0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              AutoGenerateTerrainActorTemplate;                        // 0x0FC8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DefaultWaterLineStartZ;                                  // 0x0FD0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DefaultDeepWaterStartZ;                                  // 0x0FD4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaximumPlayerFlyZ;                                       // 0x0FD8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_S8CD[0x4];                                   // 0x0FDC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     ExtraReferences;                                         // 0x0FE0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      AllowDownloadDinoClasses;                                // 0x0FF0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		class FString                                              DefaultBiomeName;                                        // 0x1000(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      PreventStructureClasses;                                 // 0x1010(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		float                                                      MaxFallSpeedMultiplier;                                  // 0x1020(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableStructureObstructedByWorldGeometryCheck;         // 0x1024(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceEnableTurretLimit;                                 // 0x1025(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseMissions;                                            // 0x1026(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseMissionsMetaData;                                    // 0x1027(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    LoadForceRespawnDinosVersion;                            // 0x1028(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FirstSpawnNotTargetableForTime;                          // 0x102C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIgnoreInMeshCheckingUnderwater;                         // 0x1030(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowRidingFliers;                                      // 0x1031(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceDinoDrawHUD;                                       // 0x1032(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableFirstPersonRiding;                               // 0x1033(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceDinoHighQualityAttacks;                            // 0x1034(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bScaleDinoFloatingHUDByMeshSize;                         // 0x1035(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WBZG[0x2];                                   // 0x1036(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ForceCameraTransitionTimeUponPossession;                 // 0x1038(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AdditionalDinoHealthBarOffsetY;                          // 0x103C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AIOverrideNotifyNeighborsRange;                          // 0x1040(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             SpawnAnimationLocationOffset;                            // 0x1044(0x000C) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MissionMultiUseEntryToolTipWidget;                       // 0x1050(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              MissionDataBuff;                                         // 0x1058(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ActiveEventSpawnActor;                                   // 0x1060(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FAvailableMission>                           AvailableMissions;                                       // 0x1068(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		TArray<struct FMissionMetaData>                            AvailableMissionsMetaData;                               // 0x1078(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		TArray<struct FMissionMetaData>                            NonPlayerFacingMissionsMetaData;                         // 0x1088(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_L58S[0x148];                                 // 0x1098(0x0148) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GlobalDinoCountValue;                                    // 0x11E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WHXY[0x1C];                                  // 0x11E4(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      ServerForceReplicateObjectClasses;                       // 0x1200(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TAssetPtr<class UBlueprint>                                ActiveEventOverrideObjectBlueprint;                      // 0x1210(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, DisableEditOnInstance
		unsigned char                                              UnknownData_6W6N[0x4];                                   // 0x122C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class UPrimalWorldSettingsEventOverrides*                  ActiveEventOverrides;                                    // 0x1230(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UClass*                                              MetaTagInfoClass;                                        // 0x1238(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bEnforceSingleBiomeBuff;                                 // 0x1240(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bHideMissionSortByDistance;                              // 0x1241(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9S5F[0x6];                                   // 0x1242(0x0006) MISSED OFFSET (PADDING)

	public:
		bool IsAllowedInLevelBounds(const struct FVector& AtLocat);
		bool GetMissionMetaData(const class FName& MissionTag, struct FMissionMetaData* Value);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalWorldSettingsEventOverrides
	 * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
	 */
	class UPrimalWorldSettingsEventOverrides : public UObject
	{
	public:
		TArray<struct FClassRemappingWeight>                       NPCRandomSpawnClassWeights;                              // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FClassRemappingWeight>                       SinglePlayerNPCRandomSpawnClassWeights;                  // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FActiveEventUndeprecatedStructures>          UndeprecatedStructuresDuringEvent;                       // 0x0048(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FActiveEventUndeprecatedItems>               UndeprecatedItemsDuringEvent;                            // 0x0058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FActiveEventUndeprecatedDinos>               UndeprecatedDinosDuringEvent;                            // 0x0068(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FActiveEventGlobalStatusAdjustments>         AdditionalGlobalStatusAdjustmentsDuringEvent;            // 0x0078(0x0010) Edit, ZeroConstructor, DisableEditOnInstance

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.RadialSelectorHUD_Inventory
	 * Size -> 0x0008 (FullSize[0x00E0] - InheritedSize[0x00D8])
	 */
	class URadialSelectorHUD_Inventory : public URadialSelectorHUD
	{
	public:
		class UPrimalInventoryComponent*                           PlayerInventory;                                         // 0x00D8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.RadialSelectorHUD_MultiUse
	 * Size -> 0x0020 (FullSize[0x00F8] - InheritedSize[0x00D8])
	 */
	class URadialSelectorHUD_MultiUse : public URadialSelectorHUD
	{
	public:
		unsigned char                                              UnknownData_1DBK[0x1C];                                  // 0x00D8(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TextScaleCountOffset;                                    // 0x00F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.RadialSelectorHUD_PlayerAction
	 * Size -> 0x0068 (FullSize[0x0140] - InheritedSize[0x00D8])
	 */
	class URadialSelectorHUD_PlayerAction : public URadialSelectorHUD
	{
	public:
		unsigned char                                              UnknownData_XM8Y[0x8];                                   // 0x00D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EPlayerActionIndex>                                 ActionBindings;                                          // 0x00E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		unsigned char                                              UnknownData_J31V[0x20];                                  // 0x00F0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bAddUnlockableEmotes;                                    // 0x0110(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_H5RN[0x3];                                   // 0x0111(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TextScaleCountOffset;                                    // 0x0114(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DGMN[0x28];                                  // 0x0118(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.RCONServer
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class URCONServer : public UObject
	{
	public:
		unsigned char                                              UnknownData_36C4[0x28];                                  // 0x0028(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UShooterCheatManager*                                CheatManager;                                            // 0x0050(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RKWP[0x10];                                  // 0x0058(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.SaveGameActor
	 * Size -> 0x0000 (FullSize[0x0470] - InheritedSize[0x0470])
	 */
	class ASaveGameActor : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.SaveGameActorTickable
	 * Size -> 0x0000 (FullSize[0x0470] - InheritedSize[0x0470])
	 */
	class ASaveGameActorTickable : public ASaveGameActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterCharacterMovement
	 * Size -> 0x0040 (FullSize[0x0570] - InheritedSize[0x0530])
	 */
	class UShooterCharacterMovement : public UCharacterMovementComponent
	{
	public:
		float                                                      MaxSpeedMultiplier;                                      // 0x0530(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseAdditionalLinePenetrationChecks;                     // 0x0534(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_PN6G[0x3];                                   // 0x0535(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bWaterBaseOnly : 1;                                      // 0x0538(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowWaterWalking : 1;                                  // 0x0538(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_L4UM[0x37];                                  // 0x0539(0x0037) MISSED OFFSET (PADDING)

	public:
		void UpdateAnalogueInputModifier();
		void SetCurrentAcceleration(const struct FVector& NewAcceleration);
		void SetClimbingTarget(const struct FVector& TargetPosition, const struct FRotator& TargetRotation);
		bool IsWaterWalking();
		void BPApplyVelocityBraking(float DeltaTime, float Friction, float BrakingDeceleration, struct FVector* InOutVelocity);
		void BP_PhysicsRotation(float DeltaTime);
		void BP_PerformMovement(float DeltaTime);
		float BP_GetAnalogueInputModifier();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterCheatManager
	 * Size -> 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
	 */
	class UShooterCheatManager : public UCheatManager
	{
	public:
		bool                                                       bIsRCONCheatManager;                                     // 0x0080(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ERSL[0x17];                                  // 0x0081(0x0017) MISSED OFFSET (PADDING)

	public:
		void WhatIsMyTarget();
		void VisualizeWorldGeo();
		void VisualizeWorld();
		void VisualizeClass(const class FString& ClassIn, int32_t MaxTotal);
		void VerifyTransferInventory();
		void UnlockEngram(const class FString& ItemClassName);
		void UnlockEmote(const class FString& EmoteName);
		void UnlockAllExplorerNotes();
		void UnlockAchievement(const class FString& AchievementID);
		void UnbanPlayer(const class FString& PlayerSteamName);
		void TTC(const class FString& DinoID);
		void TribeStructureAudit(int32_t TribeTeamID);
		void TribeMessage(int32_t TribeTeamID, const class FString& Message);
		void TribeDinoAudit(int32_t TribeTeamID);
		void TransferImprints(int32_t oldPlayerId, int32_t newPlayerId, const class FString& NewImprinterName);
		void TPName(const class FString& PlayerName);
		void TPCoords(float lat, float lon, float Z);
		void TP(const class FString& LocationName);
		void ToggleLowGravSpin();
		void ToggleLocation();
		void ToggleHud();
		void ToggleGun();
		void ToggleFreezeStatusValues();
		void ToggleDamageNumbers();
		void ToggleDamageLogging();
		void ToggleClawStepping();
		void TOD(const class FString& timeString);
		void TestSteamRefreshItems();
		void TeleportToPlayerName(const class FString& PlayerName);
		void TeleportToPlayer(int64_t PlayerId);
		void TeleportToCreature(const class FString& DinoID);
		void TeleportToActorLocation(const class FString& ActorName);
		void TeleportToActiveHorde(int32_t EventIndex);
		void TeleportPlayerNameToMe(const class FString& PlayerName);
		void TeleportPlayerIDToMe(int64_t PlayerId);
		void TeleportCreatureToMe(const class FString& DinoID);
		void TCTM(const class FString& DinoID);
		void TameAOE(float Radius, float affinity, float effectiveness);
		void TakeTribe(int32_t TribeTeamID);
		void TakeAllStructure();
		void TakeAllDino();
		void SummonTamed(const class FString& ClassName);
		void Suicide();
		void StartSaveBackup();
		void StartNearestHorde(const class FName& HordeType, int32_t DifficultyLevel);
		void StartMissionWithMetaData(const class FName& MissionTag);
		void StartMission(const class FName& MissionTag);
		void SPI(float X, float Y, float Z, float Yaw, float Pitch);
		void SpawnSetupDino(const class FString& DinoBlueprintPath, const class FString& SaddleBlueprintPath, float SaddleQuality, int32_t DinoLevel, const class FString& DinoStats, float spawnDistance, float YOffset, float ZOffset);
		void SpawnExactDino(const class FString& DinoBlueprintPath, const class FString& SaddleBlueprintPath, float SaddleQuality, int32_t BaseLevel, int32_t ExtraLevels, const class FString& BaseStats, const class FString& AddedStats, const class FString& DinoName, int8_t Cloned, int8_t Neutered, const class FString& TamedOn, const class FString& UploadedFrom, const class FString& ImprinterName, int32_t ImprinterPlayerID, float ImprintQuality, const class FString& Colors, int64_t DinoID, int64_t Exp, float spawnDistance, float YOffset, float ZOffset);
		void SpawnDino(const class FString& blueprintPath, float spawnDistance, float spawnYOffset, float ZOffset, int32_t DinoLevel);
		void SpawnActorTamed(const class FString& blueprintPath, float spawnDistance, float spawnYOffset, float ZOffset);
		void SpawnActorSpreadTamed(const class FString& blueprintPath, float spawnDistance, float spawnYOffset, float ZOffset, int32_t NumberActors, float SpreadAmount);
		void SpawnActorSpread(const class FString& blueprintPath, float spawnDistance, float spawnYOffset, float ZOffset, int32_t NumberActors, float SpreadAmount);
		void SpawnActor(const class FString& blueprintPath, float spawnDistance, float spawnYOffset, float ZOffset);
		void ShowTutorial(int32_t TutorialIndex, bool bForceDisplay);
		void ShowMessageOfTheDay();
		void ShowInGameMenu();
		void ShowAvailableMissionTags();
		void ShowActiveMissions();
		void SetTimeOfDay(const class FString& timeString);
		void SetTargetPlayerColorVal(int32_t ColorValIndex, float ColorVal);
		void SetTargetPlayerBodyVal(int32_t BodyValIndex, float BodyVal);
		void SetTargetDinoColor(int32_t ColorRegion, int32_t ColorID);
		void SetTamingEffectivenessModifier(float tameEff);
		void SetStatOnTarget(const class FName& StatName, float Value);
		void SetShowAllPlayers(bool bEnable);
		void SetPlayerPos(float X, float Y, float Z);
		void SetPlayerLevel(int64_t PlayerId, int16_t Level);
		void SetPerfCheck(int32_t PerfCheckLocation);
		void SetNetworkTime(float NewTime);
		void SetMyTargetSleeping(bool bIsSleeping);
		void SetMessageOfTheDay(const class FString& Message);
		void SetMaterialParamaterCollectionByNameAndFloatValue(const class FName& ParamaterName, float ParamaterValue);
		void SetInstantHarvest(bool bEnable);
		void SetInfiniteStats(bool bInfinite);
		void SetImprintQuality(float ImprintQuality);
		void SetImprintedPlayer(const class FString& NewImprinterName, int32_t PlayerId);
		void SetHeadHairstyle(int32_t hairStyleIndex);
		void SetHeadHairPercent(float thePercent);
		void SetGraphicsQuality(int32_t val);
		void SetGodMode(bool bEnable);
		void SetGlobalPause(bool bIsPaused);
		void SetFacialHairstyle(int32_t hairStyleIndex);
		void SetFacialHairPercent(float thePercent);
		void SetDifficultyValue(float NewTime);
		void SetDebugMeleeAttacks(bool bDebugMelee, float DrawDuration);
		void SetDay(int32_t day);
		void SetChatLogMaxAgeInDays(int32_t NumDays);
		void SetBabyAgeAOE(float AgeValue, float Radius);
		void SetBabyAge(float AgeValue);
		void SetAllAvailableMissionsComplete();
		void SetActiveMissionDebugFlags(int32_t DebugFlags);
		void ServerChatToPlayer(const class FString& PlayerName, const class FString& MessageText);
		void ServerChatTo(const class FString& SteamID, const class FString& MessageText);
		void ServerChat(const class FString& MessageText);
		void SendDataDogMetric(const class FString& Message);
		void SDFRide(const class FName& DinoBlueprintPath, int32_t DinoLevel);
		void SDF(const class FName& DinoBlueprintPath, bool bIsTamed, int32_t DinoLevel);
		void ScriptCommand(const class FString& commandString);
		void SaveWorldDisableTransfer();
		void SaveWorld();
		void SAP();
		void RespawnPlayer(bool KeepGender);
		void ResetLiveTuningOverloads();
		void ResetLeaderboards();
		void RequestUpdateActiveMissionTags();
		void ReportSpawnManagers();
		void ReportLeastSpawnManagers();
		void RepairArea(float Radius);
		void RenameTribeID(int32_t TribeId, const class FString& NewName);
		void RenameTribe(const class FString& TribeName, const class FString& NewName);
		void RenamePlayerId(int32_t PlayerId, const class FString& NewName);
		void RenamePlayer(const class FString& PlayerName, const class FString& NewName);
		void RemoveWorldBuff(const class FString& WorldBuffIdentifier);
		void RemoveTribeAdmin();
		void RemoveAllWorldBuffs();
		void RegrowFoliage(float Radius);
		void RefillStats();
		void ReassertColorization();
		void RainMonkeys(int32_t NumberActors, float SpreadAmount, float ZOffset);
		void RainDinos(int32_t NumberActors, float SpreadAmount, float ZOffset);
		void RainDanger(int32_t NumberActors, float SpreadAmount, float ZOffset);
		void RainCritters(int32_t NumberActors, float SpreadAmount, float ZOffset);
		void psc(const class FString& Command);
		void PrintActorLocation(const class FString& ActorName);
		void PlayerCommand(const class FString& TheCommand);
		void pgosweep();
		void OpenMap(const class FString& MapName);
		void OnToggleInGameMenu();
		void NextPerfCheck();
		void MoveTargetTo(float X, float Y, float Z);
		void Mission(const class FName& CheatName, float Value);
		void MaxAscend(int32_t PlayerId);
		void MakeTribeFounder();
		void MakeTribeAdmin();
		void LvlUp(int64_t PlayerId, int16_t Level);
		void LogStackTrace();
		void LMA();
		void ListPlayers();
		void ListMyTargetBuffs();
		void ListMyBuffs();
		void ListDinos();
		void ListAllPlayerBuffs();
		void ListAllItems();
		void ListActiveHordeEvents();
		void LevelUpTarget(const class FName& StatName, int32_t NumLevels);
		void LevelUpAOE(const class FName& StatName, float Radius, int32_t NumLevels);
		void LevelUp(const class FName& StatName, int32_t NumLevels);
		void LessThan(int32_t TribeTeamID, int32_t Connections, bool includeContainers);
		void LeaveMission();
		void LeaveMeAlone();
		void KillPlayer(int64_t PlayerId);
		void KillAOETribe(const class FName& Category, float Radius, int32_t TribeId, bool destroyOnly);
		void KillAOE(const class FName& Category, float Radius);
		void Kill();
		void KickPlayer(const class FString& PlayerSteamName);
		void JoinTribe(int64_t PlayerId, int32_t TribeTeamID);
		void IsUndermesh(float debugDrawSeconds);
		void InfiniteWeight();
		void InfiniteStats();
		void HurtMyTarget(int32_t HowMuch);
		void HurtMyAOE(int32_t HowMuch, float Radius);
		void HiWarp(const class FString& ClassName, int32_t index);
		void HideTutorial(int32_t TutorialIndex);
		void HibernationReport(const class FString& ClassName);
		void HatchEgg();
		void GTIPL(int32_t TribeId);
		void GTIDPL(int32_t TribeId);
		void GoToFirstMutagenDrop();
		void GMSummon(const class FString& ClassName, int32_t Level);
		void GMComp(int32_t Level);
		void GMBuff();
		void GlobalObjectCount();
		void GiveWeaponSet(const class FName& Tier, const class FName& Quality);
		void GiveToMeAOE(float Radius);
		void GiveToMe();
		void GiveTekEngramsTo(int64_t PlayerId, const class FName& blueprintPath);
		void GiveResources();
		void GiveMaxLevel(int32_t PlayerId);
		void GiveItemToPlayer(int32_t PlayerId, const class FString& blueprintPath, int32_t quantityOverride, float qualityOverride, bool bForceBlueprint);
		void GiveItemSkins(const class FString& equipmentType);
		void GiveItemSet(const class FName& Tier);
		void GiveItemNumToPlayer(int32_t PlayerId, int32_t MasterIndexNum, int32_t quantityOverride, float qualityOverride, bool bForceBlueprint);
		void GiveItemNum(int32_t MasterIndexNum, int32_t quantityOverride, float qualityOverride, bool bForceBlueprint);
		void GiveItem(const class FString& blueprintPath, int32_t quantityOverride, float qualityOverride, bool bForceBlueprint);
		void GiveInfiniteStatsToTarget();
		void GiveExpToTarget(float HowMuch, bool fromTribeShare, bool bPreventSharingWithTribe);
		void GiveExpToPlayer(int64_t PlayerId, float HowMuch, bool fromTribeShare, bool bPreventSharingWithTribe);
		void GiveExplorerNote(int32_t NoteIndex);
		void GiveEngramsTekOnly();
		void GiveEngrams();
		void GiveDinoSet(const class FName& Tier, int32_t NumDinos);
		void GiveCreativeModeToTarget();
		void GiveCreativeModeToPlayer(int64_t PlayerId);
		void GiveCreativeMode();
		void GiveBossItems();
		void GiveBossEngrams(int32_t PlayerId, const class FName& BossName, int8_t difficulty);
		void GiveArmorSet(const class FName& Tier, const class FName& Quality);
		void GiveAllStructure();
		void GiveAllExplorerNotes();
		void GFI(const class FName& blueprintPath, int32_t quantityOverride, float qualityOverride, bool bForceBlueprint);
		void GetTribeIdPlayerList(int32_t TribeId);
		void GetTribe(int32_t TribeId);
		void GetSteamIDForPlayerID(int32_t PlayerId);
		void GetPlayerIDForSteamID(int32_t SteamID);
		void GetGameLog();
		void GetEgg(int32_t NumMutationsToAdd);
		void GetChat();
		void GetAllTamesNumber();
		void GetAllStructuresNumber();
		void GetAllNumbers();
		void GetAllItemsNumber();
		void GCMT();
		void GCMP(int64_t PlayerId);
		void GCM();
		void GameCommand(const class FString& TheCommand);
		void ForceUpdateDynamicConfig();
		void ForceTribes(const class FString& PlayerName1, const class FString& PlayerName2, const class FString& NewTribeName);
		void ForceTameAOE(float Radius);
		void ForceTame();
		void ForceStartMission(const class FName& MissionTag);
		void ForceReturnIsXboxOneBuildOnPC(bool ReturnValue);
		void ForceReturnIsPS4BuildOnPC(bool ReturnValue);
		void ForcePoop();
		void ForcePlayerToJoinTribeId(int64_t PlayerId, int32_t TribeTeamID);
		void ForcePlayerToJoinTribe(int64_t PlayerId, const class FString& TribeName);
		void ForcePlayerToJoinTargetTribe(int64_t PlayerId);
		void ForceMutagenSpawn();
		void ForceJoinTribe();
		void ForceGiveBuff(const class FName& BuffBlueprintPath, bool bEnable);
		void ForceEnableMeshCheckingOnMe(bool bEnableKillChecking, bool bEnableTeleportingChecking);
		void ForceCompleteActiveMission(const class FString& MissionStateSimValues);
		void ForceCheckInMesh();
		void FindMutagenDrops();
		void FEMCOM(bool bEnableKillChecking, bool bEnableTeleportingChecking);
		void EnemyInVisible(bool Invisible);
		void EnableSpectator();
		void EnableCheats(const class FString& pass);
		void EnableAllMating();
		void DupeLastItem();
		void DumpFallbackSeeds();
		void DumpDinoStats();
		void DumpAssetProperties(const class FString& Asset);
		void DrawDebugBoxForVolumes(float Duration, int32_t VolumeClassIndex, bool bDebugAllVolumeClasses, bool bDrawSolidBox, float LineThickness);
		void DrainWater(float HowMuch);
		void DrainFood(float HowMuch);
		void DoTestingThing();
		void DoTame();
		void DoRestartLevel();
		void DoHang();
		void DoExit();
		void DisallowPlayerToJoinNoCheck(const class FString& SteamID);
		void DisableSpectator();
		void DisableAllMating();
		void DinoSet(const class FName& CheatName, float Value);
		void Dino(const class FName& CheatName);
		void DetachChar();
		void DestroyWildDinos();
		void DestroyWildDinoClasses(const class FString& ClassName, bool bExactMatch);
		void DestroyTribeStructuresLessThan(int32_t TribeTeamID, int32_t Connections, bool includeContainers, bool includeLargeGates);
		void DestroyTribeStructures();
		void DestroyTribePlayers();
		void DestroyTribeIdStructures(int32_t TribeTeamID);
		void DestroyTribeIdPlayers(int32_t TribeTeamID);
		void DestroyTribeIdDinos(int32_t TribeTeamID);
		void DestroyTribeId(int32_t TribeTeamID);
		void DestroyTribeDinos();
		void DestroyStructures();
		void DestroyMyTarget4();
		void DestroyMyTarget3();
		void DestroyMyTarget2();
		void DestroyMyTarget();
		void DestroyMyPawn();
		void DestroyFoliage(float Radius, bool PutFoliageResourcesInInventory);
		void DestroyAOE(const class FName& Category, float Radius);
		void DestroyAllTames();
		void DestroyAllEnemies();
		void DestroyActors(const class FString& ClassName, bool bExactMatch);
		void DefeatBoss(int32_t PlayerId, const class FName& BossName, int8_t difficulty);
		void DefeatAllBosses(int32_t PlayerId);
		void DeepPockets();
		void DebugToggleHLNAMonologue();
		void DebugMyTarget();
		void DebugCompanionReactions();
		void DebugCompanionAsyncLoadedFiles();
		void DebugAllowVRMissionTeleport();
		void DeactivateMission();
		void DCMSet(const class FName& Cheat, float val);
		void CryoMyTarget();
		void CryoAOE(float Radius);
		void Cryo(const class FString& DinoID);
		void CompleteMission();
		void ClearTutorials();
		void ClearPlayerInventory(int32_t PlayerId, bool bClearInventory, bool bClearSlotItems, bool bClearEquippedItems);
		void ClearMyBuffs();
		void ClearMessageOfTheDay();
		void ClearCryoSickness();
		void CamZoomOut();
		void CamZoomIn();
		void Broadcast(const class FString& MessageText);
		void BanPlayer(const class FString& PlayerSteamName);
		void AllowPlayerToJoinNoCheck(const class FString& SteamID);
		void AddWorldBuff(const class FString& WorldBuffIdentifier);
		void AddItemToAllClustersInventory(const class FString& UserId, int32_t MasterIndexNum);
		void AddHexagons(float HowMuch);
		void AddExperienceToTarget(float HowMuch, bool fromTribeShare, bool bPreventSharingWithTribe);
		void AddExperience(float HowMuch, bool fromTribeShare, bool bPreventSharingWithTribe);
		void AddEquipmentDurability(float durability);
		void AddChibiExpToPlayer(int64_t PlayerId, float HowMuch);
		void AddChibiExp(float HowMuch);
		void AddBuffPreventTagToSelf(const class FName& TagName);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterDamageType
	 * Size -> 0x00D8 (FullSize[0x0128] - InheritedSize[0x0050])
	 */
	class UShooterDamageType : public UDamageType
	{
	public:
		class UClass*                                              HitTargetableActorImpactEffects;                         // 0x0050(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DamageTorpidityIncreaseMultiplier;                       // 0x0058(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1MYH[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCanvasIcon                                         KillIcon;                                                // 0x0060(0x0018) Edit, DisableEditOnInstance
		class UForceFeedbackEffect*                                HitForceFeedback;                                        // 0x0078(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UForceFeedbackEffect*                                KilledForceFeedback;                                     // 0x0080(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FDamagePrimalCharacterStatusValueModifier>   DamageCharacterStatusValueModifiers;                     // 0x0088(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bIsMeleeDamage : 1;                                      // 0x0098(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDontActuallyDealDamage : 1;                             // 0x0098(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventMeleeHarvesting : 1;                             // 0x0098(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHarvestDamageWithNoResourceGrab : 1;                    // 0x0098(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventMomentumWhenFalling : 1;                         // 0x0098(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyGiveBuffToPlayerOrTamed : 1;                        // 0x0098(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDamageProjectiles : 1;                                  // 0x0098(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyGiveBuffToPlayer : 1;                               // 0x0098(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyGiveBuffToDino : 1;                                 // 0x0099(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHasRiderIgnoreDamage : 1;                               // 0x0099(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowShieldBlockAllPointDamage : 1;                     // 0x0099(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventDefaultTargetHurtEffect : 1;                     // 0x0099(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDamageInstigator : 1;                                   // 0x0099(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bApplyMomentumToBigPawns : 1;                            // 0x0099(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAutoDragDeadDino : 1;                                   // 0x0099(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bImpulseResetsDinoVelocity : 1;                          // 0x0099(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventHitPawnEffectsFromLocalInstigator : 1;           // 0x009A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRiderIgnoreDamage : 1;                                  // 0x009A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNoFriendlyDamage : 1;                                   // 0x009A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsTurretDamage : 1;                                     // 0x009A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceGeneralArmorUsage : 1;                             // 0x009A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDamageImpulseOnly : 1;                                  // 0x009A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoreDinoFlyers : 1;                                   // 0x009A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAdjustDamage : 1;                                  // 0x009A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAdjustAggro : 1;                                   // 0x009B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPAdjustHarvestingDamage : 1;                        // 0x009B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisplayHitMarker : 1;                                   // 0x009B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDinoDamageCauserAllowSameTeam : 1;                      // 0x009B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyApplyDamageTorpidityToPlayersAndTames : 1;          // 0x009B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		float                                                      DamageInstigatorPercentage;                              // 0x009C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDinoOnDinoDamageCauserAllowSameTeam : 1;                // 0x00A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceRespawnCooldown : 1;                               // 0x00A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowDamageCorpses : 1;                                 // 0x00A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAllowFriendlyFire : 1;                             // 0x00A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAllowPvEDamage : 1;                                // 0x00A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDestroyOnKill : 1;                                      // 0x00A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventDinoKillVictimItemCollection : 1;                // 0x00A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsInstantDamage : 1;                                    // 0x00A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventHurtAnim : 1;                                    // 0x00A1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventHurtSoundAndCameraShake : 1;                     // 0x00A1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_3PGB[0x2];                                   // 0x00A2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      UseSpecialDamageInterval;                                // 0x00A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WildDinoForcedAggroDuration;                             // 0x00A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FZ2X[0x4];                                   // 0x00AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              BuffToGiveVictimCharacter;                               // 0x00B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MassScaleDamageImpulseExponent;                          // 0x00B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_54CW[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      DamageIgnoreActorClasses;                                // 0x00C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      DamageOnlyActorClasses;                                  // 0x00D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FOverrideDamageHarvestingEntry>              OverrideDamageHarvestEntries;                            // 0x00E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              InvalidHarvestOverrideDamageType;                        // 0x00F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FTargetClassDamageScaler>                    TargetClassDamageScalers;                                // 0x00F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      OverrideDamageForResourceHarvestingItems;                // 0x0108(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UClass*>                                      OverrideDamageForResourceHarvestingDamageTypes;          // 0x0118(0x0010) Edit, ZeroConstructor, DisableEditOnInstance

	public:
		class UClass* OverrideBuffToGiveVictimCharacter(class APrimalCharacter* Victim, float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		float BPAdjustHarvestingDamage(class AActor* Victim, float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		float BPAdjustDamage(class AActor* Victim, float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		float BPAdjustAggro(class APrimalDinoAIController* DamagedCharacterController, class APrimalCharacter* DamagedCharacter, float DesiredAggroValue, float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterEngine
	 * Size -> 0x0020 (FullSize[0x09B0] - InheritedSize[0x0990])
	 */
	class UShooterEngine : public UGameEngine
	{
	public:
		unsigned char                                              UnknownData_T12C[0x20];                                  // 0x0990(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterGame_Menu
	 * Size -> 0x0050 (FullSize[0x05B0] - InheritedSize[0x0560])
	 */
	class AShooterGame_Menu : public AGameMode
	{
	public:
		class FString                                              MenuMusic;                                               // 0x0560(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              SponsoredModsMenu;                                       // 0x0570(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class FName                                                ActiveEvent;                                             // 0x0578(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FActiveEventMainMenuOverride>                ActiveEventMainMenuOverrides;                            // 0x0580(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UTexture2D*>                                  BackgroundTextureOverrides;                              // 0x0590(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_10V6[0x10];                                  // 0x05A0(0x0010) MISSED OFFSET (PADDING)

	public:
		void PlayMusic();
		bool GetMainMenuOverrideData(struct FActiveEventMainMenuOverride* OverrideData);
		class UTexture2D* GetMainMenuBackgroundTexture();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterGameInstance
	 * Size -> 0x0358 (FullSize[0x03B0] - InheritedSize[0x0058])
	 */
	class UShooterGameInstance : public UGameInstance
	{
	public:
		unsigned char                                              UnknownData_DLBX[0x58];                                  // 0x0058(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAsyncAssetLoaded;                                      // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		TArray<struct FAssetPathObjectPair>                        AsyncLoadededAssetReferences;                            // 0x00C0(0x0010) ZeroConstructor, Transient
		class UWorldModifiersContainer*                            WorldModifiersContainer;                                 // 0x00D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class FString                                              WelcomeScreenMap;                                        // 0x00D8(0x0010) ZeroConstructor, Config
		class FString                                              MainMenuMap;                                             // 0x00E8(0x0010) ZeroConstructor, Config
		int32_t                                                    AutoPgoSweepInterval;                                    // 0x00F8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2OIW[0x29C];                                 // 0x00FC(0x029C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ActiveEvent;                                             // 0x0398(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class FString                                              WorldModifierConfigOverride;                             // 0x03A0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor

	public:
		void LoadTheGameMedia();
		void DisplayGlobalMainMenuNotification();
		void AsyncUnloadAssetFromPath(const class FString& AssetPathToUnload, bool bForceGarbageCollection);
		void AsyncUnloadAssetFromObject(class UObject* AssetObjectToUnload, bool bForceGarbageCollection);
		void AsyncLoadAssetFromPath(const class FString& AssetPath);
		void AsyncAssetLoadedDelegate__DelegateSignature(const class FString& AssetPath, class UObject* LoadedAsset);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.TerrainActor
	 * Size -> 0x0020 (FullSize[0x0490] - InheritedSize[0x0470])
	 */
	class ATerrainActor : public AActor
	{
	public:
		class UTerrainComponent*                                   TerrainComponent;                                        // 0x0470(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, SaveGame, IsPlainOldData, NoDestructor
		class AInstancedFoliageActor*                              FoliageActor;                                            // 0x0478(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		TArray<class UHierarchicalInstancedStaticMeshComponent*>   HierarchicalInstancedStaticMeshComponents;               // 0x0480(0x0010) ExportObject, ZeroConstructor, Transient, SaveGame, ContainsInstancedReference

	public:
		void GenerateTerrain();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.TerrainComponent
	 * Size -> 0x0220 (FullSize[0x02F8] - InheritedSize[0x00D8])
	 */
	class UTerrainComponent : public UActorComponent
	{
	public:
		class UClass*                                              TerrainGeneratorTemplete;                                // 0x00D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              BlockingVolumeActorTemplate;                             // 0x00E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BlockingVolumeAreaRatioOfTerrain;                        // 0x00E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bGenerate : 1;                                           // 0x00EC(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bClear : 1;                                              // 0x00EC(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bPreview : 1;                                            // 0x00EC(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bPreviewDecorations : 1;                                 // 0x00EC(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_GG2B[0x3];                                   // 0x00ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PreviewSize;                                             // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VVCT[0x4];                                   // 0x00F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UTexture2D*>                                  GeneratedTextures;                                       // 0x00F8(0x0010) Edit, ZeroConstructor
		class UTerrainGenerator*                                   TerrainGenerator;                                        // 0x0108(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4TTX[0x24];                                  // 0x0110(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SectionsPerComponent;                                    // 0x0134(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    QuadsPerSection;                                         // 0x0138(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OALT[0x4];                                   // 0x013C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTerrainInfo                                        ReplicatedTerrainInfo;                                   // 0x0140(0x0058) Net, SaveGame, RepNotify, ContainsInstancedReference
		int32_t                                                    TerrainMapSizeX;                                         // 0x0198(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    TerrainMapSizeY;                                         // 0x019C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    MapSeed;                                                 // 0x01A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    NumberOfThreads;                                         // 0x01A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             LandscapeScale;                                          // 0x01A8(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LandscapeRadius;                                         // 0x01B4(0x0004) Edit, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FVector                                             BiomeGridSize;                                           // 0x01B8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             NPCGridSize;                                             // 0x01C4(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BiomeHeight;                                             // 0x01D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NPCZoneHeight;                                           // 0x01D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           SupplyDropsGridSize;                                     // 0x01D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_W7LH[0xE0];                                  // 0x01E0(0x00E0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ALandscape*                                          Landscape;                                               // 0x02C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<class AActor*>                                      SpawnedActors;                                           // 0x02C8(0x0010) ZeroConstructor, Transient
		unsigned char                                              UnknownData_I5AT[0x8];                                   // 0x02D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AInstancedFoliageActor*                              FoliageActor;                                            // 0x02E0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_A5X4[0x10];                                  // 0x02E8(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnRep_TerrainInfo();
		void OnConstruct();
		void ApplyToTexture(class UFloatMap* FloatMap, class UTexture2D** Texture, float Minimum, float Maximum);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterGameMode
	 * Size -> 0x2AF0 (FullSize[0x3050] - InheritedSize[0x0560])
	 */
	class AShooterGameMode : public AGameMode
	{
	public:
		unsigned char                                              UnknownData_9ZX6[0xF8];                                  // 0x0560(0x00F8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              BanFileName;                                             // 0x0658(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_J0U5[0xE0];                                  // 0x0668(0x00E0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class URCONServer*                                         RCONSocket;                                              // 0x0748(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class FString                                              PlayersJoinNoCheckFilename;                              // 0x0750(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		class FString                                              PlayersExclusiveCheckFilename;                           // 0x0760(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
		class UShooterCheatManager*                                GlobalCommandsCheatManager;                              // 0x0770(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_VJV6[0x10];                                  // 0x0778(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CheckGlobalEnablesURL;                                   // 0x0788(0x0010) ZeroConstructor, Transient, Protected
		class UDatabase_LoginData*                                 Database_LoginDataRef;                                   // 0x0798(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UDatabase_PubSub_GeneralNotifications*               PubSub_GeneralNotificationsRef;                          // 0x07A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class ATerrainActor*                                       TerrainActor;                                            // 0x07A8(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_CX0L[0x128];                                 // 0x07B0(0x0128) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bGlobalDisableLoginLockCheck;                            // 0x08D8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bTempDisableLoginLockCheck;                              // 0x08D9(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_G8L3[0x6];                                   // 0x08DA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              MyServerId;                                              // 0x08E0(0x0010) ZeroConstructor, Transient
		unsigned char                                              UnknownData_FZ5Q[0x70];                                  // 0x08F0(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FTribeData>                                  TribesData;                                              // 0x0960(0x0010) ZeroConstructor
		TArray<class APrimalDinoCharacter*>                        ActivelyTamingDinos;                                     // 0x0970(0x0010) ZeroConstructor
		class UClass*                                              TerrainActorTemplate;                                    // 0x0980(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FStringClassReference                               TerrainActorClassName;                                   // 0x0988(0x0010) ZeroConstructor, Config
		class FString                                              PGMapName;                                               // 0x0998(0x0010) ZeroConstructor, Config
		class FString                                              PGTerrainPropertiesString;                               // 0x09A8(0x0010) ZeroConstructor, Config
		unsigned char                                              UnknownData_PLUI[0x50];                                  // 0x09B8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bAutoCreateNewPlayerData;                                // 0x0A08(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YG02[0x7];                                   // 0x0A09(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DifficultyValue;                                         // 0x0A10(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DifficultyValueMin;                                      // 0x0A14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DifficultyValueMax;                                      // 0x0A18(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ProximityRadius;                                         // 0x0A1C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ProximityRadiusUnconsiousScale;                          // 0x0A20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_S4IB[0x4];                                   // 0x0A24(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              CheatClass;                                              // 0x0A28(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsOfficialServer;                                       // 0x0A30(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsConsoleUnOfficialPCServer;                            // 0x0A31(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bServerAllowArkDownload;                                 // 0x0A32(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BD3F[0x2];                                   // 0x0A33(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bAlwaysNotifyPlayerLeft;                                 // 0x0A35(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bAlwaysNotifyPlayerJoined;                               // 0x0A36(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bServerHardcore;                                         // 0x0A37(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BKGH[0x34];                                  // 0x0A38(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bEnableCryoSicknessPVE;                                  // 0x0A6C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_28QB[0x3];                                   // 0x0A6D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CryopodNerfDamageMult;                                   // 0x0A70(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CryopodNerfDuration;                                     // 0x0A74(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bEnableMeshBitingProtection;                             // 0x0A78(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_L2S0[0x3];                                   // 0x0A79(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CryopodNerfIncomingDamageMultPercent;                    // 0x0A7C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JDKN[0x40];                                  // 0x0A80(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ResourcesRespawnPeriodMultiplier;                        // 0x0AC0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      KickIdlePlayersPeriod;                                   // 0x0AC4(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MateBoostEffectMultiplier;                               // 0x0AC8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YS3Y[0x4];                                   // 0x0ACC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      XPMultiplier;                                            // 0x0AD0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                ActiveEvent;                                             // 0x0AD4(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TribeNameChangeCooldown;                                 // 0x0ADC(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PlatformSaddleBuildAreaBoundsMultiplier;                 // 0x0AE0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bAlwaysAllowStructurePickup;                             // 0x0AE4(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IMIX[0x3];                                   // 0x0AE5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StructurePickupTimeAfterPlacement;                       // 0x0AE8(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      StructurePickupHoldDuration;                             // 0x0AEC(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bAllowIntegratedSPlusStructures;                         // 0x0AF0(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bAllowHideDamageSourceFromLogs;                          // 0x0AF1(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6IJP[0x2];                                   // 0x0AF2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      KillXPMultiplier;                                        // 0x0AF4(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HarvestXPMultiplier;                                     // 0x0AF8(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CraftXPMultiplier;                                       // 0x0AFC(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GenericXPMultiplier;                                     // 0x0B00(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SpecialXPMultiplier;                                     // 0x0B04(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_70SS[0x78];                                  // 0x0B08(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UPrimalPlayerData*>                           PlayerDatas;                                             // 0x0B80(0x0010) BlueprintVisible, ZeroConstructor
		unsigned char                                              UnknownData_A3QD[0x6];                                   // 0x0B90(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bForceRespawnDinos;                                      // 0x0B96(0x0001) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BCUT[0x19];                                  // 0x0B97(0x0019) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCharacterPossessedByPlayer;                            // 0x0BB0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnCharacterUnpossessedByPlayer;                          // 0x0BC0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnShooterCharacterSpawned;                               // 0x0BD0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnShooterCharacterDied;                                  // 0x0BE0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnMissionTriggerBeginOverlap;                            // 0x0BF0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnMissionTriggerEndOverlap;                              // 0x0C00(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		float                                                      TamedDinoDamageMultiplier;                               // 0x0C10(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DinoDamageMultiplier;                                    // 0x0C14(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PlayerDamageMultiplier;                                  // 0x0C18(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StructureDamageMultiplier;                               // 0x0C1C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PlayerResistanceMultiplier;                              // 0x0C20(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DinoResistanceMultiplier;                                // 0x0C24(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedDinoResistanceMultiplier;                           // 0x0C28(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StructureResistanceMultiplier;                           // 0x0C2C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bJoinInProgressGamesAsSpectator;                         // 0x0C30(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_L29U[0x3];                                   // 0x0C31(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TamingSpeedMultiplier;                                   // 0x0C34(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      HarvestAmountMultiplier;                                 // 0x0C38(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      HarvestHealthMultiplier;                                 // 0x0C3C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PlayerCharacterWaterDrainMultiplier;                     // 0x0C40(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PlayerCharacterFoodDrainMultiplier;                      // 0x0C44(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DinoCharacterFoodDrainMultiplier;                        // 0x0C48(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RaidDinoCharacterFoodDrainMultiplier;                    // 0x0C4C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PlayerCharacterStaminaDrainMultiplier;                   // 0x0C50(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DinoCharacterStaminaDrainMultiplier;                     // 0x0C54(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PlayerCharacterHealthRecoveryMultiplier;                 // 0x0C58(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DinoCharacterHealthRecoveryMultiplier;                   // 0x0C5C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CarnivoreNaturalTargetingRangeMultiplier;                // 0x0C60(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CarnivorePlayerAggroMultiplier;                          // 0x0C64(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      HerbivoreNaturalTargetingRangeMultiplier;                // 0x0C68(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      HerbivorePlayerAggroMultiplier;                          // 0x0C6C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       AIForceTargetPlayers;                                    // 0x0C70(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       AIForceOverlapCheck;                                     // 0x0C71(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NQ2Q[0x6];                                   // 0x0C72(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDisableSaveLoad;                                        // 0x0C78(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableXP;                                              // 0x0C79(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableDynamicMusic;                                    // 0x0C7A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RI27[0x5];                                   // 0x0C7B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPlayerDeathReason>                          PlayerDeathReasons;                                      // 0x0C80(0x0010) ZeroConstructor, Transient, SaveGame
		TArray<struct FLevelExperienceRamp>                        LevelExperienceRampOverrides;                            // 0x0C90(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<int32_t>                                            OverridePlayerLevelEngramPoints;                         // 0x0CA0(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<int32_t>                                            ExcludeItemIndices;                                      // 0x0CB0(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<struct FEngramEntryOverride>                        OverrideEngramEntries;                                   // 0x0CC0(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<struct FEngramEntryOverride>                        OverrideNamedEngramEntries;                              // 0x0CD0(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<struct FEngramEntryAutoUnlock>                      EngramEntryAutoUnlocks;                                  // 0x0CE0(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<class FString>                                      PreventDinoTameClassNames;                               // 0x0CF0(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<struct FDinoSpawnWeightMultiplier>                  DinoSpawnWeightMultipliers;                              // 0x0D00(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<struct FClassMultiplier>                            DinoClassResistanceMultipliers;                          // 0x0D10(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<struct FClassMultiplier>                            TamedDinoClassResistanceMultipliers;                     // 0x0D20(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<struct FClassMultiplier>                            DinoClassDamageMultipliers;                              // 0x0D30(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<struct FClassMultiplier>                            TamedDinoClassDamageMultipliers;                         // 0x0D40(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<struct FClassMultiplier>                            HarvestResourceItemAmountClassMultipliers;               // 0x0D50(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<struct FClassNameReplacement>                       NPCReplacements;                                         // 0x0D60(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		float                                                      PvPZoneStructureDamageMultiplier;                        // 0x0D70(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bOnlyAllowSpecifiedEngrams;                              // 0x0D74(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1PX3[0x3];                                   // 0x0D75(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    OverrideMaxExperiencePointsPlayer;                       // 0x0D78(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    OverrideMaxExperiencePointsDino;                         // 0x0D7C(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GlobalSpoilingTimeMultiplier;                            // 0x0D80(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GlobalItemDecompositionTimeMultiplier;                   // 0x0D84(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GlobalCorpseDecompositionTimeMultiplier;                 // 0x0D88(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxFallSpeedMultiplier;                                  // 0x0D8C(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAutoPvETimer;                                           // 0x0D90(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAutoPvEUseSystemTime;                                   // 0x0D91(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DHEA[0xA];                                   // 0x0D92(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AutoPvEStartTimeSeconds;                                 // 0x0D9C(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AutoPvEStopTimeSeconds;                                  // 0x0DA0(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HVGV[0x4];                                   // 0x0DA4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AHibernationManager*                                 HibernationManager;                                      // 0x0DA8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    TributeItemExpirationSeconds;                            // 0x0DB0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    TributeDinoExpirationSeconds;                            // 0x0DB4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    TributeCharacterExpirationSeconds;                       // 0x0DB8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EQPC[0x8];                                   // 0x0DBC(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxTributeItems;                                         // 0x0DC4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxTributeDinos;                                         // 0x0DC8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxTributeCharacters;                                    // 0x0DCC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIncreasePvPRespawnInterval;                             // 0x0DD0(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_13T7[0x3];                                   // 0x0DD1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      IncreasePvPRespawnIntervalCheckPeriod;                   // 0x0DD4(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      IncreasePvPRespawnIntervalMultiplier;                    // 0x0DD8(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      IncreasePvPRespawnIntervalBaseAmount;                    // 0x0DDC(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ResourceNoReplenishRadiusStructures;                     // 0x0DE0(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ResourceNoReplenishRadiusPlayers;                        // 0x0DE4(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CropGrowthSpeedMultiplier;                               // 0x0DE8(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LayEggIntervalMultiplier;                                // 0x0DEC(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PoopIntervalMultiplier;                                  // 0x0DF0(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CropDecaySpeedMultiplier;                                // 0x0DF4(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowChatFromDeadNonAdmins;                             // 0x0DF8(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowDisablingSpectator;                                // 0x0DF9(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPvEDisableFriendlyFire;                                 // 0x0DFA(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bFlyerPlatformAllowUnalignedDinoBasing;                  // 0x0DFB(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowUnclaimDinos;                                      // 0x0DFC(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QFBM[0x3];                                   // 0x0DFD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxPerTribePlatformSaddleStructureLimit;                 // 0x0E00(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxPlatformSaddleStructureLimit;                         // 0x0E04(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxDinoBaseLevel;                                        // 0x0E08(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxNumberOfPlayersInTribe;                               // 0x0E0C(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TribeSlotReuseCooldown;                                  // 0x0E10(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MatingIntervalMultiplier;                                // 0x0E14(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      EggHatchSpeedMultiplier;                                 // 0x0E18(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyMatureSpeedMultiplier;                               // 0x0E1C(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyFoodConsumptionSpeedMultiplier;                      // 0x0E20(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UKJE[0x4];                                   // 0x0E24(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PerLevelStatsMultiplier_Player[0xC];                     // 0x0E28(0x0030) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PerLevelStatsMultiplier_DinoTamed[0xC];                  // 0x0E58(0x0030) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PerLevelStatsMultiplier_DinoTamed_Add[0xC];              // 0x0E88(0x0030) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PerLevelStatsMultiplier_DinoTamed_Affinity[0xC];         // 0x0EB8(0x0030) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PerLevelStatsMultiplier_DinoWild[0xC];                   // 0x0EE8(0x0030) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MutagenLevelBoost[0xC];                                  // 0x0F18(0x0030) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MutagenLevelBoost_Bred[0xC];                             // 0x0F48(0x0030) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    ItemStatClamps[0x8];                                     // 0x0F78(0x0020) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxGateFrameOnSaddles;                                   // 0x0F98(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxHexagonsPerCharacter;                                 // 0x0F9C(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bCustomGameModeAllowSpectatorJoinAfterMatchStart;        // 0x0FA0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OOHS[0x1047];                                // 0x0FA1(0x1047) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bGameplayLogEnabled;                                     // 0x1FE8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bServerGameLogEnabled;                                   // 0x1FE9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_A735[0x6];                                   // 0x1FEA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              BonusSupplyCrateItemClass;                               // 0x1FF0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BonusSupplyCrateItemGiveInterval;                        // 0x1FF8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StructureDamageRepairCooldown;                           // 0x1FFC(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CustomRecipeEffectivenessMultiplier;                     // 0x2000(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CustomRecipeSkillMultiplier;                             // 0x2004(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FString                                              BonusSupplyCrateItemString;                              // 0x2008(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       MaxDifficulty;                                           // 0x2018(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPvEAllowTribeWar;                                       // 0x2019(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPvEAllowTribeWarCancel;                                 // 0x201A(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowCustomRecipes;                                     // 0x201B(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPassiveDefensesDamageRiderlessDinos;                    // 0x201C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6YM4[0xB];                                   // 0x201D(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bEnableDeathTeamSpectator;                               // 0x2028(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bTribeStoreCharacterConfiguration;                       // 0x2029(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VOT4[0xF6];                                  // 0x202A(0x00F6) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxTribeLogs;                                            // 0x2120(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GM8Y[0x1C];                                  // 0x2124(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDisableFriendlyFire;                                    // 0x2140(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowInactiveTribes;                                    // 0x2141(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceMapPlayerLocation;                                 // 0x2142(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H39A[0x1];                                   // 0x2143(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DinoHarvestingDamageMultiplier;                          // 0x2144(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PlayerHarvestingDamageMultiplier;                        // 0x2148(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DinoTurretDamageMultiplier;                              // 0x214C(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableLootCrates;                                      // 0x2150(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1CJY[0x3];                                   // 0x2151(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ExtinctionEventTimeInterval;                             // 0x2154(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_PJ6L[0x4];                                   // 0x2158(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   NextExtinctionEventUTC;                                  // 0x215C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_PKI4[0x18];                                  // 0x2160(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bShowFloatingDamageText;                                 // 0x2178(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1QWP[0x3];                                   // 0x2179(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SavedGameModeVersion;                                    // 0x217C(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HD31[0x4];                                   // 0x2180(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bAllowTekSuitPowersInGenesis;                            // 0x2184(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XN8H[0x43];                                  // 0x2185(0x0043) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FItemCraftingCostOverride>                   OverrideItemCraftingCosts;                               // 0x21C8(0x0010) ZeroConstructor, Transient
		TArray<struct FConfigItemCraftingCostOverride>             ConfigOverrideItemCraftingCosts;                         // 0x21D8(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<struct FConfigMaxItemQuantityOverride>              ConfigOverrideItemMaxQuantity;                           // 0x21E8(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		unsigned char                                              UnknownData_IV7G[0x50];                                  // 0x21F8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FConfigSupplyCrateItemsOverride>             ConfigOverrideSupplyCrateItems;                          // 0x2248(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<struct FConfigNPCSpawnEntriesContainer>             ConfigOverrideNPCSpawnEntriesContainer;                  // 0x2258(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<struct FConfigNPCSpawnEntriesContainer>             ConfigAddNPCSpawnEntriesContainer;                       // 0x2268(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		TArray<struct FConfigNPCSpawnEntriesContainer>             ConfigSubtractNPCSpawnEntriesContainer;                  // 0x2278(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		float                                                      BabyImprintingStatScaleMultiplier;                       // 0x2288(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyCuddleIntervalMultiplier;                            // 0x228C(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyImprintAmountMultiplier;                             // 0x2290(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyCuddleGracePeriodMultiplier;                         // 0x2294(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyCuddleLoseImprintQualitySpeedMultiplier;             // 0x2298(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HairGrowthSpeedMultiplier;                               // 0x229C(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPreventDiseases;                                        // 0x22A0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bNonPermanentDiseases;                                   // 0x22A1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0XVV[0x6];                                   // 0x22A2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAllClustersInventory*                               AllClustersInventory;                                    // 0x22A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    SaveForceRespawnDinosVersion;                            // 0x22B0(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HIOX[0x4];                                   // 0x22B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint64_t                                                   ServerID;                                                // 0x22B8(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HEN1[0x58];                                  // 0x22C0(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            SupportedSpawnRegions;                                   // 0x2318(0x0010) ZeroConstructor, Transient
		bool                                                       bServerUseDinoList;                                      // 0x2328(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EL2B[0x3];                                   // 0x2329(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxAllowedRespawnInterval;                               // 0x232C(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseDinoLevelUpAnimations;                               // 0x2330(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableDinoTaming;                                      // 0x2331(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableDinoRiding;                                      // 0x2332(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QKXJ[0x5];                                   // 0x2333(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SaveGameCustomVersion;                                   // 0x2338(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RQKE[0x824];                                 // 0x233C(0x0824) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PlayerBaseStatMultipliers[0xC];                          // 0x2B60(0x0030) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    NPCActiveCountTamed;                                     // 0x2B90(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    NPCActiveCount;                                          // 0x2B94(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    NPCCount;                                                // 0x2B98(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      RTSModeNumSelectableDinosScale;                          // 0x2B9C(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RTSMaxRangeFromPlayerCharacterScale;                     // 0x2BA0(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RTSProximityToEnemyStructureScale;                       // 0x2BA4(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MatingSpeedMultiplier;                                   // 0x2BA8(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FastDecayInterval;                                       // 0x2BAC(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseSingleplayerSettings;                                // 0x2BB0(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseCorpseLocator;                                       // 0x2BB1(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableGenesisMissions;                                 // 0x2BB2(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableStructurePlacementCollision;                     // 0x2BB3(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceUseInventoryAppends;                               // 0x2BB4(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RQN5[0x3];                                   // 0x2BB5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SupplyCrateLootQualityMultiplier;                        // 0x2BB8(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FishingLootQualityMultiplier;                            // 0x2BBC(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ItemStackSizeMultiplier;                                 // 0x2BC0(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CraftingSkillBonusMultiplier;                            // 0x2BC4(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowPlatformSaddleMultiFloors;                         // 0x2BC8(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowUnlimitedRespecs;                                  // 0x2BC9(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6C7X[0x2];                                   // 0x2BCA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FuelConsumptionIntervalMultiplier;                       // 0x2BCC(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    DestroyTamesOverLevelClamp;                              // 0x2BD0(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxAlliancesPerTribe;                                    // 0x2BD4(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxTribesPerAlliance;                                    // 0x2BD8(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableDinoDecayClaiming;                               // 0x2BDC(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableNonTribePinAccess;                               // 0x2BDD(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseTameLimitForStructuresOnly;                          // 0x2BDE(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bLimitTurretsInRange;                                    // 0x2BDF(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LimitTurretsRange;                                       // 0x2BE0(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    LimitTurretsNum;                                         // 0x2BE4(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bHardLimitTurretsInRange;                                // 0x2BE8(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAutoUnlockAllEngrams;                                   // 0x2BE9(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_D5JL[0x6];                                   // 0x2BEA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     ServerLastForceRespawnWildDinosTime;                     // 0x2BF0(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		class FString                                              UseStructurePreventionVolumeTagString;                   // 0x2BF8(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		float                                                      BaseTemperatureMultiplier;                               // 0x2C08(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceAllowAllStructures;                                // 0x2C0C(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceAllowAscensionItemDownloads;                       // 0x2C0D(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowCreativeMode;                                       // 0x2C0E(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7IDF[0x1];                                   // 0x2C0F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LimitNonPlayerDroppedItemsRange;                         // 0x2C10(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    LimitNonPlayerDroppedItemsCount;                         // 0x2C14(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GlobalPoweredBatteryDurabilityDecreasePerSecond;         // 0x2C18(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SingleplayerSettingsCorpseLifespanMultiplier;            // 0x2C1C(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UseCorpseLifeSpanMultiplier;                             // 0x2C20(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TimePeriodToHideDisconnectedPlayers;                     // 0x2C24(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPPreSpawnedDino;                                    // 0x2C28(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DWY5[0x3];                                   // 0x2C29(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PreventOfflinePvPConnectionInvincibleInterval;           // 0x2C2C(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedDinoCharacterFoodDrainMultiplier;                   // 0x2C30(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WildDinoCharacterFoodDrainMultiplier;                    // 0x2C34(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WildDinoTorporDrainMultiplier;                           // 0x2C38(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PassiveTameIntervalMultiplier;                           // 0x2C3C(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedDinoTorporDrainMultiplier;                          // 0x2C40(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableWeatherFog;                                      // 0x2C44(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BUAR[0x3];                                   // 0x2C45(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MeshCheckingRayDistance;                                 // 0x2C48(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      MeshCheckingSubdivisons;                                 // 0x2C4C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      MeshCheckingPercentageToFail;                            // 0x2C50(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bIgnoreStructuresPreventionVolumes;                      // 0x2C54(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bGenesisUseStructuresPreventionVolumes;                  // 0x2C55(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_APFT[0x2];                                   // 0x2C56(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              LiveTuningFileName;                                      // 0x2C58(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		unsigned char                                              UnknownData_K0WQ[0x31];                                  // 0x2C68(0x0031) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bLogChatMessages;                                        // 0x2C99(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_R8WN[0x2];                                   // 0x2C9A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ChatLogFlushIntervalSeconds;                             // 0x2C9C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    ChatLogFileSplitIntervalSeconds;                         // 0x2CA0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    ChatLogMaxAgeInDays;                                     // 0x2CA4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CUTP[0x58];                                  // 0x2CA8(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLeaderboardsContainer                              LeaderboardContainer;                                    // 0x2D00(0x0010) Transient, SaveGame
		unsigned char                                              UnknownData_WL6I[0x58];                                  // 0x2D10(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHasCovertedToStore;                                     // 0x2D68(0x0001) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		bool                                                       bAllowStoredDatas;                                       // 0x2D69(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2YCO[0xC6];                                  // 0x2D6A(0x00C6) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FBuffAddition>                               AdditionalDefaultBuffs;                                  // 0x2E30(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bParseServerToJson;                                      // 0x2E40(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_028D[0x7F];                                  // 0x2E41(0x007F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPreSpawnedDino;                                        // 0x2EC0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnKilled;                                                // 0x2ED0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnPostLogin;                                             // 0x2EE0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnStartNewPlayer;                                        // 0x2EF0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnAddNewTribe;                                           // 0x2F00(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnRemoveTribe;                                           // 0x2F10(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnRemovePlayerFromTribe;                                 // 0x2F20(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnServerChatMessage;                                     // 0x2F30(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnServerDirectMessage;                                   // 0x2F40(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnServerNotification;                                    // 0x2F50(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnNotifyDamage;                                          // 0x2F60(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnSerializeForSaveFile;                                  // 0x2F70(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_AJNJ[0x20];                                  // 0x2F80(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BaseHexagonRewardMultiplier;                             // 0x2FA0(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HexagonRewardMultiplier;                                 // 0x2FA4(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HexagonCostMultiplier;                                   // 0x2FA8(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableHexagonStore;                                    // 0x2FAC(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bHexStoreAllowOnlyEngramTradeOption;                     // 0x2FAD(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LUEA[0x2];                                   // 0x2FAE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FClassNameReplacement>                       DynamicNPCReplacements;                                  // 0x2FB0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		TArray<struct FClassNameReplacement>                       CollectiveNPCReplacements;                               // 0x2FC0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		TArray<class FString>                                      PreventTransferForClassNames;                            // 0x2FD0(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance
		bool                                                       bAllowFlyerSpeedLeveling;                                // 0x2FE0(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bEnableWorldBuffScaling;                                 // 0x2FE1(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableWorldBuffs;                                      // 0x2FE2(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_83OC[0x1];                                   // 0x2FE3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WorldBuffScalingEfficacy;                                // 0x2FE4(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FCrateTemporaryQualityModifierSet>           TemporaryCrateModifiers;                                 // 0x2FE8(0x0010) BlueprintVisible, ZeroConstructor
		TArray<struct FResourceTemporaryAmountModifierSet>         TemporaryResourceModifiers;                              // 0x2FF8(0x0010) BlueprintVisible, ZeroConstructor
		float                                                      AdjustableMutagenSpawnDelayMultiplier;                   // 0x3008(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bDisableDefaultMapItemSets;                              // 0x300C(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SZY5[0xB];                                   // 0x300D(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        DynamicDisabledWorldBuffs;                               // 0x3018(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		unsigned char                                              UnknownData_R0Z3[0x10];                                  // 0x3028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RedisTimeoutInMinutes;                                   // 0x3038(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       RestartedDueToRedisTimeout;                              // 0x303C(0x0001) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZLGW[0x3];                                   // 0x303D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ImprintLimit;                                            // 0x3040(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxStructuresToAllowForPickupOverride;                   // 0x3044(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableCustomFoldersInTributeInventories;               // 0x3048(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableRailgunPVP;                                      // 0x3049(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XT6Y[0x2];                                   // 0x304A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinimumTimebetweeninventoryRetrieval;                    // 0x304C(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		bool TryGetIntOptionIni(const class FString& Section, const class FString& OptionName, int32_t* Value);
		bool TryGetIntOption(const class FString& Section, const class FString& Options, const class FString& OptionName, int32_t* Value);
		bool TryGetBoolOptionIni(const class FString& Section, const class FString& OptionName, bool* Value);
		bool TryGetBoolOption(const class FString& Section, const class FString& Options, const class FString& OptionName, bool* Value);
		bool STATIC_TriggerLevelCustomEvents(class UWorld* inWorld, const class FString& EventName, int32_t IDtoOnlyAllowExecutionOncePerFrame);
		float TimeSinceMissionDeactivated(class UClass* MissionType);
		void ShooterCharacterSpawned__DelegateSignature(class AShooterCharacter* TheShooterCharacter);
		void ShooterCharacterDied__DelegateSignature(class AShooterCharacter* TheShooterCharacter);
		void SetTimeOfDay(const class FString& timeString);
		void SetLastMissionDeactivatedUtcTime(class UClass* MissionType, double UtcTime);
		void SendServerNotification(const class FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay, int32_t ReceiverTeamId, int32_t ReceiverPlayerID, bool bDoBillboard);
		void SendServerDirectMessage(const class FString& PlayerSteamIDconst, const class FString& MessageText, const struct FLinearColor& MessageColor, bool bIsBold, int32_t ReceiverTeamId, int32_t ReceiverPlayerID, const class FString& PlayerName);
		void SendServerChatMessage(const class FString& MessageText, const struct FLinearColor& MessageColor, bool bIsBold, int32_t ReceiverTeamId, int32_t ReceiverPlayerID);
		void RestartServer();
		void RemovePlayerData(class AShooterPlayerState* PlayerState);
		void RemoveInactivePlayersAndTribes();
		void ReassertColorization();
		void PrintToServerGameLog(const class FString& InString, bool bSendChatToAllAdmins);
		void PrintToGameplayLog(const class FString& InString);
		void PreSpawnedDino__DelegateSignature(class APrimalDinoCharacter* theDino);
		void PostAlarmNotificationTribe(int32_t TribeId, const class FString& Title, const class FString& Message);
		void PostAlarmNotificationPlayerID(int32_t PlayerId, const class FString& Title, const class FString& Message);
		void PostAlarmNotification(const class FString& SteamID, const class FString& Title, const class FString& Message);
		void OnStartNewPlayer__DelegateSignature(class APlayerController* NewPlayer);
		void OnServerNotification__DelegateSignature(const class FString& MessageText, int32_t ReceiverTeamId, int32_t ReceiverPlayerID);
		void OnServerDirectMessage__DelegateSignature(const class FString& PlayerSteamIDconst, const class FString& MessageText, int32_t ReceiverTeamId, int32_t ReceiverPlayerID, const class FString& PlayerName);
		void OnServerChatMessage__DelegateSignature(const class FString& MessageText, int32_t ReceiverTeamId, int32_t ReceiverPlayerID);
		void OnSerializeForSaveFile__DelegateSignature();
		void OnRemoveTribe__DelegateSignature(int32_t TribeId);
		void OnRemovePlayerFromTribe__DelegateSignature(int32_t TribeId, int32_t PlayerDataID);
		void OnPostLogin__DelegateSignature(class APlayerController* NewPlayer);
		void OnNotifyDamage__DelegateSignature(class AActor* Victim, float DamageAmount, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		void OnLogout(class AController* Exiting);
		void OnLandscapeLevelUnloaded();
		void OnLandscapeLevelLoaded();
		void OnKilled__DelegateSignature(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UDamageType* DamageType);
		void OnAddNewTribe__DelegateSignature(class AShooterPlayerState* PlayerOwner, const class FString& TribeName, const struct FTribeGovernment& TribeGovernment);
		void MissionTriggerEndOverlap__DelegateSignature(class AMissionTrigger* Trigger, const class FName& TriggerKey, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void MissionTriggerBeginOverlap__DelegateSignature(class AMissionTrigger* Trigger, const class FName& TriggerKey, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void LoadedWorld();
		void KickPlayerController(class APlayerController* thePC, const class FString& KickMessage);
		void KickAllPlayersAndReload();
		bool IsTimeSinceMissionDeactivated(class UClass* MissionType, float CheckTimeSince, bool bForceTrueAtZeroTime);
		bool IsPlayerControllerAllowedToJoinNoCheck(class AShooterPlayerController* ForPlayer);
		bool IsPlayerControllerAllowedToExclusiveJoin(class AShooterPlayerController* ForPlayer);
		bool IsPlayerAllowedToCheat(class AShooterPlayerController* ForPlayer);
		void InitOptionString(const class FString& Commandline, const class FString& Section, const class FString& Option);
		void InitOptionInteger(const class FString& Commandline, const class FString& Section, const class FString& Option, int32_t CurrentValue);
		void InitOptionFloat(const class FString& Commandline, const class FString& Section, const class FString& Option, float CurrentValue);
		void InitOptionBool(const class FString& Commandline, const class FString& Section, const class FString& Option, bool bDefaultValue);
		void InitGameStateDataSets();
		void IncrementNumDeaths(const class FString& PlayerDataID);
		bool HandleNewPlayer(class AShooterPlayerController* NewPlayer, class UPrimalPlayerData* PlayerData, class AShooterCharacter* PlayerCharacter, bool bIsFromLogin);
		struct FTribeData GetTribeDataBlueprint(int32_t TribeId);
		class FString GetStringOption(const class FString& Section, const class FString& OptionName);
		class FString GetSessionTimeString();
		bool GetServerSettingsFloat(const class FString& KeyValue, float* OutFloat);
		class FString GetServerName(bool bNumbersAndLettersOnly);
		class UPrimalPlayerData* GetPlayerDataByInt(uint64_t* PlayerDataIDInt);
		class UPrimalPlayerData* GetPlayerData(const class FString& PlayerDataID);
		TArray<class APrimalDinoCharacter*> GetOverlappingDinoCharactersOfTeamAndClass(const struct FVector& AtLocation, float OverlapRange, class UClass* DinoClass, int32_t DinoTeam, bool bExactClassMatch, bool bIgnoreClass);
		int32_t GetNumDeaths(const class FString& PlayerDataID);
		int32_t GetNumberOfLivePlayersOnTribe(const class FString& TribeName);
		bool GetLaunchOptionFloat(const class FString& LaunchOptionKey, float* ReturnVal);
		double GetLastMissionDeactivatedUtcTime(class UClass* MissionType);
		int32_t GetIntOptionIni(const class FString& Section, const class FString& OptionName);
		float GetFloatOptionIni(const class FString& Section, const class FString& OptionName);
		bool GetBoolOptionIni(const class FString& Section, const class FString& OptionName, bool bDefaultValue);
		void ForceRepopulateFoliageAtPoint(const struct FVector& AtPoint, float MaxRangeFromPoint, int32_t MaxNumFoliages, class UClass* RepopulatedEmitter, const struct FVector& StructureDownTraceVector, const struct FVector& StructureUpTraceVector, bool bDontCheckForOverlaps, int32_t TriggeredByTeamID, bool bCheckAreaAroundEachIndividualFoliage, float RadiusAroundEachIndivitualFoliageToCheck);
		void ForceRepopulateAllHarvestElements(const struct FVector& AtPoint, float MaxRangeFromPoint);
		int32_t ForceCreateTribe(const class FString& TribeName, int32_t TeamOverride);
		int32_t ForceAddPlayerToTribe(class AShooterPlayerState* ForPlayerState, const class FString& TribeName);
		int32_t CountOverlappingDinoCharactersOfTeamAndClass(const struct FVector& AtLocation, float OverlapRange, class UClass* DinoClass, int32_t DinoTeam, bool bExactClassMatch, bool bIgnoreClass);
		void ClearLastMissionDeactivatedTime(class UClass* MissionType);
		bool CheckJoinInProgress(bool bIsFromLogin, class APlayerController* NewPlayer);
		void CharacterPossessionByPlayer__DelegateSignature(class APrimalCharacter* TheCharacter, class APlayerController* ByPlayerController);
		void BPPreSpawnedDino(class APrimalDinoCharacter* theDino);
		bool BPIsSpawnpointPreferred(class APlayerStart* SpawnPoint, class AController* Player);
		bool BPIsSpawnpointAllowed(class APlayerStart* SpawnPoint, class AController* Player);
		bool AreTribesAllied(int32_t TribeID1, int32_t TribeID2);
		bool AllowTaming(int32_t ForTeam);
		bool STATIC_AllowDamage(class UWorld* ForWorld, int32_t TargetingTeam1, int32_t TargetingTeam2, bool bIgnoreDamageIfAllied);
		void AddToTribeLog(int32_t TribeId, const class FString& NewLog);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.CustomGameMode
	 * Size -> 0x0000 (FullSize[0x3050] - InheritedSize[0x3050])
	 */
	class ACustomGameMode : public AShooterGameMode
	{
	public:
		void SaveIntToConfig(int32_t IntValue, const class FString& KeyValue);
		void SaveFloatToConfig(float IntValue, const class FString& KeyValue);
		void SaveBoolToConfig(bool IntValue, const class FString& KeyValue);
		bool OnUpdateTribeData(const struct FTribeData& NewTribeData);
		bool OnRemoveTribe(int32_t TribeId);
		bool OnPlayerCanRestart(class APlayerController* Player);
		bool OnIsUsedSpawnPointStillSupported(class APlayerStart* SpawnPoint, class AController* Player);
		bool OnIsSpawnpointAllowed(class APlayerStart* SpawnPoint, class AController* Player);
		bool OnInitOptionEvent(const class FString& Options);
		bool OnInitGameState();
		bool OnInitGame(const class FString& MapName, const class FString& Options, class FString* ErrorMessage);
		bool OnHandleLeavingMap();
		class FString OnDoGameCommand(const class FString& TheCommand);
		bool OnAllowRenameTribe(class AShooterPlayerState* ForPlayerState, const class FString& TribeName);
		bool OnAllowNotifyRemotePlayerDeath(class AShooterCharacter* forChar);
		bool OnAllowModifyStatusValue(class UPrimalCharacterStatusComponent* forComp, EPrimalCharacterStatusValue ValueType, float amount);
		bool OnAllowClearTribe(class AShooterPlayerState* ForPlayerState);
		bool OnAllowAddXP(class UPrimalCharacterStatusComponent* forComp);
		bool OnAllowAddToTribe(class AShooterPlayerState* ForPlayerState, const struct FTribeData& MyNewTribe);
		float OnAdjustDamage(class AActor* Victim, float DefaultDamage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		struct FTribeData STATIC_MakeTribeData(class FString* TribeName, int32_t* OwnerPlayerDataID, int32_t* TribeId, TArray<class FString>* MembersPlayerName, TArray<int32_t>* MembersPlayerDataID, TArray<int32_t>* TribeAdmins, bool* bSetGovernment, struct FTribeGovernment* TribeGovernment, TArray<struct FPrimalPlayerCharacterConfigStructReplicated>* MembersConfigs);
		void KickPlayer(class APlayerController* NewPlayer);
		bool IsInAllowedToCheatList(class APlayerController* NewPlayer);
		void InitOptionFloatToINI(const class FString& Options, float FloatValue, const class FString& KeyValue);
		float GetValueFromINI(const class FString& KeyValue);
		int32_t GetIntValueFromINI(const class FString& KeyValue);
		float STATIC_GetIniFloatValue(const class FString& Section, const class FString& KeyValue);
		float GetFloatValueFromINI(const class FString& KeyValue);
		bool GetBoolValueFromINI(const class FString& KeyValue);
		void CleanUpSotfNotificationManager();
		bool CheckForCommand(const class FString& CommandName);
		void STATIC_BreakTribeData(const struct FTribeData& Data, class FString* TribeName, int32_t* OwnerPlayerDataID, int32_t* TribeId, TArray<class FString>* MembersPlayerName, TArray<int32_t>* MembersPlayerDataID, TArray<int32_t>* TribeAdmins, bool* bSetGovernment, struct FTribeGovernment* TribeGovernment, TArray<struct FPrimalPlayerCharacterConfigStructReplicated>* MembersConfigs);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterGameSession
	 * Size -> 0x01E0 (FullSize[0x0668] - InheritedSize[0x0488])
	 */
	class AShooterGameSession : public AGameSession
	{
	public:
		unsigned char                                              UnknownData_AKWE[0x1E0];                                 // 0x0488(0x01E0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterGameState
	 * Size -> 0x0620 (FullSize[0x0B58] - InheritedSize[0x0538])
	 */
	class AShooterGameState : public AGameState
	{
	public:
		unsigned char                                              UnknownData_8JPT[0x8];                                   // 0x0538(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NumNPC;                                                  // 0x0540(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    NumHibernatedNPC;                                        // 0x0544(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    NumActiveNPC;                                            // 0x0548(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    NumDeadNPC;                                              // 0x054C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    NumPlayerActors;                                         // 0x0550(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    NumPlayerConnected;                                      // 0x0554(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bServerUseLocalizedChat;                                 // 0x0558(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IYDK[0x3];                                   // 0x0559(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LocalizedChatRadius;                                     // 0x055C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		float                                                      LocalizedChatRadiusUnconsiousScale;                      // 0x0560(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		float                                                      ServerFramerate;                                         // 0x0564(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class FString                                              NewStructureDestructionTag;                              // 0x0568(0x0010) ZeroConstructor, Transient, SaveGame
		int32_t                                                    DayNumber;                                               // 0x0578(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      DayTime;                                                 // 0x057C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		double                                                     NetworkTime;                                             // 0x0580(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		uint32_t                                                   TimeUTC;                                                 // 0x0588(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bIsOfficialServer;                                       // 0x058C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bIsListenServer;                                         // 0x058D(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bIsDediServer;                                           // 0x058E(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bIsServerRunningOnConsole;                               // 0x058F(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bIsArkTributeAvailable;                                  // 0x0590(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bIsArkDownloadsAllowed;                                  // 0x0591(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bAllowThirdPersonPlayer;                                 // 0x0592(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bServerHardcore;                                         // 0x0593(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bServerPVE;                                              // 0x0594(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bAutoPvE;                                                // 0x0595(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bServerCrosshair;                                        // 0x0596(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bServerForceNoHUD;                                       // 0x0597(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bFlyerPlatformAllowUnalignedDinoBasing;                  // 0x0598(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bMapPlayerLocation;                                      // 0x0599(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bPvEDisableFriendlyFire;                                 // 0x059A(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bPvEAllowTribeWar;                                       // 0x059B(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bPvEAllowTribeWarCancel;                                 // 0x059C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bEnablePvPGamma;                                         // 0x059D(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bDisablePvEGamma;                                        // 0x059E(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EHNI[0x1];                                   // 0x059F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NumTamedDinos;                                           // 0x05A0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    MaxStructuresInRange;                                    // 0x05A4(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      DayCycleSpeedScale;                                      // 0x05A8(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DayTimeSpeedScale;                                       // 0x05AC(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NightTimeSpeedScale;                                     // 0x05B0(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PvEStructureDecayPeriodMultiplier;                       // 0x05B4(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PvEDinoDecayPeriodMultiplier;                            // 0x05B8(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PerPlatformMaxStructuresMultiplier;                      // 0x05BC(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableStructureDecayPvE;                               // 0x05C0(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableDinoDecayPvE;                                    // 0x05C1(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowCaveBuildingPvE;                                   // 0x05C2(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowCaveBuildingPvP;                                   // 0x05C3(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPreventDownloadSurvivors;                               // 0x05C4(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bReachedPlatformStructureLimit;                          // 0x05C5(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bAdminLogging;                                           // 0x05C6(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bPvPStructureDecay;                                      // 0x05C7(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bPreventDownloadDinos;                                   // 0x05C8(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPreventDownloadItems;                                   // 0x05C9(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPreventUploadDinos;                                     // 0x05CA(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPreventUploadItems;                                     // 0x05CB(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPreventUploadSurvivors;                                 // 0x05CC(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPreventMateBoost;                                       // 0x05CD(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPreventStructurePainting;                               // 0x05CE(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowCharacterCreation;                                 // 0x05CF(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowSpawnPointSelection;                               // 0x05D0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AQTZ[0x3];                                   // 0x05D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxTamedDinos;                                           // 0x05D4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bDisableSpawnAnimations;                                 // 0x05D8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DSX6[0x7];                                   // 0x05D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PlayerListString;                                        // 0x05E0(0x0010) Net, ZeroConstructor, Transient
		float                                                      GlobalSpoilingTimeMultiplier;                            // 0x05F0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      GlobalItemDecompositionTimeMultiplier;                   // 0x05F4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    MaxNumberOfPlayersInTribe;                               // 0x05F8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      TribeSlotReuseCooldown;                                  // 0x05FC(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      GlobalCorpseDecompositionTimeMultiplier;                 // 0x0600(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      EggHatchSpeedMultiplier;                                 // 0x0604(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class FName                                                ActiveEvent;                                             // 0x0608(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bAllowPaintingWithoutResources;                          // 0x0610(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bEnableExtraStructurePreventionVolumes;                  // 0x0611(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_93US[0x6];                                   // 0x0612(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FItemCraftingCostOverride>                   OverrideItemCraftingCosts;                               // 0x0618(0x0010) Net, ZeroConstructor, Transient
		TArray<struct FItemMaxItemQuantityOverride>                OverrideItemMaxQuantity;                                 // 0x0628(0x0010) Net, ZeroConstructor, Transient
		unsigned char                                              UnknownData_A0L0[0x50];                                  // 0x0638(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastServerSaveTime;                                      // 0x0688(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      ServerSaveInterval;                                      // 0x0690(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      TribeNameChangeCooldown;                                 // 0x0694(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      PlatformSaddleBuildAreaBoundsMultiplier;                 // 0x0698(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bAlwaysAllowStructurePickup;                             // 0x069C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Y850[0x3];                                   // 0x069D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StructurePickupTimeAfterPlacement;                       // 0x06A0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      StructurePickupHoldDuration;                             // 0x06A4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bAllowIntegratedSPlusStructures;                         // 0x06A8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bAllowHideDamageSourceFromLogs;                          // 0x06A9(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RR8Z[0x1E];                                  // 0x06AA(0x001E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAudioComponent*                                     DynamicMusicAudioComponent;                              // 0x06C8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class UAudioComponent*                                     DynamicMusicAudioComponent2;                             // 0x06D0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_60U6[0x8];                                   // 0x06D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FLevelExperienceRamp>                        LevelExperienceRampOverrides;                            // 0x06E0(0x0010) Edit, Net, ZeroConstructor, DisableEditOnInstance
		TArray<struct FEngramEntryOverride>                        OverrideEngramEntries;                                   // 0x06F0(0x0010) Edit, Net, ZeroConstructor, DisableEditOnInstance
		class UClass*                                              CustomGameUITemplate;                                    // 0x0700(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class FString>                                      PreventDinoTameClassNames;                               // 0x0708(0x0010) Edit, Net, ZeroConstructor, DisableEditOnInstance
		float                                                      ListenServerTetherDistanceMultiplier;                    // 0x0718(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GTKF[0x4];                                   // 0x071C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PGMapName;                                               // 0x0720(0x0010) Net, ZeroConstructor, Transient
		TArray<int32_t>                                            SupportedSpawnRegions;                                   // 0x0730(0x0010) Net, ZeroConstructor, Transient, RepNotify
		class UPaintingCache*                                      PaintingCache;                                           // 0x0740(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class USoundBase*                                          StaticOverrideMusic;                                     // 0x0748(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bEnableDeathTeamSpectator;                               // 0x0750(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EHMI[0x3];                                   // 0x0751(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             PlayerFloatingHUDOffset;                                 // 0x0754(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PlayerFloatingHUDOffsetScreenY;                          // 0x0760(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StructureDamageRepairCooldown;                           // 0x0764(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bForceAllStructureLocking;                               // 0x0768(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bAllowCustomRecipes;                                     // 0x0769(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bAllowRaidDinoFeeding;                                   // 0x076A(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3388[0x1];                                   // 0x076B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CustomRecipeEffectivenessMultiplier;                     // 0x076C(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		float                                                      CustomRecipeSkillMultiplier;                             // 0x0770(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GCNJ[0x4];                                   // 0x0774(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          OverrideAreaMusic;                                       // 0x0778(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             OverrideAreaMusicPosition;                               // 0x0780(0x000C) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      OverrideAreaMusicRange;                                  // 0x078C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowUnclaimDinos;                                      // 0x0790(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_O2ZU[0x3];                                   // 0x0791(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FloatingHUDRange;                                        // 0x0794(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FloatingChatRange;                                       // 0x0798(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    ExtinctionEventTimeInterval;                             // 0x079C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      RTSModeNumSelectableDinosScale;                          // 0x07A0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      RTSMaxRangeFromPlayerCharacterScale;                     // 0x07A4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ExtinctionEventPercent;                                  // 0x07A8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    ExtinctionEventSecondsRemaining;                         // 0x07AC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bDoExtinctionEvent;                                      // 0x07B0(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_763V[0x3];                                   // 0x07B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DestroyTamesOverLevelClamp;                              // 0x07B4(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<struct FInventoryComponentDefaultItemsAppend>       InventoryComponentAppends;                               // 0x07B8(0x0010) Edit, Net, ZeroConstructor, DisableEditOnInstance
		bool                                                       bPreventOfflinePvP;                                      // 0x07C8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bPvPDinoDecay;                                           // 0x07C9(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bAllowUnclaimDinosConfig;                                // 0x07CA(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bForceUseInventoryAppends;                               // 0x07CB(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bOverideStructurePlatformPrevention;                     // 0x07CC(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6QYE[0x3];                                   // 0x07CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ItemStackSizeMultiplier;                                 // 0x07D0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q1CT[0x4];                                   // 0x07D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            PreventOfflinePvPLiveTeams;                              // 0x07D8(0x0010) Net, ZeroConstructor, Transient
		TArray<int32_t>                                            PreventOfflinePvPExpiringTeams;                          // 0x07E8(0x0010) Net, ZeroConstructor, Transient
		TArray<double>                                             PreventOfflinePvPExpiringTimes;                          // 0x07F8(0x0010) Net, ZeroConstructor, Transient
		unsigned char                                              UnknownData_2JMP[0xA0];                                  // 0x0808(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bAllowAnyoneBabyImprintCuddle;                           // 0x08A8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bDisableImprintDinoBuff;                                 // 0x08A9(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YJAS[0x2];                                   // 0x08AA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxPersonalTamedDinos;                                   // 0x08AC(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_D3ES[0x18];                                  // 0x08B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ClusterId;                                               // 0x08C8(0x0010) Net, ZeroConstructor, Transient
		unsigned char                                              UnknownData_CONW[0x30];                                  // 0x08D8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ServerSessionName;                                       // 0x0908(0x0010) Net, ZeroConstructor, Transient
		bool                                                       bPreventTribeAlliances;                                  // 0x0918(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ULX6[0x19];                                  // 0x0919(0x0019) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bServerUseDinoList;                                      // 0x0932(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPvEAllowStructuresAtSupplyDrops;                        // 0x0933(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bAllowForceNetUpdate;                                    // 0x0934(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QOO5[0x3];                                   // 0x0935(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinimumDinoReuploadInterval;                             // 0x0938(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      HairGrowthSpeedMultiplier;                               // 0x093C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      FastDecayInterval;                                       // 0x0940(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q51T[0x4];                                   // 0x0944(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CachedSessionOwnerId;                                    // 0x0948(0x0010) Net, ZeroConstructor, Transient
		unsigned char                                              UnknownData_8N90[0x8];                                   // 0x0958(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnHTTPGetResponse;                                       // 0x0960(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnHTTPPostResponse;                                      // 0x0970(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		bool                                                       bAllowMultipleAttachedC4;                                // 0x0980(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bCrossARKAllowForeignDinoDownloads;                      // 0x0981(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MHYU[0x16];                                  // 0x0982(0x0016) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseCorpseLocator;                                       // 0x0998(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bDisableStructurePlacementCollision;                     // 0x0999(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bUseSingleplayerSettings;                                // 0x099A(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bAllowPlatformSaddleMultiFloors;                         // 0x099B(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bPreventSpawnAnimations;                                 // 0x099C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FSUN[0x3];                                   // 0x099D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxAlliancesPerTribe;                                    // 0x09A0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    MaxTribesPerAlliance;                                    // 0x09A4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bIsLegacyServer;                                         // 0x09A8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bDisableDinoDecayClaiming;                               // 0x09A9(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_E12Q[0x2];                                   // 0x09AA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                UseStructurePreventionVolumeTag;                         // 0x09AC(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    MaxStructuresInSmallRadius;                              // 0x09B4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      RadiusStructuresInSmallRadius;                           // 0x09B8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bUseTameLimitForStructuresOnly;                          // 0x09BC(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bLimitTurretsInRange;                                    // 0x09BD(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TUD4[0x2];                                   // 0x09BE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LimitTurretsRange;                                       // 0x09C0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    LimitTurretsNum;                                         // 0x09C4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bForceAllowAllStructures;                                // 0x09C8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bShowCreativeMode;                                       // 0x09C9(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NQHC[0x26];                                  // 0x09CA(0x0026) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PassiveTameIntervalMultiplier;                           // 0x09F0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AYI0[0x4];                                   // 0x09F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      UniqueDinos;                                             // 0x09F8(0x0010) Net, ZeroConstructor, Transient
		TArray<class FName>                                        ActiveMissionTags;                                       // 0x0A08(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		uint32_t                                                   MinimumUniqueDownloadInterval;                           // 0x0A18(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		uint32_t                                                   MaximumUniqueDownloadInterval;                           // 0x0A1C(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIgnoreStructuresPreventionVolumes;                      // 0x0A20(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bPreventOutOfTribePinCodeUse;                            // 0x0A21(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UQ76[0x6];                                   // 0x0A22(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDinoDownloadData>                           UniqueDownloads;                                         // 0x0A28(0x0010) Net, ZeroConstructor, Transient, SaveGame
		TArray<struct FDataSet>                                    GameDataSets;                                            // 0x0A38(0x0010) BlueprintVisible, Net, ZeroConstructor, Transient
		class UPrimalWorldSettingsEventOverrides*                  ActiveEventOverrides;                                    // 0x0A48(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bIgnoreLimitMaxStructuresInRangeTypeFlag;                // 0x0A50(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LI8F[0x7];                                   // 0x0A51(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FMassTeleportData>                           MassTeleportQueue;                                       // 0x0A58(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		unsigned char                                              UnknownData_5MOP[0x20];                                  // 0x0A68(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bAllowLowGravitySpin;                                    // 0x0A88(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KJ6B[0x17];                                  // 0x0A89(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnDinoDownloaded;                                        // 0x0AA0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnDinoUploaded;                                          // 0x0AB0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		TArray<struct FWorldBuffPersistantData>                    WorldBuffPersistantDatas;                                // 0x0AC0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame
		float                                                      TurretCopySettingsCooldown;                              // 0x0AD0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      BaseHexagonRewardMultiplier;                             // 0x0AD4(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      HexagonRewardMultiplier;                                 // 0x0AD8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      HexagonCostMultiplier;                                   // 0x0ADC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bDisableHexagonStore;                                    // 0x0AE0(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bHexStoreAllowOnlyEngramTradeOption;                     // 0x0AE1(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bAllowFlyerSpeedLeveling;                                // 0x0AE2(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LLKZ[0x1];                                   // 0x0AE3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    LiveTuningReplicatedChunkSize;                           // 0x0AE4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class FString>                                      LiveTuningOverloadChunks;                                // 0x0AE8(0x0010) Net, ZeroConstructor, Transient, RepNotify
		unsigned char                                              UnknownData_QF0V[0x8];                                   // 0x0AF8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      PreventTransferForClassNames;                            // 0x0B00(0x0010) Edit, Net, ZeroConstructor, DisableEditOnInstance
		int32_t                                                    EnvironmentIndex;                                        // 0x0B10(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    NextEnvironmentIndex;                                    // 0x0B14(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		double                                                     NextMutagenTime;                                         // 0x0B18(0x0008) BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    OverrideMaxExperiencePointsPlayer;                       // 0x0B20(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    OverrideMaxExperiencePointsDino;                         // 0x0B24(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bDisableCustomFoldersInTributeInventories;               // 0x0B28(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SNR6[0x7];                                   // 0x0B29(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            DeferredExplorerNoteUnlockQueue;                         // 0x0B30(0x0010) ZeroConstructor
		TArray<TWeakObjectPtr<class AActor>>                       ForcedRelevantPOIActors;                                 // 0x0B40(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient
		bool                                                       bDisableRailgunPVP;                                      // 0x0B50(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Z06N[0x3];                                   // 0x0B51(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinimumTimebetweeninventoryRetrieval;                    // 0x0B54(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor

	public:
		bool StartMassTeleport(struct FMassTeleportData* MassTeleportData, const struct FTeleportDestination& TeleportDestination, class AActor* InitiatingActor, TArray<class AActor*> TeleportActors, class UClass* BuffToApply, float TeleportDuration, float TeleportRadius, bool bTeleportingSnapsToGround, bool bMaintainRotation);
		bool ShouldMassTeleportMoveActor(class AActor* forActor, const struct FMassTeleportData& WithMassTeleportData);
		void SetNextEnvironmentIndex(int32_t newNextEnvironmentIndex);
		void SetEnvironmentIndex(int32_t newEnvironmentIndex);
		void RemoveRelevantPOIActor(class AActor* POI);
		void QueueExplorerNoteForDeferredUnlock(int32_t ExplorerNoteIndex);
		void PrepareActorForMassTeleport(class AActor* PrepareActor, const struct FMassTeleportData& WithMassTeleportData);
		void OnRep_SupportedSpawnRegions();
		void OnRep_ReplicateLocalizedChatRadius();
		void OnRep_ReplicateLiveTuningOverloadChunks();
		void OnHTTPPostResponse__DelegateSignature(bool bSuccess, const class FString& StringResult);
		void OnHTTPGetProcessed__DelegateSignature(bool bSuccess, const class FString& StringResult);
		void OnDinoUploaded__DelegateSignature(class APrimalDinoCharacter* theDino);
		void OnDinoDownloaded__DelegateSignature(class APrimalDinoCharacter* theDino, class AShooterPlayerController* TamerController);
		void NetUpdateOfflinePvPLiveTeams(TArray<int32_t> NewPreventOfflinePvPLiveTeams);
		void NetUpdateOfflinePvPExpiringTeams(TArray<int32_t> NewPreventOfflinePvPExpiringTeams, TArray<double> NewPreventOfflinePvPExpiringTimes);
		void NetAddFloatingText(const struct FVector& AtLocation, const class FString& FloatingTextString, const struct FColor& FloatingTextColor, float ScaleX, float ScaleY, float TextLifeSpan, const struct FVector& TextVelocity, float MinScale, float FadeInTime, float FadeOutTime, int32_t OnlySendToTeamID);
		void NetAddFloatingDamageText(const struct FVector& AtLocation, int32_t DamageAmount, int32_t FromTeamID, int32_t OnlySendToTeamID);
		void Multi_SpawnCosmeticActor(class UClass* SpawnActorOfClass, const struct FVector& SpawnAtLocation, const struct FRotator& SpawnWithRotation);
		void LoadedWorld();
		bool STATIC_IsValidMassTeleportData(const struct FMassTeleportData& CheckData);
		bool IsTeamIDInvincible(int32_t TargetingTeamID, bool bInvincibleOnlyWhenOffline);
		bool IsMassTeleportInProgress(class AActor* InitiatingActor);
		bool IsEngramClassHidden(class UClass* ForItemClass);
		void HTTPPostRequest(const class FString& InURL, const class FString& Content);
		void HTTPGetRequest(const class FString& InURL);
		void HandleInitializedGameState();
		double GetOfflineDamagePreventionTime(int32_t TargetingTeamID);
		double STATIC_GetNetworkTimeDelta(class AShooterGameState* GameState, double netTime, bool bTimeUntil);
		bool GetItemMaxQuantityOverride(class UClass* ForClass, struct FMaxItemQuantityOverride* OutMaxQuantity);
		TArray<struct FGameIniData> GetIniArray(const class FString& SectionName);
		class FString GetDayTimeString();
		class FString GetCleanServerSessionName();
		void DisplayWelcomeUI();
		bool CancelMassTeleport(class AActor* WithInitiatingActor);
		void BPDrawGameStateHUD(class AShooterHUD* HUD);
		class APrimalBuff* STATIC_BaseSpawnBuffAndAttachToCharacter(class UClass* Buff, class APrimalCharacter* PrimalCharacter, float ExperiencePoints);
		struct FVector2D STATIC_BaseProjectWorldToScreenPosition(const struct FVector& WorldLocation, class APlayerController* thePC);
		bool STATIC_BaseIsTribeID(int32_t TeamId);
		class ACustomActorList* BaseGetCustomActors(const class FName& SearchCustomTag);
		TArray<class AShooterPlayerController*> BaseGetAllShooterControllers();
		TArray<class AShooterCharacter*> BaseGetAllShooterCharactersOfTeam(int32_t KillerTeam);
		TArray<class AShooterCharacter*> BaseGetAllShooterCharacters();
		TArray<class APrimalDinoCharacter*> BaseGetAllDinoCharactersOfTeam(int32_t KillerTeam);
		void STATIC_BaseDrawTileOnCanvas(class AShooterHUD* HUD, class UTexture* Tex, float X, float Y, float XL, float YL, float U, float V, float UL, float VL, const struct FColor& DrawColor);
		bool AllowDownloadDino(class UClass* TheDinoClass);
		bool AllowDinoTame(class APrimalDinoCharacter* dinoChar, class AShooterPlayerController* ForPC);
		bool AllowDinoClassTame(class UClass* DinoCharClass, class AShooterPlayerController* ForPC);
		void AddRelevantPOIActor(class AActor* POI);
		void AddFloatingText(const struct FVector& AtLocation, const class FString& FloatingTextString, const struct FColor& FloatingTextColor, float ScaleX, float ScaleY, float TextLifeSpan, const struct FVector& TextVelocity, float MinScale, float FadeInTime, float FadeOutTime);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.BattleGameState
	 * Size -> 0x0000 (FullSize[0x0B58] - InheritedSize[0x0B58])
	 */
	class ABattleGameState : public AShooterGameState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.CustomGameState
	 * Size -> 0x0000 (FullSize[0x0B58] - InheritedSize[0x0B58])
	 */
	class ACustomGameState : public AShooterGameState
	{
	public:
		class APrimalBuff* STATIC_SpawnBuffAndAttachToCharacter(class UClass* Buff, class APrimalCharacter* PrimalCharacter, float ExperiencePoints);
		void SetActionReportItem(struct FActionReportItem* Data, const class FString& PlayerName, const class FString& TribeName, const class FString& TimeOfDeath, const class FString& LevelOfDeath, const class FString& DeathMessage);
		struct FVector2D STATIC_ProjectWorldToScreenPosition(const struct FVector& WorldLocation, class APlayerController* thePC);
		void OnSetHudEvent();
		class USoundBase* OnOverrideDynamicMusic(class APrimalCharacter* forCharacter);
		void OnNotifyPlayerDied(class AShooterCharacter* theShooterChar, class AShooterPlayerController* prevController, class APawn* InstigatingPawn, class AActor* DamageCauser);
		bool OnHasGameModeMatchStarted();
		void OnHandleActorEvent(class AActor* forActor, const class FName& NameParam, const struct FVector& VecParam);
		bool OnForceOccludedFloatingHUD(class AActor* anActor, class AShooterPlayerController* ForPC);
		void OnExtraShooterCharacterTick(class AShooterCharacter* forChar, float DeltaTime);
		bool OnDrawingHUDNotifications(class AShooterHUD* HUD);
		bool OnDrawHUD(class AShooterHUD* HUD);
		void OnDrawExtraPlayerFloatingHUD(class AShooterHUD* HUD, class AShooterCharacter* theShooterChar, const struct FVector& AtLoc);
		bool OnCheckGameStateIfCanRespawn(class APlayerController* ForPC);
		bool OnAllowTribeManager(class AShooterPlayerController* ForPC);
		bool OnAllowTribeManagement();
		bool OnAllowStartSupplyCrateSpawns();
		bool OnAllowShowPlayerHudUI(class APrimalCharacter* ForPawn);
		bool OnAllowRemoveItems(class UPrimalInventoryComponent* ForInv, class AShooterPlayerController* PC, class UPrimalItem* anItemToTransfer);
		bool OnAllowPopUps();
		bool OnAllowOrbitCamera(class APrimalCharacter* forCharacter);
		bool OnAllowFastTravel(class APrimalStructureBed* ForBed, class AShooterPlayerController* ForPC);
		bool OnAllowDaytimeTransitionSounds();
		bool OnAllowCreateSurvivor();
		struct FPlayerDeathNotification STATIC_MakePlayerDeathNotification(const class FString& PlayerDeathStringEnemy, const class FString& PlayerDeathStringAlly, const class FString& PlayerDeathStringYou, const class FString& DeathReason, TArray<class FString> DeadPlayerNames, bool bIsTribeDeath, const class FString& DeathTribeName, int32_t TargetingTeamID, const class FString& LinkedPlayerID, TArray<struct FPrimalPlayerCharacterConfigStructReplicated> PlayersData);
		struct FBattleTribeData STATIC_MakeBattleTribeData(const class FString& TribeName, int32_t TribeId);
		struct FBattlePlayerData STATIC_MakeBattlePlayerData(const class FString& PlayerName, bool bConnected, bool bAlive, int32_t TribeId, const class FString& PlayerId);
		void KickPlayer(class APlayerController* Controller, const class FString& Reason);
		bool STATIC_IsTribeID(int32_t TeamId);
		bool IsAuthorityRole();
		void STATIC_HideUIScene(class UClass* SceneClass);
		double GetTimeSeconds();
		TArray<struct FBattlePlayerData> GetPlayerDatasForTribe(int32_t TribeId, TArray<struct FBattlePlayerData> AllPlayerDatas);
		class FString GetPawnName(class APawn* Pawn);
		class FString GetPawnKillerName(class APawn* Pawn);
		void GetDeathNotificationText(class AShooterCharacter* theShooterChar, class APawn* InstigatingPawn, class FString* Killer, class FString* KillerAndTribe, class FString* theNotificationStringYou, class FString* theNotificationStringAlly, class FString* theNotificationStringEnemy);
		class ACustomActorList* GetCustomActors(const class FName& SearchCustomTag);
		TArray<class AShooterPlayerController*> GetAllShooterControllers();
		TArray<class AShooterCharacter*> GetAllShooterCharactersOfTeam(int32_t KillerTeam);
		TArray<class AShooterCharacter*> GetAllShooterCharacters();
		TArray<class APrimalDinoCharacter*> GetAllDinoCharactersOfTeam(int32_t KillerTeam);
		void STATIC_DrawTileOnCanvas(class AShooterHUD* HUD, class UTexture* Tex, float X, float Y, float XL, float YL, float U, float V, float UL, float VL, const struct FColor& DrawColor);
		struct FPlayerDeathNotification CreateDeathNotification(class AShooterCharacter* theShooterChar, class AShooterPlayerController* prevController, class APawn* InstigatingPawn, int32_t MaxNumberOfRespawns);
		struct FDamageEvent STATIC_CreateDamageEvent();
		bool CheckTimeSince(float Time, float Duration);
		void BroadcastActorCustomEvent(class AActor* Actor, const class FName& EventCustomName, const class FString& EventCustomString, class AActor* InstigatorActor);
		void STATIC_BreakTribeData(const struct FTribeData& InData, class FString* TribeName, int32_t* OwnerPlayerDataID, int32_t* TribeId, TArray<class FString>* MembersPlayerName, TArray<int32_t>* MembersPlayerDataID, TArray<int32_t>* TribeAdmins, bool* bSetGovernment, TArray<struct FPrimalPlayerCharacterConfigStructReplicated>* MembersConfigs);
		void STATIC_BreakPlayerDeathNotification(const struct FPlayerDeathNotification& Data, class FString* PlayerDeathStringEnemy, class FString* PlayerDeathStringAlly, class FString* PlayerDeathStringYou, class FString* DeathReason, TArray<class FString>* DeadPlayerNames, bool* bIsTribeDeath, class FString* DeathTribeName, int32_t* TargetingTeamID, class FString* LinkedPlayerID, TArray<struct FPrimalPlayerCharacterConfigStructReplicated>* PlayersData);
		void STATIC_BreakBattleTribeData(const struct FBattleTribeData& InData, class FString* TribeName, int32_t* TribeId);
		void STATIC_BreakBattlePlayerData(const struct FBattlePlayerData& Data, class FString* PlayerName, bool* bConnected, bool* bAlive, int32_t* TribeId, class FString* PlayerId);
		void BreakActionReportItem(const struct FActionReportItem& Data, class FString* PlayerName, class FString* TribeName, class FString* TimeOfDeath, class FString* LevelOfDeath, class FString* DeathMessage);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterGameUserSettings
	 * Size -> 0x0130 (FullSize[0x0260] - InheritedSize[0x0130])
	 */
	class UShooterGameUserSettings : public UGameUserSettings
	{
	public:
		float                                                      MasterAudioVolume;                                       // 0x0130(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      MusicAudioVolume;                                        // 0x0134(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      SFXAudioVolume;                                          // 0x0138(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      VoiceAudioVolume;                                        // 0x013C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      CharacterAudioVolume;                                    // 0x0140(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      UIScaling;                                               // 0x0144(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      UIQuickbarScaling;                                       // 0x0148(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      CameraShakeScale;                                        // 0x014C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bFirstPersonRiding;                                      // 0x0150(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bThirdPersonPlayer;                                      // 0x0151(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bShowStatusNotificationMessages;                         // 0x0152(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WSZD[0x1];                                   // 0x0153(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TrueSkyQuality;                                          // 0x0154(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      FOVMultiplier;                                           // 0x0158(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      GroundClutterDensity;                                    // 0x015C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bFilmGrain;                                              // 0x0160(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bMotionBlur;                                             // 0x0161(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bUseDFAO;                                                // 0x0162(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bUseSSAO;                                                // 0x0163(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bShowChatBox;                                            // 0x0164(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bCameraViewBob;                                          // 0x0165(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bInvertLookY;                                            // 0x0166(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bFloatingNames;                                          // 0x0167(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bChatBubbles;                                            // 0x0168(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bHideServerInfo;                                         // 0x0169(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bJoinNotifications;                                      // 0x016A(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bCraftablesShowAllItems;                                 // 0x016B(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bLocalInventoryItemsShowAllItems;                        // 0x016C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bLocalInventoryCraftingShowAllItems;                     // 0x016D(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bRemoteInventoryItemsShowAllItems;                       // 0x016E(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bRemoteInventoryCraftingShowAllItems;                    // 0x016F(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bRemoteInventoryShowEngrams;                             // 0x0170(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_W9QW[0x3];                                   // 0x0171(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LookLeftRightSensitivity;                                // 0x0174(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      LookUpDownSensitivity;                                   // 0x0178(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    GraphicsQuality;                                         // 0x017C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    ActiveLingeringWorldTiles;                               // 0x0180(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    ClientNetQuality;                                        // 0x0184(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      GammaCorrection;                                         // 0x0188(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    LastServerSearchType;                                    // 0x018C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    LastServerSort;                                          // 0x0190(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    LastPVESearchType;                                       // 0x0194(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    LastDLCTypeSearchType;                                   // 0x0198(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       LastServerSortAsc;                                       // 0x019C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       LastAutoFavorite;                                        // 0x019D(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       LastServerSearchHideFull;                                // 0x019E(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       LastServerSearchProtected;                               // 0x019F(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       HideItemTextOverlay;                                     // 0x01A0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bQuickToggleItemNames;                                   // 0x01A1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bDistanceFieldShadowing;                                 // 0x01A2(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MW13[0x1];                                   // 0x01A3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LODScalar;                                               // 0x01A4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bToggleToTalk;                                           // 0x01A8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       HighQualityMaterials;                                    // 0x01A9(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       HighQualitySurfaces;                                     // 0x01AA(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bTemperatureF;                                           // 0x01AB(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bDisableTorporEffect;                                    // 0x01AC(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bChatShowSteamName;                                      // 0x01AD(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bChatShowTribeName;                                      // 0x01AE(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bReverseTribeLogOrder;                                   // 0x01AF(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    EmoteKeyBind1;                                           // 0x01B0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    EmoteKeyBind2;                                           // 0x01B4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bNoBloodEffects;                                         // 0x01B8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bLowQualityVFX;                                          // 0x01B9(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bSpectatorManualFloatingNames;                           // 0x01BA(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bSuppressAdminIcon;                                      // 0x01BB(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bUseSimpleDistanceMovement;                              // 0x01BC(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bDisableMeleeCameraSwingAnims;                           // 0x01BD(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bPreventInventoryOpeningSounds;                          // 0x01BE(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bPreventBiomeWalls;                                      // 0x01BF(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bPreventHitMarkers;                                      // 0x01C0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bPreventCrosshair;                                       // 0x01C1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bPreventColorizedItemNames;                              // 0x01C2(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bHighQualityLODs;                                        // 0x01C3(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bExtraLevelStreamingDistance;                            // 0x01C4(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bEnableColorGrading;                                     // 0x01C5(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FKJG[0x2];                                   // 0x01C6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    VSyncMode;                                               // 0x01C8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      DOFSettingInterpTime;                                    // 0x01CC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		TArray<struct FDepthOfFieldSetting>                        DOFSettings;                                             // 0x01D0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config
		TArray<class FString>                                      LastJoinedSessionPerCategory;                            // 0x01E0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config
		bool                                                       bDisableMenuTransitions;                                 // 0x01F0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bEnableInventoryItemTooltips;                            // 0x01F1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bRemoteInventoryShowCraftables;                          // 0x01F2(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bNoTooltipDelay;                                         // 0x01F3(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    LocalItemSortType;                                       // 0x01F4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    LocalCraftingSortType;                                   // 0x01F8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    RemoteItemSortType;                                      // 0x01FC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    RemoteCraftingSortType;                                  // 0x0200(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SF7T[0x4];                                   // 0x0204(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   VersionMetaTag;                                          // 0x0208(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       ShowExplorerNoteSubtitles;                               // 0x020C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       DisableMenuMusic;                                        // 0x020D(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       DisableDefaultCharacterItems;                            // 0x020E(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bRequestDefaultCharacterItemsOnce;                       // 0x020F(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bHasSeenGen2Intro;                                       // 0x0210(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bHideFloatingPlayerNames;                                // 0x0211(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bHideGamepadItemSelectionModifier;                       // 0x0212(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bToggleExtendedHUDInfo;                                  // 0x0213(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       PlayActionWheelClickSound;                               // 0x0214(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1942[0x3];                                   // 0x0215(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CompanionReactionVerbosity;                              // 0x0218(0x0004) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       EnableEnvironmentalReactions;                            // 0x021C(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       EnableRespawnReactions;                                  // 0x021D(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       EnableDeathReactions;                                    // 0x021E(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       EnableSayHelloReactions;                                 // 0x021F(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       EnableEmoteReactions;                                    // 0x0220(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       EnableMovementSounds;                                    // 0x0221(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       DisableSubtitles;                                        // 0x0222(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GSEC[0x1];                                   // 0x0223(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CompanionSubtitleVerbosityLevel;                         // 0x0224(0x0004) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       CompanionIsHiddenState;                                  // 0x0228(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4QLJ[0x3];                                   // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxAscensionLevel;                                       // 0x022C(0x0004) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bHostSessionHasBeenOpened;                               // 0x0230(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bForceTPVCameraOffset;                                   // 0x0231(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bDisableTPVCameraInterpolation;                          // 0x0232(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bEnableHDROutput;                                        // 0x0233(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bFPVClimbingGear;                                        // 0x0234(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bFPVGlidingGear;                                         // 0x0235(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UU2W[0x2];                                   // 0x0236(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Gamma1;                                                  // 0x0238(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      Gamma2;                                                  // 0x023C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bDisableBloom;                                           // 0x0240(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bDisableLightShafts;                                     // 0x0241(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bUseLowQualityLevelStreaming;                            // 0x0242(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bUseDistanceFieldAmbientOcclusion;                       // 0x0243(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bPreventItemCraftingSounds;                              // 0x0244(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bHighQualityAnisotropicFiltering;                        // 0x0245(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ABPA[0x2];                                   // 0x0246(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AmbientSoundVolume;                                      // 0x0248(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bAllowAnimationStaggering;                               // 0x024C(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bUseOldThirdPersonCameraTrace;                           // 0x024D(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bUseOldThirdPersonCameraOffset;                          // 0x024E(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bLowQualityAnimations;                                   // 0x024F(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bShowedGenesisDLCBackground;                             // 0x0250(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bShowedGenesis2DLCBackground;                            // 0x0251(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bViewedAnimatedSeriesTrailer;                            // 0x0252(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bViewedARK2Trailer;                                      // 0x0253(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bShowRTSKeyBinds;                                        // 0x0254(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H97M[0x3];                                   // 0x0255(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TemporaryMusicStingerReductionMultiplier;                // 0x0258(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bHasCompletedGen2;                                       // 0x025C(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       StopExplorerNoteAudioOnClose;                            // 0x025D(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IGGY[0x2];                                   // 0x025E(0x0002) MISSED OFFSET (PADDING)

	public:
		class UShooterGameUserSettings* STATIC_GetUserSettings();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterGameViewportClient
	 * Size -> 0x0098 (FullSize[0x01E0] - InheritedSize[0x0148])
	 */
	class UShooterGameViewportClient : public UGameViewportClient
	{
	public:
		class USoundBase*                                          LoadingMusic;                                            // 0x0148(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UFont*                                               InfoFont;                                                // 0x0150(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GA3N[0x88];                                  // 0x0158(0x0088) MISSED OFFSET (PADDING)

	public:
		class UPrimalUI* IsAnyUIConsumingInput(class UClass* PrimalUIClass, class AShooterPlayerController* Owner);
		class UShooterGameViewportClient* STATIC_GetViewportClient(class UWorld* ForWorld);
		TArray<class UPrimalUI*> GetUIScenesFromClass(class UClass* PrimalUIClass);
		class UPrimalUI* GetUISceneFromClass(class UClass* PrimalUIClass, class AShooterPlayerController* Owner);
		class UWorld* STATIC_GetGameWorld();
		bool AnyScenesWithMouseCapture();
		bool AnyNonInventoryScenesWithMouseCapture(class AShooterPlayerController* ForPC);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterImpactEffect
	 * Size -> 0x0418 (FullSize[0x0888] - InheritedSize[0x0470])
	 */
	class AShooterImpactEffect : public AActor
	{
	public:
		class UParticleSystem*                                     SurfaceImpactFX[0x10];                                   // 0x0470(0x0080) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           SurfaceImpactSound[0x10];                                // 0x04F0(0x0080) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxDecalRange;                                           // 0x0570(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JZWQ[0x4];                                   // 0x0574(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDecalData                                          SurfaceDecalData[0x10];                                  // 0x0578(0x0200) Edit, DisableEditOnInstance
		class UClass*                                              SurfaceImpactSpawnActors[0x10];                          // 0x0778(0x0080) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bOverridePawnHitDecal : 1;                               // 0x07F8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOverridePawnHitFX : 1;                                  // 0x07F8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNoHitEffectOnPawns : 1;                                 // 0x07F8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNoSoundEffectOnPawns : 1;                               // 0x07F8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNoSpawnActorOnPawns : 1;                                // 0x07F8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNoDecalOnPawns : 1;                                     // 0x07F8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_P5Y0[0x8F];                                  // 0x07F9(0x008F) MISSED OFFSET (PADDING)

	public:
		class UParticleSystemComponent* STATIC_StaticSpawnImpactEffects(class UObject* WorldContextObject, class UClass* ImpactEffectClass, const struct FHitResult& SurfaceHit, const struct FVector& ShotDirection, bool useShotDirectionForImpactEffectActorClassRotation, bool attachImpactEffectActorToSurfaceHitActor);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterLaserBeamComponent
	 * Size -> 0x0010 (FullSize[0x0840] - InheritedSize[0x0830])
	 */
	class UShooterLaserBeamComponent : public UParticleSystemComponent
	{
	public:
		bool                                                       bIsOwnerWeapon;                                          // 0x0830(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_29NO[0x3];                                   // 0x0831(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LaserBeamRange;                                          // 0x0834(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_J065[0x8];                                   // 0x0838(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterPersistentUser
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UShooterPersistentUser : public USaveGame
	{
	public:
		int32_t                                                    Kills;                                                   // 0x0028(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    Deaths;                                                  // 0x002C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    Wins;                                                    // 0x0030(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    Losses;                                                  // 0x0034(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    BulletsFired;                                            // 0x0038(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    RocketsFired;                                            // 0x003C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    BotsCount;                                               // 0x0040(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      Gamma;                                                   // 0x0044(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      AimSensitivity;                                          // 0x0048(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		bool                                                       bInvertedYAxis;                                          // 0x004C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_F7C0[0x1B];                                  // 0x004D(0x001B) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterLocalPlayer
	 * Size -> 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
	 */
	class UShooterLocalPlayer : public ULocalPlayer
	{
	public:
		class UShooterPersistentUser*                              PersistentUser;                                          // 0x0230(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2925[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterOnlineSessionClient
	 * Size -> 0x0000 (FullSize[0x00E8] - InheritedSize[0x00E8])
	 */
	class UShooterOnlineSessionClient : public UOnlineSessionClient
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterPlayerCameraManager
	 * Size -> 0x07F0 (FullSize[0x2018] - InheritedSize[0x1828])
	 */
	class AShooterPlayerCameraManager : public APlayerCameraManager
	{
	public:
		float                                                      NormalFOV;                                               // 0x1828(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TargetingFOV;                                            // 0x182C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TPVZOffsetInterpSpeed;                                   // 0x1830(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2YJI[0xC];                                   // 0x1834(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHasCustomDepthStencil;                                  // 0x1840(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bCustomDepthStencilIgnoreHealth;                         // 0x1841(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bCompleteCustomDepthStencilOverride;                     // 0x1842(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H3T7[0x19];                                  // 0x1843(0x0019) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                LastActualCameraStyle;                                   // 0x185C(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2N4I[0x754];                                 // 0x1864(0x0754) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             LastTPVCameraOffset;                                     // 0x1FB8(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LastTPVCollisionHeight;                                  // 0x1FC4(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TPVCollisionHeightInterpSpeed;                           // 0x1FC8(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KZQV[0x4C];                                  // 0x1FCC(0x004C) MISSED OFFSET (PADDING)

	public:
		void StartCameraTransition(float TransitionDuration, bool bUseFinalModifiedViewTarget);
		bool IsInFrustum(const struct FVector& BoxLocation, const struct FVector& BoxExtents);
		float GetTPVCollisionHeight(class AActor* forTarget, bool bIncludeHeightScalar);
		unsigned char STATIC_GetColorCodedStencil(EStencilAlliance InAlliance, float HealthPercent);
		class FName GetCameraStyle();
		void GetCameraAimViewPoint(struct FVector* OutCamLoc, struct FRotator* OutCamRot);
		class FName GetCahcedCameraStyle();
		class UObject* GetBlendableFromMIC(class UMaterialInterface* InInterface);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterPlayerController_Menu
	 * Size -> 0x0008 (FullSize[0x0818] - InheritedSize[0x0810])
	 */
	class AShooterPlayerController_Menu : public APlayerController
	{
	public:
		class UPrimalLocalProfile*                                 PrimalLocalProfile;                                      // 0x0810(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterWeapon
	 * Size -> 0x0918 (FullSize[0x0D88] - InheritedSize[0x0470])
	 */
	class AShooterWeapon : public AActor
	{
	public:
		float                                                      EquipTime;                                               // 0x0470(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_O1I8[0x4];                                   // 0x0474(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* OverridePawnTPVAnimBlueprint;                            // 0x0478(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage* OverrideProneInAnim;                                     // 0x0480(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage* OverrideProneOutAnim;                                    // 0x0488(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage* OverrideJumpAnim;                                        // 0x0490(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage* OverrideLandedAnim;                                      // 0x0498(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UAnimSequence*>                               OverrideRiderAnimSequenceFrom;                           // 0x04A0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class UAnimSequence*>                               OverrideRiderAnimSequenceTo;                             // 0x04B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		struct FCanvasIcon                                         PrimaryIcon;                                             // 0x04C0(0x0018) Edit, DisableEditOnInstance
		struct FCanvasIcon                                         SecondaryIcon;                                           // 0x04D8(0x0018) Edit, DisableEditOnInstance
		struct FCanvasIcon                                         PrimaryClipIcon;                                         // 0x04F0(0x0018) Edit, DisableEditOnInstance
		struct FCanvasIcon                                         SecondaryClipIcon;                                       // 0x0508(0x0018) Edit, DisableEditOnInstance
		float                                                      ItemDurabilityToConsumePerMeleeHit;                      // 0x0520(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AmmoIconsCount;                                          // 0x0524(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TargetingTooltipCheckRange;                              // 0x0528(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseDinoRangeForTooltip : 1;                             // 0x052C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_I4YM[0x3];                                   // 0x052D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PrimaryClipIconOffset;                                   // 0x0530(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    SecondaryClipIconOffset;                                 // 0x0534(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass* TargetingInfoToolTipWidget;                              // 0x0538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           TargetingInfoTooltipPadding;                             // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           TargetingInfoTooltipScale;                               // 0x0548(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bOnlyPassiveDurabilityWhenAccessoryActive;               // 0x0550(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisableShooterOnElectricStorm;                          // 0x0551(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CJ3P[0x2];                                   // 0x0552(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                OverrideAttachPoint;                                     // 0x0554(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             FPVRelativeLocation;                                     // 0x055C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            FPVRelativeRotation;                                     // 0x0568(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             FPVRelativeLocation_Targeting;                           // 0x0574(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            FPVRelativeRotation_Targeting;                           // 0x0580(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FPVEnterTargetingInterpSpeed;                            // 0x058C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FPVExitTargetingInterpSpeed;                             // 0x0590(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      EndDoMeleeSwingTime;                                     // 0x0594(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            FPVLookAtMaximumOffset;                                  // 0x0598(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            FPVLookAtSpeedBase;                                      // 0x05A4(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            FPVLookAtInterpSpeed;                                    // 0x05B0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            FPVLookAtMaximumOffset_Targeting;                        // 0x05BC(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            FPVLookAtSpeedBase_Targeting;                            // 0x05C8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            FPVLookAtInterpSpeed_Targeting;                          // 0x05D4(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             FPVImmobilizedLocationOffset;                            // 0x05E0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            FPVImmobilizedRotationOffset;                            // 0x05EC(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FPVImmobilizedInterpSpeed;                               // 0x05F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_37H0[0x4];                                   // 0x05FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseBlueprintAnimNotifications;                          // 0x0600(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VRMW[0x7];                                   // 0x0601(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        MeleeSwingSockets;                                       // 0x0608(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      AllowMeleeTimeBeforeAnimationEnd;                        // 0x0618(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XOP1[0x4];                                   // 0x061C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPrimalItem* AssociatedPrimalItem;                                    // 0x0620(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		class AMissionType* AssociatedMission;                                       // 0x0628(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bCanBeUsedAsEquipment;                                   // 0x0630(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Z7AG[0x7];                                   // 0x0631(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FItemNetInfo                                        AssociatedItemNetInfo;                                   // 0x0638(0x01B0) Net, Transient, RepNotify
		class USkeletalMeshComponent* Mesh3P;                                                  // 0x07E8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UClass* WeaponAmmoItemTemplate;                                  // 0x07F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class ACameraActor* AnimatedCamera;                                          // 0x07F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JEHZ[0x28];                                  // 0x0800(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FWeaponData                                         WeaponConfig;                                            // 0x0828(0x002C) Edit, DisableEditOnInstance
		unsigned char                                              UnknownData_JZSG[0x54];                                  // 0x0854(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AShooterCharacter* MyPawn;                                                  // 0x08A8(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, RepNotify, NoDestructor
		class USkeletalMeshComponent* Mesh1P;                                                  // 0x08B0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UAudioComponent* FireAC;                                                  // 0x08B8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class FName                                                MuzzleAttachPoint;                                       // 0x08C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem* MuzzleFX;                                                // 0x08C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem* MuzzleFX_FPV;                                            // 0x08D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem* AltMuzzleFX;                                             // 0x08D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem* AltMuzzleFX_FPV;                                         // 0x08E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystemComponent* MuzzlePSC;                                               // 0x08E8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class UParticleSystemComponent* MuzzlePSCSecondary;                                      // 0x08F0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class UClass* FireCameraShake;                                         // 0x08F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass* ReloadCameraShake;                                       // 0x0900(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass* MeleeCameraShake;                                        // 0x0908(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UForceFeedbackEffect* FireForceFeedback;                                       // 0x0910(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue* FireSound;                                               // 0x0918(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue* AltFireSound;                                            // 0x0920(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue* FireFinishSound;                                         // 0x0928(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue* OutOfAmmoSound;                                          // 0x0930(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MeleeDamageAmount;                                       // 0x0938(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TheMeleeSwingRadius;                                     // 0x093C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MeleeDamageImpulse;                                      // 0x0940(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1BW1[0x4];                                   // 0x0944(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FWeaponAnim                                         ReloadAnim;                                              // 0x0948(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         PartialReloadAnim;                                       // 0x0958(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage* WeaponMesh3PReloadAnim;                                  // 0x0968(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         HarvestAnim;                                             // 0x0970(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         WeaponBreakAnim;                                         // 0x0980(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue* EquipSound;                                              // 0x0990(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         EquipAnim;                                               // 0x0998(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         EquipNoAmmoClipAnim;                                     // 0x09A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         UnequipAnim;                                             // 0x09B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         UnequipNoAmmoClipAnim;                                   // 0x09C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage* WeaponMesh3PFireAnim;                                    // 0x09D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         FireAnim;                                                // 0x09E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         MeleeAnim;                                               // 0x09F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         MeleeNoAmmoClipAnim;                                     // 0x0A00(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FWeaponAnim>                                 MeleeAnimList;                                           // 0x0A10(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bOnlyUseFirstMeleeAnimWithShield : 1;                    // 0x0A20(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceShowCrosshairWhileFiring : 1;                      // 0x0A20(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_8LH2[0x7];                                   // 0x0A21(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FWeaponAnim>                                 MeleeWithHitAnimList;                                    // 0x0A28(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		struct FWeaponAnim                                         ShieldHitAnim;                                           // 0x0A38(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FPVMoveOffscreenWhenTurningMaxMoveWeaponSpeed;           // 0x0A48(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FPVMoveOffscreenWhenTurningMinMoveWeaponSpeed;           // 0x0A4C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FPVMoveOffscreenWhenTurningMinViewRotSpeed;              // 0x0A50(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FPVMoveOffscreenWhenTurningMaxViewRotSpeed;              // 0x0A54(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FPVMoveOffscreenIdleRestoreInterval;                     // 0x0A58(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FPVMoveOffscreenIdleRestoreSpeed;                        // 0x0A5C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FPVMoveOffscreenWhenTurningMaxOffset;                    // 0x0A60(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2UI8[0xC];                                   // 0x0A64(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FWeaponAnim                                         TargetingFireAnim;                                       // 0x0A70(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowSubmergedFiring : 1;                               // 0x0A80(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_QDIZ : 4;                                    // 0x0A80(0x0001) BIT_FIELD (PADDING)
		bool                                                       bHideFPVMesh : 1;                                        // 0x0A80(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceTargeting : 1;                                     // 0x0A80(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanAltFire : 1;                                         // 0x0A80(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAltFireDoesMeleeAttack : 1;                             // 0x0A81(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAltFireDoesNotStopFire : 1;                             // 0x0A81(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideDamageSourceFromLogs : 1;                           // 0x0A81(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseTargetingFireAnim : 1;                               // 0x0A81(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseTargetingReloadAnim : 1;                             // 0x0A81(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsePartialReloadAnim : 1;                               // 0x0A81(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseEquipNoAmmoClipAnim : 1;                             // 0x0A81(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseUnequipNoAmmoClipAnim : 1;                           // 0x0A81(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseMeleeNoAmmoClipAnim : 1;                             // 0x0A82(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideLeftArmFPV : 1;                                     // 0x0A82(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		bool                                                       bLoopedMuzzleFX : 1;                                     // 0x0A82(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bMeleeHitUseMuzzleFX : 1;                                // 0x0A82(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUsePostUpdateTickForFPVParticles : 1;                   // 0x0A82(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bFPVMoveOffscreenWhenTurning : 1;                        // 0x0A82(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bReloadAnimForceTickPoseOnServer : 1;                    // 0x0A82(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bLoopedFireSound : 1;                                    // 0x0A82(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bAllowTargetingWhileReloading : 1;                       // 0x0A83(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bMeleeHitColorizesStructures : 1;                        // 0x0A83(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bLoopedFireAnim : 1;                                     // 0x0A83(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       UnknownData_8CNL : 2;                                    // 0x0A83(0x0001) BIT_FIELD (PADDING)
		bool                                                       bAutoRefire : 1;                                         // 0x0A83(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bConsumeAmmoOnUseAmmo : 1;                               // 0x0A83(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTargetUnTargetWithClick : 1;                            // 0x0A83(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDontActuallyConsumeItemAmmo : 1;                        // 0x0A84(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPUseWeaponCanFire : 1;                                 // 0x0A84(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bBPUseTargetingEvents : 1;                               // 0x0A84(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       UnknownData_1TDO : 1;                                    // 0x0A84(0x0001) BIT_FIELD (PADDING)
		bool                                                       bWantsToFire : 1;                                        // 0x0A84(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       bWantsToAltFire : 1;                                     // 0x0A84(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       UnknownData_NIMZ : 2;                                    // 0x0A84(0x0001) BIT_FIELD (PADDING)
		bool                                                       UnknownData_XCI0 : 3;                                    // 0x0A85(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUseAmmoOnFiring : 1;                                    // 0x0A85(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseAmmoServerOnly : 1;                                  // 0x0A85(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bListenToAppliedForeces : 1;                             // 0x0A85(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_AIEL[0x2];                                   // 0x0A86(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bOverrideAimOffsets : 1;                                 // 0x0A88(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_RHWV[0x3];                                   // 0x0A89(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ItemDestructionUnequipWeaponDelay;                       // 0x0A8C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WeaponUnequipDelay;                                      // 0x0A90(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LK54[0x4];                                   // 0x0A94(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FWeaponAnim                                         TargetingReloadAnim;                                     // 0x0A98(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FDBX[0x8];                                   // 0x0AA8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastFireTime;                                            // 0x0AB0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    CurrentAmmo;                                             // 0x0AB8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    CurrentAmmoInClip;                                       // 0x0ABC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, RepNotify, NoDestructor
		bool                                                       bReplicateCurrentAmmoInClipToNonOwners;                  // 0x0AC0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPAdjustAmmoPerShot;                                 // 0x0AC1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bHasToggleableAccessory : 1;                             // 0x0AC2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bToggleAccessoryUseAltMuzzleFX : 1;                      // 0x0AC2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bToggleAccessoryUseAltFireSound : 1;                     // 0x0AC2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanToggleAccessory : 1;                            // 0x0AC2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnScoped : 1;                                      // 0x0AC2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsDefaultWeapon : 1;                                    // 0x0AC2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceKeepEquippedWhileInInventory : 1;                  // 0x0AC2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyAllowUseWhenRidingDino : 1;                         // 0x0AC2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPrimaryFireDoesMeleeAttack : 1;                         // 0x0AC3(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bMeleeHitCaptureDermis : 1;                              // 0x0AC3(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		class FName                                                FPVAccessoryToggleComponent;                             // 0x0AC4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TPVAccessoryToggleComponent;                             // 0x0ACC(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIsAccessoryActive : 1;                                  // 0x0AD4(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor
		bool                                                       bCanAccessoryBeSetOn : 1;                                // 0x0AD4(0x0001) BIT_FIELD BlueprintVisible, Net, NoDestructor
		bool                                                       bConsumeAmmoItemOnReload : 1;                            // 0x0AD4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseAutoReload : 1;                                      // 0x0AD4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bWantsToAutoReload : 1;                                  // 0x0AD4(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bHasPlayedReload : 1;                                    // 0x0AD4(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bNetLoopedSimulatingWeaponFire : 1;                      // 0x0AD4(0x0001) BIT_FIELD Net, Transient, RepNotify, NoDestructor
		bool                                                       UnknownData_4UJW : 1;                                    // 0x0AD4(0x0001) BIT_FIELD (PADDING)
		bool                                                       bBPHandleMeleeAttack : 1;                                // 0x0AD5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPShouldDealDamage : 1;                              // 0x0AD5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDoesntUsePrimalItem : 1;                                // 0x0AD5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseCanAccessoryBeSetOn : 1;                             // 0x0AD5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetActorForTargetingTooltip : 1;                   // 0x0AD5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOverrideAimDirection : 1;                          // 0x0AD5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_V5WU[0x2];                                   // 0x0AD6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseBPIsValidUnstasisActor : 1;                          // 0x0AD8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_S87R[0x3];                                   // 0x0AD9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeToAutoReload;                                        // 0x0ADC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase* ToggleAccessorySound;                                    // 0x0AE0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    FiredLastNoAmmoShot;                                     // 0x0AE8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0IP6[0x4];                                   // 0x0AEC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastNotifyShotTime;                                      // 0x0AF0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bLoopingSimulateWeaponFire : 1;                          // 0x0AF8(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       UnknownData_A5W8 : 1;                                    // 0x0AF8(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUseBPCanMeleeAttack : 1;                                // 0x0AF8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_SJNK[0x7];                                   // 0x0AF9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* MeleeDamageType;                                         // 0x0B00(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bClientTriggersHandleFiring : 1;                         // 0x0B08(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowUseHarvesting : 1;                                 // 0x0B08(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventItemColors : 1;                                  // 0x0B08(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetSelectedMeleeAttackAnim : 1;                    // 0x0B08(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPWeaponDealDamage : 1;                              // 0x0B08(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_9JG0[0x3];                                   // 0x0B09(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseBPOnWeaponAnimPlayedNotify : 1;                      // 0x0B0C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_025B[0x3];                                   // 0x0B0D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             VRTargetingModelOffset;                                  // 0x0B10(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             VRTargetingAimOriginOffset;                              // 0x0B1C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInterface* ScopeOverlayMI;                                          // 0x0B28(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class UMaterialInterface* ScopeCrosshairMI;                                        // 0x0B30(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class UMaterialInstanceDynamic* ScopeCrosshairMID;                                       // 0x0B38(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ScopeCrosshairSize;                                      // 0x0B40(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ScopeCrosshairColorParameter;                            // 0x0B44(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bColorCrosshairBasedOnTarget : 1;                        // 0x0B4C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowTargeting : 1;                                     // 0x0B4C(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bIgnoreTargetingFOV : 1;                                 // 0x0B4C(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bAllowDropAndPickup : 1;                                 // 0x0B4C(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bApplyAimDriftWhenTargeting : 1;                         // 0x0B4C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseScopeOverlay : 1;                                    // 0x0B4C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_30B0[0x3];                                   // 0x0B4D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHideFPVMeshWhileTargeting : 1;                          // 0x0B50(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_80P3[0x3];                                   // 0x0B51(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bGamepadRightIsSecondaryAction : 1;                      // 0x0B54(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bGamepadLeftIsPrimaryFire : 1;                           // 0x0B54(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDirectPrimaryFireToAltFire : 1;                         // 0x0B54(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCanFire : 1;                                            // 0x0B54(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceTargetingOnDino : 1;                               // 0x0B54(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDirectTargetingToPrimaryFire : 1;                       // 0x0B54(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDirectTargetingToAltFire : 1;                           // 0x0B54(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDirectTargetingToSecondaryAction : 1;                   // 0x0B54(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDirectAltFireToSeconaryAction : 1;                      // 0x0B55(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventEquippingUnderwater : 1;                         // 0x0B55(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseTPVWeaponMeshMeleeSockets : 1;                       // 0x0B55(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTargetingForceTraceFloatingHUD : 1;                     // 0x0B55(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowRunning : 1;                                       // 0x0B55(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bAllowUseWhileRidingDino : 1;                            // 0x0B55(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSupportsOffhandShield : 1;                              // 0x0B55(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bMeleeAttackHarvetUsableComponents : 1;                  // 0x0B55(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowSettingColorizeRegions : 1;                        // 0x0B56(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAttemptToDyeWithMeleeAttack : 1;                        // 0x0B56(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bOnlyDamagePawns : 1;                                    // 0x0B56(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseCharacterMeleeDamageModifier : 1;                    // 0x0B56(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bConsumeZoomInOut : 1;                                   // 0x0B56(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bClipScopeInY : 1;                                       // 0x0B56(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bScopeFullscreen : 1;                                    // 0x0B56(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowRunningWhileFiring : 1;                            // 0x0B56(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowRunningWhileReloading : 1;                         // 0x0B57(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAllowRunningWhileMeleeAttacking : 1;                    // 0x0B57(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		float                                                      MinItemDurabilityPercentageForShot;                      // 0x0B58(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bColorizeMuzzleFX : 1;                                   // 0x0B5C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceFirstPersonWhileTargeting : 1;                     // 0x0B5C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPStartEquippedNotify : 1;                           // 0x0B5C(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bDirectPrimaryFireToSecondaryAction : 1;                 // 0x0B5C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseAlternateAimOffset : 1;                              // 0x0B5C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_QNRI[0x3];                                   // 0x0B5D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OverrideTargetingFOV;                                    // 0x0B60(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TargetingDelayTime;                                      // 0x0B64(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TargetingFOVInterpSpeed;                                 // 0x0B68(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AimDriftYawAngle;                                        // 0x0B6C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AimDriftPitchAngle;                                      // 0x0B70(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AimDriftYawFrequency;                                    // 0x0B74(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AimDriftPitchFrequency;                                  // 0x0B78(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7QDJ[0x4];                                   // 0x0B7C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage* AlternateInventoryEquipAnim;                             // 0x0B80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         OpenInventoryAnim;                                       // 0x0B88(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MeleeHitRandomChanceToDestroyItem;                       // 0x0B98(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GlobalFireCameraShakeScale;                              // 0x0B9C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DurabilityCostToEquip;                                   // 0x0BA0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PassiveDurabilityCostPerInterval;                        // 0x0BA4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PassiveDurabilityCostInterval;                           // 0x0BA8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GlobalFireCameraShakeScaleTargeting;                     // 0x0BAC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MeleeCameraShakeSpeedScale;                              // 0x0BB0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ReloadCameraShakeSpeedScale;                             // 0x0BB4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MeleeConsumesStamina;                                    // 0x0BB8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RGHG[0x4];                                   // 0x0BBC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* MeleeHitTargetCameraShake;                               // 0x0BC0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass* MeleeHitTargetCameraShakeMobile;                         // 0x0BC8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass* MeleeHitColorizeStructuresUI;                            // 0x0BD0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HypoThermiaInsulation;                                   // 0x0BD8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HyperThermiaInsulation;                                  // 0x0BDC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InsulationRange;                                         // 0x0BE0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XUXA[0x1C];                                  // 0x0BE4(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue* TargetingSound;                                          // 0x0C00(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue* UntargetingSound;                                        // 0x0C08(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FPVMeleeTraceFXRange;                                    // 0x0C10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_N4S9[0x4];                                   // 0x0C14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* MeleeAttackUsableHarvestDamageType;                      // 0x0C18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MeleeAttackHarvetUsableComponentsRadius;                 // 0x0C20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MeleeAttackUsableHarvestDamageMultiplier;                // 0x0C24(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AKZU[0x58];                                  // 0x0C28(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage* TPVForcePlayAnim;                                        // 0x0C80(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPreventOpeningInventory;                                // 0x0C88(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowUseOnSeatingStructure;                             // 0x0C89(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bOnlyUseOnSeatingStructure;                              // 0x0C8A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bOverrideStandingAnim : 1;                               // 0x0C8B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseCustomSeatedAnim : 1;                                // 0x0C8B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPForceTPVTargetingAnimation : 1;                    // 0x0C8B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForcePreventUseWhileRidingDino : 1;                     // 0x0C8B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPreventSwitchingWeapon : 1;                        // 0x0C8B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPCanEquip : 1;                                      // 0x0C8B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPRemainEquipped : 1;                                // 0x0C8B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsInDestruction : 1;                                    // 0x0C8B(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bForceReloadOnDestruction : 1;                           // 0x0C8C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPModifyFOV : 1;                                     // 0x0C8C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bServerIgnoreCheckCanFire : 1;                           // 0x0C8C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPGetTPVCameraOffset : 1;                            // 0x0C8C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOverrideRootRotationOffset : 1;                    // 0x0C8C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSpawnedByMission : 1;                                   // 0x0C8C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor
		bool                                                       bAllowFullClipReload : 1;                                // 0x0C8C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bForceAllowPassengerTPV : 1;                             // 0x0C8C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bPreventCarriedZoomInOut : 1;                            // 0x0C8D(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bInstantAccuracyReset : 1;                               // 0x0C8D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceAlwaysPlayEquipAnim : 1;                           // 0x0C8D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_MA8Y[0x2];                                   // 0x0C8E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIgnoreReloadState : 1;                                  // 0x0C90(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPPostSpawnMuzzleEffect : 1;                         // 0x0C90(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_URCR[0x3];                                   // 0x0C91(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseBPGetCrosshairColor : 1;                             // 0x0C94(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnorePlayerReload : 1;                                 // 0x0C94(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_07MQ[0x3];                                   // 0x0C95(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       UnknownData_A6XV : 1;                                    // 0x0C98(0x0001) BIT_FIELD (PADDING)
		bool                                                       bUseBPOnBurstStarted : 1;                                // 0x0C98(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPOnBurstFinished : 1;                               // 0x0C98(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBurstStartAnim : 1;                                  // 0x0C98(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBurstFinishAnim : 1;                                 // 0x0C98(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSecondaryActionStopsFire : 1;                           // 0x0C98(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseAmmoSupportsAdjustedAmmoPerShot : 1;                 // 0x0C98(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_WI0I[0x3];                                   // 0x0C99(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bBPDoClientCheckCanFire;                                 // 0x0C9C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bRestrictTPVCameraYaw;                                   // 0x0C9D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8P8T[0x2];                                   // 0x0C9E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TPVCameraYawRange;                                       // 0x0CA0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bFoceSimulatedTick;                                      // 0x0CA4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bWasLastFireFromGamePad;                                 // 0x0CA5(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bDisableWeaponCrosshair;                                 // 0x0CA6(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IEP3[0x1];                                   // 0x0CA7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMesh* DyePreviewMeshOverrideSK;                                // 0x0CA8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UStaticMesh* DyePreviewMeshOverrideSM;                                // 0x0CB0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bBPOverrideAspectRatio;                                  // 0x0CB8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bBPOverrideFPVMasterPoseComponent;                       // 0x0CB9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceAllowMountedWeaponry;                              // 0x0CBA(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TSC3[0x1];                                   // 0x0CBB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FireCameraShakeSpreadScaleExponent;                      // 0x0CBC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FireCameraShakeSpreadScaleExponentLessThan;              // 0x0CC0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FireCameraShakeSpreadScaleMultiplierLessThan;            // 0x0CC4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FireCameraShakeSpreadScaleMultiplier;                    // 0x0CC8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseFireCameraShakeScale;                                // 0x0CCC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceTickWithNoController;                              // 0x0CCD(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_APLL[0x2];                                   // 0x0CCE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FInstantWeaponData                                  InstantConfig;                                           // 0x0CD0(0x0030) Edit, DisableEditOnInstance
		float                                                      CurrentFiringSpread;                                     // 0x0D00(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QKBZ[0x4];                                   // 0x0D04(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass* ScopedBuff;                                              // 0x0D08(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q3UY[0x8];                                   // 0x0D10(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimSequence* OverrideTPVShieldAnimation;                              // 0x0D18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowTargetingDuringMeleeSwing;                         // 0x0D20(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_A29X[0x3];                                   // 0x0D21(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             FPVMuzzleLocationOffset;                                 // 0x0D24(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             TPVMuzzleLocationOffset;                                 // 0x0D30(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceTPV_EquippedWhileRiding;                           // 0x0D3C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bCutsEnemyGrapplingCable;                                // 0x0D3D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BVQ7[0x2];                                   // 0x0D3E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             FPVInventoryReequipOffset;                               // 0x0D40(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JLMY[0x10];                                  // 0x0D4C(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bForceTPVCameraOffset;                                   // 0x0D5C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPSpawnMeleeEffects;                                 // 0x0D5D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KG8S[0x2];                                   // 0x0D5E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FWeaponAnim                                         StartBurstAnim;                                          // 0x0D60(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         FinishBurstAnim;                                         // 0x0D70(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_51HE[0x8];                                   // 0x0D80(0x0008) MISSED OFFSET (PADDING)

	public:
		bool UsesAmmo();
		void UseAmmo(int32_t UseAmmoAmountOverride);
		void ToggleAccessory();
		void StopWeaponAnimation(const struct FWeaponAnim& Animation, bool bReplicate, bool bReplicateToInstigator);
		void StopSecondaryActionEvent();
		void StopFire();
		void StopAltFire();
		void StartUnequipEvent();
		void StartUnequip();
		void StartSecondaryActionEvent();
		void StartFire(bool bFromGamepad);
		void StartAltFire();
		void SetAmmoInClip(int32_t newAmmo);
		void SetAccessoryEnabled(bool bEnabled);
		void ServerToggleAccessory();
		void ServerStopSecondaryAction();
		void ServerStopFire();
		void ServerStopAltFire();
		void ServerStartSecondaryAction();
		void ServerStartReload();
		void ServerStartFire();
		void ServerStartAltFire();
		void ServerSetColorizeRegion(int32_t theRegion, bool bValToUse);
		struct FWeaponAnim SelectMeleeAttackAnim();
		void ReloadWeapon();
		class UAudioComponent* PlayWeaponSound(class USoundCue* Sound);
		void PlayWeaponBreakAnimation();
		float PlayWeaponAnimationEx(const struct FWeaponAnim& Animation, float InPlayRate, bool bPlayBothFirstAndThirdPerson, bool bReplicate, bool bReplicateToInstigator, bool bPauseOnFinish1P, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer);
		float PlayWeaponAnimation(const struct FWeaponAnim& Animation, bool bPlayBothFirstAndThirdPerson, bool bReplicate, bool bReplicateToInstigator, bool bPauseOnFinish1P, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer);
		void PlayUseHarvestAnimation();
		void OnRep_NetLoopedWeaponFire();
		void OnRep_MyPawn();
		void OnRep_CurrentAmmoInClip();
		void OnRep_AccessoryToggle();
		void OnInstigatorPlayDyingEvent();
		void OnAttachedToPawn();
		bool IsPlayingWeaponAnimMontage(const struct FWeaponAnim& WeaponAnimMontage, float TimeFromEndToConsiderFinished);
		bool IsOwningClient();
		bool IsLocallyOwned();
		bool IsInMeleeAttack();
		bool IsFiring();
		bool IsClimbing();
		bool HasInfiniteAmmo();
		class USkeletalMeshComponent* GetWeaponMesh();
		float GetWeaponDamageMultiplier();
		float GetWeaponAttackPlayRate();
		class UAnimSequence* GetStandingAnimation(float* OutBlendInTime, float* OutBlendOutTime);
		class AShooterCharacter* GetPawnOwner();
		struct FVector GetMuzzleLocation();
		struct FVector GetMuzzleDirection();
		class FString GetDebugInfoString();
		int32_t GetCurrentAmmoInClip();
		int32_t GetCurrentAmmo();
		struct FVector GetAdjustedAim();
		void ForceUpdateClientAmmo();
		bool ForceTPVTargetingAnimation();
		bool ForcesTPVCameraOffset();
		void ForceMeshUpdate(bool bIsFirstPerson);
		class USceneComponent* FindComponentByName(const class FName& ComponentName);
		void DoMeleeAttack();
		void DoHandleFiring();
		void ConsumeAmmoItem(int32_t Quantity);
		void ClientStopSimulatingWeaponFire();
		void ClientStartReload();
		void ClientStartMuzzleFX();
		void ClientSpawnMeleeEffects(const struct FVector& Impact, const struct FVector& ShootDir);
		void ClientSimulateWeaponFire();
		void ClientSetClipAmmo(int32_t NewClipAmmo, bool bOnlyUpdateItem);
		void ClientPlayShieldHitAnim();
		void ClearClientReload();
		void CheckItemAssocation();
		bool CanReload();
		bool CanMeleeAttack();
		bool CanFire(bool bForceAllowSubmergedFiring);
		void BPWeaponZoom(bool bZoomingIn);
		int32_t BPWeaponDealDamage(const struct FHitResult& Impact, const struct FVector& ShootDir, int32_t DamageAmount, class UClass* DamageType, float Impulse);
		bool BPWeaponCanFire();
		bool BPTryFireWeapon();
		void BPToggleAccessoryFailed();
		void BPToggleAccessory();
		void BPStopMeleeAttack();
		void BPStartEquippedNotify();
		void BPSpawnMeleeEffects(const struct FVector& Impact, const struct FVector& ShootDir);
		bool BPShouldDealDamage(class AActor* TestActor);
		void BPRequestReload();
		bool BPRemainEquipped();
		bool BPPreventSwitchingWeapon();
		void BPPostSpawnMuzzleEffect(class UParticleSystemComponent* NewMuzzlePSC);
		struct FRotator BPOverrideRootRotationOffset(const struct FRotator& InRootRotation);
		class USkeletalMeshComponent* BPOverrideFPVMasterPoseComponent();
		struct FVector BPOverrideAimDirection(const struct FVector& DesiredAimDirection);
		void BPOnWeaponAnimPlayedNotify(const struct FWeaponAnim& Animation, float InPlayRate, bool bPlayBothFirstAndThirdPerson, bool bReplicate, bool bReplicateToInstigator, bool bPauseOnFinish1P, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer);
		void BPOnStopTargeting(bool bFromGamepadLeft);
		void BPOnStartTargeting(bool bFromGamepadLeft);
		void BPOnScoped();
		void BPOnBurstStarted();
		void BPOnBurstFinished();
		float BPModifyFOV(float inFOV);
		void BPMeleeAttackStarted();
		void BPLostController();
		bool BPIsValidUnStasisCaster();
		void BPHandleMeleeAttack();
		void BPGlobalFireWeapon();
		struct FVector BPGetTPVCameraOffset();
		class FText BPGetTargetingTooltipInfoLabel();
		struct FWeaponAnim BPGetSelectedMeleeAttackAnim();
		class UAnimSequence* BPGetSeatingAnimation();
		class FString BPGetDebugInfoString();
		struct FColor BPGetCrosshairColor();
		class AActor* BPGetActorForTargetingTooltip();
		bool BPForceTPVTargetingAnimation();
		void BPFireWeapon();
		void BPFiredWeapon();
		void BPDrawHud(class AShooterHUD* HUD);
		bool BPConstrainAspectRatio(float* OutAspectRatio);
		bool BPCanToggleAccessory();
		bool BPCanMeleeAttack();
		bool BPCanEquip(class AShooterCharacter* ByCharacter);
		void BPAppliedPrimalItemToWeapon();
		void BPAnimNotifyCustomState_End(const class FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotifyState* AnimNotifyObject);
		void BPAnimNotifyCustomState_Begin(const class FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, class UAnimNotifyState* AnimNotifyObject);
		void BPAnimNotifyCustomEvent(const class FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject);
		bool BPAllowNativeFireWeapon();
		int32_t BPAdjustAmmoPerShot();
		void BP_OnReloadNotify();
		bool AllowUnequip();
		bool AllowTargeting();
		bool AllowedToFire(bool bForceAllowSubmergedFiring);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterWeapon_Projectile
	 * Size -> 0x00B0 (FullSize[0x0E38] - InheritedSize[0x0D88])
	 */
	class AShooterWeapon_Projectile : public AShooterWeapon
	{
	public:
		bool                                                       bUseAmmoOnFireProjectile;                                // 0x0D88(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_N56T[0x7];                                   // 0x0D89(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ProjectileClass;                                         // 0x0D90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           FireProjectileSound;                                     // 0x0D98(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UStaticMeshComponent*                                ProjectileMesh3P;                                        // 0x0DA0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected
		class FName                                                ProjectileAttachPoint3P;                                 // 0x0DA8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		bool                                                       bSpawnProjectileOnClient;                                // 0x0DB0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		bool                                                       bUseBPSelectProjectileToFire;                            // 0x0DB1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_16DC[0x2];                                   // 0x0DB2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ProjectileSpreadYaw;                                     // 0x0DB4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      ProjectileSpreadPitch;                                   // 0x0DB8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      ServerMaxProjectileAngleError;                           // 0x0DBC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      ServerMaxProjectileOriginError;                          // 0x0DC0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		bool                                                       bServerFireProjectileForceUpdateAimActors : 1;           // 0x0DC4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bUseHideProjectileAnimEvents : 1;                        // 0x0DC4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		unsigned char                                              UnknownData_WG3K[0x3];                                   // 0x0DC5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                Mesh1PProjectileBoneName;                                // 0x0DC8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      LockOnYScreenPercentage;                                 // 0x0DD0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		bool                                                       bUseLockOn;                                              // 0x0DD4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_0U7N[0x3];                                   // 0x0DD5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LockOnTime;                                              // 0x0DD8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      CurrentLockOnTime;                                       // 0x0DDC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      LockOnMaxTraceDistance;                                  // 0x0DE0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		struct FVector                                             LockOnTraceBoxExtent;                                    // 0x0DE4(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UMaterialInterface*                                  ActorLockedMI;                                           // 0x0DF0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UMaterialInstanceDynamic*                            ActorLockedMID;                                          // 0x0DF8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UMaterialInterface*                                  ActorInLockedAreaMI;                                     // 0x0E00(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UMaterialInstanceDynamic*                            ActorInLockedAreaMID;                                    // 0x0E08(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		bool                                                       bHasLockedTarget;                                        // 0x0E10(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_BBW9[0x27];                                  // 0x0E11(0x0027) MISSED OFFSET (PADDING)

	public:
		void SetLockedTarget(class AActor* Actor, bool bIsLocked);
		void ServerFireProjectileEx(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, float Speed, int32_t RandomSeed);
		void ServerFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir);
		void OnUnHideProjectile();
		void OnHideProjectile();
		void Listener_LockOn_Update(bool Reset);
		void Listener_LockOn_Stop();
		struct FHitResult GetTrajectoryTarget(int32_t SubSteps, float TotalTime);
		void ClientsFireProjectileEx(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, float Speed, int32_t RandomSeed);
		void ClientsFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir);
		void CheckRefireTimer();
		void BPSelectProjectileToFire(class UClass** ProjectileClassOverride, class USoundCue** FireSoundOverride, bool* bSpawnOnClient, float* OverrideMaxSpeed);
		void BPOnSpawnedProjectile(class AShooterProjectile* Projectile);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterProjectile
	 * Size -> 0x01F8 (FullSize[0x0668] - InheritedSize[0x0470])
	 */
	class AShooterProjectile : public AActor
	{
	public:
		class UProjectileMovementComponent*                        MovementComp;                                            // 0x0470(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		bool                                                       bFragmentate;                                            // 0x0478(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KTE7[0x3];                                   // 0x0479(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FragmentOriginOffset;                                    // 0x047C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FragmentConeHalfAngle;                                   // 0x0480(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    NumberOfFragmentProjectiles;                             // 0x0484(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              FragmentProjectileTemplate;                              // 0x0488(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseOwnerProjectileLife;                                 // 0x0490(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JU28[0x7];                                   // 0x0491(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USphereComponent*                                    CollisionComp;                                           // 0x0498(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UParticleSystemComponent*                            ParticleComp;                                            // 0x04A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UStaticMeshComponent*                                StaticMeshComp;                                          // 0x04A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UClass*                                              ExplosionEmitter;                                        // 0x04B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              ImpactEmitter;                                           // 0x04B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3OPC[0x8];                                   // 0x04C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bExploded : 1;                                           // 0x04C8(0x0001) BIT_FIELD Transient, NoDestructor
		bool                                                       bSpawnExplosionTemplateOnClient : 1;                     // 0x04C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bExplodeOnClient : 1;                                    // 0x04C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bExplodeOnImpact : 1;                                    // 0x04C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bExplodeOnLifeTimeEnd : 1;                               // 0x04C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDestroyOnExplode : 1;                                   // 0x04C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceUseTickFunction : 1;                               // 0x04C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bForceIgnoreFriendlyFire : 1;                            // 0x04C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAttachOnImpact : 1;                                     // 0x04C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bSpawnImpactEffectOnHit : 1;                             // 0x04C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bReplicateImpact : 1;                                    // 0x04C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bImpactSetRotationToNormal : 1;                          // 0x04C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNoImpactEmitterOnCharacterHit : 1;                      // 0x04C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRotateMeshWhileMoving : 1;                              // 0x04C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bCheckForNonBlockingHitImpactFX : 1;                     // 0x04C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTickedNonBlockingHitImpactFX : 1;                       // 0x04C9(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       bUseTraceForBlocking : 1;                                // 0x04CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHadAttachParent : 1;                                    // 0x04CA(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		bool                                                       UnknownData_DGVQ : 1;                                    // 0x04CA(0x0001) BIT_FIELD (PADDING)
		bool                                                       bStopOnExplode : 1;                                      // 0x04CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseTraceForBlockingStopOnExplode : 1;                   // 0x04CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseMultiTraceForBlocking : 1;                           // 0x04CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       UnknownData_UF8O : 1;                                    // 0x04CA(0x0001) BIT_FIELD (PADDING)
		bool                                                       bExplodeEffectOnDestroy : 1;                             // 0x04CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bImpactRequiresDinoLineOfSight : 1;                      // 0x04CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bImpactPvEOnlyAlly : 1;                                  // 0x04CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPProjectileBounced : 1;                             // 0x04CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAttachOnProjectileBounced : 1;                          // 0x04CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPIgnoreProjectileImpact : 1;                        // 0x04CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIgnoredByTurrets : 1;                                   // 0x04CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bResetHasImpactedOnMultiTraceForBlocking : 1;            // 0x04CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNonBlockingVolumeMustBeWater : 1;                       // 0x04CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		float                                                      ClientSideCollisionRadius;                               // 0x04CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TraceForBlockingRadius;                                  // 0x04D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CustomColorDesaturation;                                 // 0x04D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_56VM[0x10];                                  // 0x04D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            RotateMeshFactor;                                        // 0x04E8(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_A6U0[0x4];                                   // 0x04F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ImpactTemplate;                                          // 0x04F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TornOffLifeSpan;                                         // 0x0500(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PostExplosionKeepAliveLifeSpan;                          // 0x0504(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     ExplosionNetworkTime;                                    // 0x0508(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		float                                                      NudgedImpactDistance;                                    // 0x0510(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bIgnoreDirectImpactRadialDamage;                         // 0x0514(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceNetUpdate;                                         // 0x0515(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8IZ7[0x2];                                   // 0x0516(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ForceNetUpdateTimeInterval;                              // 0x0518(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class AShooterWeapon_Projectile>            weapon;                                                  // 0x051C(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ParticleColorIntensity;                                  // 0x0524(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ClientFailsafeLifespan;                                  // 0x0528(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseWeaponColorization : 1;                              // 0x052C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseCustomColor : 1;                                     // 0x052C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDoFullRadialDamage : 1;                                 // 0x052C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bExplodeOnNonBlockingImpact : 1;                         // 0x052C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bRadialDamageIgnoreDamageCauser : 1;                     // 0x052C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bMultiTraceCollideAgainstPawns : 1;                      // 0x052C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bTraceForBlockingDoImpactBackTrace : 1;                  // 0x052C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bExplosionOrientUpwards : 1;                             // 0x052C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bColorizeStructureOnImpact : 1;                          // 0x052D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bNonBlockingImpactNoExplosionEmitter : 1;                // 0x052D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDestroyOnExplodeNonBlockingImpact : 1;                  // 0x052D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDontFragmentOnDamage : 1;                               // 0x052D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bPreventReflecting : 1;                                  // 0x052D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseBPIgnoreRadialDamageVictim : 1;                      // 0x052D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_GGGU[0x2];                                   // 0x052E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FProjectileWeaponData                               WeaponConfig;                                            // 0x0530(0x0028) Edit, DisableEditOnInstance
		bool                                                       bDoFinalTraceCheckToDirectDamageVictim : 1;              // 0x0558(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDoFinalTraceCheckFromInstigatorToDirectDamageVictim : 1; // 0x0558(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_5FML[0x3];                                   // 0x0559(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        CustomColor;                                             // 0x055C(0x0010) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class AActor>                               DamageCauser;                                            // 0x056C(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bHasImpacted;                                            // 0x0574(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HEST[0x3];                                   // 0x0575(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FHitResult                                          ReplicatedHitInfo;                                       // 0x0578(0x0088) Net, Transient
		class USoundCue*                                           ProjectileBounceSound;                                   // 0x0600(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MPC6[0x28];                                  // 0x0608(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      ImpactedActors;                                          // 0x0630(0x0010) BlueprintVisible, ZeroConstructor
		struct FVector                                             LastVelocity;                                            // 0x0640(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VVII[0x4];                                   // 0x064C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      IgnoreNonBlockingHitClasses;                             // 0x0650(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		bool                                                       bForceIgnoreBlockingHitClasses;                          // 0x0660(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseProjectileTraceChannel : 1;                          // 0x0661(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_AX9N[0x6];                                   // 0x0662(0x0006) MISSED OFFSET (PADDING)

	public:
		void UpdateTargetPhysics();
		void StopProjectileMovement();
		void SpawnImpactEffect(const struct FHitResult& Impact);
		void RestartProjectileMovement();
		void Reset();
		void ProjectileBounced(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
		bool PreventExplosionEmitter(const struct FHitResult& Impact);
		void OnTouch(class AActor* Actor);
		void OnProjectileStop(const struct FHitResult& HitResult);
		void OnImpact(const struct FHitResult& HitResult, bool bFromReplication);
		void OnExplode(const struct FHitResult& Result);
		void NetUpdateTimer();
		void NetResetTransformAndVelocity(const struct FVector& NewLocation, const struct FRotator& NewRotation, const struct FVector& NewVelocity, TArray<class AActor*> NewMoveIgnoreActors);
		class FName GetSocketForFinalTraceCheckFromInstigatorToDirectDamageVictim();
		void ExplodeAtLocation(const struct FVector& AtLocation, const struct FVector& AtNormal);
		void Explode(const struct FHitResult& Impact);
		void DisableAndDestroy(bool forceOnClient);
		void DeactivateProjectileEffects();
		void Colorize();
		void ClientOnImpact(const struct FVector& ProjectileLocation, const struct FRotator& ProjectileRotation, const struct FHitResult& HitResult);
		void ClientNetImpactFX(const struct FHitResult& HitResult);
		void ClientNetExplode(const struct FHitResult& HitResult);
		void ClientNetDestroy();
		void ClearHomingTarget();
		void BPSpawnedFragments(TArray<class AShooterProjectile*> FragmentArray);
		void BPProjectileBounced(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
		void BPInitVelocity(const struct FVector& ShootDirection);
		void BPInitializedVelocity(const struct FVector& InVelocity, float CustomSpeed);
		bool BPIgnoreRadialDamageVictim(class AActor* Victim);
		void BPDestroyLikeDamage();
		void BPDamageScalarApplied(float Scalar);
		void BPApplyExplosionDamageAndVFX(const struct FHitResult& Impact, bool bForceSpawnExplosionEmitter);
		bool BP_IgnoreProjectileImpact(const struct FHitResult& ImpactHit);
		void ApplyDamageScalar(float Scalar);
		void AddMoveIgnoreActor(class AActor* IgnoreActor);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalProjectileArrow
	 * Size -> 0x0028 (FullSize[0x0690] - InheritedSize[0x0668])
	 */
	class APrimalProjectileArrow : public AShooterProjectile
	{
	public:
		float                                                      PickUpRadius;                                            // 0x0668(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_I5W9[0x4];                                   // 0x066C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              PickupItemClass;                                         // 0x0670(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    PickUpQuantity;                                          // 0x0678(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      PercentChanceToBreakOnImpact;                            // 0x067C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UClass*                                              PickItemClassApplySkin;                                  // 0x0680(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class USoundBase*                                          ArrowPickedUpSound;                                      // 0x0688(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected

	public:
		void PickUpCheck();
		void PickedUp(class AShooterCharacter* ByCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalProjectileBoomerang
	 * Size -> 0x0088 (FullSize[0x0718] - InheritedSize[0x0690])
	 */
	class APrimalProjectileBoomerang : public APrimalProjectileArrow
	{
	public:
		unsigned char                                              UnknownData_2HUC[0x8];                                   // 0x0690(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxDistanceToTravel;                                     // 0x0698(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WQNM[0x74];                                  // 0x069C(0x0074) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ReturnFirstPointTravelDistanceMultiplier;                // 0x0710(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      ReturnSecondPointTravelDistanceMultiplier;               // 0x0714(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.VictoryCoreHighest
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UVictoryCoreHighest : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.VictoryCore
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UVictoryCore : public UVictoryCoreHighest
	{
	public:
		bool STATIC_VTraceSphereBP_IgnoreActorsArray(class UWorld* TheWorld, const struct FVector& Start, const struct FVector& End, struct FHitResult* HitOut, float Radius, TArray<class AActor*> ExtraIgnoreActors, class AActor* InIgnoreActor, ECollisionChannel Channel, int32_t CollisionGroups, bool bReturnPhysMaterial, bool bTraceComplex, const class FName& TraceTag, float DebugDrawDuration);
		bool STATIC_VTraceSphereBP(class UWorld* TheWorld, const struct FVector& Start, const struct FVector& End, struct FHitResult* HitOut, float Radius, class AActor* ActorToIgnore, ECollisionChannel Channel, int32_t CollisionGroups, bool bReturnPhysMaterial, bool bTraceComplex, const class FName& TraceTag, class AActor* OtherActorToIgnore, class AActor* AnotherActorToIgnore, float DebugDrawDuration);
		bool STATIC_VTraceSingleBP_IgnoreActorsArray(class UWorld* TheWorld, struct FHitResult* OutHit, const struct FVector& Start, const struct FVector& End, TArray<class AActor*> ExtraIgnoreActors, class AActor* InIgnoreActor, ECollisionChannel TraceChannel, int32_t CollisionGroups, const class FName& TraceTag, bool bReturnPhysMaterial, bool bTraceComplex, float DebugDrawDuration);
		bool STATIC_VTraceSingleBP(class UWorld* TheWorld, struct FHitResult* OutHit, const struct FVector& Start, const struct FVector& End, ECollisionChannel TraceChannel, int32_t CollisionGroups, const class FName& TraceTag, bool bTraceComplex, class AActor* ActorToIgnore, float DebugDrawDuration);
		bool STATIC_VTraceShapeMultiBP(class UWorld* TheWorld, TArray<struct FHitResult>* OutHits, const struct FVector& Start, const struct FVector& End, TArray<class AActor*> ExtraIgnoreActors, class AActor* InIgnoreActor, float ShapeRadius, float ShapeHalfHeight, const struct FVector& ShapeBoxExtent, const struct FRotator& ShapeRotation, ECollisionChannel Channel, int32_t CollisionGroups, bool bReturnPhysMaterial, bool bTraceComplex, const class FName& TraceTag, float DebugDrawDuration);
		bool STATIC_VTraceShapeBP(class UWorld* TheWorld, const struct FVector& Start, const struct FVector& End, struct FHitResult* HitOut, TArray<class AActor*> ExtraIgnoreActors, class AActor* InIgnoreActor, float ShapeRadius, float ShapeHalfHeight, const struct FVector& ShapeBoxExtent, const struct FRotator& ShapeRotation, ECollisionChannel Channel, int32_t CollisionGroups, bool bReturnPhysMaterial, bool bTraceComplex, const class FName& TraceTag, float DebugDrawDuration);
		bool STATIC_VTraceMultiBP_IgnoreActorsArray(class UWorld* TheWorld, TArray<struct FHitResult>* OutHits, const struct FVector& Start, const struct FVector& End, TArray<class AActor*> ExtraIgnoreActors, class AActor* InIgnoreActor, int32_t CollisionGroups, float SphereRadius, const struct FVector& BoxExtent, bool bReturnPhysMaterial, ECollisionChannel TraceChannel, bool bTraceComplex, const class FName& TraceTag, bool bTraceChannelForceOverlap, bool bDoSort, bool bJustDoSphereOverlapAtStartLoc, float DebugDrawDuration);
		bool STATIC_VTraceMultiBP(class UWorld* TheWorld, TArray<struct FHitResult>* OutHits, const struct FVector& Start, const struct FVector& End, class AActor* InIgnoreActor, int32_t CollisionGroups, float SphereRadius, const struct FVector& BoxExtent, bool bReturnPhysMaterial, ECollisionChannel TraceChannel, bool bTraceComplex, const class FName& TraceTag, bool bTraceChannelForceOverlap, bool bDoSort, class AActor* AdditionalIgnoreActor, class AActor* AnotherIgnoreActor, bool bJustDoSphereOverlapAtStartLoc, float DebugDrawDuration);
		bool STATIC_VTraceAgainstActorExpensive(class UWorld* TheWorld, const struct FVector& Start, const struct FVector& End, struct FHitResult* HitOut, class AActor* ActorToTraceAgainst, ECollisionChannel Channel, int32_t CollisionGroups, float SphereRadius, bool bReturnPhysMaterial, bool bTraceComplex, const struct FVector& BoxExtent, const class FName& TraceTag, bool bSort);
		class UObject* STATIC_VNewObjectTransient(class UClass* classToUse);
		class UObject* STATIC_VNewObjectFromBlueprintOuter(class UObject* OuterObject, class UClass* classToUse);
		class UObject* STATIC_VNewObjectFromBlueprint(class UObject* WorldContextObject, class UClass* classToUse);
		void STATIC_VisualLog_Print(class AActor* Actor, const class FString& Message, bool bIsError);
		void STATIC_VisualLog_Location(class AActor* Actor, const class FString& Message, bool bIsError, const struct FVector& Location, const struct FLinearColor& PointColor, float Size, bool bAlsoPrintMessage);
		void STATIC_VisualLog_LineSegment(class AActor* Actor, const class FString& Message, bool bIsError, const struct FVector& Start, const struct FVector& End, const struct FLinearColor& LineColor, float Thickness, bool bAlsoPrintMessage);
		void STATIC_VisualLog_Histogram(class AActor* Actor, const struct FVector2D& DataSample, const class FName& GraphName, const class FName& DataName);
		void STATIC_VisualLog_AxisAlignedBox(class AActor* Actor, const class FString& Message, bool bIsError, const struct FVector& BoxMin, const struct FVector& BoxMax, const struct FLinearColor& BoxColor, bool bAlsoPrintMessage);
		void STATIC_ViewTrailer(bool bAnimatedSeriesTrailer, bool bARK2Trailer);
		struct FVector STATIC_ViewDirectionAngleOffset(const struct FVector& ViewDirection, const struct FVector& RightVector, float AngleOffsetDegrees, float MaxAngleDegreesBeforeInterpToUp);
		float STATIC_VectorDistance(const struct FVector& A, const struct FVector& B);
		void STATIC_UseCooldown(class UObject* WorldContextObject, double* CooldownClock);
		void STATIC_UnRegisterComponentBP(class UActorComponent* Component);
		void STATIC_TrimArray_Vector(TArray<struct FVector>* Array, int32_t MaxLength, bool bRemoveFromEnd);
		void STATIC_TrimArray_Float(TArray<float>* Array, int32_t MaxLength, bool bRemoveFromEnd);
		struct FVector2D STATIC_TransformVectorByScreenProjectionGlobalTransform(const struct FVector2D& outVec);
		bool STATIC_TraceProjectileArc(class UObject* WorldContextObject, const struct FProjectileArc& Arc, struct FHitResult* HitResult, struct FVector* EndLocation, float* EndArcTime, struct FVector* ArcPeakLocation, float MaxArcLength, TArray<class AActor*> ActorsToIgnore, float ArcTimeStep, ECollisionChannel CollisionChannel, bool bTraceObjectTypeOnly, bool bDrawDebug, float DebugDrawDuration);
		float STATIC_TimeSince_Utc(double OldTime);
		float STATIC_TimeSince_Network(class UWorld* ForWorld, double OldTime);
		float STATIC_TimeSince(class UWorld* ForWorld, double OldTime);
		double STATIC_TimeSeconds(class UWorld* ForWorld);
		bool STATIC_SupportsShaderModel5();
		int32_t STATIC_StringToIntAscii(const class FString& SourceString, int32_t StringIndex);
		class UClass* STATIC_StringReferenceToClass(const class FString& StringReference);
		void STATIC_StopMusic();
		void STATIC_StopMovie();
		void STATIC_StopCompanionEventForPlayer(class APrimalCharacter* Player);
		void STATIC_SteamOverlayOpenURL(const class FString& ToURL);
		float STATIC_StaticGetTimeSince(class UWorld* TheWorld, double Time);
		bool STATIC_StaticCheckForCommand(const class FString& CommandName);
		void STATIC_StartCompanionEventForPlayer(class APrimalCharacter* Player, struct FCompanionEventData* EventData, class AActor* EventActor);
		bool STATIC_SplineLineTrace(class USplineComponent* SplineComponent, TArray<class AActor*> ActorsToIgnore, TArray<struct FHitResult>* OutHits, int32_t NumTracesPerSegment, ECollisionChannel Channel, bool bStopOnBlockingHit, float DebugDrawDuration);
		bool STATIC_SphereOverlapFast(class UObject* WorldContextObject, const struct FVector& Loc, float Radius);
		class APrimalStructure* STATIC_SpawnSaddleAttachedStructure(class APrimalDinoCharacter* ParentDino, class UClass* StructureToSpawn, const struct FVector& Location, const struct FRotator& Rotation, class APrimalStructure* ParentStructure, bool bLinkToParent, int32_t ConfigIndex, const class FName& SKAttachmentSocketOrBoneName);
		class APrimalDinoCharacter* STATIC_SpawnCustomDino(class UWorld* World, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, class AShooterPlayerController* OwnerPlayerController, float DebugDrawDuration, bool bApplyRotationToSpawnOffset, bool bUseExactSpawnLocation, bool bSkipAddingTamedLevels, bool bSuppressTamingNotifications, class AMissionType* Mission, class UClass* ColorSet);
		class ABrush* STATIC_SpawnBoxBrushActorFast(class UClass* BrushType, const struct FTransform& BrushTransform, const struct FVector& BoxExtent);
		class ABrush* STATIC_SpawnBoxBrushActor(class UClass* BrushType, const struct FTransform& BrushTransform, const struct FVector& BoxExtent);
		class AActor* STATIC_SpawnActorInWorld(class UWorld* ForWorld, class UClass* anActorClass, const struct FVector& AtLocation, const struct FRotator& AtRotation, class USceneComponent* attachToComponent, int32_t dataIndex, const class FName& attachSocketName, class AActor* OwnerActor, class APawn* InstigatorPawn);
		class AActor* STATIC_SpawnActorDeferred(class UClass* Class, class UWorld* inWorld, const struct FVector& Location, const struct FRotator& Rotation, class AActor* Owner, class APawn* Instigator, bool bNoCollisionFail);
		TArray<struct FVector> STATIC_SortPointsByDistance(const struct FVector& fromLoc, TArray<struct FVector> Points);
		TArray<class AActor*> STATIC_SortActorsByType(TArray<class AActor*> actors);
		TArray<class AActor*> STATIC_SortActorsByTag(int32_t tagIndex, TArray<class AActor*> actors);
		class AActor* STATIC_SortActorsByDistanceReturnNearest(const struct FVector& fromLoc, TArray<class AActor*> actors, bool bRemoveNullEntries);
		TArray<class AActor*> STATIC_SortActorsByDistance(const struct FVector& fromLoc, TArray<class AActor*> actors);
		class FString STATIC_SimpleReplaceUnicodeWithSupportedAlternatives(const class FString& OriginalString);
		class FString STATIC_SimpleFloatString(float inputVal);
		struct FVector STATIC_SimpleCurveInterpClampedVector(const struct FVector& A, const struct FVector& B, float Alpha, ESimpleCurve CurveType);
		struct FTransform STATIC_SimpleCurveInterpClampedTransform(const struct FTransform& A, const struct FTransform& B, float Alpha, ESimpleCurve CurveType);
		struct FRotator STATIC_SimpleCurveInterpClampedRotator(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, ESimpleCurve CurveType);
		struct FLinearColor STATIC_SimpleCurveInterpClampedLinearColor(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha, ESimpleCurve CurveType);
		float STATIC_SimpleCurveInterpClamped(float A, float B, float Alpha, ESimpleCurve CurveType);
		float STATIC_SimpleCurveEval(float Value, ESimpleCurve CurveType);
		void STATIC_ShowEditorNotification(class UObject* WorldContextObject, const class FString& Message, EEditorMessageLogLevel LogLevel, float Duration, bool bServerOnly);
		void STATIC_SetTickGroupBP(class UActorComponent* Component, ETickingGroup TickGroup);
		void STATIC_SetSessionPrefix(const class FString& InPrefix);
		void STATIC_SetSelectedLevelActors(TArray<class AActor*> ActorsToSelect, bool bClearPreviousSelection);
		bool STATIC_SetMultiUseEntryPriority(TArray<struct FMultiUseEntry>* Entries, bool bFindByUseIndexInsteadOfArrayIndex, int32_t index, int32_t NewPriority);
		void STATIC_SetMousePosition(class APlayerController* Controller, float X, float Y);
		void STATIC_SetMaterialColorizationFromItemColors(class UPrimalItem* Item, class UMaterialInstanceDynamic* dynamicMic);
		void STATIC_SetLevelActorFolderPath(class AActor* Actor, const class FName& FolderPath);
		void STATIC_SetLastMapPlayed(const class FString& NewLastMapPlayed);
		void STATIC_SetDinoSetupPointsPerStat(struct FDinoSetup* DinoSetup, EPrimalCharacterStatusValue StatusType, int32_t Value, bool bIsPlayerAdded, bool bAddInsteadOfSet);
		void STATIC_SetBoolArrayElemTrue(TArray<bool>* TheArray, int32_t TheIndex);
		void STATIC_SetBoolArrayElemFalse(TArray<bool>* TheArray, int32_t TheIndex);
		void STATIC_SetAllowControllerInputWithCursor(bool bAllow);
		void STATIC_ServerSearchFoliageByResource(class UObject* WorldContextObject, const struct FVector& Origin, float Radius, TArray<struct FOverlappedFoliageElement>* OutFoliage, TArray<class UClass*> HarvestResources, bool bVisibleAndActiveOnly, bool bIncludeUsableFoliage, bool bIncludeMeshFoliage, bool bSortByDistance, bool bReverseSort);
		void STATIC_ServerSearchFoliage(class UObject* WorldContextObject, const struct FVector& Origin, float Radius, TArray<struct FOverlappedFoliageElement>* OutFoliage, bool bVisibleAndActiveOnly, bool bIncludeUsableFoliage, bool bIncludeMeshFoliage, bool bSortByDistance, bool bReverseSort);
		TArray<class AActor*> STATIC_ServerOctreeOverlapActorsClassBitMask(class UWorld* TheWorld, const struct FVector& AtLoc, float Radius, int32_t OctreeTypeBitMask, class UClass* ActorClass, bool bForceActorLocationDistanceCheck);
		TArray<class AActor*> STATIC_ServerOctreeOverlapActorsClass(class UWorld* TheWorld, const struct FVector& AtLoc, float Radius, EServerOctreeGroup OctreeType, class UClass* ActorClass, bool bForceActorLocationDistanceCheck);
		TArray<class AActor*> STATIC_ServerOctreeOverlapActorsBitMask(class UWorld* TheWorld, const struct FVector& AtLoc, float Radius, int32_t OctreeTypeBitMask, bool bForceActorLocationDistanceCheck);
		TArray<class AActor*> STATIC_ServerOctreeOverlapActors(class UWorld* TheWorld, const struct FVector& AtLoc, float Radius, EServerOctreeGroup OctreeType, bool bForceActorLocationDistanceCheck);
		bool STATIC_ServerCheckMeshingOnActor(class AActor* OnActor, bool bForceUseActorCenterBounds);
		struct FVector STATIC_SelectVectorIfWithinRange(const struct FVector& A, const struct FVector& B, bool* PickedA, float MaxDistance);
		struct FVector STATIC_SelectCloserVector(const struct FVector& Origin, const struct FVector& A, const struct FVector& B, bool* PickedA);
		struct FVector STATIC_RotateDirToTargetWithAngleLimits(const struct FVector& RotateDir, const struct FVector& TowardsDir, const struct FRotator& WithAngleLimits, bool bForceZeroRoll);
		void STATIC_ReupdateCaptures(class UWorld* ForWorld, bool bReinitSkylights);
		void STATIC_ResetMousePositionToCenter(class APlayerController* Controller);
		void STATIC_ResetCooldown(double* CooldownClock);
		struct FRotator STATIC_RemoveRollFromRotator(const struct FRotator& FromRotator);
		struct FRotator STATIC_RemovePitchAndRollFromRotator(const struct FRotator& FromRotator);
		TArray<TWeakObjectPtr<class APrimalDinoCharacter>> STATIC_RemoveInvalidObjectsInContainer(TArray<TWeakObjectPtr<class APrimalDinoCharacter>> fContainer);
		void STATIC_RemoveFromActorList(class UWorld* ForWorld, int32_t ActorListNum, class AActor* ActorRef);
		bool STATIC_RemoveActorFromCustomActorList(class UWorld* ForWorld, const class FName& SearchCustomTag, class AActor* ActorToRemove);
		void STATIC_RegisterComponentBP(class UActorComponent* Component);
		void STATIC_RefreshApplySoundVolumes();
		void STATIC_RefreshApplySoundAndMusicVolumes();
		void STATIC_RecordMeshingMetrics(class AActor* forActor, bool bWasDestroyed);
		bool STATIC_ReallySupportsShaderModel5();
		struct FVector STATIC_RandomPointInBoundingBoxFromStream(const struct FVector& Origin, const struct FVector& BoxExtent, const struct FRandomStream& Stream);
		class UObject* STATIC_PureDefaultObject(class UObject* FromObjectInstance);
		class UObject* STATIC_PureClassDefaultObject(class UClass* FromClass);
		bool STATIC_ProjectWorldLocationToScreenOrScreenEdgePosition(class APlayerController* PlayerController, const struct FVector& WorldLocation, struct FVector2D* ScreenPosition, float screenMarginPercent, bool widgetSpace, bool* OnScreen, bool bAdjustWithScreenDPI);
		struct FVector STATIC_ProjectVectorOntoInsideOfSphere(const struct FVector& ProjectVector, const struct FVector& ProjectVectorLocation, const struct FVector& SphereOrigin, bool bOnlyProjectIfVectorIsLeavingSphere);
		struct FVector STATIC_ProjectScreenLocationIntoWorld(class APlayerController* ForPC, const struct FVector2D& ScreenLocation, float ProjectionDist);
		struct FVector STATIC_ProjectLocationToEdgeOfSphere(bool* bOutDidProject, const struct FVector& ForLocation, const struct FVector& SphereOrigin, float SphereRadius, bool bOnlyProjectIfWithinRadius, bool bForceProjection2D, bool bDebug, class AActor* DebugContextActor, float DebugDuration);
		void STATIC_PrintMessageInShippingBuild(const class FString& Msg);
		float STATIC_PrecisionRound(float inputVal, int32_t Precision);
		TArray<struct FVector> STATIC_PointsRandomDist(const struct FVector& Location, int32_t NumPoints, float Radius, float PointRadius);
		TArray<struct FVector> STATIC_PointsOnAGrid(class UObject* WorldContextObject, const struct FVector& Center, const struct FRotator& Rotation, float Radius, float MinSize, int32_t NumPoints, float DebugDrawDuration);
		TArray<struct FVector> STATIC_PointsOnACircle(const struct FVector& Center, float Radius, int32_t NumPoints);
		struct FVector STATIC_PointOnSphere(float Radius, float DegreesI, float DegreesJ);
		struct FVector2D STATIC_PointOnCircle(float Radius, float AngleDegrees);
		void STATIC_PlayMusic(const class FString& MusicFile, float OverrideVolume);
		bool STATIC_PlayMovie(const class FString& MoviePath, bool bMovieIsSkippable, const class FScriptDelegate& OnMoviePlaybackFinishedDelegate);
		bool STATIC_PlayerOwnsScorchedEarthServer(class AShooterPlayerController* Controller);
		bool STATIC_PlayerOwnsGenesisSeasonPassServer(class AShooterPlayerController* Controller);
		bool STATIC_PlayerOwnsExtinctionServer(class AShooterPlayerController* Controller);
		bool STATIC_PlayerOwnsAberrationServer(class AShooterPlayerController* Controller);
		void STATIC_PlayCompanionReactionToPlayers(TArray<class APrimalCharacter*> PlayersWhoGetReaction, struct FCompanionReactionData* ReactionData, bool ForcePlayNow, class UMaterialInterface* DialogueIconOverride, bool RestrictedEnvironmentalReaction, int32_t UniqueID);
		void STATIC_PlayCompanionReactionOnSolePlayer(class APrimalCharacter* PlayersWhoGetReaction, struct FCompanionReactionData* ReactionData, bool ForcePlayNow, class UMaterialInterface* DialogueIconOverride, bool RestrictedEnvironmentalReaction, int32_t UniqueID);
		void STATIC_PlaceStructure(class AShooterCharacter* placingPawn, class UClass* StructureToPlace, const struct FItemNetID& ItemId, bool DisplayFailMessage);
		bool STATIC_OwnsSteamAppID(int32_t AppID);
		bool STATIC_OwnsScorchedEarth();
		bool STATIC_OwnsGenesisSeasonPass();
		bool STATIC_OwnsGenesis();
		bool STATIC_OwnsExtinction();
		bool STATIC_OwnsDLC(const class FString& DLCName);
		bool STATIC_OwnsCrystalIsles();
		bool STATIC_OwnsAberration();
		bool STATIC_OverlappingStationaryObjectsTraceBP(class UWorld* TheWorld, class APrimalCharacter* SourceCharacter, TArray<struct FOverlapResult>* Overlaps, const struct FVector& Origin, float Radius, ECollisionChannel TraceChannel, class AActor* InIgnoreActor, const class FName& TraceName, bool bComplexOverlapTest);
		bool STATIC_OverlappingActorsTraceBP(class UWorld* TheWorld, TArray<struct FOverlapResult>* Overlaps, const struct FVector& Origin, float Radius, ECollisionChannel TraceChannel, class AActor* InIgnoreActor, const class FName& TraceName, bool bComplexOverlapTest);
		bool STATIC_OverlappingActorsBP(class UWorld* TheWorld, TArray<struct FOverlapResult>* Overlaps, const struct FVector& Origin, float Radius, int32_t CollisionGroups, class AActor* InIgnoreActor, const class FName& TraceName, bool bComplexOverlapTest);
		void STATIC_OpenStorePageForDLC(const class FString& DLCName);
		void OnMoviePlaybackFinished__DelegateSignature(const class FString& MoviePath, bool bPlaybackWasCancelled);
		class UClass* STATIC_ObjectRefToClassRef(class UObject* InObject);
		bool STATIC_ObjectIsChildOf(class UObject* Object, class UClass* ObjectType, bool bExactMatch);
		struct FRotator STATIC_NormalizeRotator(const struct FRotator& InRotator);
		double STATIC_NetworkTimeToRealWorldUtcTime(class UObject* WorldContextObject, double NetworkTime);
		void STATIC_MultiTraceProjectSphere(class UObject* WorldContextObject, TArray<struct FHitResult>* OutResults, const struct FVector& Origin, ECollisionChannel TraceChannel, int32_t HorizResolution, int32_t VertResolution, float StartDistance, float EndDistance, float NorthConeSubtractAngle, float SouthConeSubtractAngle, int32_t PctChanceToTrace, int32_t MaxTraceCount, bool bDrawDebugLines, float DebugDrawDuration, bool bStopOnFirstHit);
		void STATIC_MultiLinePenetrationTraceByChannel(class UObject* WorldContextObject, TArray<struct FPenetrationTraceHit>* OutResults, const struct FVector& Start, const struct FVector& End, ECollisionChannel TraceChannel, TArray<class AActor*> ActorsToIgnore, bool bTraceComplex, bool bIgnoreSelf, bool bDrawDebugLines, float DebugDrawDuration);
		void STATIC_MulticastDrawDebugString(class AActor* ReplicatedActor, const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration);
		void STATIC_MulticastDrawDebugSphere(class AActor* ReplicatedActor, const struct FVector& Center, float Radius, int32_t Segments, const struct FLinearColor& LineColor, float Duration);
		void STATIC_MulticastDrawDebugPoint(class AActor* ReplicatedActor, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration);
		void STATIC_MulticastDrawDebugLine(class AActor* ReplicatedActor, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness, bool allowInShipping);
		void STATIC_MulticastDrawDebugCylinder(class AActor* ReplicatedActor, const struct FVector& Start, const struct FVector& End, float Radius, int32_t Segments, const struct FLinearColor& LineColor, float Duration);
		void STATIC_MulticastDrawDebugCoordinateSystem(class AActor* ReplicatedActor, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness);
		void STATIC_MulticastDrawDebugCapsuleWithExtents(class AActor* ReplicatedActor, const struct FVector& Top, const struct FVector& Bottom, float Radius, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
		void STATIC_MulticastDrawDebugCapsule(class AActor* ReplicatedActor, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration);
		void STATIC_MulticastDrawDebugCamera(class AActor* ReplicatedActor, class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration);
		void STATIC_MulticastDrawDebugBox(class AActor* ReplicatedActor, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration);
		void STATIC_MulticastDrawDebugArrow(class AActor* ReplicatedActor, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration);
		struct FDinoSetup STATIC_ModifyDinoSetupTargetLevel(const struct FDinoSetup& DinoSetup, float LevelMultiplier, int32_t MinLevel, int32_t MaxLevel);
		void STATIC_MarkGen2IntroAsSeen(class UObject* WorldContextObject);
		float STATIC_MapRangeToCurveClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB, ESimpleCurve CurveType);
		float STATIC_MapAngleRangeToCurveClamped(float AngleDegrees, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB, ESimpleCurve CurveType);
		struct FPlane STATIC_MakePlaneWithPoints(const struct FVector& A, const struct FVector& B, const struct FVector& C);
		struct FHitResult STATIC_MakeHitResult(const struct FVector& Location, const struct FVector& Normal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, const class FName& HitBoneName, int32_t HitItem, bool bBlockingHit);
		void STATIC_LogStackTrace();
		struct FVector STATIC_LeadTargetPosition(const struct FVector& ProjLocation, float ProjSpeed, const struct FVector& TargetLocation, const struct FVector& TargetVelocity);
		class FString STATIC_LeaderboardColumnNameToString(ELeaderboardColumnName ColumnType);
		bool STATIC_KillTargetCharacterOrStructure(class AActor* ActorToKill, class AActor* DamageCauser, bool bTryDestroyActor);
		class FString STATIC_JoinStringArrayWithNewlines(TArray<class FString> SourceArray);
		bool STATIC_IsXboxOneBuild();
		bool STATIC_IsWorkshopIDSubscribed(const class FString& WorkshopID);
		bool STATIC_IsValidItemForGrinding(class UPrimalItem* Item, class UPrimalInventoryComponent* inventory);
		bool STATIC_IsUWPBuild();
		bool STATIC_IsUndermesh(class APrimalCharacter* Character, struct FVector* CheckSevenHitLocation, bool* bOverlapping, class UActorComponent** CheckSevenResult, bool DebugDraw, float debugDrawSeconds);
		bool STATIC_IsTimeSince_Utc(double OldTime, float CheckTimeSince, bool bForceTrueAtZeroTime);
		bool STATIC_IsTimeSince_Network(class UWorld* ForWorld, double OldTime, float CheckTimeSince, bool bForceTrueAtZeroTime);
		bool STATIC_IsTimeSince(class UWorld* ForWorld, double OldTime, float CheckTimeSince, bool bForceTrueAtZeroTime);
		bool STATIC_IsSplitscreen();
		bool STATIC_IsShipping();
		bool STATIC_IsSavingSaveGame();
		bool STATIC_IsRunningTotalConversion();
		bool STATIC_IsPVEServer(class UObject* WorldContextObject);
		bool STATIC_IsPS4Build();
		bool STATIC_IsPointStuckWithinMesh(class UWorld* TheWorld, const struct FVector& TestPoint, int32_t hemisphereSubdivisions, float rayDistance, float percentageConsideredStuck, class AActor* ActorToIgnore);
		bool STATIC_IsPointInCone(const struct FVector& Point, const struct FVector& ConeOrigin, const struct FVector& ConeDir, float ConeLength, float ConeHalfAngle);
		bool STATIC_IsPlayingMovie();
		bool STATIC_IsPlayInEditor(class UObject* WorldContextObject);
		bool STATIC_IsOfficialServer();
		bool STATIC_IsNonHostPlayer(class UWorld* TheWorld, class AController* PlayerController);
		bool STATIC_IsMissionTagActiveAnywhere(class AShooterPlayerController* FromPC, const class FName& MissionTag);
		bool STATIC_IsMissionActiveAnywhere(class UClass* MissionType);
		bool STATIC_IsLowMemPlatform();
		bool STATIC_IsLoadingSaveGame();
		bool STATIC_IsLinuxOrMacBuild();
		bool STATIC_IsInsideOrIntersectsBox(const struct FVector& BoxOrigin, const struct FVector& BoxExtents, class UShapeComponent* ShapeComponent);
		bool STATIC_IsInsideBox(const struct FVector& BoxOrigin, const struct FVector& BoxExtents, class UShapeComponent* ShapeComponent);
		bool STATIC_IsGameWorld(class UWorld* TheWorld);
		bool STATIC_IsGamePadConnected();
		bool STATIC_IsEpicClient();
		bool STATIC_IsEditor();
		bool STATIC_IsDistanceLessThan(const struct FVector& A, const struct FVector& B, float Distance);
		bool STATIC_IsDistanceGreaterThan(const struct FVector& A, const struct FVector& B, float Distance);
		bool STATIC_IsDinoDuped(class UWorld* WorldContext, uint32_t ID1, uint32_t ID2);
		bool STATIC_IsCryopodNerfEnabled(class UObject* WorldContextObject, float* damageMult, float* Duration, float* incomingDamageMultPercent);
		bool STATIC_IsCooldownComplete(class UObject* WorldContextObject, double CooldownClock, float CooldownDuration);
		bool STATIC_IsConsoleServerBuild();
		bool STATIC_IsConsoleBuild();
		int32_t STATIC_IsChildOfClassesSoft(class UClass* childClass, TArray<class FString> ParentClassesArraySoft);
		int32_t STATIC_IsChildOfClasses(class UClass* childClass, TArray<class UClass*> ParentClassesArray);
		bool STATIC_IsBrainControllingDinoAttached(class APrimalCharacter* Character);
		struct FVector2D STATIC_InverseTransformVectorByScreenProjectionGlobalTransform(const struct FVector2D& outVec);
		struct FTransform STATIC_InverseTransform(const struct FTransform& TransformIn);
		class FString STATIC_IntToStringAscii(int32_t CharValue);
		bool STATIC_IntersectsBox(const struct FVector& BoxOrigin, const struct FVector& BoxExtents, class UShapeComponent* ShapeComponent);
		void STATIC_InlineLoadLevels(TArray<class FName> LevelNames, TArray<class FName> LevelNamesToUnload, bool bDisableDistanceStreamingOnLevels);
		struct FVector STATIC_Helix(float Radius, float Time);
		bool STATIC_HasPlayerSeenGen2Intro(class UObject* WorldContextObject);
		bool STATIC_HasCraftingRequirementsGreaterThanOne(class UPrimalItem* Item);
		bool STATIC_GrindItemIntoInventory(class UPrimalItem* Item, class UPrimalInventoryComponent* inventory, bool bGrindStack, int32_t MaxQuantityToGrind, float GrindGiveItemsPercent, int32_t MaxItemsToGivePerGrind);
		void STATIC_GrindAllItemsToInventory(class UPrimalInventoryComponent* inventory, bool bGrindStack, int32_t MaxQuantityToGrind, float GrindGiveItemsPercent, int32_t MaxItemsToGivePerGrind);
		void STATIC_GridTraceAroundPoint(class UObject* WorldContextObject, TArray<struct FHitResult>* OutResults, const struct FVector& Origin, const struct FRotator& GridRotation, TArray<class AActor*> ActorsToIgnore, ECollisionChannel CollisionChannel, int32_t NumTracesX, int32_t NumTracesY, float SpacingX, float SpacingY, float ZStartOffset, float ZEndOffset, bool bTraceComplex, bool bDrawDebug, float DebugDrawDuration);
		TArray<class UPrimalItem*> STATIC_GiveItemToCharacter(class APrimalCharacter* Character, class UClass* ItemType, int32_t NumItems, float Quality, bool bAutoEquip);
		TArray<class ULevelStreaming*> STATIC_GetWorldSublevels(class UObject* WorldContextObject);
		double STATIC_GetWorldLoadedAtTime(class UObject* WorldContextObject);
		int32_t STATIC_GetWeightedRandomIndexFromArray(TArray<float> pArray, float ForceRand);
		float STATIC_GetVolumeOfCapsule(float CapsuleRadius, float CapsuleHalfHeight);
		struct FVector STATIC_GetVelocityDeltaBetweenChars(class APrimalCharacter* CharA, class APrimalCharacter* CharB);
		class FString STATIC_GetTwoLetterISOLanguageName();
		float STATIC_GetTimeSince(class APawn* Pawn, float Time);
		float STATIC_GetTimeSeconds(class APawn* Pawn);
		struct FColor STATIC_GetTeamColor(int32_t TargetingTeam);
		struct FBoxSphereBounds STATIC_GetStaticMeshBounds(class UStaticMesh* ForMesh);
		void STATIC_GetSpecialActorList(class UWorld* ForWorld, EActorListsBP ActorListType, TArray<class AActor*>* OutActors);
		class FString STATIC_GetSoundWaveLocalizedSpokenText(class USoundWave* InSound);
		class FString STATIC_GetSoundCueLocalizedSpokenText(class USoundCue* InSound);
		float STATIC_GetSimpleMontageDuration(class UAnimMontage* GivenMontage, float GivenPlayRate);
		class UShooterGameUserSettings* STATIC_GetShooterGameUserSettings();
		class AShooterCharacter* STATIC_GetShooterCharacterFromPawn(class APawn* Pawn);
		class AShooterCharacter* STATIC_GetShooterCharacterFromController(class AController* Controller);
		TArray<class AActor*> STATIC_GetSelectedLevelActors();
		int32_t STATIC_GetSecondsIntoDay();
		struct FVector2D STATIC_GetScreenPercentLocation(class APlayerController* ForPC, const struct FVector2D& ScreenPercentages);
		float STATIC_GetScreenPercentage();
		float STATIC_GetScreenFramePerfScalar();
		double STATIC_GetRealWorldUtcTimeInSeconds();
		bool STATIC_GetRandomWeightedDinoSetup(TArray<struct FDinoSetup> DinoSetupEntries, struct FDinoSetup* DinoSetup);
		float STATIC_GetProjectileArcPeakTime(class UObject* WorldContextObject, const struct FProjectileArc& Arc);
		class UWorld* STATIC_GetPrimaryWorld();
		class AShooterCharacter* STATIC_GetPlayerCharacterByIndex(class UObject* WorldContextObject, int32_t PlayerIndex);
		class AShooterCharacter* STATIC_GetPlayerCharacterByController(class APlayerController* PC);
		struct FVector STATIC_GetPlaneNormal(const struct FPlane& ForPlane);
		bool STATIC_GetOverlappedHarvestActors(class UWorld* ForWorld, const struct FVector& AtLoc, float AtRadius, TArray<class AActor*>* OutHarvestActors, TArray<class UActorComponent*>* OutHarvestComponents, TArray<struct FVector>* OutHarvestLocations, TArray<int32_t>* OutHitBodyIndices);
		class FString STATIC_GetObjectString(class UObject* ForObject);
		void STATIC_GetObjectsReferencedBy(class UObject* ForObject, TArray<class UObject*>* OutReferencedObjects, bool bIgnoreTransient);
		class FString STATIC_GetObjectPathName(class UObject* ForObject);
		class FName STATIC_GetObjectName(class UObject* ForObject);
		class FName STATIC_GetObjectFName(class UObject* ForObject);
		class FString STATIC_GetNewlineCharacter();
		double STATIC_GetNetworkTimeInSeconds(class UObject* WorldContextObject);
		double STATIC_GetMissionNetworkStartTime(class UWorld* ForWorld, const class FName& MissionTag);
		class AActor* STATIC_GetMissionActorOfTypes(class UWorld* World, TArray<class UClass*> theMissionTypes);
		class AActor* STATIC_GetMissionActorOfType(class UWorld* World, class UClass* theMissionType, bool bExactMatch);
		float STATIC_GetMatineeLength(class AMatineeActor* MatineeActor);
		bool STATIC_GetLocaleSpecificSoundWaveAnimTexturePairArrays(TArray<struct FLocalizedSoundWaveAnimTexturePairArrays> LocalizedSoundWaveAnimTextures, struct FLocalizedSoundWaveAnimTexturePairArrays* OutLocalizedAudio, bool* FoundLocalizedSoundWavesForThisLanguage, const class FString& LanguageOverride);
		bool STATIC_GetLocaleSpecificAudio(TArray<struct FLocalizedSoundCueEntry> LocalizedSoundCues, struct FLocalizedSoundCueEntry* OutLocalizedAudio, const class FString& LanguageOverride);
		TArray<class FName> STATIC_GetLoadedStreamingLevelNames();
		void STATIC_GetLaunchVelocityAndGravity(const struct FVector& StartLocation, const struct FVector& TargetLocation, float LateralSpeed, float PeakHeightZ, struct FVector* LaunchVelocity, float* Gravity);
		class FString STATIC_GetLastMapPlayed();
		class FString STATIC_GetLastHostedMapPlayed();
		class FString STATIC_GetKeyNameFromActionName(const class FName& ActionName);
		class FString STATIC_GetKeyName(const struct FKey& Key);
		class UClass* STATIC_GetItemClassFromItemSetup(const struct FItemSetup& ItemSetup);
		class FName STATIC_GetHitBoneNameFromDamageEvent(class APrimalCharacter* Character, class AController* HitInstigator, const struct FDamageEvent& DamageEvent, bool bIsPointDamage, const struct FHitResult& PointHitResult, const class FName& MatchCollisionPresetName);
		class UPrimalHarvestingComponent* STATIC_GetHarvestingComponentFromHitBodyIndex(class UInstancedStaticMeshComponent* FromISMC, int32_t WithHitBodyIndex);
		bool STATIC_GetGroundLocation(class UWorld* ForWorld, struct FVector* theGroundLoc, const struct FVector& StartLoc, const struct FVector& OffsetUp, const struct FVector& OffsetDown);
		class UClass* STATIC_GetGrinderReplacementItem(class UClass* current);
		struct FVector STATIC_GetGPSCoords(class UWorld* ForWorld, const struct FVector& InLoc);
		class ADirectionalLight* STATIC_GetFirstDirectionalLight(class UWorld* World);
		float STATIC_GetDistanceToCollision(class UPrimitiveComponent* Comp, const struct FVector& Point, struct FVector* closestPoint);
		class UClass* STATIC_GetDinoStaticClass(const struct FDinoSetup& DinoSetup);
		int32_t STATIC_GetDinoSetupPointsPerStat(const struct FDinoSetup& DinoSetup, EPrimalCharacterStatusValue StatusType, bool bGetPlayerAdded);
		bool STATIC_GetDinoSetupGroup_WeightedRandom(TArray<struct FDinoSetupGroup> DinoSetupGroups, struct FDinoSetupGroup* Group);
		bool STATIC_GetDinoSetupGroup_ByName(const class FName& GroupName, TArray<struct FDinoSetupGroup> DinoSetupGroups, struct FDinoSetupGroup* Group);
		class UClass* STATIC_GetDinoSetupDinoType(const struct FDinoSetup& DinoSetup);
		bool STATIC_GetDinoSetupCapsuleSize(const struct FDinoSetup& DinoSetup, float* CapsuleRadius, float* CapsuleHalfHeight);
		class APrimalDinoCharacter* STATIC_GetDinoCharacterByID(class UObject* WorldContextObject, int32_t DinoID1, int32_t DinoID2, bool bSearchTamedOnly);
		class UObject* STATIC_GetDefaultObject(class UObject* FromObjectInstance);
		struct FVector STATIC_GetCustomDinoSpawnLocation(class UWorld* World, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, float DebugDrawDuration, bool bApplyRotationToSpawnOffset);
		class ACustomActorList* STATIC_GetCustomActorList(class UWorld* ForWorld, const class FName& SearchCustomTag);
		float STATIC_GetCurrentCameraExposure();
		struct FVector2D STATIC_GetControllerMovementInputs(class APlayerController* ForPC);
		class AActor* STATIC_GetClosestActorArray(const struct FVector& ToPoint, TArray<class AActor*> ActorArray);
		class FString STATIC_GetClassString(class UClass* ForClass);
		class FString STATIC_GetClassPathName(class UObject* ForClass);
		class FName STATIC_GetClassFName(class UClass* ForClass);
		class UObject* STATIC_GetClassDefaultObject(class UClass* FromClass);
		bool STATIC_GetCharacterCapsuleSize(class UClass* CharClass, float* CapsuleRadius, float* CapsuleHalfHeight);
		class FName STATIC_GetBlockingMissionTag(class AShooterPlayerController* FromPC, const class FName& MissionTag);
		TArray<int32_t> STATIC_GetArrayIndicesSorted_Int(TArray<int32_t> Array, bool bSortLowToHigh);
		TArray<int32_t> STATIC_GetArrayIndicesSorted_Float(TArray<float> Array, bool bSortLowToHigh);
		TArray<int32_t> STATIC_GetArrayIndicesSorted_Double(TArray<double> Array, bool bSortLowToHigh);
		float STATIC_GetAngleBetweenVectorsPure(const struct FVector& VectorA, const struct FVector& VectorB, const struct FVector& AroundAxis);
		float STATIC_GetAngleBetweenVectors(const struct FVector& VectorA, const struct FVector& VectorB, const struct FVector& AroundAxis);
		TArray<class AActor*> STATIC_GetAllPlayerStarts(class UWorld* World);
		TArray<class AActor*> STATIC_GetAllMissionDispatchers(class UWorld* World);
		TArray<class AActor*> STATIC_GetAllMissionDispatcherPoints(class UWorld* World);
		TArray<class AActor*> STATIC_GetAllMissionActors(class UWorld* World);
		TArray<class AShooterPlayerController*> STATIC_GetAllLocalPlayerControllers(class UObject* WorldContextObject);
		TArray<class AShooterCharacter*> STATIC_GetAllLocalPlayerCharacters(class UObject* WorldContextObject);
		TArray<class APlayerCameraManager*> STATIC_GetAllLocalPlayerCameraManagers(class UObject* WorldContextObject);
		void STATIC_GetAllClassesOfType(TArray<class UClass*>* Subclasses, class UClass* ParentClass, bool bAllowAbstract, const class FString& Path);
		TArray<class FName> STATIC_GetAllAvailableMissionsAsTags(class UWorld* World);
		TArray<struct FAvailableMission> STATIC_GetAllAvailableMissions(class UWorld* World);
		class UClass* STATIC_GenerateRandomLootItemFromLootTable(TArray<struct FLootTableEntry> Entries, int32_t* ItemQuantity, float* ItemQuality);
		class UClass* STATIC_GenerateRandomLootItem(ELootItemType LootItemType);
		class FString STATIC_Generate_UUID();
		class FString STATIC_FuseChunkedFString(TArray<class FString> InputStringArray);
		class FString STATIC_FormatAsTimeLong(int32_t InTime);
		class FString STATIC_FormatAsTime(int32_t InTime, bool UseLeadingZero, bool bForceLeadingZeroHour, bool bShowSeconds);
		void STATIC_ForceScreenColorFade(class UObject* WorldContextObject, const struct FLinearColor& FadeColor, float FullOpacityInterval, float TheFadeOutInterval);
		void STATIC_ForceLevelStreamingToBlock(class UWorld* ForWorld, float ForTime);
		double STATIC_FloatToDouble(float Value);
		struct FVector STATIC_FlattenDirectionVectorInLocalSpace(const struct FVector& Direction, const struct FRotator& Rotation);
		struct FVector STATIC_FlattenDirectionVector(const struct FVector& Direction);
		void STATIC_FinishSpawning(class AActor* Actor);
		bool STATIC_FindWorldActors(class UWorld* fWorld, TArray<class AActor*>* fContainer, class UClass* fType, const class FName& fTag);
		bool STATIC_FindValidLocationNextToTarget(class UObject* WorldContextObject, struct FVector* OutLocation, class APrimalCharacter* SourceCharacter, class APrimalCharacter* TargetCharacter, float DistanceMargin, int32_t MaxTraceCount, class AActor* ActorToIgnore, bool bTraceComplex, bool bDrawDebug, float DebugDrawDuration);
		bool STATIC_FindValidLocationInFrontOfTarget(struct FVector* OutLocation, class APrimalCharacter* SourceCharacter, class APrimalCharacter* TargetCharacter, float DistanceMargin, ECollisionChannel CollisionChannel, bool bFailIfLocationNotOnGround, class AActor* ActorToIgnore, bool bTraceComplex, float DebugDrawDuration);
		class FName STATIC_FindSocketClosestToDirection(class USkeletalMeshComponent* Mesh, const struct FVector& TargetDirection, TArray<class FName> Sockets, TArray<float>* DotProducts, bool bOnlySocketsWithPrefix, const class FString& SocketPrefix);
		TArray<class APrimalCharacter*> STATIC_FindNearbyCharactersOfClass(class UWorld* World, const struct FVector& AtLoc, float Radius, class UClass* CharacterClass, bool bTamedDinosOnly, bool bWildDinosOnly);
		class FString STATIC_FindLocalizedVersionOfFilename(const struct FStringAssetReference& OriginalFile);
		class UPrimalAIState* STATIC_FindActorAIState(class UClass* fStateType, TArray<struct FDinoAttackInfo> fContainerOfStates);
		struct FVector STATIC_EvalProjectileArc(class UObject* WorldContextObject, const struct FProjectileArc& Arc, float Time);
		int32_t STATIC_ECC_TO_BITFIELD_BP(ECollisionChannel ConvertChannel);
		void STATIC_DisableGCM(class AActor* ShooterCharacter);
		void STATIC_DestroyAllCharactersWithinMissionTileVolumes(class UWorld* TheWorld, bool bOnlyCheckForDeadCharacters, const class FName& ForceOnTileStreamVolumeCustomTag);
		class AShooterProjectile* STATIC_DeferredSpawnAndFireProjectile_Start(const struct FVector& Origin, const struct FVector& ShootDir, class UClass* ProjectileClass, class APrimalCharacter* forCharacter, struct FTransform* SpawnTransform, bool bNoCollisionFail);
		void STATIC_DeferredSpawnAndFireProjectile_Finish(class AShooterProjectile* theProjectile, const struct FTransform& SpawnTransform);
		void STATIC_DebugDrawProjectileArc(class UObject* WorldContextObject, const struct FProjectileArc& Arc, float MaxArcTime, float ArcTimeStep, const struct FLinearColor& LineColor, float LineThickness, float DebugDrawDuration);
		void STATIC_DeactivateMissionForPlayerCharacter(class AShooterCharacter* PlayerPawn, bool bOverrideForcePreventLeavingMissions);
		double STATIC_DateTimeToSeconds(const struct FDateTime& DateTimeValue);
		void STATIC_CopyDinoColorSetIndicies(class APrimalDinoCharacter* src, class APrimalDinoCharacter* dest);
		float STATIC_CooldownTimeRemaining(class UObject* WorldContextObject, double CooldownClock, float CooldownDuration);
		struct FRotator STATIC_ConvertRotatorFromWorldToLocal(const struct FRotator& ConvertRot, const struct FRotator& ToParentRotation);
		struct FRotator STATIC_ConvertRotatorFromLocalToWorld(const struct FRotator& ConvertRot, const struct FRotator& FromParentRotation);
		class FString STATIC_ConvertIntToStringWithCommas(int32_t GivenNumber);
		struct FVector_NetQuantizeNormal STATIC_Conv_VectorToVectorNetQuantizeNormal(const struct FVector& InVector);
		struct FVector_NetQuantize STATIC_Conv_VectorToVectorNetQuantize(const struct FVector& InVector);
		class UObject* STATIC_ConstructObjectBP(class UClass* Class, class UObject* Outer, const class FName& Name);
		class UObject* STATIC_ConstructObjectAutoNameBP(class UClass* Class, class UObject* Outer);
		bool STATIC_ComponentBoundsEncompassesPoint(class UPrimitiveComponent* Comp, const struct FVector& Point, float BoundsMultiplier);
		bool STATIC_ClipLineInsideBox(const struct FVector& Origin, const struct FVector& Extent, const struct FVector& LineStart, const struct FVector& LineEnd, struct FVector* OutLineStart, struct FVector* OutLineEnd);
		class FString STATIC_ClassToStringReference(class UClass* ForClass);
		class UObject* STATIC_ClassRefToObjectRef(class UClass* InClass);
		float STATIC_ClampRotAxis(float BaseAxis, float DesiredAxis, float MaxDiff);
		struct FVector STATIC_ClampLocation(const struct FVector& BaseLocation, const struct FVector& DesiredLocation, float MaxDiff, bool bTraceClampLocation, class UWorld* TraceWorld, const struct FVector& TraceFromLocation);
		TArray<class FString> STATIC_ChunkFStringIntoArray(const class FString& InputString, int32_t ChunkSize);
		struct FLinearColor STATIC_ChangeSaturation(const struct FLinearColor& InColor, float NewSaturation);
		bool STATIC_CapsuleSweepProjectileArc(class UObject* WorldContextObject, const struct FProjectileArc& Arc, const struct FRotator& CapsuleRotation, float CapsuleRadius, float CapsuleHalfHeight, bool bRotateCapsuleAlongPath, bool bTraceComplex, struct FHitResult* HitResult, struct FVector* EndLocation, float* EndArcTime, float MaxArcLength, TArray<class AActor*> ActorsToIgnore, bool bIgnoreSelf, float ArcTimeStep, ECollisionChannel CollisionChannel, bool bDrawDebug, float DebugDrawDuration);
		bool STATIC_CapsuleSweepMulti(class UObject* WorldContextObject, TArray<struct FHitResult>* OutHits, const struct FVector& Start, const struct FVector& End, const struct FRotator& CapsuleRot, float Radius, float HalfHeight, TArray<class AActor*> ActorsToIgnore, bool bIgnoreSelf, ECollisionChannel CollisionChannel, bool bTraceComplex, bool bDebugDraw, float DebugDrawDuration, bool bFindInitialOverlaps);
		bool STATIC_CapsuleSweepFast(class UObject* WorldContextObject, struct FHitResult* OutHit, const struct FVector& Start, const struct FVector& End, const struct FRotator& CapsuleRot, float Radius, float HalfHeight, ECollisionChannel CollisionChannel, bool bTraceComplex, bool bIgnoreSelf, class AActor* IgnoreActor, bool bDebugDraw, float DebugDrawDuration);
		bool STATIC_CapsuleOverlapFast(class UObject* WorldContextObject, class AActor** FirstOverlappedActor, const struct FVector& Origin, const struct FRotator& CapsuleRotation, float Radius, float HalfHeight, ECollisionChannel CollisionChannel, bool bTraceComplex, bool bIgnoreSelf, class AActor* IgnoreActor, bool bDebugDraw, float DebugDrawDuration, bool bBlockingOnly);
		bool STATIC_CanTeleport(class APrimalDinoCharacter* Target);
		bool STATIC_CanSpawnCustomDino(class UWorld* World, struct FVector* OutCalculatedSpawnLocation, const struct FVector& PlayerLocation, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, float DebugDrawDuration, bool bDoLosCheck, bool bDoExtraSafetyChecks, class APrimalCharacter* spawningCharacter, bool bDoOverlapCheck);
		void STATIC_CallGlobalLevelEvent(class UWorld* ForWorld, const class FName& EventName);
		struct FIntPoint STATIC_CalculateGPSCoordinates(class UWorld* ForWorld, const struct FVector& WorldPos);
		bool STATIC_BPSweepComponent(class UPrimitiveComponent* Component, struct FHitResult* OutHit, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FVector& Extent, bool bTraceComplex);
		struct FRotator STATIC_BPRTransformInverse(const struct FRotator& R, const struct FRotator& RBasis);
		struct FRotator STATIC_BPRTransform(const struct FRotator& R, const struct FRotator& RBasis);
		struct FRotator STATIC_BPRotatorLerp(const struct FRotator& A, const struct FRotator& B, float Alpha);
		bool STATIC_BPProjectWorldToScreenPositionRaw(class APlayerController* thePC, const struct FVector& WorldLocation, struct FVector2D* Out_ScreenLocation, struct FVector* Out_ViewLocation, bool* Out_bIsScreenLocationInsideViewRect, bool bIgnoreScreenProjectionGlobalTransform);
		struct FVector2D STATIC_BPProjectWorldToScreenPosition(const struct FVector& WorldLocation, class APlayerController* thePC);
		class UObject* STATIC_BPLoadObject(const class FString& PathName);
		class UClass* STATIC_BPLoadClass(const class FString& PathName);
		bool STATIC_BPIsTemplate(class UObject* AnObject);
		bool STATIC_BPIsDinoIDEqual(int32_t FirstDinoID1, int32_t FirstDinoID2, int32_t SecondDinoID1, int32_t SecondDinoID2);
		int32_t STATIC_BPGetWeightedRandomIndex(TArray<float> pArray, float ForceRand);
		class FString STATIC_BPGetPrimaryMapName(class UWorld* WorldContext);
		float STATIC_BPGetBiomeWind(class ABiomeZoneVolume* BiomeZoneVolume, float GlobalWind);
		float STATIC_BPGetBiomeTemperature(class ABiomeZoneVolume* BiomeZoneVolume, float GlobalTemperature);
		class FString STATIC_BPFormatAsTimeLong(int32_t InTime);
		class FString STATIC_BPFormatAsTime(int32_t InTime, bool UseLeadingZero, bool bForceLeadingZeroHour, bool bShowSeconds);
		float STATIC_BPFLerpFastPure(float InMin, float InMax, float InPercent);
		float STATIC_BPFLerpFast(float InMin, float InMax, float InPercent);
		float STATIC_BPFLerp(float InMin, float InMax, float InPercent, bool bClampToMin, bool bClampToMax);
		bool STATIC_BPFastTrace(class UWorld* TheWorld, const struct FVector& TraceEnd, const struct FVector& TraceStart, class AActor* ActorToIgnore, float DebugDrawDuration);
		void STATIC_BoxFromOriginAndExtent(const struct FVector& Origin, const struct FVector& Extent, struct FVector* OutBoxMin, const struct FVector& OutBoxMax);
		bool STATIC_AreVectorsNearlyEqual(const struct FVector& VectorA, const struct FVector& VectorB, float WithinError);
		bool STATIC_AreVector2DsNearlyEqual(const struct FVector2D& VectorA, const struct FVector2D& VectorB, float WithinError);
		bool STATIC_AreVector2DsEqual(const struct FVector2D& VectorA, const struct FVector2D& VectorB);
		bool STATIC_AreTransformsNearlyEqual(const struct FTransform& TransformA, const struct FTransform& TransformB, float WithinError);
		bool STATIC_AreRotatorsNearlyEqual(const struct FRotator& RotatorA, const struct FRotator& RotatorB, float WithinError);
		void STATIC_AdjustScreenPositionWithScreenDPI(class UWorld* TheWorld, struct FVector2D* ScreenPosition);
		void STATIC_AddToEditorMessageLog(class UObject* WorldContextObject, const class FString& Message, EEditorMessageLogLevel LogLevel, bool bServerOnly);
		void STATIC_AddToActorList(class UWorld* ForWorld, int32_t ActorListNum, class AActor* ActorRef);
		void STATIC_AddActorToCustomActorList(class UWorld* ForWorld, const class FName& SearchCustomTag, class AActor* ActorToAdd, bool createListIfMissing);
		bool STATIC_ActorHasLineOfSightToWorldLocation(class AActor* FromActor, const struct FVector& ToLocation, class AActor** OutBlockingActor, ECollisionChannel Channel, float DebugDrawDuration);
		bool STATIC_ActorHasLineOfSight(class AActor* FromActor, class AActor* ToActor, class AActor** OutBlockingActor, const struct FVector& ToActorOffset, ECollisionChannel Channel, float DebugDrawDuration);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalProjectileNetGun
	 * Size -> 0x00F0 (FullSize[0x0780] - InheritedSize[0x0690])
	 */
	class APrimalProjectileNetGun : public APrimalProjectileArrow
	{
	public:
		class USkeletalMeshComponent*                              SkeletalMeshComp;                                        // 0x0690(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UClass*                                              BuffToApplyToLightCharacters;                            // 0x0698(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              BuffToApplyToHeavyCharacters;                            // 0x06A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxDinoMassToInmovilize;                                 // 0x06A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_T4ZM[0x4];                                   // 0x06AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FManagedBoneSetup>                           ManagedBones;                                            // 0x06B0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance
		float                                                      OnInpactMaxTraceDistance;                                // 0x06C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DissolveTime;                                            // 0x06C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4KN9[0xB8];                                  // 0x06C8(0x00B8) MISSED OFFSET (PADDING)

	public:
		struct FRotator GetManagedBoneRotation(const class FName& InBoneName);
		void GetManagedBoneLocationsAndRotations(TArray<struct FVector>* Locations, TArray<struct FRotator>* Rotations);
		struct FVector GetManagedBoneLocation(const class FName& InBoneName);
		void CalculateBonePositions();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalProjectileDilo
	 * Size -> 0x0000 (FullSize[0x0668] - InheritedSize[0x0668])
	 */
	class APrimalProjectileDilo : public AShooterProjectile
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalProjectileFlare
	 * Size -> 0x0028 (FullSize[0x0690] - InheritedSize[0x0668])
	 */
	class APrimalProjectileFlare : public AShooterProjectile
	{
	public:
		class UParticleSystemComponent*                            SecondParticleComp;                                      // 0x0668(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected
		float                                                      TimeToActivateSecondParticleComp;                        // 0x0670(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      RandomFallingMovementInterval;                           // 0x0674(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      RandomFallingMovementStrength;                           // 0x0678(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_WM8O[0x4];                                   // 0x067C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          SecondParticleSound;                                     // 0x0680(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      LightColorIntensity;                                     // 0x0688(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_VR6J[0x4];                                   // 0x068C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalProjectileGrapplingHook
	 * Size -> 0x0040 (FullSize[0x06A8] - InheritedSize[0x0668])
	 */
	class APrimalProjectileGrapplingHook : public AShooterProjectile
	{
	public:
		struct FVector                                             GrapHookEndPointOffset;                                  // 0x0668(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaximumRopeDistance;                                     // 0x0674(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PullingStrength;                                         // 0x0678(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ReleaseRopeSpeed;                                        // 0x067C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxPullMassOverride;                                     // 0x0680(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DetachGrapHookLifespan;                                  // 0x0684(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             GrapHookDefaultOffset;                                   // 0x0688(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_00W8[0x4];                                   // 0x0694(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  GrapHookMaterial;                                        // 0x0698(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GrapHookCableWidthOverride;                              // 0x06A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowPullSleeping;                                      // 0x06A4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAllowPullFleeing;                                       // 0x06A5(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7E7O[0x2];                                   // 0x06A6(0x0002) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalProjectileSpiderAcid
	 * Size -> 0x0000 (FullSize[0x0668] - InheritedSize[0x0668])
	 */
	class APrimalProjectileSpiderAcid : public AShooterProjectile
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterProjectile_Swarm
	 * Size -> 0x01C0 (FullSize[0x0828] - InheritedSize[0x0668])
	 */
	class AShooterProjectile_Swarm : public AShooterProjectile
	{
	public:
		class USceneComponent*                                     SwarmRoot;                                               // 0x0668(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		int32_t                                                    SwarmSize;                                               // 0x0670(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    SwarmLeaderCount;                                        // 0x0674(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BoidCollisionRadius;                                     // 0x0678(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OS5E[0x4];                                   // 0x067C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBoidBehavior                                       SwarmBehavior;                                           // 0x0680(0x0040) Edit, BlueprintVisible
		float                                                      DynamicAvoidanceDuration;                                // 0x06C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_65LN[0x4];                                   // 0x06C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFlockPersistentData                                SwarmPersistentData;                                     // 0x06C8(0x0038) Edit, BlueprintVisible
		class UParticleSystem*                                     SwarmParticleSystem;                                     // 0x0700(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SwarmOpacityParticleParamName;                           // 0x0708(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bFadeOutSwarmOverProjectileLife;                         // 0x0710(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZCB5[0x3];                                   // 0x0711(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SwarmOpacityFadeTimeOnBoidImpact;                        // 0x0714(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LifespanAfterImpact;                                     // 0x0718(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwarmDelayedStartTime;                                   // 0x071C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BoidSpawnInterval;                                       // 0x0720(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BoidInitialFollowProjectileTime;                         // 0x0724(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BoidInitialDisableCollisionTime;                         // 0x0728(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwarmLifetimeAfterPrimaryProjectileDestruction;          // 0x072C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwarmSpawnRadius;                                        // 0x0730(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           SwarmInitialSpeedRange;                                  // 0x0734(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           SwarmMaxSpeedRange;                                      // 0x073C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           SwarmMaxForceRange;                                      // 0x0744(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector2D                                           SwarmTurnRateRange;                                      // 0x074C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwarmTargetRadius;                                       // 0x0754(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwarmTargetHelixSpeed;                                   // 0x0758(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MOMM[0x4];                                   // 0x075C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FBoid>                                       SwarmData;                                               // 0x0760(0x0010) Edit, BlueprintVisible, ZeroConstructor, EditConst
		TArray<class UParticleSystemComponent*>                    SwarmComps;                                              // 0x0770(0x0010) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference
		TArray<double>                                             BoidSpawnTimes;                                          // 0x0780(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst
		TArray<double>                                             BoidExplodeTimes;                                        // 0x0790(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst
		TArray<int32_t>                                            FlockingWhitelist;                                       // 0x07A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst
		bool                                                       bUseCrazinessMultiplier;                                 // 0x07B0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5C66[0x3];                                   // 0x07B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CrazinessMultiplier;                                     // 0x07B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPGetBoidSpawnLocationAndVelocity;                   // 0x07B8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_U6VX[0x3];                                   // 0x07B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FProjectileArc                                      LaunchArc;                                               // 0x07BC(0x0030) BlueprintVisible, BlueprintReadOnly
		unsigned char                                              UnknownData_DM75[0x4];                                   // 0x07EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     ProjectileSpawnTime;                                     // 0x07F0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ProjectilePeakTime;                                      // 0x07F8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ProjectileImpactTime;                                    // 0x07FC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7DWZ[0x28];                                  // 0x0800(0x0028) MISSED OFFSET (PADDING)

	public:
		float TimeSinceProjectileSpawn();
		void SpawnSwarm();
		void MultiSyncSwarm(TArray<struct FBoid> ServerSwarmData);
		void MultiPrimaryProjectileDestroyed(const struct FVector& ImpactLocation, double DestroyNetworkTime);
		int32_t GetNumberOfBoidsInFlight();
		void DoSwarmSync();
		void BPOnBoidExplode(int32_t BoidIndex, class UParticleSystemComponent* BoidParticles, const struct FHitResult& Hit);
		void BPGetBoidSpawnLocationAndVelocity(int32_t BoidIndex, const struct FBoid& BoidData, struct FVector* SpawnLocation, struct FVector* SpawnVelocity);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterSpectatorPawn
	 * Size -> 0x0050 (FullSize[0x0578] - InheritedSize[0x0528])
	 */
	class AShooterSpectatorPawn : public ASpectatorPawn
	{
	public:
		unsigned char                                              UnknownData_GU0S[0x50];                                  // 0x0528(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterWeapon_Melee
	 * Size -> 0x0008 (FullSize[0x0D90] - InheritedSize[0x0D88])
	 */
	class AShooterWeapon_Melee : public AShooterWeapon
	{
	public:
		bool                                                       bUseAltFireOnNormalFire;                                 // 0x0D88(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DBDB[0x7];                                   // 0x0D89(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterWeapon_ChainSaw
	 * Size -> 0x0038 (FullSize[0x0DC0] - InheritedSize[0x0D88])
	 */
	class AShooterWeapon_ChainSaw : public AShooterWeapon
	{
	public:
		TArray<struct FWeaponAnim>                                 ShootAnimList;                                           // 0x0D88(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FWeaponAnim>                                 ShootWithHitAnimList;                                    // 0x0D98(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class USoundCue*                                           IdleSound;                                               // 0x0DA8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAudioComponent*                                     IdleAC;                                                  // 0x0DB0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HRPE[0x8];                                   // 0x0DB8(0x0008) MISSED OFFSET (PADDING)

	public:
		void ServerStopFireAnim();
		void ServerReloadWeapon();
		void ServerHit();
		void ClientSimulateChangeFireAnim();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterWeapon_Instant
	 * Size -> 0x0040 (FullSize[0x0DC8] - InheritedSize[0x0D88])
	 */
	class AShooterWeapon_Instant : public AShooterWeapon
	{
	public:
		class UParticleSystem*                                     TrailFX;                                                 // 0x0D88(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UParticleSystem*                                     TrailFX_Local;                                           // 0x0D90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                TrailTargetParam;                                        // 0x0D98(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      OriginCheckDistance;                                     // 0x0DA0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_9K7C[0x14];                                  // 0x0DA4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NumTracesPerShot;                                        // 0x0DB8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_2E6B[0x4];                                   // 0x0DBC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPlayFireSoundOnInstantHit : 1;                          // 0x0DC0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bExecSpread : 1;                                         // 0x0DC0(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		bool                                                       bFireFromMuzzle : 1;                                     // 0x0DC0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bPreventSimulatingMultipleShots : 1;                     // 0x0DC0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bPerformObstructionCheck : 1;                            // 0x0DC0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bSpawnTrailToHit : 1;                                    // 0x0DC0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bClampTrailToMaxWeaponRange : 1;                         // 0x0DC0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bUseBPSpawnImpactEffects : 1;                            // 0x0DC0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bAllowNativeWithSpawnedImpacts : 1;                      // 0x0DC1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bRotateTrailFXByFireDirection : 1;                       // 0x0DC1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bAttachTrailFXToFirstPersonMuzzle : 1;                   // 0x0DC1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bUseBPGetCurrentSpread : 1;                              // 0x0DC1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bUseBPKillImpactEffects : 1;                             // 0x0DC1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		unsigned char                                              UnknownData_MSR5[0x6];                                   // 0x0DC2(0x0006) MISSED OFFSET (PADDING)

	public:
		void SimulateInstantHit(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, bool bForceOnLocal, int32_t ShotIndex);
		void ServerNotifyShotOrigin(const struct FVector& Origin, TArray<struct FHitResult> Impacts, TArray<struct FVector_NetQuantizeNormal> ShootDirs);
		void ServerNotifyShot(TArray<struct FHitResult> Impacts, TArray<struct FVector_NetQuantizeNormal> ShootDirs);
		void ServerForceShot(const struct FHitResult& Impact, const struct FVector& StartShotLoc, const struct FVector& EndShotLoc);
		void NetSimulateForceShot(const struct FVector& ShotOrigin, const struct FVector& ShootDir);
		void GetFireLocationAndDirection(struct FVector* Location, struct FVector* Direction);
		float GetCurrentSpread();
		void CheckRefireTimer();
		void BPSpawnImpactEffects(const struct FHitResult& Impact, const struct FVector& ShootDir, bool bIsEntryHit, float WeaponMaxRange);
		void BPPostSpawnTrailEffect(class UParticleSystemComponent* TrailPSC, const struct FVector& StartPoint, const struct FVector& EndPoint);
		void BPKillImpactEffects();
		float BPGetCurrentSpread();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterWeapon_FlameThrower
	 * Size -> 0x0098 (FullSize[0x0E20] - InheritedSize[0x0D88])
	 */
	class AShooterWeapon_FlameThrower : public AShooterWeapon
	{
	public:
		int32_t                                                    InstantDamageAmount;                                     // 0x0D88(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DamageTestSphereRadius;                                  // 0x0D8C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DamageTestBoxExtentSide;                                 // 0x0D90(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DamageTestMuzzleOffset;                                  // 0x0D94(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FlameHurtMaxDistance;                                    // 0x0D98(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0WCL[0x4];                                   // 0x0D9C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     DamageImpactPoints;                                      // 0x0DA0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		struct FVector                                             MuzzleDirectionOffset;                                   // 0x0DB0(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		ETickingGroup                                              MuzzlePSCTickGroupOverride;                              // 0x0DBC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_REL6[0x3];                                   // 0x0DBD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseMuzzlePSCTickGroupOverride : 1;                      // 0x0DC0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_A6EB[0x3];                                   // 0x0DC1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FColor                                              FlameThrowerFXDefaultColor;                              // 0x0DC4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              DamageType;                                              // 0x0DC8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     FlameThrowerFX;                                          // 0x0DD0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     FlameThrowerFX_FPV;                                      // 0x0DD8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     OnFireFX;                                                // 0x0DE0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UParticleSystem*                                     HarvestFX;                                               // 0x0DE8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WFLM[0x10];                                  // 0x0DF0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ShotDelay;                                               // 0x0E00(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_SKAB[0x4];                                   // 0x0E04(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FXDelay;                                                 // 0x0E08(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_TS2K[0xC];                                   // 0x0E0C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bMuzzlePSC_IsTPV : 1;                                    // 0x0E18(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		unsigned char                                              UnknownData_J847[0x7];                                   // 0x0E19(0x0007) MISSED OFFSET (PADDING)

	public:
		void TickShootFX();
		void StopShootFX();
		void SpawnImpactEffects();
		void ServerTickShootFX();
		void ServerStopShootFX();
		void ServerBeginShootFX();
		void EndFXDelay();
		void ClientSpawnHarvestFX(TArray<struct FVector> Impacts);
		void BPSpawnHarvestEffects(TArray<struct FVector> Impacts);
		void BeginShootFX();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterWeapon_Activated
	 * Size -> 0x00B8 (FullSize[0x0ED8] - InheritedSize[0x0E20])
	 */
	class AShooterWeapon_Activated : public AShooterWeapon_FlameThrower
	{
	public:
		bool                                                       bIsActivated : 1;                                        // 0x0E20(0x0001) BIT_FIELD BlueprintVisible, Transient, SaveGame, NoDestructor
		unsigned char                                              UnknownData_153B[0xF];                                   // 0x0E21(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FWeaponAnim>                                 ActivateAnim;                                            // 0x0E30(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<struct FWeaponAnim>                                 DeactivateAnim;                                          // 0x0E40(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		struct FWeaponAnim                                         StopFireAnim;                                            // 0x0E50(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         MovementFireAnim;                                        // 0x0E60(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDamagePawns;                                            // 0x0E70(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_A4V6[0x7];                                   // 0x0E71(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ActivateCameraShake;                                     // 0x0E78(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ActivateCameraShakeSpeedScale;                           // 0x0E80(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             FireOrigin;                                              // 0x0E84(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             FireDirection;                                           // 0x0E90(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             TargetLocation;                                          // 0x0E9C(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class FName                                                BeamTargetParameterName;                                 // 0x0EA8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           FireLoopSound;                                           // 0x0EB0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAudioComponent*                                     FireLoopAC;                                              // 0x0EB8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class USoundCue*                                           IdleSound;                                               // 0x0EC0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAudioComponent*                                     IdleAC;                                                  // 0x0EC8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class USoundCue*                                           EmptySound;                                              // 0x0ED0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

	public:
		void ServerPreFire(const struct FVector& Origin, const struct FVector& ShootDir);
		void ServerCancelActivation();
		void ServerActivateWeapon(bool bActivate, int32_t nAnimIndex);
		bool IsActivationAnimPlaying();
		void HandleActivation(bool bActive);
		struct FVector GetBeamTarget();
		void EndActivationAnim();
		void ClientHandleActivation(bool bActivate);
		void ClientActivateWeapon(bool bActivate);
		void BPPreFireEvent(const struct FVector& Origin, const struct FVector& ShootDir);
		void ActivateWeapon(bool bActivate, int32_t nAnimIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterWeapon_InstantCharging
	 * Size -> 0x0010 (FullSize[0x0DD8] - InheritedSize[0x0DC8])
	 */
	class AShooterWeapon_InstantCharging : public AShooterWeapon_Instant
	{
	public:
		bool                                                       bDidFireWeapon : 1;                                      // 0x0DC8(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor
		unsigned char                                              UnknownData_JXU3[0x7];                                   // 0x0DC9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     ChargeStartTime;                                         // 0x0DD0(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor

	public:
		void ServerSetCharging(double StartTime);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterWeapon_InstantPenetrating
	 * Size -> 0x0068 (FullSize[0x0E30] - InheritedSize[0x0DC8])
	 */
	class AShooterWeapon_InstantPenetrating : public AShooterWeapon_Instant
	{
	public:
		float                                                      MaxPenetrationTraceDistance;                             // 0x0DC8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PenaltyPerPenetration;                                   // 0x0DCC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PenaltyPerUnrealUnit;                                    // 0x0DD0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseBPStopPenetratingAtHit;                              // 0x0DD4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_D5RR[0x3];                                   // 0x0DD5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDebugPenetration : 1;                                   // 0x0DD8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_MRCZ[0x57];                                  // 0x0DD9(0x0057) MISSED OFFSET (PADDING)

	public:
		void WeaponPenetrationTrace(const struct FVector& Start, const struct FVector& End, bool FilterVisuals, bool bDebugDraw, float DebugDrawDuration, TArray<struct FHitResult>* HitResults, TArray<bool>* IsEntryHit, float* MaxDistance);
		int32_t PassiveUseAmmo(int32_t amount);
		bool BPStopPenetratingAtHit(const struct FHitResult& CurrentHit, bool bIsEntryHit, float CurrentDistance, float CurrentMaxDistance);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalWeaponElectronicBinoculars
	 * Size -> 0x00B0 (FullSize[0x0E40] - InheritedSize[0x0D90])
	 */
	class APrimalWeaponElectronicBinoculars : public AShooterWeapon_Melee
	{
	public:
		float                                                      YPosDistance;                                            // 0x0D90(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      XPosDistance;                                            // 0x0D94(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CompSize;                                                // 0x0D98(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DistanceX;                                               // 0x0D9C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DistanceY;                                               // 0x0DA0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DistanceSize;                                            // 0x0DA4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              NightVisionBuff;                                         // 0x0DA8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USceneComponent*                                     AudioListener;                                           // 0x0DB0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  ScopeCompassMI;                                          // 0x0DB8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInstanceDynamic*                            ScopeCompassMID;                                         // 0x0DC0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  LatitudeMI;                                              // 0x0DC8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInstanceDynamic*                            LatitudeMID;                                             // 0x0DD0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  LongitudeMI;                                             // 0x0DD8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInstanceDynamic*                            LongitudeMID;                                            // 0x0DE0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      LatLongInterpSpeed;                                      // 0x0DE8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OEWD[0x8];                                   // 0x0DEC(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            CurrentCompassAngle;                                     // 0x0DF4(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      CompassNorthAngle;                                       // 0x0E00(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CompassInterpSpeed;                                      // 0x0E04(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LatitudeOrigin;                                          // 0x0E08(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LatitudeScale;                                           // 0x0E0C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LongitudeOrigin;                                         // 0x0E10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LongitudeScale;                                          // 0x0E14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SoundFadeInSpeed;                                        // 0x0E18(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinTargetingFOV;                                         // 0x0E1C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxTargetingFOV;                                         // 0x0E20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KTXO[0x1C];                                  // 0x0E24(0x001C) MISSED OFFSET (PADDING)

	public:
		void ServerSetActivateNightVision(int8_t bActive);
		void ClientSetActivateNightVision(int8_t bActive);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalWeaponGPS
	 * Size -> 0x02A8 (FullSize[0x1038] - InheritedSize[0x0D90])
	 */
	class APrimalWeaponGPS : public AShooterWeapon_Melee
	{
	public:
		class USkeletalMeshComponent*                              CompassMesh1P;                                           // 0x0D90(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class USkeletalMeshComponent*                              CompassMesh3P;                                           // 0x0D98(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class USkeletalMeshComponent*                              MapMesh3P;                                               // 0x0DA0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UStaticMesh*                                         AssetSM_MarkerMesh;                                      // 0x0DA8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UStaticMesh*                                         AssetSM_PlayerMarkerMesh;                                // 0x0DB0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UStaticMesh*                                         AssetSM_BalloonMarkerMesh;                               // 0x0DB8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MarkerMapScaleX;                                         // 0x0DC0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MarkerMapScaleY;                                         // 0x0DC4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MarkerOffsetZ;                                           // 0x0DC8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FRotator                                            MarkerRotationMin;                                       // 0x0DCC(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FRotator                                            MarkerRotationMax;                                       // 0x0DD8(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxMapMarkers;                                           // 0x0DE4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              MarkerTextColor;                                         // 0x0DE8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FColor                                              PlayerMarkerTextColor;                                   // 0x0DEC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class UStaticMeshComponent*>                        MarkerComponents;                                        // 0x0DF0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference
		unsigned char                                              UnknownData_31ZX[0x10];                                  // 0x0E00(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                PlayerLocationMArkerComponent;                           // 0x0E10(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class UStaticMeshComponent*                                ItemBalloonMarkerComponent;                              // 0x0E18(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class FName                                                MapAttachPoint3P;                                        // 0x0E20(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CompassAttachPoint1P;                                    // 0x0E28(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                GPSBoneName1P;                                           // 0x0E30(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         ZoomInMapAnim;                                           // 0x0E38(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         ZoomInGPSAnim;                                           // 0x0E48(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         ZoomInCompassAnim;                                       // 0x0E58(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         ZoomOutMapAnim;                                          // 0x0E68(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         ZoomOutGPSAnim;                                          // 0x0E78(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         ZoomOutCompassAnim;                                      // 0x0E88(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         DisplayMapAnim;                                          // 0x0E98(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         DisplayGPSAnim;                                          // 0x0EA8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         DisplayCompassAnim;                                      // 0x0EB8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         UnequipMapAnim;                                          // 0x0EC8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         UnequipGPSAnim;                                          // 0x0ED8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         UnequipCompassAnim;                                      // 0x0EE8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         UnequipCompassAndMapAnim;                                // 0x0EF8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         MeleeMapAnim;                                            // 0x0F08(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         MeleeGPSAnim;                                            // 0x0F18(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         MeleeCompassAnim;                                        // 0x0F28(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         MeleeCompassMapAnim;                                     // 0x0F38(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        TPV_MapOnlyIdle;                                         // 0x0F48(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        TPV_GPSOnlyIdle;                                         // 0x0F50(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimMontage*                                        TPV_MapAndGPSIdle;                                       // 0x0F58(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DigitParameterName;                                      // 0x0F60(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    LatitudeMaterialIndex1;                                  // 0x0F68(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    LatitudeMaterialIndex2;                                  // 0x0F6C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    LatitudeMaterialIndex3;                                  // 0x0F70(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    LongitudeMaterialIndex1;                                 // 0x0F74(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    LongitudeMaterialIndex2;                                 // 0x0F78(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    LongitudeMaterialIndex3;                                 // 0x0F7C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MapMaterialIndex;                                        // 0x0F80(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LatitudeOrigin;                                          // 0x0F84(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LatitudeScale;                                           // 0x0F88(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LongitudeOrigin;                                         // 0x0F8C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LongitudeScale;                                          // 0x0F90(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    GPSCompassMaterialIndex;                                 // 0x0F94(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CompassCenterParameterName;                              // 0x0F98(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                FogOfWarTextureParameterName;                            // 0x0FA0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CompassNorthAngle;                                       // 0x0FA8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CompassInterpSpeed;                                      // 0x0FAC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwingSpeed;                                              // 0x0FB0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxSwingAngle;                                           // 0x0FB4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             ItemBalloonLocation;                                     // 0x0FB8(0x000C) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bShowMap : 1;                                            // 0x0FC4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor
		bool                                                       bShowGPS : 1;                                            // 0x0FC4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor
		bool                                                       bUseCompassInsteadOfGPS : 1;                             // 0x0FC4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, RepNotify, NoDestructor
		bool                                                       bZoomInMap : 1;                                          // 0x0FC4(0x0001) BIT_FIELD Transient, NoDestructor, Protected
		bool                                                       bZoomInGPS : 1;                                          // 0x0FC4(0x0001) BIT_FIELD Transient, NoDestructor, Protected
		bool                                                       bWasFirstPerson : 1;                                     // 0x0FC4(0x0001) BIT_FIELD Transient, NoDestructor, Protected
		unsigned char                                              UnknownData_JH6F[0x3];                                   // 0x0FC5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            CurrentCompassAngle;                                     // 0x0FC8(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		float                                                      CurrentSwingAngle;                                       // 0x0FD4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		float                                                      CurrentSwingFactor;                                      // 0x0FD8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		float                                                      CurrentSwingTime;                                        // 0x0FDC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		float                                                      PreviousPawnYaw;                                         // 0x0FE0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_KB8J[0x4];                                   // 0x0FE4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic*                            GPSCompassMaterialInstance;                              // 0x0FE8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    PreviousLatitudeNumber;                                  // 0x0FF0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    PreviousLongitudeNumber;                                 // 0x0FF4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    PreviousBalloonLatitudeNumber;                           // 0x0FF8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    PreviousBalloonLongitudeNumber;                          // 0x0FFC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UMaterialInstanceDynamic*                            LatitudeDigit1_MI;                                       // 0x1000(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UMaterialInstanceDynamic*                            LatitudeDigit2_MI;                                       // 0x1008(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UMaterialInstanceDynamic*                            LatitudeDigit3_MI;                                       // 0x1010(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UMaterialInstanceDynamic*                            LongitudeDigit1_MI;                                      // 0x1018(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UMaterialInstanceDynamic*                            LongitudeDigit2_MI;                                      // 0x1020(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UMaterialInstanceDynamic*                            LongitudeDigit3_MI;                                      // 0x1028(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class UMaterialInstanceDynamic*                            Map_MI;                                                  // 0x1030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected

	public:
		void ServerShowNone();
		void ServerShowMapOnly();
		void ServerShowGPSOnly();
		void ServerShowBoth();
		void ServerSetUseCompassInsteadOfGPS(bool bUseCompass);
		void RefreshUseCompass();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterWeapon_Climb
	 * Size -> 0x06D8 (FullSize[0x1468] - InheritedSize[0x0D90])
	 */
	class AShooterWeapon_Climb : public AShooterWeapon_Melee
	{
	public:
		float                                                      MinStaminaToClimb;                                       // 0x0D90(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              ClimbingMode;                                            // 0x0D94(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              PreviousClimbingMode;                                    // 0x0D95(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              ClimbingType;                                            // 0x0D96(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              CurrentClimbingMovementType;                             // 0x0D97(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bClimbingLeftArm : 1;                                    // 0x0D98(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bInitialAttach : 1;                                      // 0x0D98(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		bool                                                       bEarthquakeLocked : 1;                                   // 0x0D98(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
		unsigned char                                              UnknownData_A1BA[0x3];                                   // 0x0D99(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector_NetQuantize100                              ClimbingAnchorPosition;                                  // 0x0D9C(0x000C) BlueprintVisible, BlueprintReadOnly, Net
		struct FVector_NetQuantizeNormal                           ClimbingAnchorNormal;                                    // 0x0DA8(0x000C) BlueprintVisible, BlueprintReadOnly, Net
		unsigned char                                              UnknownData_94SV[0x8];                                   // 0x0DB4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             PreviousClimbingAnchorPosition;                          // 0x0DBC(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             PreviousClimbingAnchorNormal;                            // 0x0DC8(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             ClimbingDirection;                                       // 0x0DD4(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             ClimbingAnchorDirection;                                 // 0x0DE0(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ClimbingOvershootTime;                                   // 0x0DEC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ClimbingLookingToSide;                                   // 0x0DF0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ID8E[0x4];                                   // 0x0DF4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundCue*                                           ClimbLowStaminaLoopSC;                                   // 0x0DF8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAudioComponent*                                     ClimbLowStaminaLoopAC;                                   // 0x0E00(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		float                                                      ClimbLowStaminaPercentagePlaySound;                      // 0x0E08(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4ACI[0x4];                                   // 0x0E0C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FClimbingAnims                                      ClimbAnims;                                              // 0x0E10(0x0400) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         TurnLeftAnim;                                            // 0x1210(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         TurnRightAnim;                                           // 0x1220(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         TurnLeftAnimHanging;                                     // 0x1230(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         TurnRightAnimHanging;                                    // 0x1240(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       RightClimbingAnimation;                                  // 0x1250(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       LeftClimbingAnimation;                                   // 0x1258(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       RightClimbingHangAnimation;                              // 0x1260(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       LeftClimbingHangAnimation;                               // 0x1268(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       InventoryRightClimbAnimation;                            // 0x1270(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       InventoryLeftClimbAnimation;                             // 0x1278(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       InventoryRightClimbHangAnimation;                        // 0x1280(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UAnimSequence*                                       InventoryLeftClimbHangAnimation;                         // 0x1288(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         SlideDownLeftAnim;                                       // 0x1290(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         SlideDownRightAnim;                                      // 0x12A0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LeftMesh1PComponentName;                                 // 0x12B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RightMesh1PComponentName;                                // 0x12B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LeftMesh3PComponentName;                                 // 0x12C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                RightMesh3PComponentName;                                // 0x12C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                LeftPickAttachPoint3P;                                   // 0x12D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UStaticMeshComponent*                                LeftMesh1P;                                              // 0x12D8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class UStaticMeshComponent*                                RightMesh1P;                                             // 0x12E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class UStaticMeshComponent*                                LeftMesh3P;                                              // 0x12E8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class UStaticMeshComponent*                                RightMesh3P;                                             // 0x12F0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class UClass*                                              ClimbPickHitCameraShake;                                 // 0x12F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FBiomeZoneImpactEffect                              LeftClimbImpactEffects;                                  // 0x1300(0x0080) Edit, DisableEditOnInstance
		struct FBiomeZoneImpactEffect                              RightClimbImpactEffects;                                 // 0x1380(0x0080) Edit, DisableEditOnInstance
		class FName                                                ImpactSocketName;                                        // 0x1400(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    MaxSpawnedImpactEffects;                                 // 0x1408(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              ServerCurrentClimbingType;                               // 0x140C(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7MFC[0x3];                                   // 0x140D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ServerCurrentClimbingDirection;                          // 0x1410(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      UpdatingDirectionTime;                                   // 0x141C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<class AActor*>                                      ActiveImpactEffects;                                     // 0x1420(0x0010) ZeroConstructor, Transient
		class UClass*                                              ClimbingSettingsClass;                                   // 0x1430(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UCameraModifier*                                     ActiveCameraModifer;                                     // 0x1438(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ClimbingMinAttachedDurationBeforeAllowingDetach;         // 0x1440(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_STCL[0x4];                                   // 0x1444(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     ClimbingLastAttachedStartedTime;                         // 0x1448(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TPWQ[0x4];                                   // 0x1450(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHasAValidClimbingTarget;                                // 0x1454(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OINF[0x13];                                  // 0x1455(0x0013) MISSED OFFSET (PADDING)

	public:
		bool ShouldShowTargetingArray();
		void SetClimbingAnchorPoint(unsigned char Type, unsigned char Mode, const struct FVector_NetQuantize100& Direction, const struct FVector_NetQuantize100& Position, const struct FVector_NetQuantizeNormal& Normal);
		void ServerSetClimbingLeftArm(bool ClimbingLeftArm);
		void ServerRequestClimbMove(unsigned char Type, const struct FVector& Direction, bool ClimbingLeftArm);
		void ServerReleaseClimbingAnchor(bool bWithJump, const struct FVector_NetQuantizeNormal& InputDir, bool bForceMinTimeCheckBeforeReleasing);
		void ServerPerformTurn(bool ClimbingLeftArm);
		void ReleaseClimbingAnchor(bool bWithJump, const struct FVector& InputDir, bool bForceMinTimeCheckBeforeReleasing);
		bool IsClimbingUp();
		bool IsClimbingHanging();
		struct FVector GetViewLocation();
		struct FVector GetViewDirection();
		bool ClimbTrace(struct FHitResult* HitResult, unsigned char Type, const struct FVector& Direction, ECollisionChannel Channel);
		void ClientNotifyNoClimbSurface();
		bool CanLandOnSurface(const struct FHitResult& HitResult);
		bool CanClimbOnSurface(const struct FHitResult& HitResult);
		void BPUpdateClimbTarget(float DeltaSeconds, bool bClimbing, const struct FVector& AnchorPosition, const struct FVector& AnchorNormal, bool bCanClimb, bool bCanLand, const struct FVector& ClimbLocation, const struct FVector& ClimbNormal, bool bHudVisible);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterWeapon_MeleeLock
	 * Size -> 0x0090 (FullSize[0x0E20] - InheritedSize[0x0D90])
	 */
	class AShooterWeapon_MeleeLock : public AShooterWeapon_Melee
	{
	public:
		float                                                      LockValue;                                               // 0x0D90(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		float                                                      LockVFXValue;                                            // 0x0D94(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     LastAttackTime;                                          // 0x0D98(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     LastHitTime;                                             // 0x0DA0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       HitThisAttack;                                           // 0x0DA8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_31LV[0x3];                                   // 0x0DA9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LockDecayValue;                                          // 0x0DAC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LockHitIncrement;                                        // 0x0DB0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LockMissDecrement;                                       // 0x0DB4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		ESimpleCurve                                               AnimationRateCurve;                                      // 0x0DB8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KJ46[0x3];                                   // 0x0DB9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinAnimationRate;                                        // 0x0DBC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxAnimationRate;                                        // 0x0DC0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		ESimpleCurve                                               DamageCurve;                                             // 0x0DC4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VPRD[0x3];                                   // 0x0DC5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinDamageMultiplier;                                     // 0x0DC8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxDamageMultiplier;                                     // 0x0DCC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              TargetBuff_MaxDamage;                                    // 0x0DD0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              OwnerBuff_MaxDamage;                                     // 0x0DD8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LockTurnRate;                                            // 0x0DE0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinPullDistance;                                         // 0x0DE4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxPullDistance;                                         // 0x0DE8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxTargetDistance;                                       // 0x0DEC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TargetAngle;                                             // 0x0DF0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxLockTime;                                             // 0x0DF4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AttackMoveSpeed;                                         // 0x0DF8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AttackAirImpulse;                                        // 0x0DFC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AttackMoveDuration;                                      // 0x0E00(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxPowerThreshold;                                       // 0x0E04(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_N0WC[0x14];                                  // 0x0E08(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bSteppingEnabled;                                        // 0x0E1C(0x0001) Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NRH3[0x3];                                   // 0x0E1D(0x0003) MISSED OFFSET (PADDING)

	public:
		void OnRep_LockValue();
		void EndMeleeAttack();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterWeapon_Whip
	 * Size -> 0x0048 (FullSize[0x0DD8] - InheritedSize[0x0D90])
	 */
	class AShooterWeapon_Whip : public AShooterWeapon_Melee
	{
	public:
		class UClass*                                              StunBuff;                                                // 0x0D90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              BlockedByShieldBuff;                                     // 0x0D98(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              HerdDinoBuff;                                            // 0x0DA0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             HarvestingBoxExtent;                                     // 0x0DA8(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             HarvestingWhipTipOffset;                                 // 0x0DB4(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxDinoDragWeightToApplyBuff;                            // 0x0DC0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxFlyerDinoDragWeightToApplyBuff;                       // 0x0DC4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DurabilityMultiplierForFriendDinos;                      // 0x0DC8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DurabilityMultiplierForHarvesting;                       // 0x0DCC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6A2R[0x8];                                   // 0x0DD0(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterWeapon_Placer
	 * Size -> 0x0078 (FullSize[0x0E00] - InheritedSize[0x0D88])
	 */
	class AShooterWeapon_Placer : public AShooterWeapon
	{
	public:
		class UClass*                                              StructureToPlace;                                        // 0x0D88(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		struct FWeaponAnim                                         SecondaryActionAnim;                                     // 0x0D90(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		struct FWeaponAnim                                         UnableToPlaceAnim;                                       // 0x0DA0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		struct FWeaponAnim                                         PlaceOnSelfAnim;                                         // 0x0DB0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		struct FWeaponAnim                                         EquipItemAnim;                                           // 0x0DC0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		bool                                                       bCanDetonateExplosives : 1;                              // 0x0DD0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bHideLeftArmFPVWhenNoAmmo : 1;                           // 0x0DD0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bPlaySecondaryActionAnim : 1;                            // 0x0DD0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bUseAnimNotifyToPlaceStructure : 1;                      // 0x0DD0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bModifyDetonatorMaterial : 1;                            // 0x0DD0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bPlacingStructureConsumeItemAmmo : 1;                    // 0x0DD0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bDontPlaceStructureOnFire : 1;                           // 0x0DD0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bUseBPSecondaryAction : 1;                               // 0x0DD0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		bool                                                       bUseBPPreFireAction : 1;                                 // 0x0DD1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected
		unsigned char                                              UnknownData_GYMY[0x2];                                   // 0x0DD2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeToHideLeftArmFPV;                                    // 0x0DD4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                ExplosiveBoneName;                                       // 0x0DD8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class USkeletalMeshComponent*                              ItemToPlace3P;                                           // 0x0DE0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected
		class FName                                                ItemAttachPoint3P;                                       // 0x0DE8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      DetonateExplosivesMaxRadius;                             // 0x0DF0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		bool                                                       ChangeMaterialDiffrentBehaviour;                         // 0x0DF4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		bool                                                       bHiddenExplosive;                                        // 0x0DF5(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		bool                                                       bWaitingForPlacement;                                    // 0x0DF6(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_3HN3[0x1];                                   // 0x0DF7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PlacementWaitTimeFromEquip;                              // 0x0DF8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      MinimumTimeBetweenPlacements;                            // 0x0DFC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected

	public:
		void ServerDetonateExplosives();
		void PlaceStructureWithSecondaryAction();
		void GetPlacementOrigin(struct FVector* OriginLocation, struct FRotator* OriginRotation);
		bool BPSecondaryAction();
		void BPPrefireAction();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ShooterWeapon_PlacerTransGPS
	 * Size -> 0x0040 (FullSize[0x0E40] - InheritedSize[0x0E00])
	 */
	class AShooterWeapon_PlacerTransGPS : public AShooterWeapon_Placer
	{
	public:
		class USkeletalMeshComponent*                              DeviceMesh1P;                                            // 0x0E00(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class FName                                                DeviceAttachPoint1P;                                     // 0x0E08(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DetonateTransponderMaxRadius;                            // 0x0E10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ShowTranspondersCoolDown;                                // 0x0E14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                FPVBoneNameToHide;                                       // 0x0E18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RTHG[0x20];                                  // 0x0E20(0x0020) MISSED OFFSET (PADDING)

	public:
		void ServerSetFrequency(float Freq);
		void ServerAttachToSelf();
		void ClientShowTransponders(bool bValue);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalWeaponBow
	 * Size -> 0x0080 (FullSize[0x0EB8] - InheritedSize[0x0E38])
	 */
	class APrimalWeaponBow : public AShooterWeapon_Projectile
	{
	public:
		float                                                      MinimumInitialSpeed;                                     // 0x0E38(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaximumInitialSpeed;                                     // 0x0E3C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PullingTimeForMaximumSpeed;                              // 0x0E40(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DamageFactorForSlowArrows;                               // 0x0E44(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DamageFactorForFastArrows;                               // 0x0E48(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinimumPullingTimeToFire;                                // 0x0E4C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDisablePullingOnCrouch : 1;                             // 0x0E50(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bDisablePullingOnProne : 1;                              // 0x0E50(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_L757[0x7];                                   // 0x0E51(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              MaxPullCameraShake;                                      // 0x0E58(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ArrowBoneName;                                           // 0x0E60(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         PullStringAnim;                                          // 0x0E68(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bHideWeaponOnLaunch : 1;                                 // 0x0E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bUseArrowMesh1P : 1;                                     // 0x0E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bHideOriginalArrowBone1P : 1;                            // 0x0E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bAttachArrowToWeaponMesh3P : 1;                          // 0x0E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bReloadOnEmptyClip : 1;                                  // 0x0E78(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_SVCR[0x3];                                   // 0x0E79(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ArrowOnWeaponAttachPoint3P;                              // 0x0E7C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H01C[0x4];                                   // 0x0E84(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                ArrowMesh3P;                                             // 0x0E88(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class FName                                                ArrowAttachPoint3P;                                      // 0x0E90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UStaticMeshComponent*                                ArrowMesh1P;                                             // 0x0E98(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class FName                                                ArrowAttachPoint1P;                                      // 0x0EA0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bPendingPullString : 1;                                  // 0x0EA8(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, Protected
		bool                                                       bNewPullStringEvent : 1;                                 // 0x0EA8(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected
		bool                                                       bIsPullingString : 1;                                    // 0x0EA8(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnTemplate, Transient, EditConst, RepNotify, NoDestructor, Protected
		bool                                                       bIsPlayingPullStringAnim : 1;                            // 0x0EA8(0x0001) BIT_FIELD Transient, NoDestructor, Protected
		bool                                                       bDidFireWeapon : 1;                                      // 0x0EA8(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected
		bool                                                       bIsLastArrow : 1;                                        // 0x0EA8(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected
		bool                                                       bDontRequireIdleForReload : 1;                           // 0x0EA8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, Protected
		bool                                                       bUseBPCanStartFire : 1;                                  // 0x0EA8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, Protected
		bool                                                       bForceServerCheckPullingTime : 1;                        // 0x0EA9(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, Protected
		unsigned char                                              UnknownData_VD1E[0x2];                                   // 0x0EAA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PullingTime;                                             // 0x0EAC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected
		float                                                      ProjectileSpeed;                                         // 0x0EB0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_D2UU[0x4];                                   // 0x0EB4(0x0004) MISSED OFFSET (PADDING)

	public:
		void UpdateTPVBowAnimation();
		void UnHideArrow();
		void ServerSetPullString(bool bIsPulling);
		void HideArrow();
		void BPSimulatedResetSetPullingTime();
		bool BPCanStartFire();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalWeaponBoomerang
	 * Size -> 0x0008 (FullSize[0x0EC0] - InheritedSize[0x0EB8])
	 */
	class APrimalWeaponBoomerang : public APrimalWeaponBow
	{
	public:
		float                                                      chanceToBreak;                                           // 0x0EB8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bClientHideBoomerang : 1;                                // 0x0EBC(0x0001) BIT_FIELD Net, Transient, RepNotify, NoDestructor
		unsigned char                                              UnknownData_6J2Y[0x3];                                   // 0x0EBD(0x0003) MISSED OFFSET (PADDING)

	public:
		void OnRep_ClientHideBoomerang();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalWeaponGrapplingHook
	 * Size -> 0x0030 (FullSize[0x0E68] - InheritedSize[0x0E38])
	 */
	class APrimalWeaponGrapplingHook : public AShooterWeapon_Projectile
	{
	public:
		bool                                                       bDetachGrapHookOnUnequip;                                // 0x0E38(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		bool                                                       bPreventReeling;                                         // 0x0E39(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		bool                                                       bPullingRope;                                            // 0x0E3A(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_T04T[0x5];                                   // 0x0E3B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastTimeWithGrapHook;                                    // 0x0E40(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class USceneComponent*                                     CableAttach1P;                                           // 0x0E48(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected
		class USceneComponent*                                     CableAttach3P;                                           // 0x0E50(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected
		class USoundCue*                                           ReelInSoundCue;                                          // 0x0E58(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class USoundCue*                                           ReelOutSoundCue;                                         // 0x0E60(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalWeaponGrenade
	 * Size -> 0x0070 (FullSize[0x0EA8] - InheritedSize[0x0E38])
	 */
	class APrimalWeaponGrenade : public AShooterWeapon_Projectile
	{
	public:
		struct FWeaponAnim                                         PrepareThrowAnim;                                        // 0x0E38(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         QuickThrowAnim;                                          // 0x0E48(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FWeaponAnim                                         OvercookHurtAnim;                                        // 0x0E58(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                GrenadeBoneName;                                         // 0x0E68(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                GrenadePinBoneName;                                      // 0x0E70(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxGrenadeLife;                                          // 0x0E78(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDontCookGrenade : 1;                                    // 0x0E7C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bHideGrenadeOnFireProjectile : 1;                        // 0x0E7C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bEnablePrepareThrowAnim : 1;                             // 0x0E7C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bIsThrowingGrenade;                                      // 0x0E7D(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsCookingGrenade;                                       // 0x0E7E(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		bool                                                       bUseBlueprintSpeed;                                      // 0x0E7F(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		bool                                                       bHideSkeletalMesh;                                       // 0x0E80(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_AHYH[0x3];                                   // 0x0E81(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CookingTime;                                             // 0x0E84(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		struct FVector                                             ProjectileOrigin;                                        // 0x0E88(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		struct FVector                                             ProjectileShootDir;                                      // 0x0E94(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_GYZZ[0x8];                                   // 0x0EA0(0x0008) MISSED OFFSET (PADDING)

	public:
		void UnHidePin();
		void UnHideGrenade();
		void HidePin();
		void HideGrenade();
		float BPGetProjectileSpeed();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.SilentDamageType
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USilentDamageType : public UDamageType
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.SkyBoxLoader
	 * Size -> 0x0078 (FullSize[0x04E8] - InheritedSize[0x0470])
	 */
	class ASkyBoxLoader : public AActor
	{
	public:
		TArray<struct FStringAssetReference>                       SkyBoxStringReferences;                                  // 0x0470(0x0010) Edit, ZeroConstructor
		TArray<struct FStringAssetReference>                       FogScatterStringReferences;                              // 0x0480(0x0010) Edit, ZeroConstructor
		TArray<struct FStringAssetReference>                       FogLossStringReferences;                                 // 0x0490(0x0010) Edit, ZeroConstructor
		TArray<struct FSkyBoxLoadedStatus>                         LoadedStatus;                                            // 0x04A0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient
		TArray<class UTexture2D*>                                  LoadedSkyTextures;                                       // 0x04B0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient
		TArray<class UTexture2D*>                                  LoadedFogScatterTextures;                                // 0x04C0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient
		TArray<class UTexture2D*>                                  LoadedFogLossTextures;                                   // 0x04D0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient
		unsigned char                                              UnknownData_17EN[0x8];                                   // 0x04E0(0x0008) MISSED OFFSET (PADDING)

	public:
		bool SetSkyTextureIndices(int32_t Texture0, int32_t Texture1);
		bool LoadSkyTextureIndexArray(TArray<int32_t> TextureInices);
		bool LoadSkyTextureIndex(int32_t TextureIdx);
		void K2_OnTextureIndicesLoaded(TArray<int32_t> TextureIndices);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.SOTFNotification
	 * Size -> 0x0248 (FullSize[0x06B8] - InheritedSize[0x0470])
	 */
	class ASOTFNotification : public AActor
	{
	public:
		float                                                      NightBloomMultiplier;                                    // 0x0470(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      EffectScale;                                             // 0x0474(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             BackgroundOffset;                                        // 0x0478(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NG0L[0x4];                                   // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         BackgroundMesh;                                          // 0x0488(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            BackgroundRotation;                                      // 0x0490(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BackgroundMeshScale;                                     // 0x049C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BackgroundMeshDoubleScale;                               // 0x04A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PreviewImageBloom;                                       // 0x04A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FadeOutInterval;                                         // 0x04A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FadeInInterval;                                          // 0x04AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bAnimateScaling : 1;                                     // 0x04B0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_0BLL[0x3];                                   // 0x04B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LightBrightness;                                         // 0x04B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            LightRotation;                                           // 0x04B8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GapBetweenPlayerImages;                                  // 0x04C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              BannerEliminationTextColor;                              // 0x04C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              BannerVictoryTextColor;                                  // 0x04CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BannerTextBloom;                                         // 0x04D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BannerTextFontScale;                                     // 0x04D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             BannerTextOffset;                                        // 0x04D8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_608L[0x4];                                   // 0x04E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              EliminationText;                                         // 0x04E8(0x0010) Edit, ZeroConstructor
		class FString                                              VictoryText;                                             // 0x04F8(0x0010) Edit, ZeroConstructor
		float                                                      ScrollingTextFadePower;                                  // 0x0508(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ScrollingTextSpeed;                                      // 0x050C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ScrollingTextBloom;                                      // 0x0510(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ScrollingTextInterval;                                   // 0x0514(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             ScrollingTextOffset;                                     // 0x0518(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ScrollingTextLifeTime;                                   // 0x0524(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ScrollingTextDoubleMultiplier;                           // 0x0528(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ScrollingTextScale;                                      // 0x052C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ScrollingTextCount;                                      // 0x0530(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              ScrollingTextColor;                                      // 0x0534(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             PreviewCameraLocation;                                   // 0x0538(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            PreviewCameraRotation;                                   // 0x0544(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PreviewCameraFOV;                                        // 0x0550(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            PreviewMeshRotation;                                     // 0x0554(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		ESkyLightSourceType                                        AmbientSourceType;                                       // 0x0560(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1M15[0x7];                                   // 0x0561(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextureCube*                                        AmbientCubemap;                                          // 0x0568(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              AmbientLightColor;                                       // 0x0570(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AmbientBrightness;                                       // 0x0574(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UFont*                                               TextFont;                                                // 0x0578(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UMaterial*                                           TextMaterial;                                            // 0x0580(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            TextRotation;                                            // 0x0588(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PlayerNameFontSize;                                      // 0x0594(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             PlayerNameOffset;                                        // 0x0598(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PlayerNameTextBloom;                                     // 0x05A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             DeathReasonOffset;                                       // 0x05A8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DeathReasonFontSize;                                     // 0x05B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              DeathReasonTextColor;                                    // 0x05B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DeathReasonTextBloom;                                    // 0x05BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              PlayerNameTextColor;                                     // 0x05C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VME2[0x4];                                   // 0x05C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         PlayerImageMesh;                                         // 0x05C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           DeathSound;                                              // 0x05D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundCue*                                           TribeEliminatedSound;                                    // 0x05D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          PlayerDeathMusic1;                                       // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          PlayerDeathMusic2;                                       // 0x05E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          TribeEliminationMusic;                                   // 0x05F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class USoundBase*                                          VictoryMusic;                                            // 0x05F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DefaultNotificationInterval;                             // 0x0600(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Z2UO[0x4];                                   // 0x0604(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSOTFNotificationInfo>                       NotificationsQueue;                                      // 0x0608(0x0010) ZeroConstructor, Transient
		struct FSOTFNotificationInfo                               CurrentNotification;                                     // 0x0618(0x0070) Transient
		TArray<class AShooterCharacter*>                           PreviewCharacter;                                        // 0x0688(0x0010) ZeroConstructor, Transient
		TArray<class UPreviewImage*>                               PreviewImages;                                           // 0x0698(0x0010) ZeroConstructor, Transient
		unsigned char                                              UnknownData_BG9V[0x10];                                  // 0x06A8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.SOTFNotificationDisplay
	 * Size -> 0x0058 (FullSize[0x04C8] - InheritedSize[0x0470])
	 */
	class ASOTFNotificationDisplay : public AActor
	{
	public:
		class ASOTFNotification*                                   NotificationSystem;                                      // 0x0470(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FScrollingTextInfo>                          ScrollableTexts;                                         // 0x0478(0x0010) ZeroConstructor, Transient, ContainsInstancedReference
		TArray<struct FPlayerPreviewImage>                         CachedPlayerImages;                                      // 0x0488(0x0010) ZeroConstructor, Transient, ContainsInstancedReference
		struct FBannerTextInfo                                     BannerText;                                              // 0x0498(0x0018) Transient, ContainsInstancedReference
		double                                                     LastScrollingTextActivationTime;                         // 0x04B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SNQF[0x10];                                  // 0x04B8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.SoundNodeLocalPlayer
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USoundNodeLocalPlayer : public USoundNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.SoundNodeVehicleEngine
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class USoundNodeVehicleEngine : public USoundNode
	{
	public:
		TArray<struct FVehicleEngineDatum>                         EngineSamples;                                           // 0x0038(0x0010) Edit, ExportObject, EditFixedSize, ZeroConstructor
		unsigned char                                              UnknownData_YYJZ[0x4];                                   // 0x0048(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CurrentRPM;                                              // 0x004C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0QO8[0x8];                                   // 0x0050(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.StatWidget
	 * Size -> 0x00A0 (FullSize[0x02E0] - InheritedSize[0x0240])
	 */
	class UStatWidget : public UUserWidget
	{
	public:
		class FText                                                StatName;                                                // 0x0240(0x0018) ELEMENT_SIZE_MISMATCH Edit, BlueprintReadOnly, DisableEditOnInstance
		unsigned char                                              UnknownData_DHC1[0x10];                                  // 0x0258(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class UTexture2D*                                          StatIcon;                                                // 0x0268(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_J8G6[0x14];                                  // 0x0270(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                StatTextBlockName;                                       // 0x0284(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                StatValueBlockName;                                      // 0x028C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                StatImageName;                                           // 0x0294(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                StatBarName;                                             // 0x029C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class FName                                                StatButtonName;                                          // 0x02A4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_M6BS[0x24];                                  // 0x02AC(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UButton*                                             StatUpgradeButton;                                       // 0x02D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		class UWidgetSwitcher*                                     PulsatingSwitcher;                                       // 0x02D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected

	public:
		void ClickedButton(class UWidget* clickedWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.StructurePaintingComponent
	 * Size -> 0x00E0 (FullSize[0x01B8] - InheritedSize[0x00D8])
	 */
	class UStructurePaintingComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_VO9G[0x8];                                   // 0x00D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PaintingSizeX;                                           // 0x00E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    PaintingSizeY;                                           // 0x00E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<struct FColor>                                      ColorTable;                                              // 0x00E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		int32_t                                                    PaintingTextureUVIndex;                                  // 0x00F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    PaintingRevision;                                        // 0x00FC(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		int32_t                                                    UniquePaintingId;                                        // 0x0100(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		struct FRotator                                            PreviewCameraRotation;                                   // 0x0104(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FVector                                             PreviewCameraPivotOffset;                                // 0x0110(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PreviewCameraDistanceScaleFactor;                        // 0x011C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PreviewCameraDefaultZoomMultiplier;                      // 0x0120(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PreviewCameraMaxZoomMultiplier;                          // 0x0124(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bMultiplicativeBlending : 1;                             // 0x0128(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bMirroredTexCoordU : 1;                                  // 0x0128(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		bool                                                       bIsExtraDinoSaddleCanvas : 1;                            // 0x0128(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_4ZZ0[0x77];                                  // 0x0129(0x0077) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPaintingTextureSet;                                    // 0x01A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_OS3N[0x8];                                   // 0x01B0(0x0008) MISSED OFFSET (PADDING)

	public:
		void UnloadExtraPaintingComponent();
		void TryPaintExtraPaintingComponent();
		void OnPaintingTextureSet__DelegateSignature();
		bool HasPaintingTexture();
		void ClientPaint(class AShooterPlayerController* Painter, TArray<struct FPaintItem> Paints);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.StructurePreventionZoneVolume
	 * Size -> 0x0040 (FullSize[0x04E8] - InheritedSize[0x04A8])
	 */
	class AStructurePreventionZoneVolume : public AVolume
	{
	public:
		bool                                                       bOnlyPreventInPvE : 1;                                   // 0x04A8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bOnlyPreventInDedicated : 1;                             // 0x04A8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bPreventAllStructures : 1;                               // 0x04A8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bDisabled : 1;                                           // 0x04A8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_RLUF[0x7];                                   // 0x04A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      OnlyAllowStructuresOfType;                               // 0x04B0(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate
		bool                                                       bPreventionVolumeForcePreventFlyers : 1;                 // 0x04C0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bPreventionVolumePreventsFlyers : 1;                     // 0x04C0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bPreventionVolumeForceAllowFlyers : 1;                   // 0x04C0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bPreventStructureDamageIncrease : 1;                     // 0x04C0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bStructurePreventionOnly : 1;                            // 0x04C0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bOptionallyEnabled : 1;                                  // 0x04C0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bForceEnabledWhenAllowCaveBuildingPVPIsFalse : 1;        // 0x04C0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bForceOnGenesis : 1;                                     // 0x04C0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bIsMissionZone : 1;                                      // 0x04C1(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_VWCW[0x2];                                   // 0x04C2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StructureDamageMultiplier;                               // 0x04C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class FName>                                        ForcePreventStructuresWithTheseTags;                     // 0x04C8(0x0010) Edit, ZeroConstructor
		TArray<class UClass*>                                      PreventUsingWeapons;                                     // 0x04D8(0x0010) Edit, ZeroConstructor

	public:
		class AStructurePreventionZoneVolume* STATIC_BPIsWithinAnyStructurePreventionVolume(class UWorld* ForWorld, const struct FVector& AtPoint, bool bCheckDisabled, bool bIsForDamageCheck, bool bIgnoreOptionalVolumes);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.StructuresPlus
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UStructuresPlus : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_SP_SetGlassModelEdgeVisibility(int32_t index, class UStaticMeshComponent* Top, class UStaticMeshComponent* Bottom, class UStaticMeshComponent* Left, class UStaticMeshComponent* Right, bool bIsTriangle);
		int32_t STATIC_SP_SafeRemoveFromInventory(class UClass* ItemClass, class UPrimalInventoryComponent* inventory, int32_t ToRemove, bool bExactClassMatch, bool bIgnoreHotbar);
		void STATIC_SP_MessageClient(class APlayerController* PC, const class FString& Message, ESPMessageType MsgType);
		bool STATIC_SP_IsValidStructureForConnection(class APrimalStructure* Structure, TArray<class UClass*> StructureTypes);
		bool STATIC_SP_IsSuitablePullTarget(class AActor* TargetActor, class APlayerController* PC);
		bool STATIC_SP_IsLinkedToPowerOrWater(class APrimalStructure* Structure);
		bool STATIC_SP_IsFuel(class UPrimalInventoryComponent* inventory, class UClass* ItemClass);
		bool STATIC_SP_IsFlexibleConnectionLinked(TArray<class APrimalStructure*> Structures, class APrimalStructure* NewStructure);
		bool STATIC_SP_IsConnectedToInfiniteWaterSource(class APrimalStructure* Structure);
		struct FLinearColor STATIC_SP_GetSpecialMenuColor();
		TArray<class APrimalStructure*> STATIC_SP_GetNearbyStructuresForFlexibleConnection(class APrimalStructure* Structure, class UClass* SearchClass, float Range);
		struct FLinearColor STATIC_SP_GetMessageTypeColor(ESPMessageType MsgType);
		float STATIC_SP_GetInventoryWeightMultiplier(class UClass* ItemClass, class UPrimalInventoryComponent* inventory);
		int32_t STATIC_SP_GetInventoryCapacityForItem(class UClass* ItemClass, class AActor* TargetActor);
		float STATIC_SP_GetFloatOption(class AGameMode* GameMode, const class FString& OptionName, float Default, float Max);
		int32_t STATIC_SP_GetEmptyInventorySlotCount(class UPrimalInventoryComponent* inventory, bool bIsDino);
		void STATIC_SP_GetCharacterWeights(class APrimalCharacter* Character, float* MaxWeight, float* CurrentWeight);
		void STATIC_SP_GetCentralPointForFlexibleConnection(TArray<class APrimalStructure*> Structures, class APrimalStructure* ThisStructure, bool bDrawDebug, TArray<struct FVector>* ConnectionPoints, struct FVector* CentralPoint);
		bool STATIC_SP_GetBoolOption(class AGameMode* GameMode, const class FString& OptionName);
		TArray<class APrimalStructure*> STATIC_SP_GetAllConnectedStructuresOfTypes(class APrimalStructure* Structure, TArray<class UClass*> StructureTypes);
		void STATIC_SP_GetAccessibleInventoriesInRange(class APlayerController* PC, const struct FVector& Location, float PullRange, class AActor* ActorToIgnore, TArray<class APrimalDinoCharacter*>* Dinos, TArray<class APrimalStructureItemContainer*>* Structures);
		void STATIC_SP_AlterGlassTransparency(EGlassTransparencyType GlassSettingsTransparencyType, float GlassSettingsTransparency, class UMaterialInstanceDynamic* InsideMIC, class UMaterialInstanceDynamic* OutsideMIC);
		TArray<struct FMultiUseEntry> STATIC_SP_AddMenuEntries(TArray<struct FMultiUseEntry> EntriesIn, class APlayerController* PC, class APrimalStructure* Structure, bool bIsGlass);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.SupplyCrateSpawningVolume
	 * Size -> 0x00A0 (FullSize[0x0548] - InheritedSize[0x04A8])
	 */
	class ASupplyCrateSpawningVolume : public AVolume
	{
	public:
		TArray<struct FSupplyCrateSpawnEntry>                      LinkedSupplyCrateEntries;                                // 0x04A8(0x0010) Edit, ZeroConstructor
		unsigned char                                              UnknownData_8A8V[0x10];                                  // 0x04B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSupplyCrateSpawnPointEntry>                 LinkedSpawnPointEntries;                                 // 0x04C8(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate
		bool                                                       bIsEnabled : 1;                                          // 0x04D8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseSpawnPointWeights : 1;                               // 0x04D8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bDoSpawnCrateOnTopOfStructures : 1;                      // 0x04D8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bForcePreventCrateOnTopOfStructures : 1;                 // 0x04D8(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bReallyUseCrateRequiresLoadedLevel : 1;                  // 0x04D8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_5AIH[0x3];                                   // 0x04D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxNumCrates;                                            // 0x04DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DelayBeforeFirstCrate;                                   // 0x04E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxDelayBeforeFirstCrate;                                // 0x04E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ZoneVolumeMaxNumberOfNPCBuffer;                          // 0x04E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IntervalBetweenCrateSpawns;                              // 0x04EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxIntervalBetweenCrateSpawns;                           // 0x04F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IntervalBetweenMaxedCrateSpawns;                         // 0x04F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxIntervalBetweenMaxedCrateSpawns;                      // 0x04F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SP_IntervalBetweenCrateSpawns;                           // 0x04FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SP_MaxIntervalBetweenCrateSpawns;                        // 0x0500(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SP_IntervalBetweenMaxedCrateSpawns;                      // 0x0504(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SP_MaxIntervalBetweenMaxedCrateSpawns;                   // 0x0508(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SP_NoValidSpawnRecheckInterval;                          // 0x050C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SP_DelayBeforeFirstCrate;                                // 0x0510(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SP_MaxDelayBeforeFirstCrate;                             // 0x0514(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinCrateDistanceFromPlayer;                              // 0x0518(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinCrateDistanceFromStructure;                           // 0x051C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NoValidSpawnReCheckInterval;                             // 0x0520(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinTimeBetweenCrateSpawnsAtSamePoint;                    // 0x0524(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinDistanceFromOtherCrate;                               // 0x0528(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                CrateSpawningRequiresLoadedSublevel;                     // 0x052C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bForceRandomSupplyCratePoints;                           // 0x0534(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RE9J[0x3];                                   // 0x0535(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class APrimalStructureItemContainer_SupplyCrate*>   MyCrates;                                                // 0x0538(0x0010) ZeroConstructor

	public:
		void STATIC_SpawnCratesFromAllVolumes(class UWorld* TheWorld);
		void SpawnCratesFromAllPoints();
		void SetSpawnEnabled(bool bEnable);
		void CheckForSupplyCrateStart();
		void CheckCrateSpawn();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.SupplyCrateSpawningSettings
	 * Size -> 0x0048 (FullSize[0x04B8] - InheritedSize[0x0470])
	 */
	class ASupplyCrateSpawningSettings : public AActor
	{
	public:
		TArray<struct FSupplyCrateSpawnEntry>                      LinkedSupplyCrateEntries;                                // 0x0470(0x0010) Edit, ZeroConstructor
		bool                                                       bUseSpawnPointWeights : 1;                               // 0x0480(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_XP29[0x3];                                   // 0x0481(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxNumCrates;                                            // 0x0484(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DelayBeforeFirstCrate;                                   // 0x0488(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxDelayBeforeFirstCrate;                                // 0x048C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ZoneVolumeMaxNumberOfNPCBuffer;                          // 0x0490(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IntervalBetweenCrateSpawns;                              // 0x0494(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxIntervalBetweenCrateSpawns;                           // 0x0498(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IntervalBetweenMaxedCrateSpawns;                         // 0x049C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxIntervalBetweenMaxedCrateSpawns;                      // 0x04A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinCrateDistanceFromPlayer;                              // 0x04A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinCrateDistanceFromStructure;                           // 0x04A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NoValidSpawnReCheckInterval;                             // 0x04AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinTimeBetweenCrateSpawnsAtSamePoint;                    // 0x04B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Y5UZ[0x4];                                   // 0x04B4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.TargetArea
	 * Size -> 0x0010 (FullSize[0x0480] - InheritedSize[0x0470])
	 */
	class ATargetArea : public AActor
	{
	public:
		float                                                      Radius;                                                  // 0x0470(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_I81B[0x4];                                   // 0x0474(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USphereComponent*                                    MySphereComponent;                                       // 0x0478(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.TestItemWidget
	 * Size -> 0x0010 (FullSize[0x0250] - InheritedSize[0x0240])
	 */
	class UTestItemWidget : public UUserWidget
	{
	public:
		class FString                                              ItemLabelName;                                           // 0x0240(0x0010) Edit, ZeroConstructor, DisableEditOnInstance

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.TickingHelperComponent
	 * Size -> 0x0040 (FullSize[0x0118] - InheritedSize[0x00D8])
	 */
	class UTickingHelperComponent : public UActorComponent
	{
	public:
		struct FTimeRange                                          ThrottledTickTimeRange;                                  // 0x00D8(0x0008) Edit, BlueprintVisible
		ETickingGroup                                              InitWithTickGroup;                                       // 0x00E0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUsePerFrameTickEvents;                                  // 0x00E1(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseThrottledTickEvents;                                 // 0x00E2(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NL34[0x5];                                   // 0x00E3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPerFrameTickEvent;                                     // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnThrottledTickEvent;                                    // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_95C0[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (PADDING)

	public:
		void TickingHelperDelegate__DelegateSignature(class UTickingHelperComponent* TickingComponent, float DeltaTime);
		void SetComponentTickGroup(ETickingGroup NewTickGroup);
		void OnThrottledTick(float DeltaTime);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.TogglePainVolume
	 * Size -> 0x0100 (FullSize[0x05A8] - InheritedSize[0x04A8])
	 */
	class ATogglePainVolume : public AVolume
	{
	public:
		unsigned char                                              UnknownData_4F5F[0x50];                                  // 0x04A8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bEnabled;                                                // 0x04F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TBVV[0x7];                                   // 0x04F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      ActorClassesToExclude;                                   // 0x0500(0x0010) Edit, BlueprintVisible, ZeroConstructor
		TArray<class UClass*>                                      ActorClassesToInclude;                                   // 0x0510(0x0010) Edit, BlueprintVisible, ZeroConstructor
		TArray<class AEmitter*>                                    ToggleEmitters;                                          // 0x0520(0x0010) Edit, ZeroConstructor
		TArray<class AActor*>                                      StructureDamageOverlapPoints;                            // 0x0530(0x0010) Edit, ZeroConstructor
		float                                                      StructureDamageOverlapRadius;                            // 0x0540(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bPainCausing : 1;                                        // 0x0544(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_V146[0x3];                                   // 0x0545(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DamagePerSec;                                            // 0x0548(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      StructureDamagePerSec;                                   // 0x054C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              DamageType;                                              // 0x0550(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              StructureDamageType;                                     // 0x0558(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PainInterval;                                            // 0x0560(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bEntryPain : 1;                                          // 0x0564(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bPainWalkingOnly : 1;                                    // 0x0564(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		bool                                                       bUseBeginOverlapEvent : 1;                               // 0x0564(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseEndOverlapEvent : 1;                                 // 0x0564(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bUseCausedPainEvent : 1;                                 // 0x0564(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bIgnoreWildDinos : 1;                                    // 0x0564(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bTriggerUndermeshDetection : 1;                          // 0x0564(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_5FP3[0x3];                                   // 0x0565(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AController*                                         DamageInstigator;                                        // 0x0568(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class FScriptMulticastDelegate                             BeginOverlapEvent;                                       // 0x0570(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             EndOverlapEvent;                                         // 0x0580(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             CausedPainEvent;                                         // 0x0590(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		float                                                      DelayTogglePainActive;                                   // 0x05A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JBP1[0x4];                                   // 0x05A4(0x0004) MISSED OFFSET (PADDING)

	public:
		void TogglePainVolumeEvent__DelegateSignature(class ATogglePainVolume* ForPainVolume, class AActor* VictimActor);
		void SetPainVolumeEnabled(bool bEnable);
		void OnInterpToggle(bool bEnable);
		void OnEndOverlap(class AActor* Actor);
		void OnBeginOverlap(class AActor* Actor);
		void GetOverlappedActors(TArray<class AActor*>* OutActors);
		int32_t GetOverlappedActorNum();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ToolTipWidget
	 * Size -> 0x0068 (FullSize[0x02A8] - InheritedSize[0x0240])
	 */
	class UToolTipWidget : public UUserWidget
	{
	public:
		class FString                                              ToolTipLabelName;                                        // 0x0240(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		int32_t                                                    WidgetWidth;                                             // 0x0250(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    WidgetHeight;                                            // 0x0254(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDoOverlayFade : 1;                                      // 0x0258(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_6P8Q[0xB];                                   // 0x0259(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseBPInitToolTip;                                       // 0x0264(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bUseBPUpdateToolTip;                                     // 0x0265(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2TZU[0x42];                                  // 0x0266(0x0042) MISSED OFFSET (PADDING)

	public:
		void BPUpdateToolTip(float DeltaSeconds);
		void BPInitToolTip(class AShooterPlayerController* HUDOwner, const class FString& ToolTipString, class UObject* DataListEntry);
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.MissionDispatcherToolTipWidget
	 * Size -> 0x0058 (FullSize[0x0300] - InheritedSize[0x02A8])
	 */
	class UMissionDispatcherToolTipWidget : public UToolTipWidget
	{
	public:
		class FString                                              MissionNameLabelName;                                    // 0x02A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              TitleLabelName;                                          // 0x02B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              MissionStatusLabelName;                                  // 0x02C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		unsigned char                                              UnknownData_LKV6[0x28];                                  // 0x02D8(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalDinoToolTipWidget
	 * Size -> 0x01F8 (FullSize[0x04A0] - InheritedSize[0x02A8])
	 */
	class UPrimalDinoToolTipWidget : public UToolTipWidget
	{
	public:
		class FString                                              DinoNameLabelName;                                       // 0x02A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              TamedLabelName;                                          // 0x02B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              GenderLabelName;                                         // 0x02C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              InfoLabelName;                                           // 0x02D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              InfoLabel2Name;                                          // 0x02E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              DinoIconImageName;                                       // 0x02F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                DinoUnconsciousPanelName;                                // 0x0308(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DinoTamingPanelName;                                     // 0x0310(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TorpidityProgressBarName;                                // 0x0318(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                CustomProgressBarName;                                   // 0x0320(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TamingProgressBarName;                                   // 0x0328(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                HealthBarName;                                           // 0x0330(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                StaminaBarName;                                          // 0x0338(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                FoodBarName;                                             // 0x0340(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                WeightBarName;                                           // 0x0348(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                XPBarName;                                               // 0x0350(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                TorpidityBarName;                                        // 0x0358(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                OxygenBarName;                                           // 0x0360(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                DamageBarName;                                           // 0x0368(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SpeedBarName;                                            // 0x0370(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowExtendedInfo;                                       // 0x0378(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0IKL[0x3];                                   // 0x0379(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        FemaleColor;                                             // 0x037C(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        MaleColor;                                               // 0x038C(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        NoGenderColor;                                           // 0x039C(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_P8J4[0xE4];                                  // 0x03AC(0x00E4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          FoodBarDefaultBackground;                                // 0x0490(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UTexture2D*                                          FoodBarDefaultForeground;                                // 0x0498(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalEggToolTipWidget
	 * Size -> 0x0268 (FullSize[0x0510] - InheritedSize[0x02A8])
	 */
	class UPrimalEggToolTipWidget : public UToolTipWidget
	{
	public:
		struct FLinearColor                                        TemperatureColor_Perfect;                                // 0x02A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        TemperatureColor_Boosted;                                // 0x02B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        TemperatureColor_Cool;                                   // 0x02C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        TemperatureColor_TooCold;                                // 0x02D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        TemperatureColor_Warm;                                   // 0x02E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        TemperatureColor_TooHot;                                 // 0x02F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        GenderColor_Female;                                      // 0x0308(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        GenderColor_Male;                                        // 0x0318(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        GenderColor_Unknown;                                     // 0x0328(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          GenderIcon_Female;                                       // 0x0338(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          GenderIcon_Male;                                         // 0x0340(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          GenderIcon_Unknown;                                      // 0x0348(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RightColumnWidth;                                        // 0x0350(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TemperatureGaugeTotalDegreesToDisplay;                   // 0x0354(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TemperatureGaugeIndicatorHorizontalOffset;               // 0x0358(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_O8IL[0x1B4];                                 // 0x035C(0x01B4) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalItemToolTipWidget
	 * Size -> 0x0248 (FullSize[0x04F0] - InheritedSize[0x02A8])
	 */
	class UPrimalItemToolTipWidget : public UToolTipWidget
	{
	public:
		class FString                                              ItemNameLabelName;                                       // 0x02A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              ItemQuantityLabelName;                                   // 0x02B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              ItemDescriptionLabelName;                                // 0x02C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              ItemTypeLabelName;                                       // 0x02D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              ItemSubTypeLabelName;                                    // 0x02E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              ItemIconImageName;                                       // 0x02F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              ItemWeightLabelName;                                     // 0x0308(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              ItemStatsLabelName;                                      // 0x0318(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              ItemDurabilityLabelName;                                 // 0x0328(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              ItemQualityImageName;                                    // 0x0338(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FString                                              ItemSubtypePanelName;                                    // 0x0348(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class FName                                                ItemStatsPanelName;                                      // 0x0358(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemCraftingPanelName;                                   // 0x0360(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemCraftingRequirementsLabelName;                       // 0x0368(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemCraftingTitleLabelName;                              // 0x0370(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemCraftingQueueLabelName;                              // 0x0378(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemCraftingProgressBarName;                             // 0x0380(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                ItemCraftRepairInvReqLabelName;                          // 0x0388(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SpoilIntoItemPanelName;                                  // 0x0390(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SpoilIntoItemNameLabelName;                              // 0x0398(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SpoilIntoItemTimeLabelName;                              // 0x03A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                SpoilIntoItemIconName;                                   // 0x03A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          EngramBg;                                                // 0x03B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          BlueprintBg;                                             // 0x03B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          TekgramBg;                                               // 0x03C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          ItemQualityOverlay;                                      // 0x03C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9FKZ[0x120];                                 // 0x03D0(0x0120) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ToolTipWidgetPrimalStructureModuleItemsToDisplayListItem
	 * Size -> 0x0010 (FullSize[0x0250] - InheritedSize[0x0240])
	 */
	class UToolTipWidgetPrimalStructureModuleItemsToDisplayListItem : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_BYJU[0x10];                                  // 0x0240(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.ToolTipWidgetPrimalStructureModuleItemsToDisplay
	 * Size -> 0x0018 (FullSize[0x0258] - InheritedSize[0x0240])
	 */
	class UToolTipWidgetPrimalStructureModuleItemsToDisplay : public UUserWidget
	{
	public:
		class UClass*                                              DisplayItemListEntryTemplate;                            // 0x0240(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_E3V6[0x10];                                  // 0x0248(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalStructureToolTipWidget
	 * Size -> 0x0060 (FullSize[0x0308] - InheritedSize[0x02A8])
	 */
	class UPrimalStructureToolTipWidget : public UToolTipWidget
	{
	public:
		class UClass*                                              ItemsToDisplayModuleTemplate;                            // 0x02A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_S1P1[0x58];                                  // 0x02B0(0x0058) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.TargetingInfoToolTipWidget
	 * Size -> 0x0050 (FullSize[0x02F8] - InheritedSize[0x02A8])
	 */
	class UTargetingInfoToolTipWidget : public UToolTipWidget
	{
	public:
		unsigned char                                              UnknownData_IN61[0x50];                                  // 0x02A8(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.TooltipSmartLayoutWidget
	 * Size -> 0x0000 (FullSize[0x02A8] - InheritedSize[0x02A8])
	 */
	class UTooltipSmartLayoutWidget : public UToolTipWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.DinoListItemTooltip
	 * Size -> 0x01B0 (FullSize[0x0458] - InheritedSize[0x02A8])
	 */
	class UDinoListItemTooltip : public UTooltipSmartLayoutWidget
	{
	public:
		class FName                                                fnameTitleBar_NameLabel;                                 // 0x02A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                fnameTitleBar_LevelLabel;                                // 0x02B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                fnameInfo_ImageName;                                     // 0x02B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class FName>                                        fnameInfo_LabelNames;                                    // 0x02C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FName>                                        fnameInfo_GroupNames;                                    // 0x02D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      Info_GroupFreq;                                          // 0x02E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_W4OZ[0x164];                                 // 0x02E4(0x0164) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          EnabledDinoTexture;                                      // 0x0448(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  EnabledDinoMaterial;                                     // 0x0450(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalCryopodTooltipWidget
	 * Size -> 0x0188 (FullSize[0x0430] - InheritedSize[0x02A8])
	 */
	class UPrimalCryopodTooltipWidget : public UTooltipSmartLayoutWidget
	{
	public:
		class UTexture2D*                                          FemaleIcon;                                              // 0x02A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          MaleIcon;                                                // 0x02B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        FemaleColor;                                             // 0x02B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FLinearColor                                        MaleColor;                                               // 0x02C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AWOS[0x158];                                 // 0x02D8(0x0158) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.PrimalItemInventoryToolTipWidget
	 * Size -> 0x0298 (FullSize[0x0540] - InheritedSize[0x02A8])
	 */
	class UPrimalItemInventoryToolTipWidget : public UTooltipSmartLayoutWidget
	{
	public:
		class FName                                                fnameTitleBar_EngramTypeLabel;                           // 0x02A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                fnameTitleBar_EngramTypeSeparator;                       // 0x02B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                fnameTitleBar_ItemNameLabel;                             // 0x02B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                fnameTitleBar_ItemTypeSeparator;                         // 0x02C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                fnameTitleBar_ItemTypeLabel;                             // 0x02C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                fnameTitleBar_ItemQualitySeparator;                      // 0x02D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                fnameTitleBar_ItemQualityLabel;                          // 0x02D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                fnameMainInfo_Switcher;                                  // 0x02E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                fnameMainInfo_Full_Icon;                                 // 0x02E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                fnameMainInfo_Full_DescriptionLabel;                     // 0x02F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                fnameMainInfo_DescOnly_DescriptionLabel;                 // 0x02F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class FName>                                        fnameGeneral_LabelNames;                                 // 0x0300(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FName>                                        fnameGeneral_GroupNames;                                 // 0x0310(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      General_GroupFreq;                                       // 0x0320(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_A1QR[0x4];                                   // 0x0324(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        fnameStat_LabelNames;                                    // 0x0328(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FName>                                        fnameStat_GroupNames;                                    // 0x0338(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      Stat_GroupFreq;                                          // 0x0348(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                fnameCraftPanel;                                         // 0x034C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                fnameCraftTitleLabel;                                    // 0x0354(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YOMM[0x4];                                   // 0x035C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        fnameCraft_RequirementLabels;                            // 0x0360(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FName>                                        fnameCraft_RequirementIcons;                             // 0x0370(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FName>                                        fnameCraft_GroupNames;                                   // 0x0380(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      Craft_GroupFreq;                                         // 0x0390(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_S7GM[0x4];                                   // 0x0394(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateColor                                         Craft_RequirementsMet;                                   // 0x0398(0x0028) Edit, DisableEditOnInstance
		struct FSlateColor                                         Craft_RequirementsUnmet;                                 // 0x03C0(0x0028) Edit, DisableEditOnInstance
		struct FSlateColor                                         NormalTextColor;                                         // 0x03E8(0x0028) Edit, DisableEditOnInstance
		class UTexture2D*                                          EngramBg;                                                // 0x0410(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          BlueprintBg;                                             // 0x0418(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          TekgramBg;                                               // 0x0420(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D*                                          ItemQualityOverlay;                                      // 0x0428(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_E9VQ[0x110];                                 // 0x0430(0x0110) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.UI_Compass
	 * Size -> 0x0090 (FullSize[0x02D0] - InheritedSize[0x0240])
	 */
	class UUI_Compass : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_Z7W8[0x8];                                   // 0x0240(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LatitudeOrigin;                                          // 0x0248(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LatitudeScale;                                           // 0x024C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LongitudeOrigin;                                         // 0x0250(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      LongitudeScale;                                          // 0x0254(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CompassNorthAngle;                                       // 0x0258(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CompassInterpSpeed;                                      // 0x025C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwingSpeed;                                              // 0x0260(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxSwingAngle;                                           // 0x0264(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		struct FRotator                                            CurrentCompassAngle;                                     // 0x0268(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      CurrentSwingAngle;                                       // 0x0274(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      CurrentSwingFactor;                                      // 0x0278(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      CurrentSwingTime;                                        // 0x027C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class FName                                                CompassCenterParameterName;                              // 0x0280(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PreviousPawnYaw;                                         // 0x0288(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QJL5[0x4];                                   // 0x028C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  CompassMI;                                               // 0x0290(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UMaterialInstanceDynamic*                            CompassMID;                                              // 0x0298(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UClass*                                              buffRequiredForVisibility;                               // 0x02A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                longitudeText;                                           // 0x02A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class FName                                                latitudeText;                                            // 0x02B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_81KM[0x18];                                  // 0x02B8(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.VRBattleGroupDataAsset
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UVRBattleGroupDataAsset : public UDataAsset
	{
	public:
		TArray<struct FVRBattleWaveUnit>                           Units;                                                   // 0x0028(0x0010) Edit, ZeroConstructor
		bool                                                       bForceSpawnEntireGroup;                                  // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_A43Q[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.WaterVolumeWithFlow
	 * Size -> 0x00A8 (FullSize[0x0570] - InheritedSize[0x04C8])
	 */
	class AWaterVolumeWithFlow : public APhysicsVolume
	{
	public:
		float                                                      CellSize;                                                // 0x04C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           FlowMagnitudeMinMax;                                     // 0x04CC(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_F5VO[0x54];                                  // 0x04D4(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FGridIndex>                                  GridIDs;                                                 // 0x0528(0x0010) ZeroConstructor
		TArray<struct FVector2D>                                   FlowVectors;                                             // 0x0538(0x0010) ZeroConstructor
		bool                                                       bHasValidGridSize;                                       // 0x0548(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3U49[0x3];                                   // 0x0549(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGridIndex                                          CachedGridSize;                                          // 0x054C(0x0008)
		unsigned char                                              UnknownData_TGN4[0x4];                                   // 0x0554(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      BuffsToApply;                                            // 0x0558(0x0010) Edit, ZeroConstructor
		bool                                                       bApplyBuffsOnClient : 1;                                 // 0x0568(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_Z7J5[0x7];                                   // 0x0569(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetStrengthFromSplineActor(class AActor* InSplineActor);
		void SetPaintValueAtGridIndex(const struct FGridIndex& Grid, const struct FColor& InColor, EColorChannelTarget Channel);
		void SetDestinationsFromSplineActor(class AActor* InSplineActor);
		void SetDefaultPaintColors();
		void SetCellSize(float NewCellSize);
		void PaintStrengthFromSpline();
		void PaintObstruction();
		void PaintDestinationFromSpline();
		bool IsGridIndexValid(const struct FGridIndex& Grid);
		struct FColor GetPaintValueAtGridIndex(const struct FGridIndex& Grid);
		struct FVector GetLocationForGridIndex(const struct FGridIndex& ForIndex);
		struct FGridIndex GetGridSize();
		bool GetGridIndexForLocation(const struct FVector& Location, struct FGridIndex* Grid);
		struct FVector GetFlowVectorAtLocation(const struct FVector& Location, bool bInterpFlowVector);
		void GenerateFlowField();
		void ClearAllPaintChannels();
		void BuildEverything();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.WorldBuffEntryWidget
	 * Size -> 0x00C0 (FullSize[0x0300] - InheritedSize[0x0240])
	 */
	class UWorldBuffEntryWidget : public UUserWidget
	{
	public:
		float                                                      DefaultDisplayTime;                                      // 0x0240(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExpiringSoonDisplayTime;                                 // 0x0244(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ENQN[0xB8];                                  // 0x0248(0x00B8) MISSED OFFSET (PADDING)

	public:
		void SyncData(const struct FWorldBuffPersistantData& WorldBuffPersistantData, bool bIsListEntry, bool bShouldReinit, bool bDurationIsStopped);
		void Initialize(bool bIsListEntry);
		void FadeOut();
		void Collapse();
		void BeginExpiring();
		static UClass* StaticClass();
	};

	/**
	 * Class ShooterGame.WorldModifiersContainer
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UWorldModifiersContainer : public UObject
	{
	public:
		TArray<struct FPrimalWorldModifierList>                    WorldModifiers;                                          // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance

	public:
		static UClass* StaticClass();
	};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
